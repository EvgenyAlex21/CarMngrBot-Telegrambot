# ------------------------------------------------------ –ò–ú–ü–û–†–¢ –ú–û–î–£–õ–ï–ô ------------------------------------------------------

import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telebot import TeleBot, types
from telebot.apihelper import ApiTelegramException

import os
import json
import locale
import re
import html
import requests
import zipfile
import signal
import traceback
import chardet
import logging
import time
import hashlib

from datetime import datetime, timedelta
import datetime
from datetime import datetime
from datetime import date

import openpyxl
from openpyxl.styles import Alignment, Border, Side, Font, PatternFill
from openpyxl import Workbook, load_workbook
from openpyxl.utils import get_column_letter
import pandas as pd

import schedule
import threading

from geopy.geocoders import Nominatim
from geopy.distance import geodesic
from geopy.exc import GeocoderUnavailable

import csv
import shutil
import pytz
import uuid
import sys
import random
from statistics import mean
from functools import wraps
from collections import defaultdict

from functools import partial
from bs4 import BeautifulSoup
from stem.control import Controller
from stem import Signal
from requests.exceptions import ReadTimeout, ConnectionError
from scipy.spatial import cKDTree
from urllib.parse import quote

# ------------------------------------------------------ –¢–û–ö–ï–ù –î–õ–Ø –ë–û–¢–ê –ò–ó BOTFATHER ------------------------------------------------------

bot = telebot.TeleBot("7519948621:AAGPoPBJrnL8-vZepAYvTmm18TipvvmLUoE") # API

# ------------------------------------------------------ –ß–ê–°–û–í–û–ô –ü–û–Ø–° ------------------------------------------------------

moscow_tz = pytz.timezone('Europe/Moscow')
current_time = datetime.now(moscow_tz)
formatted_time = current_time.strftime('%d.%m.%Y –≤ %H:%M:%S')

# ------------------------------------------------------ –î–ï–ö–û–†–ê–¢–û–†–´ ------------------------------------------------------

# ---------------------------------------- –î–ï–ö–û–†–ê–¢–û–†–´ (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏) ---------------------------------

def check_function_state(function_name):
    if function_name in function_states:
        return function_states[function_name]['state']
    return False

def check_function_state_decorator(function_name):
    def decorator(func):
        @wraps(func)
        def wrapped(message, *args, **kwargs):
            if check_function_state(function_name):
                return func(message, *args, **kwargs)
            else:
                bot.send_message(message.chat.id, f"‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è *{function_name.lower()}* –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!", parse_mode="Markdown")
        return wrapped
    return decorator

# ----------------------------------- –î–ï–ö–û–†–ê–¢–û–†–´ (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π) ----------------------------

def track_usage(func_name):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            statistics = load_statistics()
            current_date = datetime.now().strftime('%d.%m.%Y')

            if current_date not in statistics:
                statistics[current_date] = {'users': set(), 'functions': {}}
            if 'functions' not in statistics[current_date]:
                statistics[current_date]['functions'] = {}
            if func_name not in statistics[current_date]['functions']:
                statistics[current_date]['functions'][func_name] = 0
            statistics[current_date]['functions'][func_name] += 1

            save_statistics(statistics)
            return func(*args, **kwargs)
        return wrapper
    return decorator

# ---------------------- –î–ï–ö–û–†–ê–¢–û–†–´ (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º) ---------------

def restricted(func):
    def wrapper(message, *args, **kwargs):
        user_id = message.from_user.id
        username = message.from_user.username

        if is_user_blocked(user_id):
            bot.send_message(message.chat.id, "üö´ –í—ã *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã* –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ!", parse_mode="Markdown")
            return

        if username and is_user_blocked(get_user_id_by_username(username)):
            bot.send_message(message.chat.id, "üö´ –í—ã *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã* –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ!", parse_mode="Markdown")
            return

        return func(message, *args, **kwargs)
    return wrapper

# ------------------------------------ –î–ï–ö–û–†–ê–¢–û–†–´ (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ---------------------------

def track_user_activity(func):
    def wrapper(message, *args, **kwargs):
        user_id = message.from_user.id
        username = message.from_user.username if message.from_user.username else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        first_name = message.from_user.first_name if message.from_user.first_name else ""
        last_name = message.from_user.last_name if message.from_user.last_name else ""
        update_user_activity(user_id, username, first_name, last_name)
        return func(message, *args, **kwargs)
    return wrapper

# ------------------------------------ –î–ï–ö–û–†–ê–¢–û–†–´ (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞—Ö –Ω–∞ –æ–±—â–µ–Ω–∏–µ) ---------------------------

message_history = {}

def check_chat_state(func):
    def wrapper(message, *args, **kwargs):
        global active_chats
        user_id = message.from_user.id

        if user_id in active_chats and active_chats[user_id].get("awaiting_response", False):
            if message.text.strip().lower() not in ["–ø—Ä–∏–Ω—è—Ç—å", "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å"]:
                bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ *–ü–†–ò–ù–Ø–¢–¨* –∏–ª–∏ *–û–¢–ö–õ–û–ù–ò–¢–¨*!", parse_mode="Markdown")
                return

        return func(message, *args, **kwargs)
    return wrapper

def save_last_bot_message(user_id, message_text):
    message_history[user_id] = {"last_bot_message": message_text}

# ------------------------------------ –î–ï–ö–û–†–ê–¢–û–†–´ (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ—Ç–∞) ---------------------------

BASE_DIR = os.path.dirname(os.path.abspath(__file__))

def ensure_directories_and_files():
    log_dir = os.path.join(BASE_DIR, "data/admin/log")
    os.makedirs(log_dir, exist_ok=True)
    
    db_dir = os.path.join(BASE_DIR, "data")
    os.makedirs(db_dir, exist_ok=True)
    
    log_file = os.path.join(log_dir, "bot_logs.log")
    if not os.path.exists(log_file):
        with open(log_file, 'w', encoding='utf-8') as f:
            pass  
    
    error_log_file = os.path.join(log_dir, "errors_log.json")
    if not os.path.exists(error_log_file):
        with open(error_log_file, 'w', encoding='utf-8') as f:
            json.dump([], f, ensure_ascii=False, indent=4)

ensure_directories_and_files()

file_logger = logging.getLogger('fileLogger')
file_handler = logging.FileHandler(os.path.join(BASE_DIR, 'data/admin/log/bot_logs.log'), encoding='utf-8')
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
file_logger.addHandler(file_handler)
file_logger.setLevel(logging.INFO)
file_logger.propagate = False

console_logger = logging.getLogger('consoleLogger')
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
console_logger.addHandler(console_handler)
console_logger.setLevel(logging.ERROR)

def log_to_json(user_id, log_entry):
    log_file = os.path.join(BASE_DIR, f"data/admin/log/{user_id}_log.json")

    try:
        if os.path.exists(log_file):
            with open(log_file, 'r', encoding='utf-8') as file:
                logs = json.load(file)
        else:
            logs = []
    except json.JSONDecodeError:
        file_logger.warning(f"–§–∞–π–ª {log_file} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω! –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª...")
        logs = []

    logs.append(log_entry)

    with open(log_file, 'w', encoding='utf-8') as file:
        json.dump(logs, file, ensure_ascii=False, indent=4)

def clear_logs_and_transfer_errors():
    log_dir = os.path.join(BASE_DIR, "data/admin/log")
    error_log_file = os.path.join(log_dir, "errors_log.json")

    file_logger.info("–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ –æ—à–∏–±–æ–∫ –∏–∑ –ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")

    try:
        if os.path.exists(error_log_file):
            with open(error_log_file, 'r', encoding='utf-8') as file:
                errors = json.load(file)
        else:
            errors = []
    except json.JSONDecodeError:
        file_logger.error("–§–∞–π–ª errors_log.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω! –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª...")
        errors = []

    for filename in os.listdir(log_dir):
        if filename.endswith("_log.json") and filename != "errors_log.json":
            file_path = os.path.join(log_dir, filename)
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    logs = json.load(file)
            except json.JSONDecodeError:
                file_logger.warning(f"–§–∞–π–ª {filename} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                continue

            error_logs = [log for log in logs if log.get("level") == "ERROR"]
            errors.extend(error_logs)

            with open(file_path, 'w', encoding='utf-8') as file:
                json.dump([], file, ensure_ascii=False, indent=4)

    with open(error_log_file, 'w', encoding='utf-8') as file:
        json.dump(errors, file, ensure_ascii=False, indent=4)

    file_logger.info("–ü–µ—Ä–µ–Ω–æ—Å –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")

def remove_old_errors():
    error_log_file = os.path.join(BASE_DIR, "data/admin/log/errors_log.json")

    file_logger.info("–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –æ—à–∏–±–æ–∫!")

    try:
        if os.path.exists(error_log_file):
            with open(error_log_file, 'r', encoding='utf-8') as file:
                errors = json.load(file)
        else:
            errors = []
    except json.JSONDecodeError:
        file_logger.error("–§–∞–π–ª errors_log.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ—à–∏–±–æ–∫...")
        return

    current_time = datetime.now()
    errors = [error for error in errors if (current_time - datetime.strptime(error["timestamp"], '%d.%m.%Y –≤ %H:%M:%S')) <= timedelta(days=7)]

    try:
        with open(error_log_file, 'w', encoding='utf-8') as file:
            json.dump(errors, file, ensure_ascii=False, indent=4)
    except Exception as e:
        file_logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ errors_log.json: {e}")

    file_logger.info("–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def log_user_actions(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        log_dir = os.path.join(BASE_DIR, "data/admin/log")
        error_log_file = os.path.join(log_dir, "errors_log.json")
        os.makedirs(log_dir, exist_ok=True)

        start_time = time.time()

        try:
            user_id = message.from_user.id
            command = func.__name__
            result = func(message, *args, **kwargs)
            execution_time = time.time() - start_time

            log_entry = {
                "timestamp": datetime.now().strftime('%d.%m.%Y –≤ %H:%M:%S'),
                "level": "INFO",
                "event_type": "User Action",
                "user_id": user_id,
                "command": command,
                "result": "Success",
                "execution_time": f"{execution_time:.2f} sec"
            }
            file_logger.info(f"User {user_id} executed command {command} successfully in {execution_time:.2f} sec.")
        except Exception as e:
            execution_time = time.time() - start_time
            log_entry = {
                "timestamp": datetime.now().strftime('%d.%m.%Y –≤ %H:%M:%S'),
                "level": "ERROR",
                "event_type": "User Action",
                "user_id": "Unknown",
                "command": "Unknown",
                "result": "Error",
                "execution_time": f"{execution_time:.2f} sec",
                "error_details": str(e)
            }
            file_logger.error(f"Error while executing command: {e}")
            console_logger.error(f"Error while executing command: {e}")

            try:
                if os.path.exists(error_log_file):
                    with open(error_log_file, 'r', encoding='utf-8') as file:
                        errors = json.load(file)
                else:
                    errors = []

                errors.append(log_entry)

                with open(error_log_file, 'w', encoding='utf-8') as file:
                    json.dump(errors, file, ensure_ascii=False, indent=4)
            except Exception as error_logging_exception:
                file_logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ errors_log.json: {error_logging_exception}")

            raise
        finally:
            log_to_json(user_id if 'user_id' in locals() else "Unknown", log_entry)

        return result
    return wrapper

def run_weekly_task():
    while True:
        remove_old_errors()
        time.sleep(7 * 24 * 60 * 60)

schedule.every().day.at("00:00").do(clear_logs_and_transfer_errors)

def run_scheduled_tasks():
    while True:
        schedule.run_pending()
        time.sleep(1)

scheduler_thread = threading.Thread(target=run_scheduled_tasks)
scheduler_thread.start()

weekly_task_thread = threading.Thread(target=run_weekly_task)
weekly_task_thread.start()

# ------------------------------------ –î–ï–ö–û–†–ê–¢–û–†–´ (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º) ---------------------------

BLOCKED_USERS_FILE = 'data/admin/bloked_bot/blocked_bot_users.json'

def load_blocked_users():
    if os.path.exists(BLOCKED_USERS_FILE):
        with open(BLOCKED_USERS_FILE, 'r') as file:
            return json.load(file)
    return []

def save_blocked_users(blocked_users):
    with open(BLOCKED_USERS_FILE, 'w') as file:
        json.dump(blocked_users, file, indent=4)

def check_user_blocked(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        user_id = message.chat.id
        blocked_users = load_blocked_users()

        if message.text == '/start' and user_id in blocked_users:
            blocked_users.remove(user_id)
            save_blocked_users(blocked_users)  

        if user_id in blocked_users:
            return

        try:
            return func(message, *args, **kwargs)
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                if user_id not in blocked_users:
                    blocked_users.append(user_id)
                    save_blocked_users(blocked_users)  
            else:
                raise e
    return wrapper

# ------------------------------------ –î–ï–ö–û–†–ê–¢–û–†–´ (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–ª–∞—Ç–Ω–æ–π –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç) ---------------------------

def check_subscription(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        user_id = str(message.from_user.id)
        
        if message.from_user.is_bot:
            return
        
        if message.text in FREE_FEATURES:
            return func(message, *args, **kwargs)
        
        data = load_payment_data()
        user_data = data['subscriptions']['users'].get(user_id, {})
        
        has_active_plan = any(datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M") > datetime.now() 
                             for plan in user_data.get('plans', []))
        if has_active_plan:
            return func(message, *args, **kwargs)
        
        feature_access = user_data.get('feature_access', {})
        
        parent_feature = None
        specific_feature = None
        
        for feature, subfunctions in NEW_FUNCTIONS.items():
            if message.text == feature and feature in PAID_FEATURES:
                parent_feature = feature
                specific_feature = feature
                break
            if message.text in subfunctions:
                if message.text in PAID_FEATURES:
                    specific_feature = message.text
                    break
                if feature in PAID_FEATURES:
                    parent_feature = feature
                    break
                for parent, parent_subfunctions in NEW_FUNCTIONS.items():
                    if feature in parent_subfunctions and parent in PAID_FEATURES:
                        parent_feature = parent
                        break
            if specific_feature or parent_feature:
                break
        
        access_granted = False
        if specific_feature:
            access_end = feature_access.get(specific_feature, "01.01.2025 –≤ 00:00")
            try:
                end_date = datetime.strptime(access_end, "%d.%m.%Y –≤ %H:%M")
                if end_date > datetime.now():
                    access_granted = True
            except ValueError:
                pass
        
        if not access_granted and parent_feature:
            access_end = feature_access.get(parent_feature, "01.01.2025 –≤ 00:00")
            try:
                end_date = datetime.strptime(access_end, "%d.%m.%Y –≤ %H:%M")
                if end_date > datetime.now():
                    access_granted = True
            except ValueError:
                pass
        
        if access_granted:
            return func(message, *args, **kwargs)
        
        bot.send_message(user_id, (
            "‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!\n"
            "üöÄ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –æ–±–º–µ–Ω—è–π—Ç–µ –±–∞–ª–ª—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è!"
        ), parse_mode="Markdown")
    return wrapper

# ------------------------------------ –î–ï–ö–û–†–ê–¢–û–†–´ (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –±–æ—Ç–∞) ---------------------------

CHANNEL_CHAT_ID = -1002454361188

def check_subscription_chanal(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        user_id = message.from_user.id
        if not is_user_subscribed(user_id, CHANNEL_CHAT_ID):
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...", reply_markup=types.ReplyKeyboardRemove())

            markup = InlineKeyboardMarkup()
            subscribe_button = types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/carmngbotchanal1") # API
            confirm_button = types.InlineKeyboardButton("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="confirm_subscription")
            markup.add(subscribe_button)
            markup.add(confirm_button)
            bot.send_message(message.chat.id, (
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç @CarMngrBot!\n\n"
                "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞, –∞ —Ç–∞–∫–∂–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º! –ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ: <a href='https://carmngrbot.com.swtest.ru'>–°–∞–π—Ç CAR MANAGER</a>!\n\n"
                "üöÄ –ï—Å–ª–∏ –≤—ã –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:"
            ), reply_markup=markup, parse_mode="HTML")
            return
        return func(message, *args, **kwargs)
    return wrapper

# ------------------------------------ –î–ï–ö–û–†–ê–¢–û–†–´ (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π) ---------------------------

def text_only_handler(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        if (message.photo or message.video or message.document or 
            message.animation or message.sticker or message.audio or 
            message.contact or message.voice or message.video_note):
            sent = bot.send_message(
                message.chat.id, 
                "‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            )
            bot.register_next_step_handler(sent, func, *args, **kwargs)
            return
        return func(message, *args, **kwargs)
    return wrapper

# ------------------------------------ –î–ï–ö–û–†–ê–¢–û–†–´ (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ - –∫–∞–ø—á–∞) ---------------------------

REQUEST_LIMIT = 5
TIME_WINDOW = 10
CAPTCHA_TIMEOUT = 300 

user_requests = {}
captcha_data = {}

def save_captcha_data():
    try:
        with open(r'data/admin/captcha/captcha_data.json', 'w', encoding='utf-8') as f:
            json.dump(captcha_data, f)
    except Exception as e:
        pass

def load_captcha_data():
    global captcha_data
    try:
        if os.path.exists(r'data/admin/captcha/captcha_data.json') and os.path.getsize(r'data/admin/captcha/captcha_data.json') > 0:
            with open(r'data/admin/captcha/captcha_data.json', 'r', encoding='utf-8') as f:
                captcha_data = json.load(f)
        else:
            captcha_data = {}
    except json.JSONDecodeError as e:
        captcha_data = {}
    except Exception as e:
        captcha_data = {}

def rate_limit_with_captcha(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        user_id = message.from_user.id
        current_time = time.time()

        if user_id not in user_requests:
            user_requests[user_id] = []

        user_requests[user_id] = [t for t in user_requests[user_id] if current_time - t < TIME_WINDOW]

        if user_id in captcha_data:
            if time.time() - captcha_data[user_id]['timestamp'] > CAPTCHA_TIMEOUT:
                del captcha_data[user_id]
                bot.send_message(message.chat.id, "‚ö†Ô∏è –ö–∞–ø—á–∞ —É—Å—Ç–∞—Ä–µ–ª–∞!\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é...")
                send_captcha(message)
                bot.register_next_step_handler(message, handle_captcha, func, *args, **kwargs)
                save_captcha_data()
                return

            try:
                user_answer = int(message.text.strip())
                correct_answer = captcha_data[user_id]['answer']
                
                if user_answer == correct_answer:
                    del captcha_data[user_id]
                    user_requests[user_id] = []
                    bot.send_message(message.chat.id, "‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!\nüöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞...")
                    save_captcha_data()
                    return func(message, *args, **kwargs)
                else:
                    bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n–†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É —Å–Ω–æ–≤–∞:\n\n{captcha_data[user_id]['question']}")
                    bot.register_next_step_handler(message, handle_captcha, func, *args, **kwargs)
                    return
            except ValueError:
                bot.send_message(message.chat.id, f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!\n\n–†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É:\n\n{captcha_data[user_id]['question']}")
                bot.register_next_step_handler(message, handle_captcha, func, *args, **kwargs)
                return
            except KeyError:
                del captcha_data[user_id]
                bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–∞–ø—á–∏!\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é...")
                send_captcha(message)
                bot.register_next_step_handler(message, handle_captcha, func, *args, **kwargs)
                save_captcha_data()
                return

        if len(user_requests[user_id]) >= REQUEST_LIMIT:
            send_captcha(message)
            bot.register_next_step_handler(message, handle_captcha, func, *args, **kwargs)
            save_captcha_data()
            return

        user_requests[user_id].append(current_time)
        return func(message, *args, **kwargs)
    
    return wrapper

def send_captcha(message):
    user_id = message.from_user.id
    if user_id in captcha_data:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∫–∞–ø—á—É:\n\n{captcha_data[user_id]['question']}")
        return

    num1 = random.randint(1, 10)
    num2 = random.randint(1, 10)
    operation = random.choice(['+', '-', '*'])
    answer = num1 + num2 if operation == '+' else num1 - num2 if operation == '-' else num1 * num2
    question = f"{num1} {operation} {num2} = ?"
    captcha_data[user_id] = {
        'question': question,
        'answer': answer,
        'timestamp': time.time()
    }
    bot.send_message(message.chat.id, f"‚ö†Ô∏è –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤!\n\n–†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É:\n\n{question}")

def handle_captcha(message, original_func, *args, **kwargs):
    user_id = message.from_user.id
    
    if user_id not in captcha_data:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –°–µ—Å—Å–∏—è –∫–∞–ø—á–∏ –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return original_func(message, *args, **kwargs)
    
    if time.time() - captcha_data[user_id]['timestamp'] > CAPTCHA_TIMEOUT:
        del captcha_data[user_id]
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ö–∞–ø—á–∞ —É—Å—Ç–∞—Ä–µ–ª–∞!\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é...")
        send_captcha(message)
        bot.register_next_step_handler(message, handle_captcha, original_func, *args, **kwargs)
        save_captcha_data()
        return
    
    try:
        user_answer = int(message.text.strip())
        correct_answer = captcha_data[user_id]['answer']
        if user_answer == correct_answer:
            del captcha_data[user_id]
            user_requests[user_id] = []
            bot.send_message(message.chat.id, "‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!\nüöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞...")
            save_captcha_data()
            return original_func(message, *args, **kwargs)
        else:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n–†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É —Å–Ω–æ–≤–∞:\n\n{captcha_data[user_id]['question']}")
            bot.register_next_step_handler(message, handle_captcha, original_func, *args, **kwargs)
    except ValueError:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!\n\n–†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É:\n\n{captcha_data[user_id]['question']}")
        bot.register_next_step_handler(message, handle_captcha, original_func, *args, **kwargs)
    except KeyError:
        del captcha_data[user_id]
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–∞–ø—á–∏!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞...")
        return original_func(message, *args, **kwargs)
    
# -------------------------------------------------------- –°–ê–ô–¢ CARMNGBOT ------------------------------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–°–∞–π—Ç")
@bot.message_handler(commands=['website'])
@check_function_state_decorator('–°–∞–π—Ç')
@track_usage('–°–∞–π—Ç')
@restricted
@track_user_activity
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def send_website_file(message):
    bot.send_message(message.chat.id, "[–°–∞–π—Ç CAR MANAGER](carmngrbot.com.swtest.ru)", parse_mode="Markdown")





# ----------------------------------------------------- –ö–û–î –î–õ–Ø "–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø" ------------------------------------------------------





# ------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–¥, –ø–ª–∞—Ç–µ–∂–∫–∏, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) ------------------------------------------

BASE_DIR = os.getcwd()
PAYMENTS_DATABASE_PATH = os.path.join(BASE_DIR, "data/admin/admin_user_payments/payments.json")
USERS_DATABASE_PATH = os.path.join(BASE_DIR, "data/admin/admin_user_payments/users.json")

PROMO_CODES = {}
AD_CHANNELS = {}
PROMO_FILE_MTIME = 0

def load_promo_and_channels():
    global PROMO_CODES, AD_CHANNELS, PROMO_FILE_MTIME
    json_dir = os.path.join(BASE_DIR, 'files', 'files_for_bot')
    json_path = os.path.join(json_dir, 'promo_and_channels.json')
    
    os.makedirs(json_dir, exist_ok=True)
    
    if not os.path.exists(json_path):
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump({"promo_codes": {}, "ad_channels": {}}, f, ensure_ascii=False, indent=4)
        PROMO_FILE_MTIME = os.path.getmtime(json_path)
        PROMO_CODES = {}
        AD_CHANNELS = {}
        return PROMO_CODES, AD_CHANNELS
    
    try:
        current_mtime = os.path.getmtime(json_path)
        if current_mtime != PROMO_FILE_MTIME:
            with open(json_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                PROMO_FILE_MTIME = current_mtime
                PROMO_CODES = data.get('promo_codes', {})
                AD_CHANNELS = data.get('ad_channels', {})
        return PROMO_CODES, AD_CHANNELS
    except json.JSONDecodeError:
        PROMO_CODES = {}
        AD_CHANNELS = {}
        return PROMO_CODES, AD_CHANNELS

def initialize_ad_channels():
    promo_codes, ad_channels = load_promo_and_channels()
    return {chat_id: channel for chat_id, channel in ad_channels.items() if channel['active']}

AD_CHANNELS = initialize_ad_channels()

def monitor_promo_file_changes():
    while True:
        load_promo_and_channels()  
        time.sleep(5)  

promo_monitor_thread = threading.Thread(target=monitor_promo_file_changes, daemon=True)
promo_monitor_thread.start()

def load_payment_data():
    global PROMO_CODES, AD_CHANNELS
    promo_codes, ad_channels = load_promo_and_channels()

    default_data = {
        'subscriptions': {'users': {}},
        'subscription_history': {},
        'referrals': {
            'links': {},
            'stats': {},
            'bonuses': {},
            'leaderboard_history': {
                'current_leader': None,
                'leader_start_date': None,
                'days_at_top': 0
            },
            'top_formed_date': None,
            'last_top10_bonus': None
        },
        'all_users_total_amount': 0,
        'promo_codes': promo_codes,
        'ad_channels': ad_channels,
        'refunds': []
    }

    if not os.path.exists(PAYMENTS_DATABASE_PATH) or os.path.getsize(PAYMENTS_DATABASE_PATH) == 0:
        os.makedirs(os.path.dirname(PAYMENTS_DATABASE_PATH), exist_ok=True)
        with open(PAYMENTS_DATABASE_PATH, 'w', encoding='utf-8') as f:
            json.dump(default_data, f, indent=4, ensure_ascii=False)
        return default_data

    try:
        with open(PAYMENTS_DATABASE_PATH, 'r', encoding='utf-8') as f:
            content = f.read().strip()
            if not content:
                raise json.JSONDecodeError("–§–∞–π–ª –ø—É—Å—Ç", content, 0)
            data = json.loads(content)

        if not isinstance(data, dict) or 'subscriptions' not in data:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ payments.json")

        for key, value in default_data.items():
            if key not in data:
                data[key] = value
            elif isinstance(value, dict):
                for sub_key, sub_value in value.items():
                    if sub_key not in data[key]:
                        data[key][sub_key] = sub_value

        if 'subscriptions' in data and 'users' in data['subscriptions']:
            for user_id in list(data['subscriptions']['users']):
                if not isinstance(data['subscriptions']['users'][user_id], dict):
                    data['subscriptions']['users'][user_id] = {
                        "username": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
                        "plans": [],
                        "total_amount": 0,
                        "referral_points": 0,
                        "free_feature_trials": {},
                        "promo_usage_history": [],
                        "referral_milestones": {},
                        "points_history": [],
                        "last_promo_used": None,
                        "daily_bonus_date": None,
                        "last_bonus_timestamp": None,
                        "streak_days": 0,
                        "discount": 0,
                        "applicable_category": None,
                        "applicable_items": [],
                        "discount_type": None,
                        "ad_channels_subscribed": []
                    }
                user_data = data['subscriptions']['users'][user_id]
                for field, default in {
                    'referral_points': 0,
                    'promo_usage_history': [],
                    'referral_milestones': {},
                    'points_history': [],
                    'ad_channels_subscribed': [],
                    'last_promo_used': None,
                    'daily_bonus_date': None,
                    'last_bonus_timestamp': None,
                    'streak_days': 0,
                    'discount': 0,
                    'applicable_category': None,
                    'applicable_items': [],
                    'discount_type': None
                }.items():
                    user_data.setdefault(field, default)

        return data

    except (json.JSONDecodeError, ValueError) as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ payments.json: {e}")
        backup_path = PAYMENTS_DATABASE_PATH + ".backup"
        if os.path.exists(backup_path) and os.path.getsize(backup_path) > 0:
            try:
                with open(backup_path, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                    if content:
                        data = json.loads(content)
                        if isinstance(data, dict) and 'subscriptions' in data:
                            shutil.copy(backup_path, PAYMENTS_DATABASE_PATH)
                            print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–∞–ø–∞")
                            return data
            except json.JSONDecodeError:
                print("–ë—ç–∫–∞–ø –ø–æ–≤—Ä–µ–∂–¥—ë–Ω, —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π —Ñ–∞–π–ª")
        with open(PAYMENTS_DATABASE_PATH, 'w', encoding='utf-8') as f:
            json.dump(default_data, f, indent=4, ensure_ascii=False)
        return default_data

def update_user_activity(user_id, username=None, first_name="", last_name="", phone="", function_name=None):
    active_users[user_id] = datetime.now()
    total_users.add(user_id)
    user_id_str = str(user_id)
    current_time = datetime.now().strftime('%d.%m.%Y –≤ %H:%M:%S')
    now = datetime.now()
    today = now.strftime('%d.%m.%Y')

    statistics = load_statistics()
    data = load_payment_data()
    users_data = load_users_data()

    formatted_username = f"@{username}" if username else ""

    if user_id_str not in data['subscriptions']['users']:
        data['subscriptions']['users'][user_id_str] = {
            "username": formatted_username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
            "plans": [],
            "total_amount": 0,
            "referral_points": 0,
            "free_feature_trials": {},
            "promo_usage_history": [],
            "referral_milestones": {},
            "points_history": [],
            "last_promo_used": None,
            "daily_bonus_date": None,
            "last_bonus_timestamp": None,
            "streak_days": 0,
            "discount": 0,
            "applicable_category": None,
            "applicable_items": [],
            "discount_type": None
        }

    user_subscription = data['subscriptions']['users'][user_id_str]
    user_subscription['username'] = formatted_username or user_subscription.get('username', "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")

    last_bonus_date = user_subscription.get('daily_bonus_date')
    join_date = users_data.get(user_id_str, {}).get('join_date', now.strftime("%d.%m.%Y –≤ %H:%M"))
    days_since_join = (now - datetime.strptime(join_date, "%d.%m.%Y –≤ %H:%M")).days
    bonus_points = 1.0 if days_since_join <= 7 else 0.5 

    can_award_bonus = False
    if not last_bonus_date or last_bonus_date != today:
        can_award_bonus = True

    if can_award_bonus:
        user_subscription['last_bonus_timestamp'] = current_time
        user_subscription['daily_bonus_date'] = today
        streak_days = user_subscription.get('streak_days', 0)

        if last_bonus_date:
            last_date = datetime.strptime(last_bonus_date, "%d.%m.%Y")
            if (now.date() - last_date.date()).days == 1:
                streak_days += 1 
            else:
                streak_days = 1  
        else:
            streak_days = 1 

        user_subscription['streak_days'] = streak_days
        user_subscription['referral_points'] += bonus_points
        user_subscription['points_history'].append({
            "action": "earned",
            "points": bonus_points,
            "reason": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥",
            "date": current_time
        })

    if user_id_str not in users_data:
        users_data[user_id_str] = {
            "username": formatted_username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
            "activity": {},
            "usage_stats": {},
            "join_date": now.strftime("%d.%m.%Y –≤ %H:%M"),
            "user_id": user_id,
            "first_name": first_name or "",
            "last_name": last_name or "",
            "phone": phone,
            "last_active": current_time,
            "blocked": False,
            "actions": 0,
            "session_time": 0,
            "returning": False
        }
    else:
        users_data[user_id_str]['username'] = formatted_username or users_data[user_id_str].get('username', "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        users_data[user_id_str]['first_name'] = first_name or ""
        users_data[user_id_str]['last_name'] = last_name or ""
        users_data[user_id_str]['phone'] = phone
        users_data[user_id_str]['last_active'] = current_time
        users_data[user_id_str].setdefault('activity', {})
        users_data[user_id_str].setdefault('usage_stats', {})
        users_data[user_id_str].setdefault('join_date', now.strftime("%d.%m.%Y –≤ %H:%M"))

    today_stats = datetime.now().strftime('%d.%m.%Y')
    if today_stats not in statistics:
        statistics[today_stats] = { 'users': set(), 'functions': {} }
    statistics[today_stats]['users'].add(user_id)
    if function_name:
        if function_name not in statistics[today_stats]['functions']:
            statistics[today_stats]['functions'][function_name] = 0
        statistics[today_stats]['functions'][function_name] += 1

    save_statistics(statistics)
    save_payments_data(data)
    save_users_data(users_data)

def save_payments_data(data):
    try:
        if not data or not isinstance(data, dict) or 'subscriptions' not in data:
            error_msg = "–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ payments.json"
            print(error_msg)
            raise ValueError(error_msg)

        json.dumps(data, ensure_ascii=False)

        temp_file = PAYMENTS_DATABASE_PATH + ".temp"
        with open(temp_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)

        if os.path.exists(PAYMENTS_DATABASE_PATH):
            backup_path = PAYMENTS_DATABASE_PATH + ".backup"
            shutil.copy(PAYMENTS_DATABASE_PATH, backup_path)

        shutil.move(temp_file, PAYMENTS_DATABASE_PATH)

    except json.JSONEncodeError as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ JSON: {e}"
        print(error_msg)
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å payments.json –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ {PAYMENTS_DATABASE_PATH}: {e}"
        print(error_msg)
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å payments.json: {e}")

def load_users_data():
    ensure_directory_exists(USERS_DATABASE_PATH)

    if not os.path.exists(USERS_DATABASE_PATH):
        with open(USERS_DATABASE_PATH, 'w', encoding='utf-8') as file:
            json.dump({}, file)
        return {}

    try:
        with open(USERS_DATABASE_PATH, 'r', encoding='utf-8') as f:
            content = f.read().strip()
            if not content:
                return {}
            data = json.loads(content)
        
        now = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        for user_id in data:
            data[user_id].setdefault('join_date', now)
            data[user_id].setdefault('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            data[user_id].setdefault('usage_stats', {})
            data[user_id].setdefault('activity', {})
            data[user_id].pop('last_promo_used', None)
            data[user_id].pop('auto_renew', None)
        
        save_users_data(data)
        return data
    except json.JSONDecodeError as e:
        with open(USERS_DATABASE_PATH, 'w', encoding='utf-8') as f:
            json.dump({}, f)
        return {}
    except Exception as e:
        with open(USERS_DATABASE_PATH, 'w', encoding='utf-8') as f:
            json.dump({}, f)
        return {}

def save_users_data(data):
    with open(USERS_DATABASE_PATH, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

def ensure_directory_exists(file_path):
    os.makedirs(os.path.dirname(file_path), exist_ok=True)

# ------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏ –ø–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥, —Ñ–æ–Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏) -----------------------------

def load_features():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    json_dir = os.path.join(script_dir, 'files', 'files_for_bot')
    json_path = os.path.join(json_dir, 'free_and_paid_features.json')
    
    os.makedirs(json_dir, exist_ok=True)
    
    if not os.path.exists(json_path):
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump({"free_features": [], "paid_features": []}, f, ensure_ascii=False, indent=4)
    
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get('free_features', []), data.get('paid_features', [])
    except json.JSONDecodeError:
        return [], []

FREE_FEATURES, PAID_FEATURES = load_features()

def set_free_trial_period(user_id, days, source="default"):
    data = load_payment_data()
    user_id_str = str(user_id)

    if user_id_str not in data['subscriptions']['users']:
        data['subscriptions']['users'][user_id_str] = {
            "plans": [],
            "total_amount": 0,
            "username": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
            "referral_points": 0,
            "promo_usage_history": [],
            "referral_milestones": {},
            "points_history": [],
            "ad_bonus_received": False
        }

    user_data = data['subscriptions']['users'][user_id_str]
    now = datetime.now()

    if 'plans' not in user_data:
        user_data['plans'] = []

    if user_data['plans']:
        latest_end = max([datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") for p in user_data['plans']])
        start_date = max(latest_end, now)  
    else:
        start_date = now

    new_end = start_date + timedelta(days=days)

    user_data['plans'].append({
        "plan_name": "free",
        "start_date": start_date.strftime("%d.%m.%Y –≤ %H:%M"),
        "end_date": new_end.strftime("%d.%m.%Y –≤ %H:%M"),
        "price": 0,
        "source": source
    })

    save_payments_data(data)
    return new_end

def is_premium_user(user_id):
    data = load_payment_data()
    user_id_str = str(user_id)
    user_data = data['subscriptions']['users'].get(user_id_str, {})
    plans = user_data.get('plans', [])
    
    now = datetime.now()
    for plan in plans:
        end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
        if end_date > now:
            return True
    
    return False

@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout_query(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

def safe_send_message(user_id, text, **kwargs):
    try:
        bot.send_message(user_id, text, **kwargs)
    except ApiTelegramException as e:
        if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
            blocked_users = load_blocked_users()
            if user_id not in blocked_users:
                blocked_users.append(user_id)
                save_blocked_users(blocked_users)
        else:
            raise e

def background_subscription_expiration_check():
    time.sleep(86400)
    while True:
        data = load_payment_data()
        users_data = load_users_data()
        for user_id, user_data in data['subscriptions']['users'].items():
            if not is_user_subscribed(int(user_id)):
                continue
            active = any(datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") > datetime.now() for p in user_data.get('plans', []))
            if not active and not user_data.get('offer_sent', False):
                last_end = max([datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") for p in user_data['plans']]) if user_data.get('plans') else datetime.now()
                if (datetime.now() - last_end).days >= 15:
                    markup = InlineKeyboardMarkup()
                    markup.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∑–∞ 99 ‚ÇΩ", callback_data="special_offer_weekly"))
                    safe_send_message(user_id, (
                        "üéÅ *–°–æ—Å–∫—É—á–∏–ª–∏—Å—å?*\n\n"
                        "‚ú® –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ 7 –¥–Ω–µ–π –≤—Å–µ–≥–æ –∑–∞ *99 ‚ÇΩ*!\n"
                    ), reply_markup=markup, parse_mode="Markdown")
                    user_data['offer_sent'] = True
                    save_payments_data(data)
            for plan in user_data.get('plans', []):
                end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
                now = datetime.now()
                remaining_time = end_date - now
                remaining_days = remaining_time.days
                remaining_hours = remaining_time.seconds // 3600
                remaining_minutes = (remaining_time.seconds % 3600) // 60
                if remaining_days == 1:
                    markup = InlineKeyboardMarkup()
                    markup.add(InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å", callback_data="buy_subscription"))
                    safe_send_message(user_id, (
                        f"‚è≥ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑:</b> {remaining_days} –¥–Ω–µ–π {remaining_hours:02}:{remaining_minutes:02} —á–∞—Å–æ–≤!\n\n"
                        f"üìÖ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> {plan['end_date']}\n\n"
                        "üöÄ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
                    ), parse_mode="HTML")
                elif remaining_days < 2 and remaining_days >= 0:
                    safe_send_message(user_id, (
                        f"‚è≥ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑:* {remaining_days} –¥–Ω. {remaining_hours:02}:{remaining_minutes:02} —á.!\n\n"
                        f"üìÖ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* {plan['end_date']}\n\n"
                        "üöÄ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
                    ), parse_mode="Markdown")
                elif now > end_date and not user_data.get('trial_ended_notified', False):
                    safe_send_message(user_id, (
                        "‚è≥ *–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è!*\n\n"
                        "üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º, –µ—Å–ª–∏ –≤—ã –µ–µ –µ—â–µ –Ω–µ –∫—É–ø–∏–ª–∏!\n\n"
                        "üéâ –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º!"
                    ), parse_mode="Markdown")
                    user_data['trial_ended_notified'] = True
                    save_payments_data(data)
        time.sleep(86400)

thread_expiration = threading.Thread(target=background_subscription_expiration_check, daemon=True)
thread_expiration.start()

@bot.callback_query_handler(func=lambda call: call.data == "buy_subscription")
@text_only_handler
def handle_buy_subscription(call):
    send_subscription_options(call.message)
    bot.answer_callback_query(call.id, "üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è!")

@bot.callback_query_handler(func=lambda call: call.data == "special_offer_weekly")
@text_only_handler
def send_special_offer_invoice(call):
    user_id = call.from_user.id
    try:
        bot.send_invoice(user_id, "üåü –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: 7 –¥–Ω–µ–π", (
            "üéÅ *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!*\n\n"
            "‚ú® –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –ø–æ —Å—É–ø–µ—Ä—Ü–µ–Ω–µ!\n\n"
            "üöÄ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞!"
        ), PAYMENT_PROVIDER_TOKEN, "sub", "RUB", 
                        [types.LabeledPrice("üåü 7 –¥–Ω–µ–π", 9900)], "weekly_subscription_7")
        bot.answer_callback_query(call.id, "üéâ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!")
    except ApiTelegramException as e:
        if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
            blocked_users = load_blocked_users()
            if user_id not in blocked_users:
                blocked_users.append(user_id)
                save_blocked_users(blocked_users)
        else:
            raise e

# --------------------------- –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–∫–æ–º–∞–Ω–¥–∞ /start, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª) --------------------

def create_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    itembuysub = types.KeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞")
    item1 = types.KeyboardButton("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item2 = types.KeyboardButton("–¢—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã")
    item3 = types.KeyboardButton("–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    item4 = types.KeyboardButton("–ü–æ–∏—Å–∫ –º–µ—Å—Ç")
    item5 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞")
    item6 = types.KeyboardButton("–¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ")
    item7 = types.KeyboardButton("–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞")
    item8 = types.KeyboardButton("–ö–æ–¥—ã OBD2")
    item9 = types.KeyboardButton("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    item10 = types.KeyboardButton("–ê–Ω—Ç–∏—Ä–∞–¥–∞—Ä")
    item11 = types.KeyboardButton("–ü—Ä–æ—á–µ–µ")

    markup.add(itembuysub)
    markup.add(item1, item2)
    markup.add(item3, item4)
    markup.add(item5, item6)
    markup.add(item7, item8)
    markup.add(item9, item10)
    markup.add(item11)
    return markup

@bot.message_handler(commands=['start'])
@check_subscription_chanal
@rate_limit_with_captcha
@check_chat_state
def start(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""
    now = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")

    update_user_activity(user_id, username, first_name, last_name)

    referral_code = None
    if hasattr(message, 'text') and message.text is not None:
        text_parts = message.text.split()
        if len(text_parts) > 1:
            referral_code = text_parts[-1]

    data = load_payment_data()
    users_data = load_users_data()

    if str(user_id) not in data['subscriptions']['users']:
        data['subscriptions']['users'][str(user_id)] = {
            "username": username,
            "plans": [],
            "total_amount": 0,
            "referral_points": 0,
            "free_feature_trials": {},
            "promo_usage_history": [],
            "referral_milestones": {},
            "points_history": []
        }

    user_plans = data['subscriptions']['users'][str(user_id)].get('plans', [])
    has_active_plan = any(datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M") > datetime.now() for plan in user_plans)
    has_trial = any(plan['plan_name'] == "free" for plan in user_plans)

    is_referral = any(str(user_id) in refs for refs in data['referrals']['stats'].values())

    if is_referral and (user_plans or has_trial):
        markup = create_main_menu()
        bot.send_message(chat_id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=markup)
        return

    referral_bonus_applied = False
    referral_message = ""
    if referral_code:
        referrer_id = track_referral_activity(referral_code, user_id)
        if referrer_id:
            apply_referral_bonus(referrer_id)
            new_end = set_free_trial_period(user_id, 1, "referral")
            referral_bonus_applied = True
            referral_message = (
                f"‚ú® –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω +1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n\n"
                f"üïí *–ù–∞—á–∞–ª–æ:* {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}\n"
                f"‚åõ *–ö–æ–Ω–µ—Ü:* {new_end.strftime('%d.%m.%Y –≤ %H:%M')}\n"
            )

    if not user_plans or not has_trial:
        new_end_trial = set_free_trial_period(user_id, 3)
        start_date = datetime.now().strftime("%d.%m.%Y –≤ %H:%M") 
        end_date_str = new_end_trial.strftime("%d.%m.%Y –≤ %H:%M")  
        referral_link = create_referral_link(user_id)
        trial_message = (
            "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
            "‚ú® –£ –≤–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω <b>–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b> –Ω–∞ <b>3 –¥–Ω—è</b>!\n"
            f"üïí <b>–ù–∞—á–∞–ª–æ:</b> {start_date}\n"
            f"‚åõ <b>–ö–æ–Ω–µ—Ü:</b> {end_date_str}\n\n"
            "üìÖ –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!\n\n"
            f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<a href='{referral_link}'>{referral_link}</a>\n"
            "ü§ù <b>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π</b> –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–æ <b>+30 –¥–Ω–µ–π –∏ 35% —Å–∫–∏–¥–∫–∏</b>!\n\n"
        )
        bot.send_message(chat_id, trial_message, parse_mode="HTML", reply_markup=types.ReplyKeyboardRemove())
        if referral_bonus_applied:
            bot.send_message(chat_id, referral_message, parse_mode="HTML")
    elif has_active_plan and referral_bonus_applied:
        referral_link = create_referral_link(user_id)
        active_plans = [plan for plan in user_plans if datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M") > datetime.now()]
        latest_plan = max(active_plans, key=lambda p: datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M"))
        start_date = latest_plan['start_date'] 
        end_date_str = latest_plan['end_date']
        trial_message = (
            "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
            "‚ú® –£ –≤–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω <b>–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b> –Ω–∞ <b>3 –¥–Ω—è</b>!\n"
            f"üïí <b>–ù–∞—á–∞–ª–æ:</b> {start_date}\n"
            f"‚åõ <b>–ö–æ–Ω–µ—Ü:</b> {end_date_str}\n\n"
            "üìÖ –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!\n\n"
            f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<a href='{referral_link}'>{referral_link}</a>\n"
            "ü§ù <b>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π</b> –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–æ <b>+30 –¥–Ω–µ–π –∏ 35% —Å–∫–∏–¥–∫–∏</b>!\n\n"
        )
        bot.send_message(chat_id, trial_message, parse_mode="HTML", reply_markup=types.ReplyKeyboardRemove())
        bot.send_message(chat_id, referral_message, parse_mode="HTML")
    else:
        markup = create_main_menu()
        bot.send_message(chat_id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=markup)
        return

    markup = create_main_menu()
    bot.send_message(chat_id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "confirm_subscription")
@text_only_handler
def handle_subscription_confirmation(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    username = call.from_user.username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'

    bot.answer_callback_query(call.id, text="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏...")

    if is_user_subscribed(user_id):
        data = load_payment_data()
        user_data = data['subscriptions']['users'].get(str(user_id), {})

        has_active_plan = any(datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M") > datetime.now()
                             for plan in user_data.get('plans', []))

        if not has_active_plan:
            new_end_trial = set_free_trial_period(user_id, 3)
            referral_link = create_referral_link(user_id)
            markup = create_main_menu()
            combined_message = (
                "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                "‚ú® –£ –≤–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω <b>–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b> –Ω–∞ <b>3 –¥–Ω—è</b>!\n"
                f"üïí <b>–ù–∞—á–∞–ª–æ:</b> {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}\n"
                f"‚åõ <b>–ö–æ–Ω–µ—Ü:</b> {new_end_trial.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
                "üìÖ –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!\n\n"
                f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<a href='{referral_link}'>{referral_link}</a>\n"
                "ü§ù <b>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π</b> –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–æ <b>+30 –¥–Ω–µ–π –∏ 15% —Å–∫–∏–¥–∫–∏</b>!\n\n"
            )
            bot.send_message(chat_id, combined_message, parse_mode="HTML")
            bot.send_message(chat_id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=markup)
        else:
            markup = create_main_menu()
            bot.send_message(chat_id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=markup)
    else:
        bot.answer_callback_query(call.id, text="–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å!")
        bot.send_message(chat_id, "–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!", parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@check_function_state_decorator('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
@track_usage('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def return_to_menu(message):
    start(message)

# ---------------------------------------------------- –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê ------------------------------------------------------------

PAYMENT_PROVIDER_TOKEN = '1744374395:TEST:93aa42be8420f58d5243' # API

@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞")
@check_function_state_decorator('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞')
@track_usage('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def payments_function(message, show_description=True):
    description = (
        "‚ÑπÔ∏è *–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞*\n\n"
        "üìå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ *–≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞*.\n*–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã:* _–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã (–∞–ª–∫–æ–≥–æ–ª—å, –Ω–∞–ª–æ–≥), –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –∫–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞, –∫–æ–¥—ã obd2, –∞–Ω—Ç–∏—Ä–∞–¥–∞—Ä, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –ø—Ä–æ—á–µ–µ (–Ω–æ–≤–æ—Å—Ç–∏, –¥–ª—è —Ä–µ–∫–ª–∞–º—ã, —á–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º, –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç)_\n\n"
        "üìÖ *–í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏:*\n"
        "üëâ *3 –¥–Ω—è:* 70 ‚ÇΩ ‚Äî –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –±–æ—Ç–æ–º!\n"
        "üëâ *7 –¥–Ω–µ–π:* 105 ‚ÇΩ ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π!\n"
        "üëâ *30 –¥–Ω–µ–π:* 360 ‚ÇΩ ‚Äî –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n"
        "üëâ *90 –¥–Ω–µ–π:* 900 ‚ÇΩ ‚Äî —ç–∫–æ–Ω–æ–º–∏—è –∏ —É–¥–æ–±—Å—Ç–≤–æ –±–µ–∑ —á–∞—Å—Ç–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è!\n"
        "üëâ *180 –¥–Ω–µ–π:* 1620 ‚ÇΩ ‚Äî –±–æ–ª—å—à–µ –≤—ã–≥–æ–¥—ã –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏!\n"
        "üëâ *365 –¥–Ω–µ–π:* 2920 ‚ÇΩ ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è –¥–æ 50%!\n\n"
        "üéÅ –ù–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è *–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 3 –¥–Ω—è*!\n\n"
        "üìà *–ë–∞–ª–ª—ã –∏ –±–æ–Ω—É—Å—ã:*\n"
        "- *1 –±–∞–ª–ª –≤ –¥–µ–Ω—å* –ø–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π, –∑–∞—Ç–µ–º *0.5 –±–∞–ª–ª–∞ –≤ –¥–µ–Ω—å* –∑–∞ –≤—Ö–æ–¥\n"
        "- *3/5/10/8/12/15 –±–∞–ª–ª–æ–≤* –∑–∞ –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É (3/7/30/90/180/365 –¥–Ω–µ–π)\n"
        "- *0.5/1/3/2/5/10 –±–∞–ª–ª–æ–≤* –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É (3/7/30/90/180/365 –¥–Ω–µ–π)\n"
        "- *1 –±–∞–ª–ª* –¥–ª—è —Ç–æ–ø-10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π\n"
        "- *–¢–æ–ø-1:* +3 –¥–Ω—è, *–¢–æ–ø-2:* +2 –¥–Ω—è, *–¢–æ–ø-3:* +1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π\n\n"
        "üéâ –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –±–∞–ª–ª—ã:\n"
        "- *5 –±–∞–ª–ª–æ–≤ = 1 —á–∞—Å* –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "- *2 –±–∞–ª–ª–∞ = 15 –º–∏–Ω—É—Ç* –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º\n"
        "- *10 –±–∞–ª–ª–æ–≤ = 5% —Å–∫–∏–¥–∫–∏* (–¥–æ 35%)\n\n"
        "ü§ù *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:*\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ:\n"
        "- *1 —Ä–µ—Ñ–µ—Ä–∞–ª = +1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ + 1 –±–∞–ª–ª*\n"
        "- *5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ = +5 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ + 1.5 –±–∞–ª–ª–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ (5‚Äì7)*\n"
        "- *10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ = +10 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ + 10% —Å–∫–∏–¥–∫–∞ + 1 –±–∞–ª–ª –∑–∞ 8‚Äì10, 1.5 –∑–∞ 11+*\n"
        "- –ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª –∫—É–ø–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É:\n"
        "  - 3 –¥–Ω—è: *+0.5 –¥–Ω—è* –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "  - 7 –¥–Ω–µ–π: *+1 –¥–µ–Ω—å* –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "  - 30 –¥–Ω–µ–π: *+3 –¥–Ω—è* –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "  - 90 –¥–Ω–µ–π: *+2 –¥–Ω—è* –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "  - 180 –¥–Ω–µ–π: *+5 –¥–Ω–µ–π* –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "  - 365 –¥–Ω–µ–π: *+7 –¥–Ω–µ–π* –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
        "üî• *–ü–æ–¥–∞—Ä–∫–∏:*\n"
        "  - *–ë–∞–ª–ª—ã:* –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º 1 —Ä–∞–∑ –≤ 24 —á–∞—Å–∞\n"
        "  - *–í—Ä–µ–º—è:* –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º 1 —Ä–∞–∑ –≤ 24 —á–∞—Å–∞\n\n"        
        "üí• *–õ–æ—è–ª—å–Ω–æ—Å—Ç—å:* 3 –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ = *10% —Å–∫–∏–¥–∫–∞* –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∫—É–ø–∫—É (—Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)\n\n"
        "üì∫ *–†–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:* +1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª\n\n"
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
    markup.add('–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏', '–í–æ–∑–≤—Ä–∞—Ç')
    markup.add('–ú–∞–≥–∞–∑–∏–Ω', '–ë–∞–ª–ª—ã', '–ü—Ä–æ–º–æ–∫–æ–¥—ã')
    markup.add('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', '–†–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    if show_description:
        bot.send_message(message.chat.id, description, reply_markup=markup, parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É")
@check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É')
@track_usage('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def return_to_subscription(message):
    payments_function(message, show_description=False)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É) -----------------------------------------

SUBSCRIPTION_PLANS = {}
STORE_ITEMS = {}
SUBS_FILE_MTIME = 0

def load_subscriptions_and_store():
    global SUBSCRIPTION_PLANS, STORE_ITEMS, SUBS_FILE_MTIME
    json_dir = os.path.join(BASE_DIR, 'files', 'files_for_bot')
    json_path = os.path.join(json_dir, 'subscription_and_store.json')
    
    os.makedirs(json_dir, exist_ok=True)
    
    if not os.path.exists(json_path):
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump({"subscription_plans": {}, "store_items": {}}, f, ensure_ascii=False, indent=4)
        SUBS_FILE_MTIME = os.path.getmtime(json_path)
        SUBSCRIPTION_PLANS = {}
        STORE_ITEMS = {}
        return SUBSCRIPTION_PLANS, STORE_ITEMS
    
    try:
        current_mtime = os.path.getmtime(json_path)
        if current_mtime != SUBS_FILE_MTIME:
            with open(json_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                SUBS_FILE_MTIME = current_mtime
                SUBSCRIPTION_PLANS = data.get('subscription_plans', {})
                STORE_ITEMS = data.get('store_items', {})
        return SUBSCRIPTION_PLANS, STORE_ITEMS
    except json.JSONDecodeError:
        SUBSCRIPTION_PLANS = {}
        STORE_ITEMS = {}
        return SUBSCRIPTION_PLANS, STORE_ITEMS

SUBSCRIPTION_PLANS, STORE_ITEMS = load_subscriptions_and_store()

def monitor_subscriptions_file_changes():
    while True:
        load_subscriptions_and_store() 
        time.sleep(5) 

subs_monitor_thread = threading.Thread(target=monitor_subscriptions_file_changes, daemon=True)
subs_monitor_thread.start()

@bot.message_handler(func=lambda message: message.text == "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
@check_function_state_decorator('–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
@track_usage('–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def buy_subscription(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    send_subscription_options(message)

def send_subscription_options(message):
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_discount = data['subscriptions']['users'].get(user_id, {}).get('discount', 0)
    applicable_category = data['subscriptions']['users'].get(user_id, {}).get('applicable_category')
    applicable_items = data['subscriptions']['users'].get(user_id, {}).get('applicable_items', [])
    markup = InlineKeyboardMarkup()

    discount_applicable_to_subscriptions = (
        applicable_category == "subscriptions" or
        any(item in SUBSCRIPTION_PLANS for item in applicable_items) or
        (applicable_category is None and not applicable_items)
    )

    display_discount = round(user_discount) if discount_applicable_to_subscriptions else 0
    applicability_str = ""
    if discount_applicable_to_subscriptions and user_discount > 0:
        if applicable_category == "subscriptions":
            applicability_str = " (–ø—Ä–∏–º–µ–Ω–∏–º–æ –∫: –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏)"
        elif applicable_category == "store":
            applicability_str = " (–ø—Ä–∏–º–µ–Ω–∏–º–æ –∫: –≤–µ—Å—å –º–∞–≥–∞–∑–∏–Ω)"
        elif applicable_category is None and not applicable_items:
            applicability_str = " (–ø—Ä–∏–º–µ–Ω–∏–º–æ –∫: –≤—Å–µ —Ç–æ–≤–∞—Ä—ã)"
        else:
            applicable_labels = []
            for item in applicable_items:
                if item in SUBSCRIPTION_PLANS:
                    label = SUBSCRIPTION_PLANS[item]['label'].lower()
                    applicable_labels.append(f"{label} –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö")
                elif item in STORE_ITEMS:
                    label = STORE_ITEMS[item]['label']
                    applicable_labels.append(f"{label} –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
                else:
                    applicable_labels.append(item)
            applicability_str = f" (–ø—Ä–∏–º–µ–Ω–∏–º–æ –∫: {', '.join(applicable_labels)})"
    discount_info_text = f"üéÅ *–í–∞—à–∞ —Å–∫–∏–¥–∫–∞:* {display_discount:.0f}%{applicability_str}\n"

    fictitious_discount_text = ""
    has_fictitious_discount = False
    buttons = []
    for plan_key, plan_info in SUBSCRIPTION_PLANS.items():
        base_price = plan_info["base_price"]
        fictitious_discount = plan_info.get("fictitious_discount", 0)
        label = plan_info["label"]

        discount_applicable = (
            applicable_category == "subscriptions" or
            (applicable_category is None and not applicable_items) or
            plan_key in applicable_items
        )
        discounted_price = base_price * (1 - (user_discount / 100 if discount_applicable else 0))
        final_price = max(1, round(discounted_price - fictitious_discount, 2))

        if fictitious_discount > 0:
            fictitious_discount_text += f"üéÅ *–ê–∫—Ü–∏–æ–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞* (–ø—Ä–∏–º–µ–Ω–∏–º–æ –∫: {label.lower()}): {fictitious_discount:.2f} ‚ÇΩ\n"
            has_fictitious_discount = True

        button_text = f"üí≥ {label} ({final_price:.2f} ‚ÇΩ)"
        buttons.append(InlineKeyboardButton(button_text, callback_data=plan_key))

    for i in range(0, len(buttons), 2):
        markup.add(*buttons[i:i+2])

    if not has_fictitious_discount:
        fictitious_discount_text = "üéÅ *–ê–∫—Ü–∏–æ–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞:* 0.00 ‚ÇΩ\n"

    fictitious_discount_text += "\n"

    bot.send_message(user_id, (
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        f"{discount_info_text}"
        f"{fictitious_discount_text}"
        "üìå *3 –¥–Ω—è*: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –≤ –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫!\n"
        "üìå *7 –¥–Ω–µ–π*: –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –¥–æ–ª–≥–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤!\n"
        "üìå *30 –¥–Ω–µ–π*: –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n"
        "üìå *90 –¥–Ω–µ–π*: —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å —ç–∫–æ–Ω–æ–º–∏–µ–π –∏ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —á–∞—Å—Ç–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è!\n"
        "üìå *180 –¥–Ω–µ–π*: –µ—â–µ –±–æ–ª—å—à–µ –≤—ã–≥–æ–¥—ã –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏!\n"
        "üìå *365 –¥–Ω–µ–π*: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è ‚Äî –¥–æ 50% –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏!\n"
    ), reply_markup=markup, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É")
    item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_back)
    markup.add(item_main)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in SUBSCRIPTION_PLANS)
def send_subscription_invoice(call):
    user_id = str(call.from_user.id)
    username = call.from_user.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"  
    plan_key = call.data
    plan_info = SUBSCRIPTION_PLANS[plan_key]
    base_price = plan_info["base_price"]
    fictitious_discount = plan_info["fictitious_discount"]
    label = plan_info["label"]
    duration = plan_info["duration"]

    data = load_payment_data()
    user_discount = data['subscriptions']['users'].get(user_id, {}).get('discount', 0)
    applicable_category = data['subscriptions']['users'].get(user_id, {}).get('applicable_category')
    applicable_items = data['subscriptions']['users'].get(user_id, {}).get('applicable_items', [])
    discount_type = data['subscriptions']['users'].get(user_id, {}).get('discount_type', 'promo')

    discount_applicable = (
        applicable_category == "subscriptions" or
        plan_key in applicable_items or
        (applicable_category is None and not applicable_items)
    )
    user_discount = user_discount if discount_applicable else 0

    now = datetime.now()

    if user_discount >= 100:
        user_data = data['subscriptions']['users'].setdefault(user_id, {
            "plans": [], "total_amount": 0, "referral_points": 0, "store_purchases": []
        })

        if user_data['plans']:
            latest_end = max([datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") for p in user_data['plans']])
            start_date = max(latest_end, now) 
        else:
            start_date = now

        new_end = start_date + timedelta(days=duration)

        user_data['plans'].append({
            "plan_name": plan_key.split('_')[0],
            "start_date": start_date.strftime("%d.%m.%Y –≤ %H:%M"),
            "end_date": new_end.strftime("%d.%m.%Y –≤ %H:%M"),
            "price": 0,
            "telegram_payment_charge_id": None,
            "provider_payment_charge_id": None,
            "source": "promo_100_percent",
            "user_discount": user_discount,
            "fictitious_discount": fictitious_discount
        })

        if discount_type == "promo":
            bot.send_message(user_id, (
                "üéâ –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ *100%* –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!\n"
                "üöÄ –°–∫–∏–¥–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫!"
            ), parse_mode="Markdown")
            data['subscriptions']['users'][user_id]['discount'] = 0
            data['subscriptions']['users'][user_id]['discount_type'] = None
            data['subscriptions']['users'][user_id]['applicable_category'] = None
            data['subscriptions']['users'][user_id]['applicable_items'] = []

        save_payments_data(data)

        bot.send_message(user_id, (
            "üéâ *–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!*\n\n"
            f"üìÖ *–ù–∞—á–∞–ª–æ:* {start_date.strftime('%d.%m.%Y –≤ %H:%M')}\n"
            f"‚è≥ *–ö–æ–Ω–µ—Ü:* {new_end.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
        ), parse_mode="Markdown")
        bot.answer_callback_query(call.id, "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")

        markup = create_main_menu()
        bot.send_message(user_id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=markup)
        return

    user_discount_amount = round(base_price * (user_discount / 100), 2)
    discounted_price = base_price - user_discount_amount

    MINIMUM_AMOUNT = 55

    final_price = discounted_price - fictitious_discount
    if final_price < MINIMUM_AMOUNT:
        total_discount = base_price - MINIMUM_AMOUNT
        user_discount_amount = min(user_discount_amount, total_discount)
        user_discount_amount = round(user_discount_amount, 2)
        remaining_discount = total_discount - user_discount_amount
        fictitious_discount = min(fictitious_discount, remaining_discount)
        fictitious_discount = round(fictitious_discount, 2)
        final_price = MINIMUM_AMOUNT

    provider_token = PAYMENT_PROVIDER_TOKEN
    currency = "RUB"
    invoice_payload = plan_key

    bot_functions = (
        "üöÄ –í–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫ –≤ –¥–æ—Ä–æ–≥–µ: –æ—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞ –∏ —É—á–µ—Ç–∞ —Ç—Ä–∞—Ç "
        "–¥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –∏ –∞–Ω—Ç–∏—Ä–∞–¥–∞—Ä–∞ ‚Äî –≤—Å–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏ —ç–∫–æ–Ω–æ–º–∏–∏!"
    )

    title = f"üåü –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {label}"
    description = (
        f"‚ú® –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ {label.lower()}!\n"
        f"üí∞ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {base_price:.2f} ‚ÇΩ\n"
    )
    
    prices = [types.LabeledPrice(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {label}", int(base_price * 100))]
    if user_discount > 0 and user_discount_amount > 0:
        description += f"üè∑Ô∏è –°–∫–∏–¥–∫–∞ {user_discount}%: -{user_discount_amount:.2f} ‚ÇΩ\n"
        user_discount_amount_kopecks = int(round(user_discount_amount * 100))
        prices.append(types.LabeledPrice(f"–°–∫–∏–¥–∫–∞ {user_discount}%", -user_discount_amount_kopecks))
    
    if fictitious_discount > 0:
        description += f"üéÅ –ê–∫—Ü–∏–æ–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞: -{fictitious_discount:.2f} ‚ÇΩ\n"
        fictitious_discount_kopecks = int(round(fictitious_discount * 100))
        prices.append(types.LabeledPrice("–ê–∫—Ü–∏–æ–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞", -fictitious_discount_kopecks))

    description += f"üí∏ –ò—Ç–æ–≥: {final_price:.2f} ‚ÇΩ\n\n{bot_functions}"

    total_amount = sum(price.amount for price in prices)
    if total_amount < MINIMUM_AMOUNT * 100:
        prices = [types.LabeledPrice(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {label}", int(MINIMUM_AMOUNT * 100))]
        description += f"\n‚ö†Ô∏è –¶–µ–Ω–∞ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π ({MINIMUM_AMOUNT} ‚ÇΩ) –∏–∑-–∑–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã!\n"

    save_payments_data(data)

    try:
        bot.send_invoice(
            chat_id=user_id,
            title=title,
            description=description,
            invoice_payload=invoice_payload,
            provider_token=provider_token,
            currency=currency,
            prices=prices,
            start_parameter="sub"
        )
    except Exception as e:
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É...")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É")
    item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_back)
    markup.add(item_main)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)
    bot.answer_callback_query(call.id, "–°—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

@bot.message_handler(content_types=['successful_payment'])
def process_successful_payment(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    payment_info = message.successful_payment
    data = load_payment_data()
    user_data = data['subscriptions']['users'].setdefault(user_id, {
        "plans": [], "total_amount": 0, "referral_points": 0, "store_purchases": []
    })

    payload = payment_info.invoice_payload
    user_discount = data['subscriptions']['users'].get(user_id, {}).get('discount', 0)
    applicable_category = data['subscriptions']['users'].get(user_id, {}).get('applicable_category')
    applicable_items = data['subscriptions']['users'].get(user_id, {}).get('applicable_items', [])
    discount_type = data['subscriptions']['users'].get(user_id, {}).get('discount_type', 'promo')

    now = datetime.now()

    if payload in SUBSCRIPTION_PLANS:
        plan_key = payload
        plan_info = SUBSCRIPTION_PLANS[plan_key]
        base_price = plan_info["base_price"]
        fictitious_discount = plan_info["fictitious_discount"]
        plan_duration = plan_info["duration"]

        discount_applicable = (
            applicable_category == "subscriptions" or
            plan_key in applicable_items or
            (applicable_category is None and not applicable_items)
        )
        applied_discount = round(user_discount) if discount_applicable else 0

        user_discount_amount = round(base_price * (applied_discount / 100), 2)
        discounted_price = base_price - user_discount_amount
        price = max(1, round(discounted_price - fictitious_discount, 2))

        if user_data['plans']:
            latest_end = max([datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") for p in user_data['plans']])
            start_date = max(latest_end, now)
        else:
            start_date = now

        new_end = start_date + timedelta(days=plan_duration)

        total_purchases = sum(1 for p in user_data['plans'] if p.get('source') == "user") + 1

        new_loyalty_discount = False
        if total_purchases % 3 == 0 and user_discount < 10:
            data['subscriptions']['users'][user_id]['discount'] = 10
            data['subscriptions']['users'][user_id]['discount_type'] = "loyalty"
            data['subscriptions']['users'][user_id]['applicable_category'] = "subscriptions"
            data['subscriptions']['users'][user_id]['applicable_items'] = []
            new_loyalty_discount = True
            bot.send_message(user_id, (
                "üéâ *–°–ø–∞—Å–∏–±–æ –∑–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å!*\n\n"
                f"‚ú® –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–¥–∫—É *10%* –∑–∞ {total_purchases}-—é –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏!\n"
                "üöÄ –°–∫–∏–¥–∫–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–µ –∏ —Å–±—Ä–æ—Å–∏—Ç—Å—è –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
            ), parse_mode="Markdown")

        user_data['plans'].append({
            "plan_name": plan_key.split('_')[0],
            "start_date": start_date.strftime("%d.%m.%Y –≤ %H:%M"),
            "end_date": new_end.strftime("%d.%m.%Y –≤ %H:%M"),
            "price": price,
            "telegram_payment_charge_id": payment_info.telegram_payment_charge_id,
            "provider_payment_charge_id": payment_info.provider_payment_charge_id,
            "source": "user",
            "user_discount": applied_discount,
            "fictitious_discount": fictitious_discount
        })
        user_data['total_amount'] = user_data.get('total_amount', 0) + price
        data['all_users_total_amount'] = data.get('all_users_total_amount', 0) + price

        is_first_purchase = not any(plan.get('source', 'unknown') == "user" for plan in user_data['plans'][:-1])
        join_date = data['subscriptions']['users'].get(user_id, {}).get('join_date', datetime.now().strftime("%d.%m.%Y –≤ %H:%M"))
        days_since_join = (datetime.now() - datetime.strptime(join_date, "%d.%m.%Y –≤ %H:%M")).days
        bonus_multiplier = 2 if days_since_join <= 7 else 1

        bonus_points = 0
        bonus_msg = ""
        notify_msg = ""
        if is_first_purchase:
            bonus_points = {3: 3, 7: 5, 30: 10, 90: 8, 180: 12, 365: 15}.get(plan_duration, 0)
            bonus_msg = f"–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {plan_duration} –¥–Ω–µ–π"
            notify_msg = f"‚ú® –í—ã –ø–æ–ª—É—á–∏–ª–∏ *+{bonus_points * bonus_multiplier} –±–∞–ª–ª–æ–≤* –∑–∞ –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {plan_duration} –¥–Ω–µ–π!\n"
        else:
            bonus_points = {3: 0.5, 7: 1, 30: 3, 90: 2, 180: 5, 365: 10}.get(plan_duration, 0)
            bonus_msg = f"–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {plan_duration} –¥–Ω–µ–π"
            notify_msg = f"‚ú® –í—ã –ø–æ–ª—É—á–∏–ª–∏ *+{bonus_points * bonus_multiplier} –±–∞–ª–ª–æ–≤* –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!\n"

        if bonus_points > 0:
            bonus_points *= bonus_multiplier
            user_data['referral_points'] += bonus_points
            user_data.setdefault('points_history', []).append({
                "action": "earned",
                "points": bonus_points,
                "reason": bonus_msg,
                "date": datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
            })
            bot.send_message(user_id, (
                f"üéÅ *–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!*\n\n"
                f"{notify_msg}"
                "üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –≤ —Å–∏—Å—Ç–µ–º–µ –±–∞–ª–ª–æ–≤ –∏–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!"
            ), parse_mode="Markdown")

        referrer_id = next((uid for uid, refs in data['referrals']['stats'].items() if user_id in refs), None)
        if referrer_id:
            bonus_days = {3: 0.5, 7: 1, 30: 3, 90: 2, 180: 5, 365: 7}.get(plan_duration, 1)
            new_end_referrer = set_free_trial_period(referrer_id, bonus_days, "referral_activity")
            bot.send_message(referrer_id, (
                "üéâ *–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É!*\n\n"
                f"‚ú® –í—ã –ø–æ–ª—É—á–∏–ª–∏ *+{bonus_days} –¥–µ–Ω—å*!\n"
                f"‚è≥ *–ê–∫—Ç–∏–≤–Ω–æ –¥–æ:* {new_end_referrer.strftime('%d.%m.%Y –≤ %H:%M')}!\n\n"
                "üòä –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!"
            ), parse_mode="Markdown")

        if applied_discount > 0 and discount_type == "loyalty" and not new_loyalty_discount:
            bot.send_message(user_id, (
                f"üéâ –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ *{applied_discount:.0f}%* –±—ã–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!\n"
                "üöÄ –°–∫–∏–¥–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –±–æ–Ω—É—Å–æ–≤!"
            ), parse_mode="Markdown")
            data['subscriptions']['users'][user_id]['discount'] = 0
            data['subscriptions']['users'][user_id]['discount_type'] = None
            data['subscriptions']['users'][user_id]['applicable_category'] = None
            data['subscriptions']['users'][user_id]['applicable_items'] = []
        elif applied_discount > 0 and discount_type == "promo":
            bot.send_message(user_id, (
                f"üéâ –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ *{applied_discount:.0f}%* –±—ã–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!\n"
                "üöÄ –°–∫–∏–¥–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –±–æ–Ω—É—Å–æ–≤!"
            ), parse_mode="Markdown")
            data['subscriptions']['users'][user_id]['discount'] = 0
            data['subscriptions']['users'][user_id]['discount_type'] = None
            data['subscriptions']['users'][user_id]['applicable_category'] = None
            data['subscriptions']['users'][user_id]['applicable_items'] = []

        bot.send_message(user_id, (
            "üéâ *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É*!\n\n"
            f"üí∞ *–û–ø–ª–∞—á–µ–Ω–æ:* {price:.2f} ‚ÇΩ\n\n"
            f"üìÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞—á–Ω—ë—Ç—Å—è:*\n{start_date.strftime('%d.%m.%Y –≤ %H:%M')}\n"
            f"‚è≥ *–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:*\n{new_end.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
        ), parse_mode="Markdown")

    elif payload in STORE_ITEMS:
        item_info = STORE_ITEMS[payload]
        base_price = item_info["base_price"]
        fictitious_discount = item_info["fictitious_discount"]
        label = item_info["label"]

        discount_applicable = (
            applicable_category == "store" or
            payload in applicable_items or
            (applicable_category is None and not applicable_items)
        )
        applied_discount = round(user_discount) if discount_applicable else 0

        user_discount_amount = round(base_price * (applied_discount / 100), 2)
        discounted_price = base_price - user_discount_amount
        MINIMUM_AMOUNT = 55
        price = discounted_price - fictitious_discount
        if price < MINIMUM_AMOUNT:
            total_discount = base_price - MINIMUM_AMOUNT
            user_discount_amount = min(user_discount_amount, total_discount)
            user_discount_amount = round(user_discount_amount, 2)
            remaining_discount = total_discount - user_discount_amount
            fictitious_discount = min(fictitious_discount, remaining_discount)
            fictitious_discount = round(fictitious_discount, 2)
            price = MINIMUM_AMOUNT
        else:
            price = max(1, round(price, 2))

        purchase_date = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        monthly_key = datetime.now().strftime("%m.%Y")

        if 'store_purchases' not in user_data:
            user_data['store_purchases'] = []

        monthly_points = sum(p['points'] for p in user_data['store_purchases'] if p['purchase_date'].startswith(monthly_key))
        monthly_days = sum(p['duration'] for p in user_data['store_purchases'] if p['purchase_date'].startswith(monthly_key))

        if payload.startswith("points_"):
            points = item_info["points"]
            if monthly_points + points > 3000:
                bot.send_message(user_id, (
                    "‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ–∫—É–ø–∫–∏ –±–∞–ª–ª–æ–≤ –≤ —Ä–∞–∑–º–µ—Ä–µ 3000!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ..."
                ), parse_mode="Markdown")
                return

            user_data['referral_points'] += points
            user_data.setdefault('points_history', []).append({
                "action": "earned",
                "points": points,
                "reason": f"–ü–æ–∫—É–ø–∫–∞ {label}",
                "date": purchase_date
            })

            user_data['store_purchases'].append({
                "item_key": payload,
                "label": label,
                "points": points,
                "duration": 0,
                "price": price,
                "purchase_date": purchase_date,
                "telegram_payment_charge_id": payment_info.telegram_payment_charge_id,
                "provider_payment_charge_id": payment_info.provider_payment_charge_id,
                "source": "user",
                "user_discount": applied_discount,
                "fictitious_discount": fictitious_discount
            })

            bot.send_message(user_id, (
                f"üéâ *–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!*\n\n"
                f"üí∞ *–û–ø–ª–∞—á–µ–Ω–æ:* {price:.2f} ‚ÇΩ\n"
                f"üéÅ *–ü–æ–ª—É—á–µ–Ω–æ:* {points} –±–∞–ª–ª–æ–≤\n\n"
                "üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –≤ —Å–∏—Å—Ç–µ–º–µ –±–∞–ª–ª–æ–≤!"
            ), parse_mode="Markdown")

        elif payload.startswith("time_"):
            duration = item_info["duration"]
            if monthly_days + duration > 365:
                bot.send_message(user_id, (
                    "‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ–∫—É–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ 365 –¥–Ω–µ–π!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ..."
                ), parse_mode="Markdown")
                return

            if user_data['plans']:
                latest_end = max([datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") for p in user_data['plans']])
                start_date = max(latest_end, now)
            else:
                start_date = now

            new_end = start_date + timedelta(days=duration)

            user_data['plans'].append({
                "plan_name": "store_time",
                "start_date": start_date.strftime("%d.%m.%Y –≤ %H:%M"),
                "end_date": new_end.strftime("%d.%m.%Y –≤ %H:%M"),
                "price": price,
                "telegram_payment_charge_id": payment_info.telegram_payment_charge_id,
                "provider_payment_charge_id": payment_info.provider_payment_charge_id,
                "source": "store",
                "user_discount": applied_discount,
                "fictitious_discount": fictitious_discount
            })

            user_data['store_purchases'].append({
                "item_key": payload,
                "label": label,
                "points": 0,
                "duration": duration,
                "price": price,
                "purchase_date": purchase_date,
                "telegram_payment_charge_id": payment_info.telegram_payment_charge_id,
                "provider_payment_charge_id": payment_info.provider_payment_charge_id,
                "source": "user",
                "user_discount": applied_discount,
                "fictitious_discount": fictitious_discount
            })

            bot.send_message(user_id, (
                f"üéâ *–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!*\n\n"
                f"üí∞ *–û–ø–ª–∞—á–µ–Ω–æ:* {price:.2f} ‚ÇΩ\n"
                f"üìÖ *–ü–æ–ª—É—á–µ–Ω–æ:* {duration} –¥–Ω–µ–π\n\n"
                f"üïí *–ù–∞—á–∞–ª–æ:* {start_date.strftime('%d.%m.%Y –≤ %H:%M')}\n"
                f"‚åõ *–ö–æ–Ω–µ—Ü:* {new_end.strftime('%d.%m.%Y –≤ %H:%M')}\n"
            ), parse_mode="Markdown")

        if applied_discount > 0 and discount_type == "promo":
            bot.send_message(user_id, (
                f"üéâ –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ *{applied_discount:.0f}%* –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!\n"
                "üöÄ –¢–µ–ø–µ—Ä—å —Å–∫–∏–¥–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫!"
            ), parse_mode="Markdown")
            data['subscriptions']['users'][user_id]['discount'] = 0
            data['subscriptions']['users'][user_id]['discount_type'] = None
            data['subscriptions']['users'][user_id]['applicable_category'] = None
            data['subscriptions']['users'][user_id]['applicable_items'] = []

        user_data['total_amount'] = user_data.get('total_amount', 0) + price
        data['all_users_total_amount'] = data.get('all_users_total_amount', 0) + price

    else:
        bot.send_message(user_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞!\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É...")
        return

    save_payments_data(data)

    markup = create_main_menu()
    bot.send_message(user_id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=markup)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
@check_function_state_decorator('–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏')
@track_usage('–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def refund_payment_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏', '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:", reply_markup=markup, parse_mode="Markdown")

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏) -----------------------------------------

def translate_plan_name(plan_name):
    return {
        "free": "–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", "referral_bonus": "—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å", "ad_bonus": "—Ä–µ–∫–ª–∞–º–Ω—ã–π –±–æ–Ω—É—Å",     
        "trial": "3 –¥–Ω—è", "weekly": "7 –¥–Ω–µ–π", "monthly": "30 –¥–Ω–µ–π", "quarterly": "90 –¥–Ω–µ–π", "semiannual": "180 –¥–Ω–µ–π", "yearly": "365 –¥–Ω–µ–π",                   
        "points_bonus": "–±–æ–Ω—É—Å –∑–∞ –±–∞–ª–ª—ã", "gift_time": "–ø–æ–¥–∞—Ä–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è", "referral": "–±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞",    
        "monthly_leader_bonus": "–±–æ–Ω—É—Å –ª–∏–¥–µ—Ä–∞ –º–µ—Å—è—Ü–∞", "leaderboard": "–±–æ–Ω—É—Å —Ç–æ–ø-1", "store_time": "–≤—Ä–µ–º—è –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞",  
        "custom": "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π", "exchange_time": "–æ–±–º–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"    
    }.get(plan_name, plan_name)

def send_long_message(chat_id, message_text, parse_mode='Markdown'):
    max_length = 4096
    for i in range(0, len(message_text), max_length):
        bot.send_message(chat_id, message_text[i:i + max_length], parse_mode=parse_mode)

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏")
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_subscription(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    user_id = message.from_user.id
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(str(user_id), {})

    if 'plans' not in user_data or not user_data['plans']:
        bot.send_message(user_id, (
            "‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫!*\n\n"
            "üöÄ –ü–æ–ø—Ä–æ–±—É–π –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n"
            "üëâ –ü–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª *¬´–∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª*!"
        ), parse_mode="Markdown")
        return

    now = datetime.now()
    active_plans = [p for p in user_data['plans'] if datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") > now]
    if not active_plans:
        bot.send_message(user_id, (
            "‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫!*\n\n"
            "üöÄ –ü–æ–¥–∫–ª—é—á–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!\n"
            "üëâ –ü–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª *¬´–∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª*!"
        ), parse_mode="Markdown")
        return

    plans_summary = "üíé *–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:*\n\n"
    total_cost_active = 0

    unit_display = {
        '–º–∏–Ω—É—Ç—ã': '–º–∏–Ω.',
        '—á–∞—Å—ã': '—á.',
        '–¥–Ω–∏': '–¥–Ω.'
    }

    for idx, plan in enumerate(active_plans):
        end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
        remaining_time = end_date - now
        days_left = remaining_time.days
        hours_left, remainder = divmod(remaining_time.seconds, 3600)
        minutes_left = remainder // 60

        plan_name_lower = plan['plan_name'].lower()
        source = plan.get('source', '')

        if plan_name_lower in {"free", "referral_bonus", "ad_bonus", "activity", "points_bonus", "referral", "monthly_leader_bonus", "leaderboard"}:
            period_type = f"üéÅ *‚Ññ{idx + 1}. –ë–æ–Ω—É—Å–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            subscription_type = translate_plan_name(plan_name_lower)
        elif plan_name_lower in {"gift_time", "custom", "exchangetime"}:
            period_type = f"‚ú® *‚Ññ{idx + 1}. –ü–æ–¥–∞—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            if plan_name_lower == "custom":
                duration_value = int(plan.get('duration_value', 1))
                duration_unit = plan.get('duration_unit', '–¥–Ω–∏')
                subscription_type = f"–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π ({duration_value} {unit_display.get(duration_unit, '–¥–Ω.')})"
            else:
                subscription_type = translate_plan_name(plan_name_lower)
        else:
            if source in {"user", "promo_100_percent", "store"}:
                period_type = f"üí≥ *‚Ññ{idx + 1}. –ü–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            else:
                period_type = f"üì¶ *‚Ññ{idx + 1}. –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            subscription_type = translate_plan_name(plan_name_lower)

        start_date = plan['start_date']
        end_date_str = plan['end_date']
        price_formatted = f"{plan['price']:.2f}"

        plans_summary += (
            f"{period_type}\n\n"
            f"üíº *–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:* {subscription_type}\n"
            f"üìÖ *–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å:* {days_left} –¥–Ω–µ–π –∏ {hours_left:02d}:{minutes_left:02d} —á–∞—Å–æ–≤\n"
            f"üïí *–ù–∞—á–∞–ª–æ:* {start_date}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {end_date_str}\n"
            f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:* {price_formatted} —Ä—É–±.\n\n"
        )
        total_cost_active += plan['price']

    send_long_message(message.chat.id, plans_summary) 

    subtypes = []
    for p in active_plans:
        plan_name_lower = p['plan_name'].lower()
        if plan_name_lower == 'custom':
            duration_value = int(p.get('duration_value', 1))
            duration_unit = p.get('duration_unit', '–¥–Ω–∏')
            subtypes.append(f"–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π ({duration_value} {unit_display.get(duration_unit, '–¥–Ω.')})")
        else:
            subtypes.append(translate_plan_name(plan_name_lower))

    start_date = min(datetime.strptime(p['start_date'], "%d.%m.%Y –≤ %H:%M") for p in active_plans).strftime("%d.%m.%Y –≤ %H:%M")
    end_date = max(datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") for p in active_plans)
    total_remaining_time = end_date - now
    total_days_left = total_remaining_time.days
    hours_left, remainder = divmod(total_remaining_time.seconds, 3600)
    minutes_left = remainder // 60
    end_date_str = end_date.strftime("%d.%m.%Y –≤ %H:%M")
    total_cost_active_formatted = f"{total_cost_active:.2f}"
    total_amount = user_data.get('total_amount', 0)
    total_amount_formatted = f"{total_amount:.2f}"

    summary_message = (
        "üíé *–ò—Ç–æ–≥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:*\n\n"
        f"üíº *–¢–∏–ø—ã –ø–æ–¥–ø–∏—Å–æ–∫:* {', '.join(t for t in subtypes)}\n"
        f"üìÖ *–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å:* {total_days_left} –¥–Ω–µ–π –∏ {hours_left:02d}:{minutes_left:02d} —á–∞—Å–æ–≤\n"
        f"üïí *–ù–∞—á–∞–ª–æ:* {start_date}\n"
        f"‚åõ *–ö–æ–Ω–µ—Ü:* {end_date_str}\n"
        f"üí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:* {total_cost_active_formatted} —Ä—É–±.\n"
        f"üí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫:* {total_amount_formatted} —Ä—É–±.\n"
    )
    send_long_message(message.chat.id, summary_message) 

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–∏—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫")
@check_function_state_decorator('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫')
@track_usage('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_subscription_history(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    user_id = str(message.from_user.id)
    data = load_payment_data()
    history_plans = data['subscription_history'].get(user_id, [])

    if not history_plans:
        bot.send_message(message.chat.id, (
            "‚ùå *–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫!*\n"
            "üöÄ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞!"
        ), parse_mode="Markdown")
        return

    now = datetime.now(pytz.UTC)
    plans_summary = "üìú *–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫:*\n\n"

    unit_display = {
        '–º–∏–Ω—É—Ç—ã': '–º–∏–Ω.',
        '—á–∞—Å—ã': '—á.',
        '–¥–Ω–∏': '–¥–Ω.'
    }

    for idx, plan in enumerate(history_plans):
        plan_status = plan.get('status', 'expired')
        end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M").replace(tzinfo=pytz.UTC)
        elapsed_time = now - end_date if plan_status != 'active' else None
        days_elapsed = elapsed_time.days if elapsed_time else 0
        hours_elapsed, remainder = divmod(elapsed_time.seconds, 3600) if elapsed_time else (0, 0)
        minutes_elapsed = remainder // 60 if elapsed_time else 0

        plan_name_lower = plan['plan_name'].lower()
        source = plan.get('source', '')

        if plan_name_lower in {"free", "referral_bonus", "ad_bonus", "activity", "points_bonus", "referral", "monthly_leader_bonus", "leaderboard"}:
            period_type = f"üéÅ *‚Ññ{idx + 1}. –ë–æ–Ω—É—Å–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            subscription_type = translate_plan_name(plan_name_lower)
        elif plan_name_lower in {"gift_time", "custom", "exchangetime"}:
            period_type = f"‚ú® *‚Ññ{idx + 1}. –ü–æ–¥–∞—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            if plan_name_lower == "custom":
                duration_value = int(plan.get('duration_value', 1))
                duration_unit = plan.get('duration_unit', '–¥–Ω–∏')
                subscription_type = f"–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π ({duration_value} {unit_display.get(duration_unit, '–¥–Ω.')})"
            else:
                subscription_type = translate_plan_name(plan_name_lower)
        else:
            if source in {"user", "promo_100_percent", "store"}:
                period_type = f"üí≥ *‚Ññ{idx + 1}. –ü–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            else:
                period_type = f"üì¶ *‚Ññ{idx + 1}. –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            subscription_type = translate_plan_name(plan_name_lower)

        start_date = plan['start_date']
        end_date_str = plan['end_date']
        price_formatted = f"{plan['price']:.2f}"

        plans_summary += (
            f"{period_type}\n\n"
            f"üíº *–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:* {subscription_type}\n"
            f"üìÖ *–ù–∞—á–∞–ª–æ:* {start_date}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {end_date_str}\n"
        )
        if plan_status == 'cancelled':
            plans_summary += f"üö´ *–°—Ç–∞—Ç—É—Å:* –û—Ç–º–µ–Ω–µ–Ω–∞\n"
            if plan.get('refunded', False):
                plans_summary += (
                    f"üí∏ *–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ:* {plan.get('refund_amount', 0):.2f} —Ä—É–±.\n"
                    f"üÜî *ID –≤–æ–∑–≤—Ä–∞—Ç–∞:* {plan.get('refund_id', '–ù–µ –ø—Ä–∏—Å–≤–æ–µ–Ω')}\n"
                    f"üìÖ *–î–∞—Ç–∞ –æ—Ç–º–µ–Ω—ã:* {plan.get('cancelled_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                )
        else:
            plans_summary += f"üìà *–°—Ç–∞—Ç—É—Å:* {'–ê–∫—Ç–∏–≤–Ω–∞' if plan_status == 'active' else '–ò—Å—Ç–µ–∫–ª–∞'}\n"
            if plan_status != 'active':
                plans_summary += f"‚è≥ *–î–Ω–µ–π –ø—Ä–æ—à–ª–æ:* {days_elapsed} –¥–Ω–µ–π –∏ {hours_elapsed:02d}:{minutes_elapsed:02d} —á–∞—Å–æ–≤\n"
        plans_summary += f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:* {price_formatted} —Ä—É–±.\n\n"

    send_long_message(message.chat.id, plans_summary)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–≤–æ–∑–≤—Ä–∞—Ç) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–í–æ–∑–≤—Ä–∞—Ç")
@check_function_state_decorator('–í–æ–∑–≤—Ä–∞—Ç')
@track_usage('–í–æ–∑–≤—Ä–∞—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def refund_payment_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏', '–ò—Å—Ç–æ—Ä–∏—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞:", reply_markup=markup, parse_mode="Markdown")

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏) -----------------------------------------

PAYMASTER_MERCHANT_ID = "1744374395"
PAYMASTER_SECRET_KEY = "93aa42be8420f58d5243"
PAYMASTER_API_URL = "https://paymaster.ru/api/v2/"
PAYMASTER_TOKEN = "1744374395:TEST:93aa42be8420f58d5243"
REFUND_COMMISSION = 0.25
MIN_REFUND_AMOUNT = 1.0
MAX_REFUNDS_PER_MONTH = 3
MAX_REFUNDS_PER_YEAR = 12
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PAYMENTS_FILE = os.path.join(BASE_DIR, "data", "admin", "admin_user_payments", "payments.json")

def calculate_refunded_amount(plan):
    try:
        end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M").replace(tzinfo=pytz.UTC)
        start_date = datetime.strptime(plan['start_date'], "%d.%m.%Y –≤ %H:%M").replace(tzinfo=pytz.UTC)
        now = datetime.now(pytz.UTC)

        if plan['price'] <= 100:
            return 0.0, "–ü–æ–¥–ø–∏—Å–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 100 —Ä—É–±–ª–µ–π –∏ –º–µ–Ω–µ–µ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –≤–æ–∑–≤—Ä–∞—Ç—É!"

        if plan['price'] <= 0:
            return 0.0, "–ü–æ–¥–ø–∏—Å–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –≤–æ–∑–≤—Ä–∞—Ç—É!"

        if now >= end_date:
            return 0.0, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞!"

        total_days = (end_date - start_date).days
        if total_days <= 0:
            return 0.0, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏!"

        if now < start_date:
            refund_amount = plan['price']
            commission = refund_amount * REFUND_COMMISSION
            if refund_amount <= commission:
                return 0.0, "–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–µ–Ω—å—à–µ –∫–æ–º–∏—Å—Å–∏–∏!"
            return round(refund_amount - commission, 2), None

        remaining_time = end_date - now
        remaining_days = max(0, min(total_days, remaining_time.total_seconds() / (24 * 3600)))
        daily_cost = plan['price'] / total_days
        refund_amount = daily_cost * remaining_days
        refund_amount = min(refund_amount, plan['price'])
        commission = refund_amount * REFUND_COMMISSION
        if refund_amount <= commission:
            return 0.0, "–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–µ–Ω—å—à–µ –∫–æ–º–∏—Å—Å–∏–∏!"
        final_refunded = refund_amount - commission
        final_refunded = round(final_refunded, 2)

        if final_refunded < MIN_REFUND_AMOUNT:
            return 0.0, "–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞!"

        return final_refunded, None
    except Exception as e:
        return 0.0, f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {str(e)}"

def check_refund_limits(user_id):
    data = load_payment_data()
    now = datetime.now(pytz.UTC)
    current_month = now.strftime("%m.%Y")
    current_year = now.strftime("%Y")
    user_refunds = data.get("refunds", [])
    
    monthly_refunds = [r for r in user_refunds if r["user_id"] == str(user_id) and r["refund_date"].startswith(current_month)]
    yearly_refunds = [r for r in user_refunds if r["user_id"] == str(user_id) and r["refund_date"].split(" –≤ ")[0][-4:] == current_year]
    
    if len(monthly_refunds) >= MAX_REFUNDS_PER_MONTH:
        return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ ({MAX_REFUNDS_PER_MONTH})!"
    if len(yearly_refunds) >= MAX_REFUNDS_PER_YEAR:
        return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –≥–æ–¥–æ–≤–æ–π –ª–∏–º–∏—Ç –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ ({MAX_REFUNDS_PER_YEAR})!"
    return True, None

def check_daily_payment_limit(refund_amount):
    try:
        headers = {"Authorization": f"Bearer {PAYMASTER_TOKEN}"}
        today = datetime.now(pytz.UTC).strftime("%Y-%m-%d")
        response = requests.get(f"{PAYMASTER_API_URL}payments?dateFrom={today}&dateTo={today}", headers=headers)
        response.raise_for_status()
        payments = response.json().get("payments", [])
        total_successful = sum(float(p["amount"]["value"]) for p in payments if p["status"] == "success")
        if total_successful < refund_amount:
            return False, f"–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ ({refund_amount:.2f} —Ä—É–±.) –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å—É–º–º—É —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –¥–µ–Ω—å ({total_successful:.2f} —Ä—É–±.)!"
        return True, None
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π: {str(e)}"

def refund_payment(user_id, refund_amount, payment_id, plan):
    can_refund, limit_error = check_daily_payment_limit(refund_amount)
    if not can_refund:
        data = load_payment_data()
        if "refunds" not in data:
            data["refunds"] = []
        refund_record = {
            "user_id": str(user_id),
            "plan_name": plan["plan_name"],
            "refund_amount": refund_amount,
            "refund_date": datetime.now(pytz.UTC).strftime("%d.%m.%Y –≤ %H:%M"),
            "telegram_payment_charge_id": plan.get("telegram_payment_charge_id", ""),
            "provider_payment_charge_id": payment_id,
            "refund_id": None,
            "status": "failed",
            "error": limit_error
        }
        data["refunds"].append(refund_record)
        save_payments_data(data)
        return None, "failed"

    refund_data = {
        "paymentId": payment_id,
        "amount": {
            "value": f"{refund_amount:.2f}",
            "currency": "RUB"
        }
    }
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {PAYMASTER_TOKEN}",
        "Idempotency-Key": f"{user_id}_{int(datetime.now(pytz.UTC).timestamp())}"
    }
    try:
        response = requests.post(f"{PAYMASTER_API_URL}refunds", json=refund_data, headers=headers)
        response.raise_for_status()
        result = response.json()
        refund_id = result.get("id")
        status = result.get("status", "pending").lower()
        data = load_payment_data()
        if "refunds" not in data:
            data["refunds"] = []
        refund_record = {
            "user_id": str(user_id),
            "plan_name": plan["plan_name"],
            "refund_amount": refund_amount,
            "refund_date": datetime.now(pytz.UTC).strftime("%d.%m.%Y –≤ %H:%M"),
            "telegram_payment_charge_id": plan.get("telegram_payment_charge_id", ""),
            "provider_payment_charge_id": payment_id,
            "refund_id": refund_id,
            "status": status,
            "error": None
        }
        data["refunds"].append(refund_record)
        save_payments_data(data)
        return refund_id, status
    except requests.exceptions.HTTPError as e:
        error_message = f"–û—à–∏–±–∫–∞ API PayMaster: {str(e)}"
        if e.response.status_code == 400:
            error_message = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞ –∏ —Å—É–º–º—É"
        elif e.response.status_code == 403:
            error_message = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏..."
        data = load_payment_data()
        if "refunds" not in data:
            data["refunds"] = []
        refund_record = {
            "user_id": str(user_id),
            "plan_name": plan["plan_name"],
            "refund_amount": refund_amount,
            "refund_date": datetime.now(pytz.UTC).strftime("%d.%m.%Y –≤ %H:%M"),
            "telegram_payment_charge_id": plan.get("telegram_payment_charge_id", ""),
            "provider_payment_charge_id": payment_id,
            "refund_id": None,
            "status": "failed",
            "error": error_message
        }
        data["refunds"].append(refund_record)
        save_payments_data(data)
        return None, "failed"
    except Exception as e:
        data = load_payment_data()
        if "refunds" not in data:
            data["refunds"] = []
        refund_record = {
            "user_id": str(user_id),
            "plan_name": plan["plan_name"],
            "refund_amount": refund_amount,
            "refund_date": datetime.now(pytz.UTC).strftime("%d.%m.%Y –≤ %H:%M"),
            "telegram_payment_charge_id": plan.get("telegram_payment_charge_id", ""),
            "provider_payment_charge_id": payment_id,
            "refund_id": None,
            "status": "failed",
            "error": str(e)
        }
        data["refunds"].append(refund_record)
        save_payments_data(data)
        return None, "failed"

@bot.message_handler(func=lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏")
@check_function_state_decorator('–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏')
@track_usage('–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def cancel_subscription(message):
    user_id = message.from_user.id
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(str(user_id), {})

    if 'plans' not in user_data or not user_data['plans']:
        bot.send_message(user_id, (
            "‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫!*\n\n"
            "üöÄ –ü–æ–ø—Ä–æ–±—É–π –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n"
            "üëâ –ü–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª *¬´–∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª*!"
        ), parse_mode="Markdown")
        payments_function(message, show_description=False)
        return

    now = datetime.now(pytz.UTC)
    refundable_plans = [
        p for p in user_data['plans']
        if p['plan_name'] in ['trial', 'weekly', 'monthly', 'quarterly', 'semiannual', 'yearly', 'store_time']
        and p['source'] in ['user', 'store', 'promo_100_percent']
        and datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M").replace(tzinfo=pytz.UTC) > now
        and p.get('provider_payment_charge_id')
        and p['price'] > 100 
    ]

    if not refundable_plans:
        bot.send_message(user_id, (
            "‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –±–æ–ª–µ–µ 100 —Ä—É–±–ª–µ–π, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞!*\n\n"
            "üöÄ –ü–æ–¥–∫–ª—é—á–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!\n"
            "üëâ –ü–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª *¬´–∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª*!"
        ), parse_mode="Markdown")
        payments_function(message, show_description=False)
        return

    can_refund, limit_error = check_refund_limits(user_id)
    if not can_refund:
        bot.send_message(user_id, f"‚ö†Ô∏è *{limit_error}!*\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ", parse_mode="Markdown")
        payments_function(message, show_description=False)
        return

    plans_summary = "üíé *–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:*\n\n"
    for idx, plan in enumerate(refundable_plans):
        end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M").replace(tzinfo=pytz.UTC)
        start_date = datetime.strptime(plan['start_date'], "%d.%m.%Y –≤ %H:%M").replace(tzinfo=pytz.UTC)
        
        if start_date > now:
            remaining_time = end_date - start_date
        else:
            remaining_time = end_date - now
        
        days_left = remaining_time.days
        hours_left, remainder = divmod(remaining_time.seconds, 3600)
        minutes_left = remainder // 60
        
        subscription_type = translate_plan_name(plan['plan_name'])
        price_formatted = f"{plan['price']:.2f}"
        refund_amount, error = calculate_refunded_amount(plan)
        refund_status = f"üí∏ –í–æ–∑–º–æ–∂–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç: {refund_amount:.2f} —Ä—É–±." if not error else f"‚ö†Ô∏è {error}"
        plans_summary += (
            f"üí≥ *‚Ññ{idx + 1}. –ü–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*\n\n"
            f"üíº *–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:* {subscription_type}\n"
            f"üìÖ *–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å:* {days_left} –¥–Ω–µ–π –∏ {hours_left:02d}:{minutes_left:02d} —á–∞—Å–æ–≤\n"
            f"üïí *–ù–∞—á–∞–ª–æ:* {plan['start_date']}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {plan['end_date']}\n"
            f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:* {price_formatted} —Ä—É–±.\n"
            f"{refund_status}\n\n"
        )

    send_long_message(user_id, plans_summary)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, confirm_cancellation_step, refundable_plans=refundable_plans)

def confirm_cancellation_step(message, refundable_plans):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    try:
        subscription_numbers = [int(num.strip()) for num in message.text.split(',')]
        valid_numbers = [num for num in subscription_numbers if 1 <= num <= len(refundable_plans)]
        invalid_numbers = [num for num in subscription_numbers if num not in valid_numbers]

        if not valid_numbers:
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É")
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            bot.send_message(user_id, "‚ö†Ô∏è –í—Å–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞:", reply_markup=markup, parse_mode="Markdown")
            bot.register_next_step_handler(message, confirm_cancellation_step, refundable_plans=refundable_plans)
            return

        if invalid_numbers:
            bot.send_message(user_id, f"‚ö†Ô∏è –ù–æ–º–µ—Ä–∞ `{invalid_numbers}` –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã!", parse_mode="Markdown")

        refund_summary = "*–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã:*\n\n"
        total_refunded = 0.0
        selected_plans = []
        for num in valid_numbers:
            plan = refundable_plans[num - 1]
            refund_amount, error = calculate_refunded_amount(plan)
            if error:
                refund_summary += f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ ‚Ññ{num}: {error}\n"
                continue
            now = datetime.now(pytz.UTC)
            end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M").replace(tzinfo=pytz.UTC)
            start_date = datetime.strptime(plan['start_date'], "%d.%m.%Y –≤ %H:%M").replace(tzinfo=pytz.UTC)
            total_days = (end_date - start_date).days
            remaining_time = end_date - now
            remaining_days = max(0, min(total_days, remaining_time.total_seconds() / (24 * 3600)))
            commission = refund_amount / (1 - REFUND_COMMISSION) * REFUND_COMMISSION
            refund_summary += (
                f"üí≥ *–ü–æ–¥–ø–∏—Å–∫–∞ ‚Ññ{num}*\n\n"
                f"üíº *–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:* {translate_plan_name(plan['plan_name'])}\n"
                f"üìÖ *–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:* {remaining_days:.2f}\n"
                f"üí∏ *–í–æ–∑–≤—Ä–∞—Ç:* {refund_amount:.2f} —Ä—É–±.\n"
                f"üí∏ *–ö–æ–º–∏—Å—Å–∏—è:* {commission:.2f} —Ä—É–±.\n\n"
            )
            total_refunded += refund_amount
            selected_plans.append((num, plan))

        if total_refunded == 0:
            bot.send_message(user_id, "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞!", parse_mode="Markdown")
            payments_function(message, show_description=False)
            return

        refund_summary += f"üì• –ò—Ç–æ–≥–æ: *{total_refunded:.2f} —Ä—É–±.*"
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–û—Ç–º–µ–Ω–∏—Ç—å")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, refund_summary, parse_mode="Markdown")
        bot.send_message(user_id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        bot.register_next_step_handler(message, process_cancellation_step, selected_plans=selected_plans, total_refunded=total_refunded)
    except ValueError:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞:", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, confirm_cancellation_step, refundable_plans=refundable_plans)

def process_cancellation_step(message, selected_plans, total_refunded):
    user_id = message.from_user.id
    user_id_str = str(user_id)

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        bot.send_message(user_id, "‚ùå –í–æ–∑–≤—Ä–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω!", parse_mode="Markdown")
        payments_function(message, show_description=False)
        return
    if message.text != "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        bot.send_message(user_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!", parse_mode="Markdown")
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–û—Ç–º–µ–Ω–∏—Ç—å")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        bot.register_next_step_handler(message, process_cancellation_step, selected_plans=selected_plans, total_refunded=total_refunded)
        return

    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(user_id_str, {'plans': [], 'total_amount': 0})
    if user_id_str not in data['subscription_history']:
        data['subscription_history'][user_id_str] = []

    successful_refunds = []
    failed_refunds = []

    for num, plan in selected_plans:
        refund_amount, error = calculate_refunded_amount(plan)
        if error:
            failed_refunds.append((num, error))
            continue

        payment_id = plan.get('provider_payment_charge_id', '')
        if not payment_id:
            failed_refunds.append((num, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–ª–∞—Ç–µ–∂–∞!"))
            continue

        refund_id, status = refund_payment(user_id, refund_amount, payment_id, plan)
        if status == "failed":
            failed_refunds.append((num, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞!"))
            continue

        original_start_date = plan['start_date']
        plan['status'] = 'cancelled'
        plan['refunded'] = refund_amount > 0
        plan['refund_id'] = refund_id
        plan['refund_status'] = status
        plan['cancelled_date'] = datetime.now(pytz.UTC).strftime("%d.%m.%Y –≤ %H:%M")

        data['subscription_history'][user_id_str].append(plan)
        user_data['plans'].remove(plan)
        user_data['total_amount'] = max(0, user_data.get('total_amount', 0) - refund_amount)
        data['all_users_total_amount'] = max(0, data.get('all_users_total_amount', 0) - refund_amount)

        successful_refunds.append({
            "number": num,
            "plan_name": plan['plan_name'],
            "refund_amount": refund_amount,
            "refund_id": refund_id,
            "status": status,
            "original_start_date": original_start_date
        })

    save_payments_data(data)

    result_message = "üìã *–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫:*\n\n"
    for refund in successful_refunds:
        result_message += ( 
            f"‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ ‚Ññ{refund['number']}*\n\n"
            f"üíº *–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:* {translate_plan_name(refund['plan_name'])}\n"
            f"üí∏ *–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ:* {refund['refund_amount']:.2f} —Ä—É–±.\n"
            f"üìÖ *–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏:* {refund['original_start_date']}\n"
            f"üÜî *ID –≤–æ–∑–≤—Ä–∞—Ç–∞:* {refund['refund_id'] or '–Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω'}\n"
            f"üìà *–°—Ç–∞—Ç—É—Å:* {refund['status'].capitalize()}\n"
            f"üí≥ –û–∂–∏–¥–∞–π—Ç–µ –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≤–∞—à —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ *1‚Äì7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π*...\n\n"
        )
    for num, error in failed_refunds:
        plan = next((p for n, p in selected_plans if n == num), None)
        plan_name = plan['plan_name'] if plan else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
        result_message += (
            f"‚ùå *–ü–æ–¥–ø–∏—Å–∫–∞ ‚Ññ{num}*\n\n"
            f"üíº *–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:* {translate_plan_name(plan_name)}\n"
            f"‚ö†Ô∏è *–û—à–∏–±–∫–∞:* {error}\n"
            f"üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã!\n\n"
        )

    if successful_refunds:
        result_message += f"üì• *–ò—Ç–æ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ:* {total_refunded:.2f} —Ä—É–±.\n"
    if not successful_refunds and not failed_refunds:
        result_message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏!"

    send_long_message(user_id, result_message)
    payments_function(message, show_description=False)

def background_refund_status_check():
    while True:
        data = load_payment_data()
        pending_refunds = [r for r in data.get("refunds", []) if r["status"] in ["pending", "processing"]]
        for refund in pending_refunds:
            refund_id = refund.get("refund_id")
            if not refund_id:
                continue
            try:
                headers = {"Authorization": f"Bearer {PAYMASTER_TOKEN}"}
                response = requests.get(f"{PAYMASTER_API_URL}refunds/{refund_id}", headers=headers)
                response.raise_for_status()
                result = response.json()
                new_status = result.get("status", "pending").lower()
                if new_status != refund["status"]:
                    refund["status"] = new_status
                    refund["last_updated"] = datetime.now(pytz.UTC).strftime("%d.%m.%Y –≤ %H:%M")
                    user_id = refund["user_id"]
                    status_message = (
                        f"üìã *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:*\n\n"
                        f"üí≥ –ü–æ–¥–ø–∏—Å–∫–∞: {translate_plan_name(refund['plan_name'])}\n"
                        f"üí∏ –°—É–º–º–∞: {refund['refund_amount']:.2f} —Ä—É–±.\n"
                        f"üÜî ID –≤–æ–∑–≤—Ä–∞—Ç–∞: {refund_id}\n"
                        f"üìà –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status.capitalize()}\n"
                        f"üìÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {refund['last_updated']}\n"
                    )
                    if new_status == "success":
                        status_message += "‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1‚Äì7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π!"
                    elif new_status == "failed":
                        status_message += "‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É..."
                    safe_send_message(user_id, status_message, parse_mode="Markdown")
                    save_payments_data(data)
            except Exception as e:
                refund["status"] = "failed"
                refund["error"] = str(e)
                refund["last_updated"] = datetime.now(pytz.UTC).strftime("%d.%m.%Y –≤ %H:%M")
                safe_send_message(refund["user_id"], (
                    f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:*\n\n"
                    f"üí≥ –ü–æ–¥–ø–∏—Å–∫–∞: {translate_plan_name(refund['plan_name'])}\n"
                    f"üí∏ –°—É–º–º–∞: {refund['refund_amount']:.2f} —Ä—É–±.\n"
                    f"üÜî ID –≤–æ–∑–≤—Ä–∞—Ç–∞: {refund_id}\n"
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}\n"
                    f"üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
                ), parse_mode="Markdown")
                save_payments_data(data)
        time.sleep(3600)

refund_status_thread = threading.Thread(target=background_refund_status_check, daemon=True)
refund_status_thread.start()

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–∏—Å—Ç–æ—Ä–∏—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ò—Å—Ç–æ—Ä–∏—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤")
@check_function_state_decorator('–ò—Å—Ç–æ—Ä–∏—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤')
@track_usage('–ò—Å—Ç–æ—Ä–∏—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_refund_history(message):
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_refunds = [r for r in data.get('refunds', []) if r['user_id'] == user_id]

    if not user_refunds:
        bot.send_message(user_id, (
            "‚ùå *–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤!*\n"
            "üöÄ –ù–∞—á–Ω–∏—Ç–µ —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!"
        ), parse_mode="Markdown")
        return

    refunds_summary = "üìú *–ò—Å—Ç–æ—Ä–∏—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤:*\n\n"
    for idx, refund in enumerate(user_refunds):
        refunds_summary += (
            f"üí≥ *–í–æ–∑–≤—Ä–∞—Ç ‚Ññ{idx + 1}:*\n"
            f"üíº –ü–æ–¥–ø–∏—Å–∫–∞: {translate_plan_name(refund['plan_name'])}\n"
            f"üí∏ –°—É–º–º–∞: {refund['refund_amount']:.2f} —Ä—É–±.\n"
            f"üìÖ –î–∞—Ç–∞: {refund['refund_date']}\n"
            f"üÜî ID –≤–æ–∑–≤—Ä–∞—Ç–∞: {refund.get('refund_id', '–ù–µ –ø—Ä–∏—Å–≤–æ–µ–Ω')}\n"
            f"üìà –°—Ç–∞—Ç—É—Å: {refund['status'].capitalize()}\n"
        )
        if refund.get('error'):
            refunds_summary += f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {refund['error']}\n"
        refunds_summary += "\n"

    send_long_message(message.chat.id, refunds_summary)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–º–∞–≥–∞–∑–∏–Ω) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ú–∞–≥–∞–∑–∏–Ω")
@check_function_state_decorator('–ú–∞–≥–∞–∑–∏–Ω')
@track_usage('–ú–∞–≥–∞–∑–∏–Ω')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def send_store_options(message):
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_discount = data['subscriptions']['users'].get(user_id, {}).get('discount', 0)
    applicable_category = data['subscriptions']['users'].get(user_id, {}).get('applicable_category')
    applicable_items = data['subscriptions']['users'].get(user_id, {}).get('applicable_items', [])

    discount_applicable_to_store = (
        applicable_category == "store" or
        any(item in STORE_ITEMS for item in applicable_items) or
        (applicable_category is None and not applicable_items)
    )

    display_discount = round(user_discount) if discount_applicable_to_store else 0
    applicability_str = ""
    if discount_applicable_to_store and user_discount > 0:
        if applicable_category == "subscriptions":
            applicability_str = " (–ø—Ä–∏–º–µ–Ω–∏–º–æ –∫: –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏)"
        elif applicable_category == "store":
            applicability_str = " (–ø—Ä–∏–º–µ–Ω–∏–º–æ –∫: –≤–µ—Å—å –º–∞–≥–∞–∑–∏–Ω)"
        elif applicable_category is None and not applicable_items:
            applicability_str = " (–ø—Ä–∏–º–µ–Ω–∏–º–æ –∫: –≤—Å–µ —Ç–æ–≤–∞—Ä—ã)"
        else:
            applicable_labels = []
            for item in applicable_items:
                if item in SUBSCRIPTION_PLANS:
                    label = SUBSCRIPTION_PLANS[item]['label'].lower()
                    applicable_labels.append(f"{label} –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö")
                elif item in STORE_ITEMS:
                    label = STORE_ITEMS[item]['label']
                    applicable_labels.append(f"{label} –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
                else:
                    applicable_labels.append(item)
            applicability_str = f" (–ø—Ä–∏–º–µ–Ω–∏–º–æ –∫: {', '.join(applicable_labels)})"
    discount_info_text = f"üéÅ *–í–∞—à–∞ —Å–∫–∏–¥–∫–∞:* {display_discount:.0f}%{applicability_str}\n"

    fictitious_discount_text = ""
    has_fictitious_discount = False

    points_items = {k: v for k, v in STORE_ITEMS.items() if k.startswith("points_")}
    for item_key, item_info in points_items.items():
        fictitious_discount = item_info.get("fictitious_discount", 0)
        label = item_info["label"]
        if fictitious_discount > 0:
            fictitious_discount_text += f"üéÅ *–ê–∫—Ü–∏–æ–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞* (–ø—Ä–∏–º–µ–Ω–∏–º–æ –∫: {label}): {fictitious_discount:.2f} ‚ÇΩ\n"
            has_fictitious_discount = True

    time_items = {k: v for k, v in STORE_ITEMS.items() if k.startswith("time_")}
    for item_key, item_info in time_items.items():
        fictitious_discount = item_info.get("fictitious_discount", 0)
        label = item_info["label"]
        if fictitious_discount > 0:
            fictitious_discount_text += f"üéÅ *–ê–∫—Ü–∏–æ–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞* (–ø—Ä–∏–º–µ–Ω–∏–º–æ –∫: {label}): {fictitious_discount:.2f} ‚ÇΩ\n"
            has_fictitious_discount = True

    if not has_fictitious_discount:
        fictitious_discount_text = "üéÅ *–ê–∫—Ü–∏–æ–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞:* 0.00 ‚ÇΩ\n"

    fictitious_discount_text += "\n"

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üìç –ü–∞–∫–µ—Ç—ã –±–∞–ª–ª–æ–≤", callback_data="show_points_0"))
    markup.add(InlineKeyboardButton("‚è≥ –ü–∞–∫–µ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏", callback_data="show_time_0"))

    bot.send_message(user_id, (
        "üè™ *–ú–∞–≥–∞–∑–∏–Ω –±–∞–ª–ª–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏*\n\n"
        f"{discount_info_text}"
        f"{fictitious_discount_text}"
        "üìç *–ü–∞–∫–µ—Ç—ã –±–∞–ª–ª–æ–≤*:\n"
        "–ü–æ–∫—É–ø–∞–π—Ç–µ –±–∞–ª–ª—ã –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞ –≤—Ä–µ–º—è, —Å–∫–∏–¥–∫–∏ –∏–ª–∏ –ø–æ–¥–∞—Ä–∫–∏ –¥—Ä—É–∑—å—è–º!\n"
        "‚è≥ *–ü–∞–∫–µ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏*:\n"
        "–î–æ–±–∞–≤—å—Ç–µ –¥–Ω–∏ –∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    ), reply_markup=markup, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("show_points_"))
def show_points_packages(call):
    user_id = str(call.from_user.id)
    data = load_payment_data()
    user_discount = data['subscriptions']['users'].get(user_id, {}).get('discount', 0)
    applicable_category = data['subscriptions']['users'].get(user_id, {}).get('applicable_category')
    applicable_items = data['subscriptions']['users'].get(user_id, {}).get('applicable_items', [])

    page = int(call.data.split("_")[-1]) if call.data != "show_points" else 0
    items_per_page = 6
    points_items = [k for k in STORE_ITEMS.keys() if k.startswith("points_")]
    total_pages = (len(points_items) + items_per_page - 1) // items_per_page

    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(points_items))
    current_items = points_items[start_idx:end_idx]

    markup = InlineKeyboardMarkup()
    for i in range(0, len(current_items), 2):
        row = []
        for key in current_items[i:i+2]:
            item = STORE_ITEMS[key]
            discount_applicable = (
                applicable_category == "store" or
                (applicable_category is None and not applicable_items) or
                key in applicable_items
            )
            price = max(1, round(item["base_price"] * (1 - (user_discount / 100 if discount_applicable else 0)), 2))
            button = InlineKeyboardButton(f"üí∞ {item['label']} ({price:.2f} ‚ÇΩ)", callback_data=key)
            row.append(button)
        markup.add(*row)

    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"show_points_{page-1}"))
    if page < total_pages - 1:
        nav_row.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"show_points_{page+1}"))
    if nav_row:
        markup.add(*nav_row)

    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="back_to_store"))

    bot.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text=f"üìç *–ü–∞–∫–µ—Ç—ã –±–∞–ª–ª–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –±–∞–ª–ª–æ–≤:",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("show_time_"))
def show_time_packages(call):
    user_id = str(call.from_user.id)
    data = load_payment_data()
    user_discount = data['subscriptions']['users'].get(user_id, {}).get('discount', 0)
    applicable_category = data['subscriptions']['users'].get(user_id, {}).get('applicable_category')
    applicable_items = data['subscriptions']['users'].get(user_id, {}).get('applicable_items', [])

    page = int(call.data.split("_")[-1]) if call.data != "show_time" else 0
    items_per_page = 6
    time_items = [k for k in STORE_ITEMS.keys() if k.startswith("time_")]
    total_pages = (len(time_items) + items_per_page - 1) // items_per_page

    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(time_items))
    current_items = time_items[start_idx:end_idx]

    markup = InlineKeyboardMarkup()
    for i in range(0, len(current_items), 2):
        row = []
        for key in current_items[i:i+2]:
            item = STORE_ITEMS[key]
            discount_applicable = (
                applicable_category == "store" or
                (applicable_category is None and not applicable_items) or
                key in applicable_items
            )
            price = max(1, round(item["base_price"] * (1 - (user_discount / 100 if discount_applicable else 0)), 2))
            button = InlineKeyboardButton(f"‚è∞ {item['label']} ({price:.2f} ‚ÇΩ)", callback_data=key)
            row.append(button)
        markup.add(*row)

    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"show_time_{page-1}"))
    if page < total_pages - 1:
        nav_row.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"show_time_{page+1}"))
    if nav_row:
        markup.add(*nav_row)

    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="back_to_store"))

    bot.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text=f"‚è≥ *–ü–∞–∫–µ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –≤—Ä–µ–º–µ–Ω–∏:",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_store")
def back_to_store(call):
    user_id = str(call.from_user.id)
    
    if call.from_user.is_bot:
        bot.answer_callback_query(call.id, "–ë–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –º–∞–≥–∞–∑–∏–Ω–æ–º!")
        return

    try:
        bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
    except Exception as e:
        pass

    fake_message = types.Message(
        message_id=call.message.message_id,
        chat=call.message.chat,
        from_user=call.from_user,
        date=call.message.date,
        content_type='text',
        options={},
        json_string={}
    )
    
    send_store_options(fake_message)
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω")
@check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω')
@track_usage('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def return_to_store(message):
    send_store_options(message)

@bot.callback_query_handler(func=lambda call: call.data in STORE_ITEMS)
def send_store_invoice(call):
    user_id = str(call.from_user.id)
    item_key = call.data
    item_info = STORE_ITEMS[item_key]
    base_price = item_info["base_price"]
    fictitious_discount = item_info["fictitious_discount"]
    label = item_info["label"]

    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(user_id, {"plans": [], "store_purchases": []})
    user_discount = data['subscriptions']['users'].get(user_id, {}).get('discount', 0)
    applicable_category = data['subscriptions']['users'].get(user_id, {}).get('applicable_category')
    applicable_items = data['subscriptions']['users'].get(user_id, {}).get('applicable_items', [])

    discount_applicable = (
        applicable_category == "store" or
        item_key in applicable_items or
        (applicable_category is None and not applicable_items)
    )
    user_discount = user_discount if discount_applicable else 0

    if item_key.startswith("time_"):
        duration = item_info["duration"]
        monthly_key = datetime.now().strftime("%m.%Y")
        monthly_days = sum(
            p['duration'] for p in user_data.get('store_purchases', [])
            if p['purchase_date'].startswith(monthly_key) and p['item_key'].startswith("time_")
        )
        if monthly_days + duration > 365:
            bot.send_message(user_id, (
                "‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ–∫—É–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ 365 –¥–Ω–µ–π!\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ..."
            ), parse_mode="Markdown")
            bot.answer_callback_query(call.id)
            return

    user_discount_amount = round(base_price * (user_discount / 100), 2)
    discounted_price = base_price - user_discount_amount

    MINIMUM_AMOUNT = 55

    final_price = discounted_price - fictitious_discount
    if final_price < MINIMUM_AMOUNT:
        total_discount = base_price - MINIMUM_AMOUNT
        user_discount_amount = min(user_discount_amount, total_discount)
        user_discount_amount = round(user_discount_amount, 2)
        remaining_discount = total_discount - user_discount_amount
        fictitious_discount = min(fictitious_discount, remaining_discount)
        fictitious_discount = round(fictitious_discount, 2)
        final_price = MINIMUM_AMOUNT

    provider_token = PAYMENT_PROVIDER_TOKEN
    currency = "RUB"
    invoice_payload = item_key

    bot_functions = (
        "üöÄ –ü–æ–∫—É–ø–∞–π—Ç–µ –±–∞–ª–ª—ã –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞ –≤—Ä–µ–º—è, —Å–∫–∏–¥–∫–∏ –∏–ª–∏ –ø–æ–¥–∞—Ä–∫–∏, "
        "–∏–ª–∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!"
    )

    title = f"üè™ –ü–æ–∫—É–ø–∫–∞: {label}"
    description = (
        f"‚ú® {label} –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!\n"
        f"üí∞ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {base_price:.2f} ‚ÇΩ\n"
    )
    prices = [types.LabeledPrice(label, int(base_price * 100))]

    if user_discount > 0 and user_discount_amount > 0:
        description += f"üè∑Ô∏è –°–∫–∏–¥–∫–∞ {user_discount}%: -{user_discount_amount:.2f} ‚ÇΩ\n"
        user_discount_amount_kopecks = int(round(user_discount_amount * 100))
        prices.append(types.LabeledPrice(f"–°–∫–∏–¥–∫–∞ {user_discount}%", -user_discount_amount_kopecks))

    if fictitious_discount > 0:
        description += f"üéÅ –ê–∫—Ü–∏–æ–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞: -{fictitious_discount:.2f} ‚ÇΩ\n"
        fictitious_discount_kopecks = int(round(fictitious_discount * 100))
        prices.append(types.LabeledPrice("–ê–∫—Ü–∏–æ–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞", -fictitious_discount_kopecks))

    if item_key.startswith("time_"):
        now = datetime.now()
        if user_data['plans']:
            latest_end = max([datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") for p in user_data['plans']])
            start_date = max(latest_end, now)  
        else:
            start_date = now
        description += f"üïí –ù–∞—á–∞–ª–æ –ø–æ–¥–ø–∏—Å–∫–∏: {start_date.strftime('%d.%m.%Y –≤ %H:%M')}\n"

    description += f"üí∏ –ò—Ç–æ–≥: {final_price:.2f} ‚ÇΩ\n\n{bot_functions}"

    total_amount = sum(price.amount for price in prices)
    if total_amount < MINIMUM_AMOUNT * 100:
        prices = [types.LabeledPrice(label, int(MINIMUM_AMOUNT * 100))]
        description += f"\n‚ö†Ô∏è –¶–µ–Ω–∞ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π ({MINIMUM_AMOUNT} ‚ÇΩ) –∏–∑-–∑–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã!\n"

    save_payments_data(data)

    try:
        bot.send_invoice(
            chat_id=user_id,
            title=title,
            description=description,
            invoice_payload=invoice_payload,
            provider_token=provider_token,
            currency=currency,
            prices=prices,
            start_parameter="store"
        )
    except Exception as e:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É...")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=markup)
    bot.answer_callback_query(call.id, "–°—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–±–∞–ª–ª—ã) -----------------------------------------

def escape_markdown(text):
    special_chars = r'([_*[\]()~`>#+\\|-])'
    return re.sub(special_chars, r'\\\1', text)

@bot.message_handler(func=lambda message: message.text == "–ë–∞–ª–ª—ã")
@check_function_state_decorator('–ë–∞–ª–ª—ã')
@track_usage('–ë–∞–ª–ª—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def points_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–∞—à–∏ –±–∞–ª–ª—ã', '–û–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã', '–ü–æ–¥–∞—Ä–∫–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –±–∞–ª–ª–æ–≤:", reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")
@check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã')
@track_usage('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def return_to_scores_menu(message):
    points_menu(message)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–≤–∞—à–∏ –±–∞–ª–ª—ã) -----------------------------------------

def format_number(number):
    if number.is_integer():
        return str(int(number))
    return f"{number:.2f}"

def format_time(minutes):
    if minutes < 60:
        return f"{format_number(minutes)} –º–∏–Ω."
    days = minutes // 1440
    hours = (minutes % 1440) // 60
    mins = (minutes % 1440) % 60
    parts = []
    if days:
        parts.append(f"{format_number(days)} –¥–Ω.")
    if hours:
        parts.append(f"{format_number(hours)} —á.")
    if mins:
        parts.append(f"{format_number(mins)} –º–∏–Ω.")
    return " ".join(parts)

@bot.message_handler(func=lambda message: message.text == "–í–∞—à–∏ –±–∞–ª–ª—ã")
@check_function_state_decorator('–í–∞—à–∏ –±–∞–ª–ª—ã')
@track_usage('–í–∞—à–∏ –±–∞–ª–ª—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_points(message):
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(user_id, {})
    history = user_data.get('points_history', [])
    
    points = user_data.get('referral_points', 0)
    
    total_earned = sum(entry['points'] for entry in history if entry['action'] == 'earned')
    earned_daily = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'] == '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥')
    earned_admin = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'].startswith('–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'))
    earned_gifts = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'].startswith('–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç'))
    earned_first_purchase = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'].startswith('–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏'))
    earned_points_purchase = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'].startswith('–ü–æ–∫—É–ø–∫–∞') and '–±–∞–ª–ª–æ–≤' in entry['reason'])
    earned_referrals = sum(entry['points'] for entry in history if entry['action'] == 'earned' and '–†–µ—Ñ–µ—Ä–∞–ª' in entry['reason'])
    earned_top_referrals = sum(entry['points'] for entry in history if entry['action'] == 'earned' and '–¢–æ–ø-10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤' in entry['reason'])
    earned_purchases = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'].startswith('–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏'))

    total_spent = sum(entry['points'] for entry in history if entry['action'] == 'spent')
    spent_gifts = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'].lower().startswith('–ø–æ–¥–∞—Ä–æ–∫'))
    spent_time = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'].startswith('–û–±–º–µ–Ω –Ω–∞') and any(unit in entry['reason'] for unit in ['–¥–Ω.', '—á.', '–º–∏–Ω.']))
    spent_discounts = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'].startswith('–û–±–º–µ–Ω –Ω–∞') and '%' in entry['reason'])
    spent_features = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'].startswith('–û–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é'))
    spent_admin_delete = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'] == '—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
    spent_admin = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'].lower() == '—Å–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')

    gifted_time_minutes = 0
    received_time_minutes = 0
    for entry in history:
        time_str = None
        if entry['reason'].startswith('–û–±–º–µ–Ω –Ω–∞') and any(unit in entry['reason'] for unit in ['–¥–Ω.', '—á.', '–º–∏–Ω.']):
            time_str = entry['reason'].split('–û–±–º–µ–Ω –Ω–∞ ')[1]
        elif entry['reason'].lower().startswith('–ø–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏') and any(unit in entry['reason'] for unit in ['–¥–Ω.', '—á.', '–º–∏–Ω.', '–º–∏–Ω—É—Ç']):
            time_str = entry['reason'].split(': ')[1]
        
        if time_str:
            days = hours = minutes = 0
            if '–¥–Ω.' in time_str:
                days_match = re.search(r'(\d+\.?\d*)\s*–¥–Ω\.', time_str)
                if days_match:
                    days = float(days_match.group(1))
            if '—á.' in time_str:
                hours_match = re.search(r'(\d+\.?\d*)\s*—á\.', time_str)
                if hours_match:
                    hours = float(hours_match.group(1))
            if '–º–∏–Ω.' in time_str or '–º–∏–Ω—É—Ç' in time_str:
                minutes_match = re.search(r'(\d+\.?\d*)\s*(–º–∏–Ω\.|–º–∏–Ω—É—Ç)', time_str)
                if minutes_match:
                    minutes = float(minutes_match.group(1))
            total_minutes = days * 24 * 60 + hours * 60 + minutes
            if entry['action'] == 'spent':
                gifted_time_minutes += total_minutes
            elif entry['action'] == 'earned':
                received_time_minutes += total_minutes

    points_summary = (
        f"üí∞ *–í–∞—à–∏ –±–∞–ª–ª—ã*\n\n"
        f"üéÅ *–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã:* {format_number(points)}\n\n"
        f"üî• *–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* {format_number(total_earned)}\n"
        f"  ‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥: {format_number(earned_daily)}\n"
        f"  ‚Ä¢ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {format_number(earned_admin)}\n"
        f"  ‚Ä¢ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –¥—Ä—É–≥–∏—Ö: {format_number(earned_gifts)}\n"
        f"  ‚Ä¢ –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {format_number(earned_first_purchase)}\n"
        f"  ‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –±–∞–ª–ª–æ–≤: {format_number(earned_points_purchase)}\n"
        f"  ‚Ä¢ –ó–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {format_number(earned_referrals)}\n"
        f"  ‚Ä¢ –ó–∞ —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {format_number(earned_top_referrals)}\n"
        f"  ‚Ä¢ –ó–∞ –ø–æ–∫—É–ø–∫–∏: {format_number(earned_purchases)}\n\n"
        f"üí∏ *–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:* {format_number(total_spent)}\n"
        f"  ‚Ä¢ –ü–æ–¥–∞—Ä–æ–∫ –¥—Ä—É–≥–∏–º: {format_number(spent_gifts)}\n"
        f"  ‚Ä¢ –û–±–º–µ–Ω –Ω–∞ –≤—Ä–µ–º—è: {format_number(spent_time)}\n"
        f"  ‚Ä¢ –û–±–º–µ–Ω –Ω–∞ —Å–∫–∏–¥–∫–∏: {format_number(spent_discounts)}\n"
        f"  ‚Ä¢ –û–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏: {format_number(spent_features)}\n"
        f"  ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {format_number(spent_admin_delete)}\n"
        f"  ‚Ä¢ –°–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {format_number(spent_admin)}\n\n"
        f"‚è≥ *–ü–æ–¥–∞—Ä–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:* {format_time(gifted_time_minutes)}\n"
        f"‚è≥ *–ü–æ–ª—É—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:* {format_time(received_time_minutes)}"
    )

    message_parts = split_message(points_summary)
    for part in message_parts:
        bot.send_message(message.chat.id, part, parse_mode="Markdown")

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–æ–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–û–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã")
@check_function_state_decorator('–û–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã')
@track_usage('–û–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def exchange_points_handler(message):
    user_id = str(message.from_user.id)
    data = load_payment_data()
    points = data['subscriptions']['users'].get(user_id, {}).get('referral_points', 0)
    
    if points < 2: 
        bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!", parse_mode="Markdown")
        return_to_scores_menu(message)
        return
    
    has_subscription = False
    plans = data['subscriptions']['users'].get(user_id, {}).get('plans', [])
    now = datetime.now()
    for plan in plans:
        end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
        if end_date > now:
            has_subscription = True
            break
    
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("–û–±–º–µ–Ω –Ω–∞ –≤—Ä–µ–º—è"), telebot.types.KeyboardButton("–û–±–º–µ–Ω –Ω–∞ —Å–∫–∏–¥–∫—É"), telebot.types.KeyboardButton("–û–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é"))
    markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã"))
    markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
    markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    exchange_rate = 1.0 / 5.0  
    
    bot.send_message(message.chat.id, (
        f"*–û–±–º–µ–Ω –±–∞–ª–ª–æ–≤:*\n\n"
        f"üéÅ *–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã:* {format_number(points)}\n\n"
        f"üîÑ *–í–æ–∑–º–æ–∂–Ω—ã–µ –æ–±–º–µ–Ω—ã:*\n"
        f"‚è≥ - *–í—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏:* _5 –±–∞–ª–ª–æ–≤ = 1 —á–∞—Å_\n"
        f"üîì - *–î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º:* _2 –±–∞–ª–ª–∞ = 15 –º–∏–Ω—É—Ç_\n"
        f"üè∑Ô∏è - *–°–∫–∏–¥–∫–∞:* _10 –±–∞–ª–ª–æ–≤ = 5% (–º–∞–∫—Å. 35%)_\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    ), reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_exchange_option, points, exchange_rate, has_subscription)

@text_only_handler
def process_exchange_option(message, points, exchange_rate, has_subscription):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã":
        return_to_scores_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    user_id = str(message.from_user.id)
    data = load_payment_data()
    
    if message.text == "–û–±–º–µ–Ω –Ω–∞ –≤—Ä–µ–º—è":
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã"))
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, (
            f"*–û–±–º–µ–Ω –±–∞–ª–ª–æ–≤:*\n\n"
            f"üéÅ *–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã:* {format_number(points)}\n"
            f"‚è≥ *–û–±–º–µ–Ω –Ω–∞ –≤—Ä–µ–º—è:* _5 –±–∞–ª–ª–æ–≤ = 1 —á–∞—Å_\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_points_exchange, exchange_rate)
    elif message.text == "–û–±–º–µ–Ω –Ω–∞ —Å–∫–∏–¥–∫—É":
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã"))
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, (
            f"*–û–±–º–µ–Ω –±–∞–ª–ª–æ–≤:*\n\n"
            f"üéÅ *–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã:* {format_number(points)}\n"
            f"üè∑Ô∏è *–û–±–º–µ–Ω –Ω–∞ —Å–∫–∏–¥–∫—É:* _10 –±–∞–ª–ª–æ–≤ = 5% (–º–∞–∫—Å. 35%)_\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_discount_exchange)
    elif message.text == "–û–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é":
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in range(0, len(PAID_FEATURES), 2):
            if i + 1 < len(PAID_FEATURES):
                markup.add(PAID_FEATURES[i], PAID_FEATURES[i + 1])
            else:
                markup.add(PAID_FEATURES[i])
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã"))
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, (
            f"*–û–±–º–µ–Ω –±–∞–ª–ª–æ–≤ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏:*\n\n"
            f"üéÅ *–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã:* {format_number(points)}\n"
            f"üîì *–û–±–º–µ–Ω –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º:* _2 –±–∞–ª–ª–∞ = 15 –º–∏–Ω—É—Ç_\n\n"  
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_feature_selection, points)
    else:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(telebot.types.KeyboardButton("–û–±–º–µ–Ω –Ω–∞ –≤—Ä–µ–º—è"), telebot.types.KeyboardButton("–û–±–º–µ–Ω –Ω–∞ —Å–∫–∏–¥–∫—É"), telebot.types.KeyboardButton("–û–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é"))
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã"))
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π!", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_exchange_option, points, exchange_rate, has_subscription)

@text_only_handler
def process_feature_selection(message, points):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã":
        return_to_scores_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    user_id = str(message.from_user.id)
    data = load_payment_data()
    feature = message.text
    if feature not in PAID_FEATURES:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in range(0, len(PAID_FEATURES), 2):
            if i + 1 < len(PAID_FEATURES):
                markup.add(PAID_FEATURES[i], PAID_FEATURES[i + 1])
            else:
                markup.add(PAID_FEATURES[i])
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã"))
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞!", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_feature_selection, points)
        return
    
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã"))
    markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
    markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    bot.send_message(message.chat.id, (
        f"*–û–±–º–µ–Ω –±–∞–ª–ª–æ–≤ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é: {feature.lower()}*\n\n"
        f"üéÅ *–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã:* {format_number(points)}\n"
        f"üîì *–û–±–º–µ–Ω –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏:* _2 –±–∞–ª–ª–∞ = 15 –º–∏–Ω—É—Ç_\n\n"  
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞:"
    ), reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_feature_exchange, feature, points)

@text_only_handler
def process_feature_exchange(message, feature, points):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã":
        return_to_scores_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    user_id = str(message.from_user.id)
    data = load_payment_data()
    
    try:
        exchange_points = float(message.text.replace(',', '.'))
        if exchange_points < 2:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ ‚Äî 2!")
        if exchange_points > points:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!")
        if exchange_points % 2 != 0:
            raise ValueError("–ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã 2!")
        
        total_minutes = exchange_points * (15.0 / 2.0) 
        days = int(total_minutes // (24 * 60))
        remaining_minutes = total_minutes % (24 * 60)
        remaining_hours = remaining_minutes // 60
        remaining_minutes = remaining_minutes % 60
        
        duration_str = ""
        if days > 0:
            duration_str = f"{days} –¥–Ω. {format_number(remaining_hours)} —á. {format_number(remaining_minutes)} –º–∏–Ω."
        elif remaining_hours > 0:
            duration_str = f"{format_number(remaining_hours)} —á. {format_number(remaining_minutes)} –º–∏–Ω."
        else:
            duration_str = f"{format_number(remaining_minutes)} –º–∏–Ω."
        
        feature_access = data['subscriptions']['users'].get(user_id, {}).get('feature_access', {})
        current_end = datetime.strptime(feature_access.get(feature, "01.01.2025 –≤ 00:00"), "%d.%m.%Y –≤ %H:%M")
        latest_end = max(current_end, datetime.now())
        new_end = latest_end + timedelta(days=days, hours=remaining_hours, minutes=remaining_minutes)
        
        start_date = latest_end.strftime("%d.%m.%Y –≤ %H:%M")
        end_date_str = new_end.strftime("%d.%m.%Y –≤ %H:%M")
        
        data['subscriptions']['users'][user_id]['referral_points'] -= exchange_points
        data['subscriptions']['users'][user_id].setdefault('points_history', []).append({
            "action": "spent",
            "points": exchange_points,
            "exchange_type": "feature",
            "reason": f"–û–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é '{feature}' ({duration_str})",
            "feature_name": feature,
            "date": datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })
        
        data['subscriptions']['users'].setdefault(user_id, {}).setdefault('feature_access', {})
        data['subscriptions']['users'][user_id]['feature_access'][feature] = end_date_str
        
        save_payments_data(data)
        
        result_msg = (
            f"‚úÖ *–û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!*\n\n"
            f"üí∞ *–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:* {format_number(exchange_points)} {pluralize_points(exchange_points)}\n"
            f"üîÑ *–¢–∏–ø –æ–±–º–µ–Ω–∞:* –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏ *{feature.lower()}*\n"
            f"üîÑ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–º–µ–Ω–∞:* {duration_str}\n\n"
            f"üïí *–ù–∞—á–∞–ª–æ:* {start_date}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {end_date_str}"
        )
        
        bot.send_message(message.chat.id, result_msg, parse_mode="Markdown")
        points_menu(message)
    
    except ValueError as e:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã"))
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, f"{str(e)}", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_feature_exchange, feature, points)

@text_only_handler
def process_points_exchange(message, exchange_rate):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã":
        return_to_scores_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    user_id = str(message.from_user.id)
    data = load_payment_data()
    points = data['subscriptions']['users'].get(user_id, {}).get('referral_points', 0)
    
    try:
        exchange_points = float(message.text.replace(',', '.'))
        if exchange_points < 5:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ ‚Äî 5!")
        if exchange_points > points:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!")
        if exchange_points % 5 != 0:
            raise ValueError("–ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã 5!")
        if exchange_points > 6000:  
            raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±–º–µ–Ω ‚Äî 6000 –±–∞–ª–ª–æ–≤ (50 –¥–Ω–µ–π)!")
        
        total_hours = exchange_points * exchange_rate  
        days = int(total_hours // 24)
        remaining_hours = total_hours % 24
        
        duration_str = ""
        if days > 0 and remaining_hours > 0:
            duration_str = f"{days} –¥–Ω. {format_number(remaining_hours)} —á."
        elif days > 0:
            duration_str = f"{days} –¥–Ω."
        else:
            duration_str = f"{format_number(remaining_hours)} —á."
        
        latest_end = max([datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") 
                         for p in data['subscriptions']['users'].get(user_id, {}).get('plans', [])] 
                         or [datetime.now()])
        new_end = latest_end + timedelta(days=days, hours=remaining_hours)
        
        start_date = latest_end.strftime("%d.%m.%Y –≤ %H:%M")
        end_date_str = new_end.strftime("%d.%m.%Y –≤ %H:%M")
        
        data['subscriptions']['users'][user_id]['referral_points'] -= exchange_points
        data['subscriptions']['users'][user_id].setdefault('points_history', []).append({
            "action": "spent",
            "points": exchange_points,
            "exchange_type": "subscription",
            "reason": f"–û–±–º–µ–Ω –Ω–∞ {duration_str}",
            "date": datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })
        
        data['subscriptions']['users'].setdefault(user_id, {})
        data['subscriptions']['users'][user_id].setdefault('plans', []).append({
            "plan_name": "points_bonus",
            "start_date": start_date,
            "end_date": end_date_str,
            "price": 0
        })
        
        save_payments_data(data)
        
        result_msg = (
            f"‚úÖ *–û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!*\n\n"
            f"üí∞ *–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:* {format_number(exchange_points)} {pluralize_points(exchange_points)}\n"
            f"üîÑ *–¢–∏–ø –æ–±–º–µ–Ω–∞:* –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            f"üîÑ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–º–µ–Ω–∞:* {duration_str}\n\n"
            f"üïí *–ù–∞—á–∞–ª–æ:* {start_date}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {end_date_str}"
        )
        
        bot.send_message(message.chat.id, result_msg, parse_mode="Markdown")
        points_menu(message)
    
    except ValueError as e:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã"))
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, f"{str(e)}", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_points_exchange, exchange_rate)

@text_only_handler
def process_discount_exchange(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã":
        return_to_scores_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    user_id = str(message.from_user.id)
    data = load_payment_data()
    users_data = load_users_data()
    points = data['subscriptions']['users'].get(user_id, {}).get('referral_points', 0)
    
    try:
        exchange_points = float(message.text.replace(',', '.'))
        if exchange_points < 10:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ ‚Äî 10!")
        if exchange_points > points:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!")
        if exchange_points % 10 != 0:
            raise ValueError("–ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã 10!")
        
        discount = (exchange_points // 10) * 5
        current_discount = users_data.get(user_id, {}).get('discount', 0)
        if current_discount + discount > 35:
            raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ ‚Äî 35%!")
        
        data['subscriptions']['users'][user_id]['referral_points'] -= exchange_points
        data['subscriptions']['users'][user_id].setdefault('points_history', []).append({
            "action": "spent",
            "points": exchange_points,
            "exchange_type": "discount",
            "reason": f"–û–±–º–µ–Ω –Ω–∞ {discount}% —Å–∫–∏–¥–∫–∏",
            "date": datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })
        
        users_data.setdefault(user_id, {})
        users_data[user_id]['discount'] = current_discount + discount
        users_data[user_id]['discount_type'] = "points"
        
        save_payments_data(data)
        
        bot.send_message(message.chat.id, (
            f"‚úÖ *–û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!*\n\n"
            f"üí∞ *–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:* {format_number(exchange_points)} {pluralize_points(exchange_points)}\n"
            f"üîÑ *–¢–∏–ø –æ–±–º–µ–Ω–∞:* —Å–∫–∏–¥–∫–∞\n"
            f"üîÑ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–º–µ–Ω–∞:* {format_number(discount)}%\n\n"
            f"üìâ *–¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞:* {format_number(users_data[user_id]['discount'])}%"
        ), parse_mode="Markdown")
        points_menu(message)
    
    except ValueError as e:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã"))
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, f"{str(e)}", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_discount_exchange)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–ø–æ–¥–∞—Ä–∫–∏) -----------------------------------------

def format_number(number):
    if number.is_integer():
        return str(int(number))
    return f"{number:.2f}"

def format_time(minutes):
    if isinstance(minutes, str):
        try:
            minutes = float(minutes.split()[0].replace(',', '.'))
        except (ValueError, IndexError):
            return minutes
    if minutes < 60:
        return f"{format_number(minutes)} –º–∏–Ω."
    days = minutes // 1440
    hours = (minutes % 1440) // 60
    mins = minutes % 60
    parts = []
    if days:
        parts.append(f"{format_number(days)} –¥–Ω.")
    if hours:
        parts.append(f"{format_number(hours)} —á.")
    if mins:
        parts.append(f"{format_number(mins)} –º–∏–Ω.")
    return " ".join(parts)

def clean_escaped_text(text):
    return re.sub(r'\\([_*[\]()~`>#+\-=|{}.!])', r'\1', text)

def pluralize_points(points):
    if isinstance(points, str):
        try:
            points = float(points)
        except ValueError:
            return "–±–∞–ª–ª–æ–≤"
    points = int(points)
    if points % 10 == 1 and points % 100 != 11:
        return "–±–∞–ª–ª"
    elif 2 <= points % 10 <= 4 and (points % 100 < 10 or points % 100 >= 20):
        return "–±–∞–ª–ª–∞"
    else:
        return "–±–∞–ª–ª–æ–≤"

@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–∞—Ä–∫–∏")
@check_function_state_decorator('–ü–æ–¥–∞—Ä–∫–∏')
@track_usage('–ü–æ–¥–∞—Ä–∫–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def gifts_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ü–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã', '–ü–æ–¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è', '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –ø–æ–¥–∞—Ä–∫–æ–≤:", reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏")
@check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏')
@track_usage('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def return_to_gifts_menu(message):
    gifts_menu(message)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–ø–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã")
@check_function_state_decorator('–ü–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã')
@track_usage('–ü–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def gift_points_handler(message):
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(user_id, {})
    points = user_data.get('referral_points', 0)
    
    last_gift_time = next(
        (entry['date'] for entry in reversed(user_data.get('points_history', []))
         if entry['action'] == "spent" and "–ø–æ–¥–∞—Ä–æ–∫ @" in entry['reason'].lower() and "–≤—Ä–µ–º–µ–Ω–∏" not in entry['reason'].lower()),
        "01.01.2025 –≤ 00:00"
    )
    last_gift_dt = datetime.strptime(last_gift_time, "%d.%m.%Y –≤ %H:%M")
    if (datetime.now() - last_gift_dt).total_seconds() < 24 * 3600:
        remaining_time = timedelta(seconds=24 * 3600 - (datetime.now() - last_gift_dt).total_seconds())
        hours_left = remaining_time.seconds // 3600
        minutes_left = (remaining_time.seconds % 3600) // 60
        bot.send_message(message.chat.id, (
            f"‚ö†Ô∏è –í—ã —É–∂–µ –¥–∞—Ä–∏–ª–∏ –±–∞–ª–ª—ã —Å–µ–≥–æ–¥–Ω—è!\n"
            f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –ø–æ–¥–∞—Ä–æ–∫ –±–∞–ª–ª–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {hours_left} —á. {minutes_left} –º–∏–Ω."
        ), parse_mode="Markdown")
        return_to_scores_menu(message)
        return
    
    if points < 0.5:
        bot.send_message(message.chat.id, (
            f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞!\n\n"
            f"üí∞ *–î–æ—Å—Ç—É–ø–Ω–æ –±–∞–ª–ª–æ–≤:* {format_number(points)}\n"
            f"üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∫–æ–ø–∏—Ç–µ –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        ), parse_mode="Markdown")
        return_to_scores_menu(message)
        return
    
    referrals = list(set(data['referrals']['stats'].get(user_id, [])))
    if referrals:
        referral_message = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:*\n\n"
        for idx, referral_id in enumerate(referrals, 1):
            referral_username = data['subscriptions']['users'].get(referral_id, {}).get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            escaped_username = escape_markdown(referral_username)
            referral_message += f"üë§ ‚Ññ{idx}. {escaped_username} - `{referral_id}`\n"
        bot.send_message(message.chat.id, referral_message, parse_mode="Markdown")
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    bot.send_message(message.chat.id, (
        f"*–ü–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã:*\n\n"
        f"üí∞ *–í–∞—à–∏ –±–∞–ª–ª—ã:* {format_number(points)}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞), –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã:"
    ), reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, user_process_gift_recipient, points)

@text_only_handler
def user_process_gift_recipient(message, sender_points):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã":
        return_to_scores_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏":
        return_to_gifts_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(user_id, {})
    sender_username = escape_markdown(user_data.get('username', f"@{user_id}"))
    recipient_input = message.text.strip()
    
    recipient_id = None
    if recipient_input.startswith('@'):
        recipient_id = next((uid for uid, data_user in data['subscriptions']['users'].items() 
                            if data_user.get('username', '').lower() == recipient_input.lower()), None)
    elif recipient_input.isdigit():
        if recipient_input in data['subscriptions']['users']:
            recipient_id = recipient_input
    
    if not recipient_id:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, (
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ username –∏–ª–∏ id\n\n"
            "–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, user_process_gift_recipient, sender_points)
        return
    
    if recipient_id == user_id:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, (
            "‚ùå –ù–µ–ª—å–∑—è –ø–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã —Å–∞–º–æ–º—É —Å–µ–±–µ!\n\n"
            "üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, user_process_gift_recipient, sender_points)
        return
    
    users_data = load_users_data()
    join_date_str = users_data.get(recipient_id, {}).get('join_date', "01.01.2025 –≤ 00:00")
    join_date = datetime.strptime(join_date_str, "%d.%m.%Y –≤ %H:%M")
    if (datetime.now() - join_date).total_seconds() < 24 * 3600:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, (
            "‚ùå –ù–µ–ª—å–∑—è –¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥!\n"
            "üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, user_process_gift_recipient, sender_points)
        return
    
    recipient_username = escape_markdown(data['subscriptions']['users'][recipient_id].get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    bot.send_message(message.chat.id, (
        f"üéÅ *–ü–æ–¥–∞—Ä–æ–∫ –±–∞–ª–ª–æ–≤*\n\n"
        f"üì§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {sender_username} (`{user_id}`)\n"
        f"üì• *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {recipient_username} (`{recipient_id}`)\n\n"
        f"üí∞ *–î–æ—Å—Ç—É–ø–Ω–æ –±–∞–ª–ª–æ–≤:* {format_number(sender_points)}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:"
    ), reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_gift_amount, recipient_id, sender_points)

@text_only_handler
def process_gift_amount(message, recipient_id, sender_points):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã":
        return_to_scores_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏":
        return_to_gifts_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(user_id, {})
    sender_username = escape_markdown(user_data.get('username', f"@{user_id}"))
    
    try:
        gift_points = float(message.text)
        if gift_points < 0.5:
            raise ValueError("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ ‚Äî 0.5!")
        if gift_points > sender_points:
            raise ValueError(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!\nüí∞ *–î–æ—Å—Ç—É–ø–Ω–æ –±–∞–ª–ª–æ–≤:* {format_number(sender_points)}")
        if gift_points % 0.5 != 0:
            raise ValueError("‚ö†Ô∏è –ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã 0.5!")
        
        sender_username_raw = user_data.get('username', f"@{user_id}")
        recipient_username = data['subscriptions']['users'][recipient_id].get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        
        data['subscriptions']['users'][user_id]['referral_points'] -= gift_points
        data['subscriptions']['users'][user_id].setdefault('points_history', []).append({
            "action": "spent",
            "points": gift_points,
            "reason": f"–ø–æ–¥–∞—Ä–æ–∫ {recipient_username}",
            "date": datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })
        
        data['subscriptions']['users'].setdefault(recipient_id, {}).setdefault('referral_points', 0)
        data['subscriptions']['users'][recipient_id]['referral_points'] += gift_points
        data['subscriptions']['users'][recipient_id].setdefault('points_history', []).append({
            "action": "earned",
            "points": gift_points,
            "reason": f"–ø–æ–¥–∞—Ä–æ–∫ –æ—Ç {sender_username_raw}",
            "date": datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })
        
        save_payments_data(data)
        
        bot.send_message(user_id, (
            f"üéâ *–í—ã –ø–æ–¥–∞—Ä–∏–ª–∏* {escape_markdown(recipient_username)} *{format_number(gift_points)} {pluralize_points(gift_points)}!*\n"
        ), parse_mode="Markdown")
        try:
            bot.send_message(recipient_id, (
                f"üéÅ *{sender_username} –ø–æ–¥–∞—Ä–∏–ª –≤–∞–º {format_number(gift_points)} {pluralize_points(gift_points)}!*\n"
                "üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –≤ —Å–∏—Å—Ç–µ–º–µ –±–∞–ª–ª–æ–≤!"
            ), parse_mode="Markdown")
        except:
            pass
        
        gifts_menu(message)
        
    except ValueError as e:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_gift_amount, recipient_id, sender_points)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–ø–æ–¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è")
@check_function_state_decorator('–ü–æ–¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è')
@track_usage('–ü–æ–¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def gift_time_handler(message):
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(user_id, {})
    
    last_gift_time = next(
        (entry['date'] for entry in reversed(user_data.get('points_history', []))
         if "–ø–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏" in entry['reason'].lower() and entry['action'] == "spent"),
        "01.01.2025 –≤ 00:00"
    )
    last_gift_dt = datetime.strptime(last_gift_time, "%d.%m.%Y –≤ %H:%M")
    if (datetime.now() - last_gift_dt).total_seconds() < 24 * 3600:
        remaining_time = timedelta(seconds=24 * 3600 - (datetime.now() - last_gift_dt).total_seconds())
        hours_left = remaining_time.seconds // 3600
        minutes_left = (remaining_time.seconds % 3600) // 60
        bot.send_message(message.chat.id, (
            f"‚ö†Ô∏è –í—ã —É–∂–µ –¥–∞—Ä–∏–ª–∏ –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è!\n"
            f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –ø–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {hours_left} —á. {minutes_left} –º–∏–Ω."
        ), parse_mode="Markdown")
        return_to_gifts_menu(message)
        return

    giftable_plans = [
        plan for plan in user_data.get('plans', [])
        if (
            plan['plan_name'] in ['points_bonus', 'gift_time', 'exchange_time']
            or (
                plan['plan_name'] in ['trial', 'weekly', 'monthly', 'quarterly', 'semiannual', 'yearly', 'store_time', 'custom']
                and plan['source'] in ['user', 'store']
            )
        )
        and datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M") > datetime.now()
    ]
    
    if not giftable_plans:
        bot.send_message(message.chat.id, (
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–¥–∞—Ä–∏—Ç—å!\n"
            "üöÄ –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–ª–ª—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞!"
        ), parse_mode="Markdown")
        return_to_gifts_menu(message)
        return
    
    now = datetime.now()
    total_remaining_minutes = 0
    for plan in giftable_plans:
        end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
        if end_date > now:
            total_remaining_minutes += int((end_date - now).total_seconds() // 60)
    
    time_description = format_time(total_remaining_minutes)
    
    if total_remaining_minutes < 1440:  
        bot.send_message(message.chat.id, (
            f"‚ùå –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 1 –¥–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞!\n\n"
            f"‚è≥ *–î–æ—Å—Ç—É–ø–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:* {time_description}\n"
            f"üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è!"
        ), parse_mode="Markdown")
        return_to_gifts_menu(message)
        return
    
    referrals = list(set(data['referrals']['stats'].get(user_id, [])))
    if referrals:
        referral_message = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:*\n\n"
        for idx, referral_id in enumerate(referrals, 1):
            referral_username = data['subscriptions']['users'].get(referral_id, {}).get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            escaped_username = escape_markdown(referral_username)
            referral_message += f"üë§ ‚Ññ{idx}. {escaped_username} - `{referral_id}`\n"
        bot.send_message(message.chat.id, referral_message, parse_mode="Markdown")
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(message.chat.id, (
        f"üéÅ *–ü–æ–¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è:*\n\n"
        f"‚è≥ *–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:* {time_description}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞), –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è:"
    ), reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, user_process_gift_time_recipient, total_remaining_minutes)

@text_only_handler
def user_process_gift_time_recipient(message, total_available_minutes):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã":
        return_to_scores_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏":
        return_to_gifts_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(user_id, {})
    sender_username = escape_markdown(user_data.get('username', f"@{user_id}"))
    recipient_input = message.text.strip()
    
    recipient_id = None
    if recipient_input.startswith('@'):
        recipient_id = next(
            (uid for uid, data_user in data['subscriptions']['users'].items()
             if data_user.get('username', '').lower() == recipient_input.lower()), None
        )
    elif recipient_input.isdigit():
        if recipient_input in data['subscriptions']['users']:
            recipient_id = recipient_input
    
    if not recipient_id:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã") 
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, (
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ username –∏–ª–∏ id\n\n"
            "–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, user_process_gift_time_recipient, total_available_minutes)
        return
    
    if recipient_id == user_id:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã") 
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, (
            "‚ùå –ù–µ–ª—å–∑—è –ø–æ–¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è —Å–∞–º–æ–º—É —Å–µ–±–µ!\n"
            "üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, user_process_gift_time_recipient, total_available_minutes)
        return
    
    users_data = load_users_data()
    join_date_str = users_data.get(recipient_id, {}).get('join_date', "01.01.2025 –≤ 00:00")
    join_date = datetime.strptime(join_date_str, "%d.%m.%Y –≤ %H:%M")
    if (datetime.now() - join_date).total_seconds() < 24 * 3600:
        bot.send_message(message.chat.id, (
            "‚ùå –ù–µ–ª—å–∑—è –¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥!\n"
            "üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        ), parse_mode="Markdown")
        return_to_gifts_menu(message)
        return
    
    recipient_username = escape_markdown(data['subscriptions']['users'][recipient_id].get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))
    time_description = format_time(total_available_minutes)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ú–∏–Ω—É—Ç—ã"), types.KeyboardButton("–ß–∞—Å—ã"), types.KeyboardButton("–î–Ω–∏"))
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(message.chat.id, (
        f"üéÅ *–ü–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏*\n\n"
        f"üì§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {sender_username} (`{user_id}`)\n"
        f"üì• *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {recipient_username} (`{recipient_id}`)\n\n"
        f"‚è≥ *–î–æ—Å—Ç—É–ø–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:* {time_description}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:"
    ), reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, user_process_gift_time_unit, recipient_id, total_available_minutes)

@text_only_handler
def user_process_gift_time_unit(message, recipient_id, total_available_minutes):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã":
        return_to_scores_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏":
        return_to_gifts_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(user_id, {})
    sender_username = escape_markdown(user_data.get('username', f"@{user_id}"))
    recipient_username = escape_markdown(data['subscriptions']['users'][recipient_id].get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))
    time_description = format_time(total_available_minutes)
    
    unit = message.text
    if unit not in ["–ú–∏–Ω—É—Ç—ã", "–ß–∞—Å—ã", "–î–Ω–∏"]:
        bot.send_message(message.chat.id, (
            "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –≤—Ä–µ–º–µ–Ω–∏!\n"
            "üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        ), parse_mode="Markdown")
        user_process_gift_time_recipient(message, total_available_minutes)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    unit_prompt = {
        "–ú–∏–Ω—É—Ç—ã": "–º–∏–Ω—É—Ç",
        "–ß–∞—Å—ã": "—á–∞—Å–æ–≤",
        "–î–Ω–∏": "–¥–Ω–µ–π"
    }[unit]
    
    bot.send_message(message.chat.id, (
        f"üéÅ *–ü–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏*\n\n"
        f"üì§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {sender_username} (`{user_id}`)\n"
        f"üì• *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {recipient_username} (`{recipient_id}`)\n\n"
        f"‚è≥ *–î–æ—Å—Ç—É–ø–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:* {time_description}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {unit_prompt} –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:"
    ), reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, user_process_gift_time_amount, recipient_id, total_available_minutes, unit)

@text_only_handler
def user_process_gift_time_amount(message, recipient_id, total_available_minutes, unit):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã":
        return_to_scores_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏":
        return_to_gifts_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(user_id, {})
    sender_username = user_data.get('username', f"@{user_id}")
    recipient_username = data['subscriptions']['users'][recipient_id].get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    time_description = format_time(total_available_minutes)
    
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
        
        if unit == "–ú–∏–Ω—É—Ç—ã":
            gift_minutes = amount
        elif unit == "–ß–∞—Å—ã":
            gift_minutes = amount * 60
        elif unit == "–î–Ω–∏":
            gift_minutes = amount * 1440
        
        if gift_minutes > total_available_minutes:
            raise ValueError(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏!\n‚è≥ *–î–æ—Å—Ç—É–ø–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:* {time_description}")
        
        gift_duration = timedelta(minutes=gift_minutes)
        remaining_minutes = gift_minutes
        
        user_plans = data['subscriptions']['users'][user_id]['plans']
        for plan in sorted(
            [p for p in user_plans if p['plan_name'] in ['trial', 'weekly', 'monthly', 'quarterly', 'semiannual', 'yearly'] and p['source'] == 'user'],
            key=lambda x: datetime.strptime(x['end_date'], "%d.%m.%Y –≤ %H:%M")
        ):
            if remaining_minutes <= 0:
                break
            end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
            if end_date <= datetime.now():
                continue
            available_minutes = int((end_date - datetime.now()).total_seconds() // 60)
            minutes_to_deduct = min(remaining_minutes, available_minutes)
            new_end_date = end_date - timedelta(minutes=minutes_to_deduct)
            plan['end_date'] = new_end_date.strftime("%d.%m.%Y –≤ %H:%M")
            remaining_minutes -= minutes_to_deduct
        
        user_plans[:] = [p for p in user_plans if datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") > datetime.now()]
        
        recipient_data = data['subscriptions']['users'].setdefault(recipient_id, {
            "plans": [],
            "total_amount": 0,
            "username": recipient_username,
            "referral_points": 0,
            "free_feature_trials": {},
            "promo_usage_history": [],
            "referral_milestones": {},
            "points_history": []
        })
        
        latest_end = max(
            [datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") for p in recipient_data['plans']] or [datetime.now()]
        )
        new_end = latest_end + gift_duration
        
        recipient_data['plans'].append({
            "plan_name": "gift_time",
            "start_date": latest_end.strftime("%d.%m.%Y –≤ %H:%M"),
            "end_date": new_end.strftime("%d.%m.%Y –≤ %H:%M"),
            "price": 0,
            "source": f"gift_from_{user_id}"
        })
        
        data['subscriptions']['users'][user_id].setdefault('points_history', []).append({
            "action": "spent",
            "points": 0,
            "reason": f"–ø–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ {recipient_username}: {gift_minutes} –º–∏–Ω—É—Ç",
            "date": datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })
        
        recipient_data.setdefault('points_history', []).append({
            "action": "earned",
            "points": 0,
            "reason": f"–ø–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç {sender_username}: {gift_minutes} –º–∏–Ω—É—Ç",
            "date": datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })
        
        save_payments_data(data)
        
        gift_description = format_time(gift_minutes)
        
        active_plans = [p for p in user_plans if datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") > datetime.now()]
        end_date = min([datetime.strptime(p['end_date'], '%d.%m.%Y –≤ %H:%M') for p in active_plans] or [datetime.now()]).strftime('%d.%m.%Y –≤ %H:%M')
        
        bot.send_message(user_id, (
            f"üéâ *–í—ã –ø–æ–¥–∞—Ä–∏–ª–∏* {escape_markdown(recipient_username)} *{gift_description}!*\n"
            f"‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {end_date}"
        ), parse_mode="Markdown")
        
        bot.send_message(recipient_id, (
            f"üéÅ *{escape_markdown(sender_username)} –ø–æ–¥–∞—Ä–∏–ª –≤–∞–º {gift_description}!*\n"
            f"‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {new_end.strftime('%d.%m.%Y –≤ %H:%M')}"
        ), parse_mode="Markdown")
        
        gifts_menu(message)
        
    except ValueError as e:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")  
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        error_msg = str(e) if str(e).startswith(("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")) else "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!"
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_msg}!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, user_process_gift_time_amount, recipient_id, total_available_minutes, unit)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–∏—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤")
@check_function_state_decorator('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤')
@track_usage('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_gifts_history(message):
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(user_id, {})
    history = user_data.get('points_history', [])
    gift_entries = [entry for entry in history if "–ø–æ–¥–∞—Ä–æ–∫" in entry['reason'].lower()]

    if not gift_entries:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤!", parse_mode="Markdown")
        gifts_menu(message)
        return

    username = escape_markdown(user_data.get('username', f"@{user_id}"))

    history_summary = f"*–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤*:\n\n"
    for idx, entry in enumerate(gift_entries, 1):
        action = "–ü–æ–¥–∞—Ä–µ–Ω–æ" if entry['action'] == "spent" else "–ü–æ–ª—É—á–µ–Ω–æ"
        gift_type = []
        if entry['points'] > 0:
            gift_type.append(f"{format_number(entry['points'])} {pluralize_points(entry['points'])}")
        if "–≤—Ä–µ–º–µ–Ω–∏" in entry['reason'].lower():
            reason_parts = clean_escaped_text(entry['reason']).split(': ')
            if len(reason_parts) > 1:
                time_part = reason_parts[-1].split(' (–æ—Ç –∞–¥–º–∏–Ω–∞)')[0]
                gift_type.append(format_time(time_part))
            else:
                gift_type.append("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
        gift_type = " –∏ ".join(gift_type) if gift_type else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫"
        reason = escape_markdown(clean_escaped_text(entry['reason']))
        history_summary += (
            f"üéÅ *‚Ññ{idx}. {action}:*\n\n"
            f"üí∞ *–ü–æ–¥–∞—Ä–æ–∫:* {gift_type}\n"
            f"üìÖ *–î–∞—Ç–∞:* {entry['date']}\n\n"
        )

    message_parts = split_message(history_summary)
    for part in message_parts:
        bot.send_message(message.chat.id, part, parse_mode="Markdown")

    gifts_menu(message)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–ø—Ä–æ–º–æ–∫–æ–¥—ã) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–º–æ–∫–æ–¥—ã")
@check_function_state_decorator('–ü—Ä–æ–º–æ–∫–æ–¥—ã')
@track_usage('–ü—Ä–æ–º–æ–∫–æ–¥—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def promo_payments_function(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', '–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:", reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
@check_function_state_decorator('–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥')
@track_usage('–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def enter_promo_code(message):
    user_id = str(message.from_user.id)
    data = load_payment_data()

    last_promo_used = data['subscriptions']['users'].get(user_id, {}).get('last_promo_used')
    current_discount = data['subscriptions']['users'].get(user_id, {}).get('discount', 0)

    now = datetime.now()
    if last_promo_used and current_discount > 0:
        last_used_date = datetime.strptime(last_promo_used, "%d.%m.%Y –≤ %H:%M")
        days_since_last_use = (now - last_used_date).days

        user_subscriptions = data['subscriptions']['users'].get(user_id, {}).get('plans', [])
        has_active_subscription = any(
            datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M") > now
            for plan in user_subscriptions
        )

        if days_since_last_use >= 30 and not has_active_subscription:
            data['subscriptions']['users'][user_id]['discount'] = 0
            save_payments_data(data)
            bot.send_message(message.chat.id, (
                "‚ö†Ô∏è –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–∞!\n"
                "‚è≥ –ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 30 –¥–Ω–µ–π, –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É!"
            ), parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ–º–æ–∫–æ–¥—ã")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, (
        "‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:*\n\n"
        "üí° *–ß—Ç–æ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞?*\n"
        "–ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É (–¥–æ 100% –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–¥–∞). "
        "–°–∫–∏–¥–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏!\n\n"
        "üìÖ *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*\n"
        "- –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!\n"
        "- –ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ!\n"
        "- –ï—Å–ª–∏ –≤—ã –Ω–µ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π, —Å–∫–∏–¥–∫–∞ —Å–≥–æ—Ä–∏—Ç!"
    ), reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_promo_code)

@text_only_handler
def process_promo_code(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ–º–æ–∫–æ–¥—ã":
        promo_payments_function(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    user_id = str(message.from_user.id)
    username = message.from_user.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    code = message.text.upper()
    data = load_payment_data()
    promo_codes = data.get('promo_codes', {})

    now = datetime.now()
    last_promo_used = data['subscriptions']['users'].get(user_id, {}).get('last_promo_used')
    if last_promo_used:
        last_used_date = datetime.strptime(last_promo_used, "%d.%m.%Y –≤ %H:%M")
        days_since_last_use = (now - last_used_date).days
        if days_since_last_use < 30:
            bot.send_message(user_id, (
                f"‚ùå *–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ!*\n"
                f"üîí –í—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥ —á–µ—Ä–µ–∑ {30 - days_since_last_use} –¥–Ω–µ–π!"
            ), parse_mode="Markdown")
            payments_function(message, show_description=False)
            return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ–º–æ–∫–æ–¥—ã")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    if code not in promo_codes:
        bot.send_message(user_id, (
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n\n"
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_promo_code)
        return

    promo = promo_codes[code]
    uses = promo.get('uses', 1)
    used_by = promo.get('used_by', [])

    if len(used_by) >= uses:
        bot.send_message(user_id, (
            "‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥\n\n"
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_promo_code)
        return

    if any(entry['user_id'] == user_id for entry in used_by):
        bot.send_message(user_id, (
            "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥\n\n"
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_promo_code)
        return

    if promo.get('user_id') and promo['user_id'] != user_id:
        bot.send_message(user_id, (
            "‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥\n\n"
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_promo_code)
        return

    created_at = datetime.strptime(promo['created_at'], "%d.%m.%Y –≤ %H:%M")
    days_since_creation = (now - created_at).days
    if days_since_creation > 30:
        bot.send_message(user_id, (
            "‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫ (30 –¥–Ω–µ–π)! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥\n\n"
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_promo_code)
        return

    discount = promo['discount']
    applicable_category = promo.get('applicable_category')
    applicable_items = promo.get('applicable_items', [])

    if applicable_category is None and not applicable_items:
        applicability_str = "–≤—Å–µ —Ç–æ–≤–∞—Ä—ã"
    elif applicable_category == "subscriptions":
        applicability_str = "–≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏"
    elif applicable_category == "store":
        applicability_str = "–≤–µ—Å—å –º–∞–≥–∞–∑–∏–Ω"
    else:
        applicable_labels = []
        for item in applicable_items:
            if item in SUBSCRIPTION_PLANS:
                label = SUBSCRIPTION_PLANS[item]['label'].lower()
                applicable_labels.append(f"{label} –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö")
            elif item in STORE_ITEMS:
                label = STORE_ITEMS[item]['label']
                applicable_labels.append(f"{label} –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
            else:
                applicable_labels.append(item)
        applicability_str = ", ".join(applicable_labels)

    data['subscriptions']['users'].setdefault(user_id, {})['discount'] = discount
    data['subscriptions']['users'][user_id]['discount_type'] = 'promo'
    data['subscriptions']['users'][user_id]['applicable_category'] = applicable_category
    data['subscriptions']['users'][user_id]['applicable_items'] = applicable_items

    used_by.append({
        "user_id": user_id,
        "username": username,
        "used_at": now.strftime("%d.%m.%Y –≤ %H:%M")
    })
    promo['used_by'] = used_by

    if len(used_by) >= uses:
        promo['used'] = True
        promo['active'] = False
        promo['deactivated_at'] = now.strftime("%d.%m.%Y –≤ %H:%M")
        promo['deactivation_reason'] = "–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"

    data['subscriptions']['users'].setdefault(user_id, {}).setdefault('last_promo_used', None)
    data['subscriptions']['users'][user_id]['last_promo_used'] = now.strftime("%d.%m.%Y –≤ %H:%M")
    data['subscriptions']['users'].setdefault(user_id, {}).setdefault('promo_usage_history', []).append({
        "promo_code": code,
        "discount": discount,
        "used_at": now.strftime("%d.%m.%Y –≤ %H:%M"),
        "applicable_category": applicable_category,
        "applicable_items": applicable_items
    })

    data['promo_codes'] = promo_codes
    save_payments_data(data)

    bot.send_message(user_id, (
        "üéâ *–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n"
        f"‚ú® –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–¥–∫—É {discount:.0f}%!\n"
        f"üõí *–ü—Ä–∏–º–µ–Ω–∏–º –∫:* {applicability_str}\n"
        "üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—ë –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤!\n\n"
        "üìÖ –í—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥ —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π!\n"
        "‚è≥ –ï—Å–ª–∏ –≤—ã –Ω–µ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π, —Å–∫–∏–¥–∫–∞ —Å–≥–æ—Ä–∏—Ç!"
    ), parse_mode="Markdown")
    payments_function(message, show_description=False)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–≤–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã) -----------------------------------------

TRANSLATIONS_YOURPROMOCODES = {
    "all_items": "–≤—Å–µ —Ç–æ–≤–∞—Ä—ã",  
    "subscriptions": "–≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏",
    "store": "–≤–µ—Å—å –º–∞–≥–∞–∑–∏–Ω",
    "points_5": "5 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "points_10": "10 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "points_15": "15 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", 
    "points_25": "25 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "points_30": "30 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "points_50": "50 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
    "points_75": "75 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "points_100": "100 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "points_150": "150 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", 
    "points_200": "200 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "points_250": "250 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "points_350": "350 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
    "points_500": "500 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "points_750": "750 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "points_1000": "1000 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
    "time_1day": "1 –¥–µ–Ω—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "time_2days": "2 –¥–Ω—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "time_4days": "4 –¥–Ω—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
    "time_5days": "5 –¥–Ω–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "time_8days": "8 –¥–Ω–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "time_10days": "10 –¥–Ω–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
    "time_14days": "14 –¥–Ω–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "time_15days": "15 –¥–Ω–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "time_21days": "21 –¥–µ–Ω—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ", 
    "time_45days": "45 –¥–Ω–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "time_60days": "60 –¥–Ω–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "time_120days": "120 –¥–Ω–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
    "trial_subscription_3": "3 –¥–Ω—è –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö", "weekly_subscription_7": "7 –¥–Ω–µ–π –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö",
    "monthly_subscription_30": "30 –¥–Ω–µ–π –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö", "quarterly_subscription_90": "90 –¥–Ω–µ–π –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö",
    "semiannual_subscription_180": "180 –¥–Ω–µ–π –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö", "yearly_subscription_365": "365 –¥–Ω–µ–π –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö",
    "discount_type_promo": "–ø—Ä–æ–º–æ–∫–æ–¥", "discount_type_referral": "—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è"
}

def get_applicability_str(applicable_category, applicable_items):
    if applicable_category is None and not applicable_items:
        return TRANSLATIONS_YOURPROMOCODES["all_items"] 
    if applicable_category in TRANSLATIONS_YOURPROMOCODES:
        return TRANSLATIONS_YOURPROMOCODES[applicable_category]
    applicable_labels = [TRANSLATIONS_YOURPROMOCODES.get(item, item) for item in applicable_items]
    return ", ".join(applicable_labels)

def send_long_message(chat_id, message_text, parse_mode="Markdown"):
    MAX_MESSAGE_LENGTH = 4096
    if len(message_text) <= MAX_MESSAGE_LENGTH:
        bot.send_message(chat_id, message_text, parse_mode=parse_mode)
        return
    
    parts = []
    current_part = ""
    for line in message_text.split("\n"):
        if len(current_part) + len(line) + 1 > MAX_MESSAGE_LENGTH:
            parts.append(current_part.strip())
            current_part = line + "\n"
        else:
            current_part += line + "\n"
    if current_part:
        parts.append(current_part.strip())
    
    for i, part in enumerate(parts, 1):
        if i == 1:
            bot.send_message(chat_id, part, parse_mode=parse_mode)
        else:
            header = f"*–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ {i}*\n\n"
            bot.send_message(chat_id, header + part, parse_mode=parse_mode)

def format_discount(discount):
    if isinstance(discount, (int, float)) and discount.is_integer():
        return f"{int(discount)}"
    return f"{discount:.2f}"

@bot.message_handler(func=lambda message: message.text == "–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã")
@check_function_state_decorator('–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã')
@track_usage('–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_promo_codes(message):
    user_id = str(message.from_user.id)
    data = load_payment_data()
    
    user_data = data["subscriptions"]["users"].get(user_id, {})
    promo_history = user_data.get("promo_usage_history", [])
    
    current_discount = user_data.get("discount", 0)
    discount_type = user_data.get("discount_type", "promo")
    applicable_category = user_data.get("applicable_category", None)
    applicable_items = user_data.get("applicable_items", [])
    
    promo_codes = data.get("promo_codes", {})
    unused_promos = []
    used_promo_codes = [promo["promo_code"] for promo in promo_history]  
    
    now = datetime.now()
    for promo_code, promo_data in promo_codes.items():
        if not promo_data.get("active", False):
            continue
        
        used_by = [entry["user_id"] for entry in promo_data.get("used_by", [])]
        if user_id in used_by or promo_code in used_promo_codes:
            continue
        
        promo_user_id = promo_data.get("user_id")
        if promo_user_id != user_id:
            continue
        
        created_at = datetime.strptime(promo_data["created_at"], "%d.%m.%Y –≤ %H:%M")
        days_since_creation = (now - created_at).days
        if days_since_creation > 30:
            continue
        
        uses = promo_data.get("uses", 1)
        if len(used_by) >= uses:
            continue
        
        unused_promos.append({
            "promo_code": promo_code,
            "discount": promo_data["discount"],
            "applicable_category": promo_data.get("applicable_category", None),
            "applicable_items": promo_data.get("applicable_items", [])
        })
    
    if not promo_history and current_discount == 0 and not unused_promos:
        bot.send_message(user_id, "‚ùå *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏–ª–∏ —Å–∫–∏–¥–æ–∫!*\n"
                                 "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫–∏!",
                         parse_mode="Markdown")
        return
    
    response = "üéü *–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏:*\n\n"
    
    if promo_history:
        response += "‚úÖ *–ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:*\n\n"
        for index, promo in enumerate(promo_history, 1):
            promo_code = promo["promo_code"]
            discount = promo["discount"]
            used_at = promo["used_at"]
            category = promo.get("applicable_category", None)
            items = promo.get("applicable_items", [])
            
            applicability = get_applicability_str(category, items)
            
            response += (f"üî∏ *‚Ññ{index}.* `{promo_code}`:\n"
                         f"   *–°–∫–∏–¥–∫–∞:* {format_discount(discount)}%\n"
                         f"   *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω:* {used_at}\n"
                         f"   *–ü—Ä–∏–º–µ–Ω–∏–º–æ –∫:* {applicability}\n\n")
    
    if current_discount > 0:
        applicability = get_applicability_str(applicable_category, applicable_items)
        translated_discount_type = TRANSLATIONS_YOURPROMOCODES.get(f"discount_type_{discount_type}", discount_type)
        
        response += (f"üîπ *–¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞ (–∞–∫—Ç–∏–≤–Ω–∞ —Å–µ–π—á–∞—Å):*\n"
                     f"   *–¢–∏–ø:* {translated_discount_type}\n"
                     f"   *–°–∫–∏–¥–∫–∞:* {format_discount(current_discount)}%\n"
                     f"   *–ü—Ä–∏–º–µ–Ω–∏–º–æ –∫:* {applicability}\n\n")
    
    if unused_promos:
        response += "‚ö†Ô∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:*\n\n"
        for index, promo in enumerate(unused_promos, 1):
            promo_code = promo["promo_code"]
            discount = promo["discount"]
            category = promo.get("applicable_category", None)
            items = promo.get("applicable_items", [])
            
            applicability = get_applicability_str(category, items)
            
            response += (f"üî∑ *‚Ññ{index}.* `{promo_code}`:\n"
                         f"   *–°–∫–∏–¥–∫–∞:* {format_discount(discount)}%\n"
                         f"   *–ü—Ä–∏–º–µ–Ω–∏–º–æ –∫:* {applicability}\n"
                         f"   *–°—Ç–∞—Ç—É—Å:* –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è\n\n")
    
    response += "üöÄ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ—â—ë –±–æ–ª—å—à–µ —Å–∫–∏–¥–æ–∫!"
    
    send_long_message(user_id, response)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (—Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã) -----------------------------------------

def is_user_subscribed(user_id, chat_id=CHANNEL_CHAT_ID):
    try:
        member = bot.get_chat_member(chat_id, user_id)
        return member.status in ['member', 'administrator', 'creator'] and member.status != 'kicked'
    except telebot.apihelper.ApiTelegramException as e:
        return False
    except Exception as e:
        return False

def is_channel_available(chat_id):
    try:
        chat = bot.get_chat(chat_id)
        return chat.type in ['channel', 'group', 'supergroup']
    except telebot.apihelper.ApiTelegramException as e:
        return False
    except Exception as e:
        return False

def background_subscription_check():
    while True:
        data = load_payment_data()
        for user_id in data['subscriptions']['users']:
            if not is_user_subscribed(int(user_id)):
                pass
        time.sleep(3600)

thread = threading.Thread(target=background_subscription_check, daemon=True)
thread.start()

@bot.message_handler(func=lambda message: message.text == "–†–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã")
@rate_limit_with_captcha
def get_day_for_ad(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    user_id = message.from_user.id
    data = load_payment_data()
    markup = InlineKeyboardMarkup()

    if 'ad_channels' not in data:
        bot.send_message(user_id, (
            "‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É...\n"
        ), parse_mode="Markdown")
        return

    user_data = data['subscriptions']['users'].get(str(user_id), {})
    subscribed_channels = user_data.get('ad_channels_subscribed', [])

    active_channels = False
    available_channels = False

    for chat_id, channel in data['ad_channels'].items():
        if not isinstance(channel, dict):
            channel = {'name': channel, 'active': False}
            data['ad_channels'][chat_id] = channel
            save_payments_data(data)  

        if channel.get('active', False) and is_channel_available(chat_id):
            active_channels = True
            if chat_id not in subscribed_channels:
                markup.add(InlineKeyboardButton(
                    f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel['name']}",
                    callback_data=f"subscribe_ad_{chat_id}"
                ))
                available_channels = True

    if not active_channels:
        bot.send_message(user_id, (
            "‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...\n"
        ), parse_mode="Markdown")
        return

    if not available_channels:
        bot.send_message(user_id, (
            "üéâ *–†–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç!*\n\n"
            "‚ú® –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã!\n"
            "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...\n"
        ), parse_mode="Markdown")
        return

    bot.send_message(user_id, (
        "üì¢ *–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤!*\n\n"
        "‚ú® –ü–æ–ª—É—á–∏—Ç–µ *+1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏* –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ª—é–±–æ–π –∫–∞–Ω–∞–ª!\n\n"
        "üëâ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –Ω–∏–∂–µ:"
    ), reply_markup=markup, parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data.startswith("subscribe_ad_"))
def check_ad_subscription(call):
    user_id = call.from_user.id
    selected_channel_id = call.data.replace("subscribe_ad_", "")
    data = load_payment_data()
    
    if selected_channel_id not in data['ad_channels'] or not data['ad_channels'][selected_channel_id]['active']:
        bot.send_message(call.message.chat.id, (
            "‚ùå –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª...\n"
        ), parse_mode="Markdown")
        bot.answer_callback_query(call.id, "–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return
    
    channel_name = data['ad_channels'][selected_channel_id]['name']
    
    if not is_channel_available(selected_channel_id):
        bot.send_message(call.message.chat.id, (
            "‚ùå –ö–∞–Ω–∞–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...\n"
        ), parse_mode="Markdown")
        bot.answer_callback_query(call.id, "–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return
    
    if not is_user_subscribed(user_id, selected_channel_id):
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel_name}", url=f"https://t.me/{channel_name.replace(' ', '')}"))
        markup.add(InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=call.data))
        bot.send_message(call.message.chat.id, (
            f"‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ *{channel_name}*! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª\n"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.answer_callback_query(call.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!")
        return
    
    user_data = data['subscriptions']['users'].setdefault(str(user_id), {
        "plans": [],
        "total_amount": 0,
        "username": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
        "referral_points": 0,
        "free_feature_trials": {},
        "promo_usage_history": [],
        "referral_milestones": {},
        "points_history": [],
        "ad_channels_subscribed": [],
        "discount": 0,
        "applicable_category": None,
        "applicable_items": [],
        "discount_type": None
    })
    
    if selected_channel_id in user_data['ad_channels_subscribed']:
        bot.send_message(call.message.chat.id, (
            f"‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ *{channel_name}*!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞\n"
        ), parse_mode="Markdown")
        bot.answer_callback_query(call.id, "–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω!")
        return
    
    new_end = set_free_trial_period(user_id, 1, f"ad_bonus_{selected_channel_id}")
    user_plans = user_data.get('plans', [])
    if user_plans:
        latest_plan = max(user_plans, key=lambda p: datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M"))
        start_date = latest_plan['start_date']
    else:
        start_date = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
    
    user_data['ad_channels_subscribed'].append(selected_channel_id)
    save_payments_data(data)
    
    bot.send_message(call.message.chat.id, (
        "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n"
        f"‚ú® –í—ã –ø–æ–ª—É—á–∏–ª–∏ *+1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏* –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ *{channel_name}*!\n"
        f"üïí *–ù–∞—á–∞–ª–æ:* {start_date}\n"
        f"‚åõ *–ö–æ–Ω–µ—Ü:* {new_end.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
        "üòä –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤!"
    ), parse_mode="Markdown")
    bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!")

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
@check_function_state_decorator('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')
@track_usage('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def refferal_payments_function(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–∞—à–∞ —Å—Å—ã–ª–∫–∞', '–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã', '–¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:", reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
@check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É')
@track_usage('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def return_to_referral_menu(message):
    refferal_payments_function(message)

def create_referral_link(user_id):
    data = load_payment_data()
    referral_code = data['referrals']['links'].get(str(user_id), str(uuid.uuid4()))
    data['referrals']['links'][str(user_id)] = referral_code
    save_payments_data(data)
    return f"https://t.me/newpidore3qf_bot?start={referral_code}" # API

def track_referral_activity(referral_code, new_user_id):
    data = load_payment_data()
    referrer_id = next((uid for uid, code in data['referrals']['links'].items() if code == referral_code), None)
    
    if (referrer_id and referrer_id != str(new_user_id) and 
        str(new_user_id) not in data['referrals']['stats'].get(referrer_id, [])):
        data['referrals']['stats'].setdefault(referrer_id, []).append(str(new_user_id))
        now = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        
        referral_count = len(data['referrals']['stats'][referrer_id])
        data['subscriptions']['users'].setdefault(referrer_id, {}).setdefault('referral_milestones', {})
        if str(referral_count) not in data['subscriptions']['users'][referrer_id]['referral_milestones']:
            data['subscriptions']['users'][referrer_id]['referral_milestones'][str(referral_count)] = now
        
        save_payments_data(data)
        return referrer_id
    return None

def apply_referral_bonus(referrer_id):
    data = load_payment_data()
    referrer_id_str = str(referrer_id)
    
    if referrer_id_str not in data['referrals']['stats']:
        data['referrals']['stats'][referrer_id_str] = []
    
    referral_count = len(data['referrals']['stats'][referrer_id_str])
    
    points = 0
    if referral_count <= 4:
        points = 1.0
    elif 5 <= referral_count <= 7:
        points = 1.5
    elif 8 <= referral_count <= 10:
        points = 1.0
    else: 
        points = 1.5
    
    data['subscriptions']['users'][referrer_id_str]['referral_points'] += points
    data['subscriptions']['users'][referrer_id_str]['points_history'].append({
        "action": "earned",
        "points": points,
        "reason": f"–†–µ—Ñ–µ—Ä–∞–ª ‚Ññ{referral_count}",
        "date": datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
    })
    
    bonus_days = 0
    discount = 0
    if referral_count == 1:
        bonus_days = 1
    elif referral_count == 5:
        bonus_days = 5
    elif referral_count == 10:
        bonus_days = 10
        discount = 10
    
    start_date = None
    end_date_str = None
    if bonus_days > 0:
        latest_end = max([datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") 
                         for p in data['subscriptions']['users'].get(referrer_id_str, {}).get('plans', [])] 
                         or [datetime.now()])
        new_end = latest_end + timedelta(days=bonus_days)
        start_date = latest_end.strftime("%d.%m.%Y –≤ %H:%M") 
        end_date_str = new_end.strftime("%d.%m.%Y –≤ %H:%M")  
        data['subscriptions']['users'][referrer_id_str]['plans'].append({
            "plan_name": "referral",
            "start_date": start_date,
            "end_date": end_date_str,
            "price": 0,
            "source": "referral"
        })
    
    if discount > 0:
        users_data = load_users_data()
        users_data[referrer_id_str]['discount'] = max(users_data.get(referrer_id_str, {}).get('discount', 0), discount)
        users_data[referrer_id_str]['discount_type'] = "referral"
    
    save_payments_data(data)
    
    points_str = f"{int(points)}" if points.is_integer() else f"{points:.2f}"
    
    message = f"üéâ *–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!*\n\n‚ú® –í—ã –ø–æ–ª—É—á–∏–ª–∏ +{points_str} –±–∞–ª–ª{'–∞' if points != 1 else ''} –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n"
    if bonus_days > 0:
        message += (
            f"üìÖ –ü–æ–ª—É—á–µ–Ω–æ: +{bonus_days} –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏!\n"
            f"üïí *–ù–∞—á–∞–ª–æ:* {start_date}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {end_date_str}\n\n"
        )
    if discount > 0:
        message += f"üéÅ –ü–æ–ª—É—á–µ–Ω–æ: *{discount}% —Å–∫–∏–¥–∫–∏*!\n\n"
    message += f"üî¢ –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referral_count}\n"
    
    bot.send_message(referrer_id, message, parse_mode="Markdown")

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–≤–∞—à–∞ —Å—Å—ã–ª–∫–∞) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–í–∞—à–∞ —Å—Å—ã–ª–∫–∞")
@check_function_state_decorator('–í–∞—à–∞ —Å—Å—ã–ª–∫–∞')
@track_usage('–í–∞—à–∞ —Å—Å—ã–ª–∫–∞')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def send_referral_link_message(message):
    user_id = message.from_user.id
    referral_link = create_referral_link(user_id)
    bot.send_message(message.chat.id, (
        f"üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*  \n"
        f"[{referral_link}]({referral_link})  \n\n"
        f"ü§ù *–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã:*  \n\n"
        f"- *1 —Ä–µ—Ñ–µ—Ä–∞–ª = +1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ + 1 –±–∞–ª–ª*  \n"
        f"- *5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ = +5 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ + 1.5 –±–∞–ª–ª–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ (5‚Äì7)*  \n"
        f"- *10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ = +10 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ + 10% —Å–∫–∏–¥–∫–∞ + 1 –±–∞–ª–ª –∑–∞ 8‚Äì10, 1.5 –∑–∞ 11+*  \n"
        f"- –ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª –∫—É–ø–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É:  \n"
        f"  - –Ω–∞ 7 –¥–Ω–µ–π: *+1 –¥–µ–Ω—å*  \n"
        f"  - –Ω–∞ 30 –¥–Ω–µ–π: *+3 –¥–Ω—è*  \n"
        f"  - –Ω–∞ 365 –¥–Ω–µ–π: *+7 –¥–Ω–µ–π*  \n\n"
        f"üéÅ *–ß—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π:*  \n\n"
        f"- –ö–∞–∫ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: *3 –¥–Ω—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞*  \n"
        f"- –ó–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ: *+1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏*  \n"
        f"–ò—Ç–æ–≥–æ: *4 –¥–Ω—è* –¥–ª—è —Å—Ç–∞—Ä—Ç–∞!  \n\n"
        f"üöÄ –î–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–æ–ª—å—à–µ!\n"
    ), parse_mode="Markdown")

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–≤–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã")
@check_function_state_decorator('–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã')
@track_usage('–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_referrals_and_bonuses(message):
    user_id = message.from_user.id
    data = load_payment_data()
    users_data = load_users_data()
    referrals = list(set(data['referrals']['stats'].get(str(user_id), [])))
    points = data['subscriptions']['users'].get(str(user_id), {}).get('referral_points', 0)
    discount = users_data.get(str(user_id), {}).get('discount', 0)

    if not referrals:
        bot.send_message(message.chat.id, (
            "üôÅ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –±–æ–Ω—É—Å–æ–≤!\n\n"
            "ü§ù –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏ –∏ –±–∞–ª–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n\n"
        ), parse_mode="Markdown")
        return

    referral_count = len(referrals)
    total_bonus_days = 0
    total_bonus_points = 0
    total_discount = 0

    for i in range(1, referral_count + 1):
        if i == 1:
            total_bonus_days += 1
        elif i == 5:
            total_bonus_days += 5
        elif i == 10:
            total_bonus_days += 10
            total_discount = 10

    for i in range(1, referral_count + 1):
        if i <= 4:
            total_bonus_points += 1.0
        elif 5 <= i <= 7:
            total_bonus_points += 1.5
        elif 8 <= i <= 10:
            total_bonus_points += 1.0
        else:  
            total_bonus_points += 1.5

    total_purchase_bonus_days = 0
    referral_purchase_bonuses = {} 
    for referral_id in referrals:
        referral_plans = data['subscriptions']['users'].get(referral_id, {}).get('plans', [])
        purchase_bonus_days = 0
        for plan in referral_plans:
            if plan.get('source') == "user": 
                duration = (datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M") - 
                           datetime.strptime(plan['start_date'], "%d.%m.%Y –≤ %H:%M")).days
                if duration >= 365:
                    purchase_bonus_days += 7
                elif duration >= 30:
                    purchase_bonus_days += 3
                elif duration >= 7:
                    purchase_bonus_days += 1
        referral_purchase_bonuses[referral_id] = purchase_bonus_days
        total_purchase_bonus_days += purchase_bonus_days

    total_bonus_days += total_purchase_bonus_days

    points_str = f"{int(points)}" if points.is_integer() else f"{points:.2f}"

    message_text = (
        f"ü§ù *–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:*\n\n"
        f"üë• *–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:* {len(referrals)} —á–µ–ª–æ–≤–µ–∫\n"
        f"üéÅ *–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã:* {points_str}\n"
        f"üìÖ *–û–±—â–µ–µ –∫–æ–ª-–≤–æ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π:* {total_bonus_days}\n"
        f"üè∑Ô∏è *–¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞:* {total_discount}%\n\n"
    )

    for index, referral_id in enumerate(referrals, start=1):
        referral_data = data['subscriptions']['users'].get(referral_id, {})
        referral_username = escape_markdown(referral_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
        join_date = users_data.get(referral_id, {}).get('join_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        referral_index = index  
        registration_bonus_days = 0
        registration_bonus_points = 0
        if referral_index == 1:
            registration_bonus_days = 1
            registration_bonus_points = 1.0
        elif referral_index == 5:
            registration_bonus_days = 5
            registration_bonus_points = 1.5
        elif referral_index == 10:
            registration_bonus_days = 10
            registration_bonus_points = 1.0
        elif 1 <= referral_index <= 4:
            registration_bonus_points = 1.0
        elif 5 <= referral_index <= 7:
            registration_bonus_points = 1.5
        elif 8 <= referral_index <= 10:
            registration_bonus_points = 1.0
        else:  
            registration_bonus_points = 1.5

        registration_bonus_points_str = f"{int(registration_bonus_points)}" if registration_bonus_points.is_integer() else f"{registration_bonus_points:.2f}"

        referral_bonus_days = sum((datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") - 
                                  datetime.strptime(p['start_date'], "%d.%m.%Y –≤ %H:%M")).days 
                                  for p in referral_data.get('plans', []) if p.get('source') == "referral")

        purchase_bonus_days = referral_purchase_bonuses.get(referral_id, 0)

        message_text += (
            f"‚úÖ *‚Ññ{index}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {referral_username}\n"
            f"üë§ *ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* `{referral_id}`\n"
            f"üìÖ *–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:* {join_date}\n"
        )

        message_text += f"üéÅ *–í–∞—à –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:*\n"
        if registration_bonus_days > 0:
            message_text += f"  ‚Ä¢ +{registration_bonus_days} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏\n"
        message_text += f"  ‚Ä¢ +{registration_bonus_points_str} –±–∞–ª–ª–æ–≤\n"

        if purchase_bonus_days > 0:
            message_text += f"üéÅ *–í–∞—à –±–æ–Ω—É—Å –∑–∞ –ø–æ–∫—É–ø–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:*\n"
            message_text += f"  ‚Ä¢ +{purchase_bonus_days} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏\n"

        message_text += f"üìÖ *–ë–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞:* {referral_bonus_days} –¥–Ω–µ–π\n\n"

    send_long_message(message.chat.id, message_text)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (—Ç–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")
@check_function_state_decorator('–¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤')
@track_usage('–¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_referral_leaderboard(message):
    user_id = str(message.from_user.id) 
    data = load_payment_data()
    
    leaderboard_data = []
    for uid, refs in data['referrals']['stats'].items():
        unique_refs = len(set(refs))
        milestone_date = data['subscriptions']['users'].get(uid, {}).get('referral_milestones', {}).get(str(unique_refs), "01.01.2025 –≤ 00:00")
        leaderboard_data.append((uid, unique_refs, milestone_date))
    
    leaderboard = sorted(leaderboard_data, key=lambda x: (-x[1], x[2]))
    
    if not leaderboard:
        bot.send_message(message.chat.id, (
            "üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω...\n\n"
            "üöÄ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø!"
        ), parse_mode="Markdown")
        return
        
    message_text = "*üèÜ –¢–æ–ø 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:*\n\n"
    for idx, (uid, ref_count, _) in enumerate(leaderboard[:10], 1):
        message_text += f"üë§ ‚Ññ{idx}. `{uid}`: {ref_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
    
    leader_history = data['referrals']['leaderboard_history']
    if leader_history['current_leader']:
        days_at_top = leader_history['days_at_top']
        message_text += (
            f"\nüëë *–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä:* `{leader_history['current_leader']}`\n"
            f"‚è≥ *–î–Ω–µ–π –Ω–∞ –≤–µ—Ä—à–∏–Ω–µ:* {days_at_top}\n"
        )
    
    now = datetime.now()
    top_formed_date = data['referrals'].get('top_formed_date')
    last_bonus_date = data['referrals'].get('last_top10_bonus')
    
    if top_formed_date:
        if last_bonus_date:
            last_bonus_dt = datetime.strptime(last_bonus_date, "%d.%m.%Y –≤ %H:%M")
            next_bonus_date = last_bonus_dt + timedelta(days=30)
        else:
            top_formed_dt = datetime.strptime(top_formed_date, "%d.%m.%Y –≤ %H:%M")
            next_bonus_date = top_formed_dt + timedelta(days=30)
        
        days_until_next_bonus = (next_bonus_date - now).days
        if days_until_next_bonus >= 0:
            message_text += f"\nüìÖ *–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ —á–µ—Ä–µ–∑:* {days_until_next_bonus} –¥–Ω–µ–π\n"
        else:
            message_text += "\nüìÖ *–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ —Å–∫–æ—Ä–æ!*\n"
    
    user_position = None
    user_ref_count = 0
    for idx, (uid, ref_count, _) in enumerate(leaderboard, 1):
        if uid == user_id:
            user_position = idx
            user_ref_count = ref_count
            break
    
    message_text += "\n"
    if user_position:
        position_text = f"üìç *–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è* (`{user_id}`)*:* \n      –í—ã ‚Ññ{user_position} —Å {user_ref_count} —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏"
        message_text += position_text
    else:
        position_text = f"üìç *–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è* (`{user_id}`)*:* \n      –í—ã –ø–æ–∫–∞ –Ω–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!"
        message_text += position_text
    
    send_long_message(message.chat.id, message_text)

BLOCKED_USERS_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'data', 'admin', 'bloked_bot', 'blocked_bot_users.json')

def load_blocked_users():
    if os.path.exists(BLOCKED_USERS_FILE):
        with open(BLOCKED_USERS_FILE, 'r') as file:
            return json.load(file)
    return []

def save_blocked_users(blocked_users):
    with open(BLOCKED_USERS_FILE, 'w') as file:
        json.dump(blocked_users, file, indent=4)

def safe_send_message(user_id, text, parse_mode=None):
    try:
        bot.send_message(user_id, text, parse_mode=parse_mode)
    except ApiTelegramException as e:
        if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
            blocked_users = load_blocked_users()
            if user_id not in blocked_users:
                blocked_users.append(user_id)
                save_blocked_users(blocked_users)
        else:
            raise e

def check_monthly_leader_bonus():
    while True:
        try:
            data = load_payment_data()
            
            if 'referrals' not in data or 'stats' not in data['referrals']:
                data['referrals'] = {
                    'links': {},
                    'stats': {},
                    'bonuses': {},
                    'leaderboard_history': {
                        'current_leader': None,
                        'leader_start_date': None,
                        'days_at_top': 0
                    },
                    'top_formed_date': None,
                    'last_top10_bonus': None
                }
                save_payments_data(data)
                time.sleep(86400)
                continue
            
            leaderboard_data = []
            for uid, refs in data['referrals']['stats'].items():
                ref_count = len(set(refs))
                milestone_date = data['subscriptions']['users'].get(uid, {}).get('referral_milestones', {}).get(str(ref_count), "01.01.2025 –≤ 00:00")
                leaderboard_data.append((uid, ref_count, milestone_date))
            
            if not leaderboard_data:
                data['referrals']['top_formed_date'] = None
                save_payments_data(data)
                time.sleep(86400)
                continue
            
            now = datetime.now()
            
            if data['referrals'].get('top_formed_date') is None:
                data['referrals']['top_formed_date'] = now.strftime("%d.%m.%Y –≤ %H:%M")
                save_payments_data(data)
            
            leaderboard = sorted(leaderboard_data, key=lambda x: (-x[1], x[2]))
            current_top_user, top_referrals, _ = leaderboard[0]
            leader_history = data['referrals']['leaderboard_history']
            current_leader = leader_history.get('current_leader')
            
            if current_leader != current_top_user:
                leader_history['current_leader'] = current_top_user
                leader_history['leader_start_date'] = now.strftime("%d.%m.%Y –≤ %H:%M")
                leader_history['days_at_top'] = 1
            else:
                if leader_start_date := leader_history.get('leader_start_date'):
                    start_date = datetime.strptime(leader_start_date, "%d.%m.%Y –≤ %H:%M")
                    days_at_top = (now - start_date).days + 1
                    leader_history['days_at_top'] = days_at_top
            
            top_formed_date = data['referrals'].get('top_formed_date')
            if top_formed_date:
                top_formed_dt = datetime.strptime(top_formed_date, "%d.%m.%Y –≤ %H:%M")
                last_bonus_date = data['referrals'].get('last_top10_bonus')
                
                if last_bonus_date is None:
                    days_since_formation = (now - top_formed_dt).days
                    if days_since_formation >= 30:
                        for idx, (uid, ref_count, _) in enumerate(leaderboard[:10], 1):
                            data['subscriptions']['users'].setdefault(uid, {}).setdefault('referral_points', 0)
                            data['subscriptions']['users'][uid]['referral_points'] += 1
                            data['subscriptions']['users'][uid].setdefault('points_history', []).append({
                                "action": "earned",
                                "points": 1,
                                "reason": "–¢–æ–ø-10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –º–µ—Å—è—Ü",
                                "date": now.strftime("%d.%m.%Y –≤ %H:%M")
                            })
                            
                            bonus_days = {1: 3, 2: 2, 3: 1}.get(idx, 0)
                            if bonus_days > 0:
                                new_end = set_free_trial_period(int(uid), bonus_days, f"leaderboard_top_{idx}")
                                user_plans = data['subscriptions']['users'].get(uid, {}).get('plans', [])
                                latest_plan = max(user_plans, key=lambda p: datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M"))
                                start_date = latest_plan['start_date']
                                safe_send_message(uid, (
                                    f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n"
                                    f"‚ú® –í—ã –Ω–∞ {idx}-–º –º–µ—Å—Ç–µ –≤ —Ç–æ–ø–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!\n\n"
                                    f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ *+{bonus_days} –¥–Ω–µ–π* –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!\n"
                                    f"üïí *–ù–∞—á–∞–ª–æ:* {start_date}\n"
                                    f"‚åõ *–ö–æ–Ω–µ—Ü:* {new_end.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
                                    "üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π!"
                                ), parse_mode="Markdown")
                            
                            safe_send_message(uid, (
                                "üéâ *–í—ã –≤ –¢–û–ü-10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –º–µ—Å—è—Ü–∞!*\n"
                                "‚ú® –ü–æ–ª—É—á–µ–Ω–æ *+1 –±–∞–ª–ª*! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å!"
                            ), parse_mode="Markdown")
                        
                        data['referrals']['last_top10_bonus'] = now.strftime("%d.%m.%Y –≤ %H:%M")
                else:
                    try:
                        last_bonus_dt = datetime.strptime(last_bonus_date, "%d.%m.%Y –≤ %H:%M")
                    except ValueError:
                        last_bonus_dt = datetime.strptime(f"{last_bonus_date} –≤ 00:00", "%d.%m.%Y –≤ %H:%M")
                        data['referrals']['last_top10_bonus'] = last_bonus_dt.strftime("%d.%m.%Y –≤ %H:%M")
                    
                    days_since_last_bonus = (now - last_bonus_dt).days
                    if days_since_last_bonus >= 30:
                        for idx, (uid, ref_count, _) in enumerate(leaderboard[:10], 1):
                            data['subscriptions']['users'].setdefault(uid, {}).setdefault('referral_points', 0)
                            data['subscriptions']['users'][uid]['referral_points'] += 1
                            data['subscriptions']['users'][uid].setdefault('points_history', []).append({
                                "action": "earned",
                                "points": 1,
                                "reason": "–¢–æ–ø-10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –º–µ—Å—è—Ü",
                                "date": now.strftime("%d.%m.%Y –≤ %H:%M")
                            })
                            
                            bonus_days = {1: 3, 2: 2, 3: 1}.get(idx, 0)
                            if bonus_days > 0:
                                new_end = set_free_trial_period(int(uid), bonus_days, f"leaderboard_top_{idx}")
                                user_plans = data['subscriptions']['users'].get(uid, {}).get('plans', [])
                                latest_plan = max(user_plans, key=lambda p: datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M"))
                                start_date = latest_plan['start_date']
                                safe_send_message(uid, (
                                    f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n"
                                    f"‚ú® –í—ã –Ω–∞ {idx}-–º –º–µ—Å—Ç–µ –≤ —Ç–æ–ø–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!\n\n"
                                    f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ *+{bonus_days} –¥–Ω–µ–π* –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!\n"
                                    f"üïí *–ù–∞—á–∞–ª–æ:* {start_date}\n"
                                    f"‚åõ *–ö–æ–Ω–µ—Ü:* {new_end.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
                                    "üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π!"
                                ), parse_mode="Markdown")
                            
                            safe_send_message(uid, (
                                "üéâ *–í—ã –≤ –¢–û–ü-10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –º–µ—Å—è—Ü–∞!*\n"
                                "‚ú® –ü–æ–ª—É—á–µ–Ω–æ *+1 –±–∞–ª–ª*! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å!"
                            ), parse_mode="Markdown")
                        
                        data['referrals']['last_top10_bonus'] = now.strftime("%d.%m.%Y –≤ %H:%M")
            
            save_payments_data(data)
        
        except Exception as e:
            time.sleep(60)
        
        time.sleep(86400)

leader_thread = threading.Thread(target=check_monthly_leader_bonus, daemon=True)
leader_thread.start()

# --------------------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´ -------------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
@check_function_state_decorator('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
@track_usage('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_calculators(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞') 
    markup.add('–ê–ª–∫–æ–≥–æ–ª—å', '–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç', '–ù–∞–ª–æ–≥') 
    markup.add('–†–∞—Å—Ç–∞–º–æ–∂–∫–∞', '–û–°–ê–ì–û', '–®–∏–Ω—ã') 
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–æ–≤:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
@check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
@track_usage('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def return_to_calculators(message):
    view_calculators(message)

# ---------------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê -------------------------------------------------------

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
TRIP_DIR = os.path.join(BASE_DIR, 'data', 'user', 'calculators', 'trip')
geolocator = Nominatim(user_agent="fuel_expense_bot")

def ensure_trip_directory():
    os.makedirs(TRIP_DIR, exist_ok=True)

ensure_trip_directory()

user_trip_data = {}

def save_data(user_id):
    if user_id in user_trip_data:
        file_path = os.path.join(TRIP_DIR, f"{user_id}_trip_data.json")
        with open(file_path, "w", encoding='utf-8') as json_file:
            json.dump({
                "user_id": str(user_id),
                "trips": user_trip_data[user_id]
            }, json_file, ensure_ascii=False, indent=4)

def add_trip(user_id, trip):
    if user_id not in user_trip_data:
        user_trip_data[user_id] = []
    user_trip_data[user_id].append(trip)

def save_trip_data(user_id):
    file_path = os.path.join(TRIP_DIR, f"{user_id}_trip_data.json")
    with open(file_path, "w", encoding='utf-8') as json_file:
        json.dump({
            "user_id": str(user_id),
            "trips": user_trip_data.get(user_id, [])
        }, json_file, ensure_ascii=False, indent=4)

def load_trip_data(user_id):
    file_path = os.path.join(TRIP_DIR, f"{user_id}_trip_data.json")
    if os.path.exists(file_path):
        try:
            with open(file_path, "r", encoding='utf-8') as json_file:
                data = json.load(json_file)
                if isinstance(data, dict) and "trips" in data:
                    return data["trips"]
                else:
                    with open(file_path, "w", encoding='utf-8') as json_file:
                        json.dump({
                            "user_id": str(user_id),
                            "trips": data
                        }, json_file, ensure_ascii=False, indent=4)
                    return data
        except UnicodeDecodeError:
            with open(file_path, "r", encoding='windows-1251') as json_file:
                data = json.load(json_file)
            with open(file_path, "w", encoding='utf-8') as json_file:
                if isinstance(data, dict) and "trips" in data:
                    json.dump(data, json_file, ensure_ascii=False, indent=4)
                    return data["trips"]
                else:
                    json.dump({
                        "user_id": str(user_id),
                        "trips": data
                    }, json_file, ensure_ascii=False, indent=4)
                    return data
    else:
        return []

def load_all_user_data():
    for filename in os.listdir(TRIP_DIR):
        if filename.endswith("_trip_data.json"):
            user_id = filename.split("_")[0]
            user_trip_data[user_id] = load_trip_data(user_id)

def save_all_trip_data():
    for user_id in user_trip_data:
        save_trip_data(user_id)

load_all_user_data()

user_trip_data = {}
trip_data = {}
temporary_trip_data = {}
fuel_types = ["–ê–ò-92", "–ê–ò-95", "–ê–ò-98", "–ê–ò-100", "–î–¢", "–ì–ê–ó"]
date_pattern = r"^\d{2}.\d{2}.\d{4}$"

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
@check_function_state_decorator('–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞')
@track_usage('–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_fuel_expense(message, show_description=True):
    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞—Å—á–µ—Ç—É —Ç–æ–ø–ª–∏–≤–∞*\n\n"
        "üìå *–†–∞—Å—á–µ—Ç —Ç–æ–ø–ª–∏–≤–∞:*\n"
        "–†–∞—Å—á–µ—Ç –≤–µ–¥–µ—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º - *–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞, –¥–∞—Ç–∞, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞, —Ü–µ–Ω–∞ –∑–∞ –ª–∏—Ç—Ä, —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤*\n\n"
        "üìå *–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–µ–∑–¥–æ–∫:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—á–µ—Ç—ã\n\n"
        "üìå *–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–µ–∑–¥–æ–∫:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—á–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–º –Ω–µ –Ω—É–∂–Ω—ã"
    )

    user_id = message.from_user.id

    if user_id not in user_trip_data:
        user_trip_data[user_id] = load_trip_data(user_id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥")
    item2 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–µ–∑–¥–∫–∏")
    item3 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫–∏")
    item4 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item5 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    markup.add(item1, item2, item3)
    markup.add(item4)
    markup.add(item5)

    bot.clear_step_handler_by_chat_id(user_id)

    if show_description:
        bot.send_message(user_id, description, parse_mode="Markdown")

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞:", reply_markup=markup)

def reset_and_start_over(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥")
    item2 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–µ–∑–¥–∫–∏")
    item3 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫–∏")
    item4 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item5 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    markup.add(item1, item2, item3)
    markup.add(item4)
    markup.add(item5)

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞:", reply_markup=markup)

save_all_trip_data()

def reset_user_data(user_id):
    if user_id not in user_trip_data:
        user_trip_data[user_id] = load_trip_data(user_id)
    bot.clear_step_handler_by_chat_id(user_id)

# --------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê (—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥) ---------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥")
@check_function_state_decorator('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥')
@track_usage('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def calculate_fuel_cost_handler(message):
    chat_id = message.chat.id

    bot.clear_step_handler_by_chat_id(chat_id)

    trip_data[chat_id] = {"locations": []}

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item3 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item4 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)
    markup.add(item4)
    sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ 1 –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=markup)
    reset_user_data(chat_id)

    bot.register_next_step_handler(sent, process_location_step, location_number=1)

@text_only_handler
def process_location_step(message, location_number):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item3 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item4 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)
    markup.add(item4)

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    location_data = {}
    if message.location:
        location = message.location
        try:
            address = geolocator.reverse((location.latitude, location.longitude), timeout=10).address
            location_data = {
                "address": address,
                "latitude": location.latitude,
                "longitude": location.longitude
            }
            bot.send_message(chat_id, f"–í–∞—à–µ {location_number} –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n{address}")
        except GeocoderUnavailable:
            bot.send_message(chat_id, "–°–µ—Ä–≤–∏—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return
    else:
        address = message.text
        try:
            location = geolocator.geocode(address, timeout=10)
            if location:
                location_data = {
                    "address": address,
                    "latitude": location.latitude,
                    "longitude": location.longitude
                }
                bot.send_message(chat_id, f"–í–∞—à–µ {location_number} –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n{address}")
            else:
                sent = bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å")
                bot.register_next_step_handler(sent, process_location_step, location_number)
                return
        except GeocoderUnavailable:
            bot.send_message(chat_id, "–°–µ—Ä–≤–∏—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return

    trip_data[chat_id]["locations"].append(location_data)

    if location_number == 1:
        sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ 2 –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=markup)
        bot.register_next_step_handler(sent, process_location_step, location_number=2)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–î–∞")
        item2 = types.KeyboardButton("–ù–µ—Ç")
        item3 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        item4 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        item5 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1, item2)
        markup.add(item3)
        markup.add(item4)
        markup.add(item5)
        sent = bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞?", reply_markup=markup)
        bot.register_next_step_handler(sent, process_add_more_locations, location_number + 1)

@text_only_handler
def process_add_more_locations(message, next_location_number):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–î–∞")
    item2 = types.KeyboardButton("–ù–µ—Ç")
    item3 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item4 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item5 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1, item2)
    markup.add(item3)
    markup.add(item4)
    markup.add(item5)

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–î–∞":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
        item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        item3 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        item4 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        markup.add(item4)
        sent = bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ {next_location_number} –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=markup)
        bot.register_next_step_handler(sent, process_location_step, next_location_number)
    elif message.text == "–ù–µ—Ç":
        calculate_total_distance(chat_id)
    else:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç!", reply_markup=markup)
        bot.register_next_step_handler(sent, process_add_more_locations, next_location_number)

def calculate_total_distance(chat_id):
    locations = trip_data[chat_id]["locations"]
    total_distance = 0.0
    for i in range(len(locations) - 1):
        start_coords = (locations[i]["latitude"], locations[i]["longitude"])
        end_coords = (locations[i + 1]["latitude"], locations[i + 1]["longitude"])
        total_distance += geodesic(start_coords, end_coords).kilometers

    trip_data[chat_id]["distance"] = total_distance

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_auto = types.KeyboardButton("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ")
    item_input = types.KeyboardButton("–í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é")
    item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    markup.add(item_auto, item_input)
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)

    sent = bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –≤–≤–æ–¥–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(sent, process_distance_choice_step, total_distance)

@text_only_handler
def process_custom_distance_step(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    try:
        custom_distance = float(message.text)
        if custom_distance <= 0:
            raise ValueError
        bot.send_message(chat_id, f"–í—ã –≤–≤–µ–ª–∏ —Å–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {custom_distance:.2f} –∫–º.", reply_markup=markup)

        trip_data[chat_id]["distance"] = custom_distance

        markup_date = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_manual = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é")
        item_skip = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã")
        markup_date.add(item_manual, item_skip)
        markup_date.add(item1)
        markup_date.add(item2)

        sent = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–∞—Ç—ã:", reply_markup=markup_date)
        bot.register_next_step_handler(sent, process_date_step, custom_distance)
    except ValueError:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è!", reply_markup=markup)
        bot.register_next_step_handler(sent, process_custom_distance_step)

@text_only_handler
def process_distance_choice_step(message, distance_km):
    chat_id = message.chat.id
    trip_data[chat_id]["distance"] = distance_km

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_auto = types.KeyboardButton("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ")
    item_input = types.KeyboardButton("–í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é")
    item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    markup.add(item_auto, item_input)
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)

    if message.text == "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ":
        bot.send_message(chat_id, f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏: {distance_km:.2f} –∫–º.")
        process_date_step(message, distance_km)
    elif message.text == "–í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é":
        custom_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        custom_markup.add(item1)
        custom_markup.add(item2)
        custom_markup.add(item3)

        sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º.):", reply_markup=custom_markup)
        bot.register_next_step_handler(sent, process_custom_distance_step)
    else:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!", reply_markup=markup)
        bot.register_next_step_handler(sent, process_distance_choice_step, distance_km)

@text_only_handler
def process_date_step(message, distance):
    chat_id = message.chat.id

    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã":
        selected_date = "–ë–µ–∑ –¥–∞—Ç—ã"
        process_selected_date(message, selected_date)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=markup)
        bot.register_next_step_handler(sent, process_manual_date_step, distance)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_manual = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é")
        item_skip = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã")
        item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item_manual, item_skip)
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)

        sent = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–∞—Ç—ã:", reply_markup=markup)
        bot.register_next_step_handler(sent, process_date_step, distance)

@text_only_handler
def process_date_input_step(message, distance):
    chat_id = message.chat.id
    date_input = message.text.strip()

    date_pattern = r"^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.\d{4}$"
    if re.match(date_pattern, date_input):
        selected_date = date_input
        process_selected_date(message, selected_date)
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, process_date_input_step, distance)

@text_only_handler
def handle_date_selection(message, distance):
    chat_id = message.chat.id

    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã":
        selected_date = "–ë–µ–∑ –¥–∞—Ç—ã"
        process_selected_date(message, selected_date)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)

        sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=markup)
        bot.register_next_step_handler(sent, process_manual_date_step, distance)
    else:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!")
        bot.register_next_step_handler(sent, handle_date_selection, distance)

@text_only_handler
def process_selected_date(message, selected_date):
    chat_id = message.chat.id
    distance_km = trip_data[chat_id].get("distance")

    if distance_km is None:
        bot.send_message(chat_id, "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∑–∞–¥–∞–Ω–æ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return

    show_fuel_types(chat_id, selected_date, distance_km)

@text_only_handler
def process_manual_date_step(message, distance):
    chat_id = message.chat.id
    date_pattern = r"\d{2}\.\d{2}\.\d{4}"

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)

    if re.match(date_pattern, message.text):
        day, month, year = map(int, message.text.split('.'))
        if 2000 <= year <= 3000:
            try:
                datetime(year, month, day)
                bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {message.text}", reply_markup=markup)
                show_fuel_types(chat_id, message.text, distance)
            except ValueError:
                sent = bot.send_message(chat_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É", reply_markup=markup)
                bot.register_next_step_handler(sent, process_manual_date_step, distance)
        else:
            sent = bot.send_message(chat_id, "–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 2000 –≥. –¥–æ 3000 –≥.", reply_markup=markup)
            bot.register_next_step_handler(sent, process_manual_date_step, distance)
    else:
        sent = bot.send_message(chat_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=markup)
        bot.register_next_step_handler(sent, process_manual_date_step, distance)

def show_fuel_types(chat_id, date, distance):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

    row1 = [KeyboardButton(fuel_type) for fuel_type in fuel_types[:3]]
    row2 = [KeyboardButton(fuel_type) for fuel_type in fuel_types[3:]]
    row3 = [KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")]
    row4 = [KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")]
    row5 = [KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]

    markup.add(*row1, *row2, *row3)
    markup.add(*row4)
    markup.add(*row5)

    sent = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞:", reply_markup=markup)
    bot.register_next_step_handler(sent, process_fuel_type, date, distance)

def clean_price(price):
    cleaned_price = re.sub(r'[^\d.]', '', price)
    if cleaned_price.count('.') > 1:
        cleaned_price = cleaned_price[:cleaned_price.find('.') + 1] + cleaned_price[cleaned_price.find('.') + 1:].replace('.', '')
    return cleaned_price

fuel_type_mapping = {
    "–∞–∏-92": "–ê–∏-92",
    "–∞–∏-95": "–ê–∏-95",
    "–∞–∏-98": "–ê–∏-98",
    "–∞–∏-100": "–ê–∏-100",
    "–¥—Ç": "–î–¢",
    "–≥–∞–∑": "–ì–∞–∑ –°–ü–ë–¢",
}

def get_average_fuel_price_from_files(fuel_type, directory="data/user/azs"):
    fuel_prices = []

    fuel_type = fuel_type.lower()

    if not os.path.exists(directory):
        os.makedirs(directory)

    file_path = os.path.join(directory, "cheboksary_table_azs_data.json")

    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as file:
            data = json.load(file)
            for entry in data:
                if len(entry) >= 3:  
                    company, fuel, price = entry
                    if fuel.lower() == fuel_type:
                        try:
                            price = float(price)
                            fuel_prices.append(price)
                        except ValueError:
                            continue

    if not fuel_prices:
        fuel_data = get_fuel_prices_from_website()
        if fuel_data:
            with open(file_path, "w", encoding="utf-8") as file:
                json.dump(fuel_data, file, ensure_ascii=False, indent=4)

            for entry in fuel_data:
                company, fuel, price = entry
                if fuel.lower() == fuel_type:
                    try:
                        price = float(price)
                        fuel_prices.append(price)
                    except ValueError:
                        continue

    if fuel_prices:
        average_price = sum(fuel_prices) / len(fuel_prices)
        return average_price
    else:
        return None

def get_fuel_prices_from_website(city_code='cheboksary'):
    url = f'https://fuelprice.ru/t-{city_code}'

    try:
        response = requests.get(url)
        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'html.parser')

        table = soup.find('table')
        if not table:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏")

        fuel_data = []
        rows = table.find_all('tr')

        for row in rows[1:]:
            columns = row.find_all('td')
            if len(columns) < 5:
                continue

            company = columns[1].text.strip()
            fuel = columns[2].text.strip()
            today_price = clean_price(columns[3].text.strip())

            if today_price:
                fuel_data.append([company, fuel, f"{float(today_price):.2f}"])

        return fuel_data

    except (requests.RequestException, ValueError) as e:
        return None

@text_only_handler
def process_fuel_type(message, date, distance):
    if message is None:
        return

    chat_id = message.chat.id

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    fuel_type = message.text.strip().lower() if message.text else ""

    fuel_type_mapping = {
        "–∞–∏-92": "–∞–∏-92",
        "–∞–∏-95": "–∞–∏-95",
        "–∞–∏-98": "–∞–∏-98",
        "–∞–∏-100": "–∞–∏-100",
        "–¥—Ç": "–¥—Ç",
        "–≥–∞–∑": "–≥–∞–∑ —Å–ø–±—Ç",
    }

    if fuel_type not in fuel_type_mapping:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!")
        bot.register_next_step_handler(sent, process_fuel_type, date, distance)
        return

    actual_fuel_type = fuel_type_mapping[fuel_type]

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞")
    item2 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é")
    item3 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item4 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item5 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1, item2)
    markup.add(item3)
    markup.add(item4)
    markup.add(item5)

    sent = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã —Ç–æ–ø–ª–∏–≤–∞:", reply_markup=markup)
    bot.register_next_step_handler(sent, handle_price_input_choice, date, distance, actual_fuel_type)

@text_only_handler
def handle_price_input_choice(message, date, distance, fuel_type):
    chat_id = message.chat.id

    if message.text == "–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)

        sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –ª–∏—Ç—Ä —Ç–æ–ø–ª–∏–≤–∞:", reply_markup=markup)
        bot.register_next_step_handler(sent, process_price_per_liter_step, date, distance, fuel_type)
    elif message.text == "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞":
        price_from_files = get_average_fuel_price_from_files(fuel_type, directory="data/user/azs")
        if price_from_files:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
            item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
            item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)
            bot.send_message(chat_id, f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –Ω–∞ {fuel_type.upper()} –ø–æ –†–§: {price_from_files:.2f} —Ä—É–±./–ª.", reply_markup=markup)
            sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ 100 –∫–º:", reply_markup=markup)
            bot.register_next_step_handler(sent, process_fuel_consumption_step, date, distance, fuel_type, price_from_files)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
            item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
            item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)
            sent = bot.send_message(chat_id, f"–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞ '{fuel_type}' –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É", reply_markup=markup)
            bot.register_next_step_handler(sent, process_price_per_liter_step, date, distance, fuel_type)
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
    elif message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
    else:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!")
        bot.register_next_step_handler(sent, handle_price_input_choice, date, distance, fuel_type)

@text_only_handler
def process_price_per_liter_step(message, date, distance, fuel_type):
    chat_id = message.chat.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    input_text = message.text.replace(',', '.')
    try:
        price_per_liter = float(input_text)
        if price_per_liter <= 0:
            raise ValueError
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ 100 –∫–º:", reply_markup=markup)
        bot.clear_step_handler_by_chat_id(chat_id)
        bot.register_next_step_handler(sent, process_fuel_consumption_step, date, distance, fuel_type, price_per_liter)
    except ValueError:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã —Ç–æ–ø–ª–∏–≤–∞ –∑–∞ –ª–∏—Ç—Ä!")
        bot.register_next_step_handler(sent, process_price_per_liter_step, date, distance, fuel_type)

@text_only_handler
def process_fuel_consumption_step(message, date, distance, fuel_type, price_per_liter):
    chat_id = message.chat.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    input_text = message.text.replace(',', '.')
    try:
        fuel_consumption = float(input_text)
        if fuel_consumption <= 0:
            raise ValueError
        sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –≤ –º–∞—à–∏–Ω–µ:")
        bot.clear_step_handler_by_chat_id(chat_id)
        bot.register_next_step_handler(sent, process_passengers_step, date, distance, fuel_type, price_per_liter, fuel_consumption)
    except ValueError:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ 100 –∫–º!")
        bot.register_next_step_handler(sent, process_fuel_consumption_step, date, distance, fuel_type, price_per_liter)

@text_only_handler
def process_passengers_step(message, date, distance, fuel_type, price_per_liter, fuel_consumption):
    chat_id = message.chat.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    try:
        passengers = int(message.text)
        if passengers <= 0:
            raise ValueError
        fuel_cost = (distance / 100) * fuel_consumption * price_per_liter
        fuel_cost_per_person = fuel_cost / passengers
        locations = trip_data[chat_id]['locations']
        coords = [f"{loc['latitude']},{loc['longitude']}" for loc in locations]
        yandex_maps_url = f"https://yandex.ru/maps/?rtext={'~'.join(coords)}&rtt=auto"
        try:
            response = requests.get(f'https://clck.ru/--?url={yandex_maps_url}')
            short_url = response.text
        except Exception as e:
            bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É: {str(e)}")
            short_url = yandex_maps_url
        calculation_timestamp = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        if chat_id not in temporary_trip_data:
            temporary_trip_data[chat_id] = []
        temporary_trip_data[chat_id].append({
            "locations": locations,
            "date": date,
            "distance": distance,
            "fuel_type": fuel_type,
            "price_per_liter": price_per_liter,
            "fuel_consumption": fuel_consumption,
            "passengers": passengers,
            "fuel_spent": (distance / 100) * fuel_consumption,
            "fuel_cost": fuel_cost,
            "fuel_cost_per_person": fuel_cost_per_person,
            "route_link": short_url,
            "calculation_timestamp": calculation_timestamp  
        })
        display_summary(chat_id, fuel_cost, fuel_cost_per_person, fuel_type, date, distance, price_per_liter, fuel_consumption, passengers)
    except ValueError:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤!")
        bot.register_next_step_handler(sent, process_passengers_step, date, distance, fuel_type, price_per_liter, fuel_consumption)

def display_summary(chat_id, fuel_cost, fuel_cost_per_person, fuel_type, date, distance, price_per_liter, fuel_consumption, passengers):
    fuel_spent = (distance / 100) * fuel_consumption
    locations = trip_data[chat_id]['locations']
    coords = [f"{loc['latitude']},{loc['longitude']}" for loc in locations]
    yandex_maps_url = f"https://yandex.ru/maps/?rtext={'~'.join(coords)}&rtt=auto"
    try:
        response = requests.get(f'https://clck.ru/--?url={yandex_maps_url}')
        short_url = response.text
    except Exception as e:
        bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É: {str(e)}")
        short_url = yandex_maps_url
    summary_message = "üöó *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–ï–ó–î–ö–ï*\n"
    summary_message += "-------------------------------------------------------------\n"
    for i, loc in enumerate(locations, 1):
        summary_message += f"üìç *–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ {i}:*\n{loc['address']}\n"
    summary_message += f"üóìÔ∏è *–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏:* {date}\n"
    summary_message += f"üìè *–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:* {distance:.2f} –∫–º.\n"
    summary_message += f"‚õΩ *–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞:* {fuel_type}\n"
    summary_message += f"üíµ *–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ –∑–∞ –ª–∏—Ç—Ä:* {price_per_liter:.2f} —Ä—É–±.\n"
    summary_message += f"‚öôÔ∏è *–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ 100 –∫–º:* {fuel_consumption} –ª.\n"
    summary_message += f"üë• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:* {passengers} —á–µ–ª.\n"
    summary_message += "-------------------------------------------------------------\n"
    summary_message += f"üõ¢Ô∏è *–ü–û–¢–†–ê–ß–ï–ù–û –õ–ò–¢–†–û–í –¢–û–ü–õ–ò–í–ê:* {fuel_spent:.2f} –ª.\n"
    summary_message += f"üí∞ *–°–¢–û–ò–ú–û–°–¢–¨ –¢–û–ü–õ–ò–í–ê –î–õ–Ø –ü–û–ï–ó–î–ö–ò:* {fuel_cost:.2f} —Ä—É–±.\n"
    summary_message += f"üë§ *–°–¢–û–ò–ú–û–°–¢–¨ –¢–û–ü–õ–ò–í–ê –ù–ê –ß–ï–õ–û–í–ï–ö–ê:* {fuel_cost_per_person:.2f} —Ä—É–±.\n"
    summary_message += f"[–°–°–´–õ–ö–ê –ù–ê –ú–ê–†–®–†–£–¢]({short_url})\n"
    summary_message = summary_message.replace('\n', '\n\n')
    bot.clear_step_handler_by_chat_id(chat_id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)
    bot.send_message(chat_id, summary_message, reply_markup=markup, parse_mode="Markdown")
    if chat_id in temporary_trip_data and temporary_trip_data[chat_id]:
        if chat_id not in user_trip_data:
            user_trip_data[chat_id] = []
        user_trip_data[chat_id].extend(temporary_trip_data[chat_id])
        last_trip = user_trip_data[chat_id][-1]
        save_trip_data(chat_id)
        save_trip_to_excel(chat_id, last_trip)
        temporary_trip_data[chat_id] = []
    reset_and_start_over(chat_id)

def update_excel_file(user_id):
    folder_path = "data/user/calculators/trip/excel"
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    file_path = os.path.join(folder_path, f"{user_id}_trips.xlsx")

    trips = user_trip_data.get(user_id, [])

    if not trips:
        columns = ["–î–∞—Ç–∞", "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞"]
        columns.extend([
            "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)", "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞", "–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±/–ª)",
            "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª/100 –∫–º)", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
            "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –ª–∏—Ç—Ä–æ–≤", "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±)",
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ (—Ä—É–±)", "–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç"
        ])
        df = pd.DataFrame(columns=columns)
        df.to_excel(file_path, index=False)
        return

    max_locations = max(len(trip["locations"]) for trip in trips)

    columns = ["–î–∞—Ç–∞", "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞"]
    location_columns = [f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ {i+1}" for i in range(max_locations)]
    columns.extend(location_columns)
    columns.extend([
        "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)", "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞", "–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±/–ª)",
        "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª/100 –∫–º)", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
        "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –ª–∏—Ç—Ä–æ–≤", "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±)",
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ (—Ä—É–±)", "–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç"
    ])

    trip_records = []
    for trip in trips:
        trip_data = {
            "–î–∞—Ç–∞": trip['date'],
            "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": trip.get('calculation_timestamp', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)": round(trip.get('distance', None), 2),
            "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞": trip.get('fuel_type', None),
            "–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±/–ª)": round(trip.get('price_per_liter', None), 2),
            "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª/100 –∫–º)": round(trip.get('fuel_consumption', None), 2),
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤": trip.get('passengers', None),
            "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –ª–∏—Ç—Ä–æ–≤": round(trip.get('fuel_spent', None), 2),
            "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±)": round(trip.get('fuel_cost', None), 2),
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ (—Ä—É–±)": round(trip.get('fuel_cost_per_person', None), 2),
            "–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç": trip.get('route_link', "–ù–µ—Ç —Å—Å—ã–ª–∫–∏")
        }
        for i in range(max_locations):
            key = f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ {i+1}"
            trip_data[key] = trip['locations'][i]['address'] if i < len(trip['locations']) else None
        trip_records.append(trip_data)

    df = pd.DataFrame(trip_records, columns=columns)
    df.to_excel(file_path, index=False)

    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows(min_row=2):
        for cell in row:
            cell.alignment = Alignment(horizontal='center', vertical='center')
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_row=2, min_col=len(columns)-3, max_col=len(columns)):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

def save_trip_to_excel(user_id, trip):
    directory = "data/user/calculators/trip/excel"
    if not os.path.exists(directory):
        os.makedirs(directory)
    file_path = os.path.join(directory, f"{user_id}_trips.xlsx")
    
    trips = user_trip_data.get(user_id, [])
    max_locations = max(len(t["locations"]) for t in trips) if trips else len(trip["locations"])
    
    columns = ["–î–∞—Ç–∞", "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞"]
    location_columns = [f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ {i+1}" for i in range(max_locations)]
    columns.extend(location_columns)
    columns.extend([
        "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)", "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞", "–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±/–ª)",
        "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª/100 –∫–º)", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
        "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –ª–∏—Ç—Ä–æ–≤", "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±)",
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ (—Ä—É–±)", "–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç"
    ])
    
    new_trip_data = {
        "–î–∞—Ç–∞": trip['date'],
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": trip.get('calculation_timestamp', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
        "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)": round(trip.get('distance', None), 2),
        "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞": trip.get('fuel_type', None),
        "–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±/–ª)": round(trip.get('price_per_liter', None), 2),
        "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª/100 –∫–º)": round(trip.get('fuel_consumption', None), 2),
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤": trip.get('passengers', None),
        "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –ª–∏—Ç—Ä–æ–≤": round(trip.get('fuel_spent', None), 2),
        "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±)": round(trip.get('fuel_cost', None), 2),
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ (—Ä—É–±)": round(trip.get('fuel_cost_per_person', None), 2),
        "–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç": trip.get('route_link', None)
    }
    
    for i in range(max_locations):
        key = f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ {i+1}"
        new_trip_data[key] = trip['locations'][i]['address'] if i < len(trip['locations']) else None

    new_trip_df = pd.DataFrame([new_trip_data], columns=columns)
    
    if os.path.exists(file_path):
        existing_data = pd.read_excel(file_path).dropna(axis=1, how='all')
        existing_data = existing_data.reindex(columns=columns, fill_value=None)
        updated_data = pd.concat([existing_data, new_trip_df], ignore_index=True)
    else:
        updated_data = new_trip_df
    
    updated_data.to_excel(file_path, index=False)
    
    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows():
        for cell in row:
            cell.alignment = Alignment(horizontal="center", vertical="center")
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_col=worksheet.max_column-3, max_col=worksheet.max_column):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

# --------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–µ–∑–¥–∫–∏) ---------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–µ–∑–¥–∫–∏")
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–µ–∑–¥–∫–∏')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–µ–∑–¥–∫–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_trips(message):
    user_id = message.chat.id
    trips = user_trip_data.get(user_id, [])

    if trips:
        message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–µ–∑–¥–æ–∫:*\n\n"
        for i, trip in enumerate(trips, 1):
            calc_time = trip.get('calculation_timestamp', "–¥–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
            message_text += f"üïí ‚Ññ{i}. {calc_time}\n"

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ü–æ–µ–∑–¥–∫–∏ –≤ EXCEL")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        msg = bot.send_message(user_id, message_text, parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_view_trip_selection)

        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
    else:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫!")
        handle_fuel_expense(message, show_description=False)

@text_only_handler
def process_view_trip_selection(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–ü–æ–µ–∑–¥–∫–∏ –≤ EXCEL":
        send_excel_file(message)
        return

    chat_id = message.chat.id
    user_id = message.chat.id
    trips = user_trip_data.get(user_id, [])

    if not trips:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫!")
        handle_fuel_expense(message, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(trips):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–ü–æ–µ–∑–¥–∫–∏ –≤ EXCEL")
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–µ–∑–¥–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_view_trip_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        for index in valid_indices:
            trip = trips[index]
            date = trip['date'] if trip['date'] != "–ë–µ–∑ –¥–∞—Ç—ã" else "–ë–µ–∑ –¥–∞—Ç—ã"
            summary_message = f"üöó *–ò–¢–û–ì–û–í–´–ï –î–ê–ù–ù–´–ï –ü–û–ï–ó–î–ö–ò* *‚Ññ{index + 1}* \n\n"
            summary_message += "-------------------------------------------------------------\n\n"
            for i, loc in enumerate(trip['locations'], 1):
                summary_message += f"üìç *–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ {i}:*\n\n{loc['address']}\n\n"
            summary_message += f"üóìÔ∏è *–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏:* {date}\n\n"
            summary_message += f"üìè *–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:* {trip['distance']:.2f} –∫–º.\n\n"
            summary_message += f"‚õΩ *–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞:* {trip['fuel_type']}\n\n"
            summary_message += f"üíµ *–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ –∑–∞ –ª–∏—Ç—Ä:* {trip['price_per_liter']:.2f} —Ä—É–±.\n\n"
            summary_message += f"‚öôÔ∏è *–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ 100 –∫–º:* {trip['fuel_consumption']} –ª.\n\n"
            summary_message += f"üë• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:* {trip['passengers']}\n\n"
            summary_message += "-------------------------------------------------------------\n\n"
            summary_message += f"üõ¢Ô∏è *–ü–û–¢–†–ê–ß–ï–ù–û –õ–ò–¢–†–û–í –¢–û–ü–õ–ò–í–ê:* {trip['fuel_spent']:.2f} –ª.\n\n"
            summary_message += f"üí∞ *–°–¢–û–ò–ú–û–°–¢–¨ –¢–û–ü–õ–ò–í–ê –î–õ–Ø –ü–û–ï–ó–î–ö–ò:* {trip['fuel_cost']:.2f} —Ä—É–±.\n\n"
            summary_message += f"üë§ *–°–¢–û–ò–ú–û–°–¢–¨ –¢–û–ü–õ–ò–í–ê –ù–ê –ß–ï–õ–û–í–ï–ö–ê:* {trip['fuel_cost_per_person']:.2f} —Ä—É–±.\n\n"
            if 'route_link' in trip:
                summary_message += f"[–°–°–´–õ–ö–ê –ù–ê –ú–ê–†–®–†–£–¢]({trip['route_link']})\n\n"
            else:
                summary_message += "–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!\n\n"
            bot.send_message(chat_id, summary_message, parse_mode="Markdown")

        handle_fuel_expense(message, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ü–æ–µ–∑–¥–∫–∏ –≤ EXCEL")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–æ–∫", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_trip_selection)

# --------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê (–ø–æ–µ–∑–¥–∫–∏ –≤ excel) ---------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü–æ–µ–∑–¥–∫–∏ –≤ EXCEL")
@check_function_state_decorator('–ü–æ–µ–∑–¥–∫–∏ –≤ EXCEL')
@track_usage('–ü–æ–µ–∑–¥–∫–∏ –≤ EXCEL')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def send_excel_file(message):
    user_id = message.chat.id
    excel_file_path = f"data/user/calculators/trip/excel/{user_id}_trips.xlsx"

    if os.path.exists(excel_file_path):
        with open(excel_file_path, 'rb') as excel_file:
            bot.send_document(user_id, excel_file)
    else:
        bot.send_message(user_id, "‚ùå –§–∞–π–ª Excel –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏")
    handle_fuel_expense(message, show_description=False)

# --------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê (—É–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫–∏) ---------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫–∏")
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫–∏')
@track_usage('–£–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def ask_for_trip_to_delete(message):
    user_id = message.chat.id
    trips = user_trip_data.get(user_id, [])

    if not trips:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫!")
        handle_fuel_expense(message, show_description=False)
        return

    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–µ–∑–¥–æ–∫:*\n\n"
    for i, trip in enumerate(trips, 1):
        calc_time = trip.get('calculation_timestamp', "–¥–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
        message_text += f"üïí ‚Ññ{i}. {calc_time}\n"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    msg = bot.send_message(user_id, message_text, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_delete_trip_selection)
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–æ–∫:", reply_markup=markup)

@text_only_handler
def process_delete_trip_selection(message):
    user_id = message.chat.id
    trips = user_trip_data.get(user_id, [])

    if not trips:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫!")
        handle_fuel_expense(message, show_description=False)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(trips):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–µ–∑–¥–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_delete_trip_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(user_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        valid_indices.sort(reverse=True)
        for index in valid_indices:
            del trips[index]

        user_trip_data[user_id] = trips
        save_trip_data(user_id)
        update_excel_file(user_id) 
        bot.send_message(user_id, "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")

        handle_fuel_expense(message, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–æ–∫", reply_markup=markup)
        bot.register_next_step_handler(msg, process_delete_trip_selection)

# ----------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ê–õ–ö–û–ì–û–õ–¨ --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ê–ª–∫–æ–≥–æ–ª—å")
@check_function_state_decorator('–ê–ª–∫–æ–≥–æ–ª—å')
@track_usage('–ê–ª–∫–æ–≥–æ–ª—å')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_alc_calc(message, show_description=True):
    global stored_message
    stored_message = message

    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞—Å—á–µ—Ç—É –∞–ª–∫–æ–≥–æ–ª—è –≤ –∫—Ä–æ–≤–∏*\n\n"
        "üìå *–†–∞—Å—á–µ—Ç –∞–ª–∫–æ–≥–æ–ª—è:*\n"
        "–†–∞—Å—á–µ—Ç –≤–µ–¥–µ—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º - *–ø–æ–ª, –≤–µ—Å, —á—Ç–æ –ø–∏–ª–∏, —Å–∫–æ–ª—å–∫–æ, –∫–∞–∫ –±—ã—Å—Ç—Ä–æ –≤—ã–ø–∏–ª–∏, –∫–∞–∫ –¥–∞–≤–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏, –µ–¥–∞*\n\n"
        "_P.S. –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ —Å–º–æ–∂–µ—Ç –¥–∞—Ç—å 100% —Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ï—Å–ª–∏ –≤—ã –≤—ã–ø–∏–ª–∏, —Ç–æ –ù–ò –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ–ª—å–∑—è —Å–∞–¥–∏—Ç—å—Å—è –∑–∞ —Ä—É–ª—å –ø–æ—Å–ª–µ –∞–ª–∫–æ–≥–æ–ª—è –∫–∞–∫ –º–∏–Ω–∏–º—É–º –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫!!!_"
        "\n\n"
        "üìå *–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–ª–∫–æ–≥–æ–ª—è:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—á–µ—Ç—ã –∏ –≤—Å–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –≤—ã –ø–∏–ª–∏ –∏ —Å–∫–æ–ª—å–∫–æ\n\n"
        "üìå *–£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—á–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–º –Ω–µ –Ω—É–∂–Ω—ã"
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–ª–∫–æ–≥–æ–ª—å', '–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–ª–∫–æ–≥–æ–ª—è', '–£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    if show_description:
        bot.send_message(message.chat.id, description, parse_mode='Markdown')

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –∞–ª–∫–æ–≥–æ–ª—è:", reply_markup=markup)

ALKO_JSON_PATH = os.path.join('files', 'files_for_calc', 'files_for_alko', 'alko.json')
USER_HISTORY_PATH_ALKO = os.path.join('data', 'user', 'calculators', 'alcohol', 'alko_users.json')
ALKO_EXCEL_DIR = os.path.join('data', 'user', 'calculators', 'alcohol', 'excel')
os.makedirs(os.path.dirname(ALKO_JSON_PATH), exist_ok=True)
os.makedirs(os.path.dirname(USER_HISTORY_PATH_ALKO), exist_ok=True)
os.makedirs(ALKO_EXCEL_DIR, exist_ok=True)

if not os.path.exists(ALKO_JSON_PATH):
    with open(ALKO_JSON_PATH, 'w', encoding='utf-8') as f:
        json.dump({}, f, ensure_ascii=False, indent=2)
if not os.path.exists(USER_HISTORY_PATH_ALKO):
    with open(USER_HISTORY_PATH_ALKO, 'w', encoding='utf-8') as f:
        json.dump({}, f, ensure_ascii=False, indent=2)

alko_data = {}
user_history_alko = {}
user_data = {}

def ensure_path_and_file(file_path):
    try:
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        if not os.path.exists(file_path):
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump({}, f, ensure_ascii=False, indent=2)
    except Exception as e:
        pass

def load_alko_data():
    global alko_data
    try:
        with open(ALKO_JSON_PATH, 'r', encoding='utf-8') as file:
            alko_data = json.load(file)
        if 'drinks' in alko_data:
            alko_data['drinks'] = sorted(alko_data['drinks'], key=lambda x: x['strength'])
        else:
            pass
        if 'food' not in alko_data:
            pass
        else:
            pass
    except Exception as e:
        alko_data = {}

def load_user_history_alko():
    global user_history_alko
    try:
        if os.path.exists(USER_HISTORY_PATH_ALKO):
            with open(USER_HISTORY_PATH_ALKO, 'r', encoding='utf-8') as db_file:
                user_history_alko = json.load(db_file)
        else:
            user_history_alko = {}
    except Exception as e:
        user_history_alko = {}

def save_user_history_alko():
    try:
        with open(USER_HISTORY_PATH_ALKO, 'w', encoding='utf-8') as db_file:
            json.dump(user_history_alko, db_file, ensure_ascii=False, indent=2)
    except Exception as e:
        pass

ensure_path_and_file(ALKO_JSON_PATH)
ensure_path_and_file(USER_HISTORY_PATH_ALKO)
load_alko_data()
load_user_history_alko()

# ----------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ê–õ–ö–û–ì–û–õ–¨ (—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–ª–∫–æ–≥–æ–ª—å) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–ª–∫–æ–≥–æ–ª—å")
@check_function_state_decorator('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–ª–∫–æ–≥–æ–ª—å')
@track_usage('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–ª–∫–æ–≥–æ–ª—å')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def start_alcohol_calculation(message):
    if not alko_data.get('drinks'):
        bot.send_message(message.chat.id, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    user_id = message.from_user.id
    user_data[user_id] = {'user_id': user_id, 'username': message.from_user.username}

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_gender)

@text_only_handler
def process_gender(message):
    user_id = message.from_user.id
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å":
        view_alc_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        gender = message.text.strip().lower()

        if gender not in ['–º—É–∂—Å–∫–æ–π', '–∂–µ–Ω—Å–∫–∏–π']:
            raise ValueError

        user_data[user_id]['gender'] = gender

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        msg = bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_weight)

    except:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add("–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª", reply_markup=markup)
        bot.register_next_step_handler(msg, process_gender)

@text_only_handler
def process_weight(message):
    user_id = message.from_user.id
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å":
        view_alc_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        weight_str = message.text.strip().replace(',', '.')
        weight = float(weight_str)

        if weight <= 0 or weight > 300:
            raise ValueError

        user_data[user_id]['weight'] = weight

        show_drinks_menu(message)  

    except:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö", reply_markup=markup)
        bot.register_next_step_handler(msg, process_weight)

@text_only_handler
def show_drinks_menu(message):
    chat_id = message.chat.id  
    if not alko_data.get('drinks'):
        bot.send_message(chat_id, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)

    if 'selected_drinks' in user_data[chat_id] and user_data[chat_id]['selected_drinks']:
        markup.row("–£–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π", "–ì–æ—Ç–æ–≤–æ", "–£–±—Ä–∞—Ç—å –≤—Å–µ")
    else:
        markup.row("–ì–æ—Ç–æ–≤–æ")

    markup.row("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.row("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    drinks_buttons = [drink['name'] for drink in alko_data['drinks']]
    for i in range(0, len(drinks_buttons), 3):
        markup.row(*drinks_buttons[i:i+3])

    if 'selected_drinks' in user_data[chat_id] and user_data[chat_id]['selected_drinks']:
        selected = ", ".join([f"*{drink['name'].lower()}*" for drink in user_data[chat_id]['selected_drinks']])
        msg_text = f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected}\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –Ω–∞–ø–∏—Ç–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ *–ì–û–¢–û–í–û* –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"
    else:
        msg_text = "–ß—Ç–æ –≤—ã –ø–∏–ª–∏?\n–í—ã–±–∏—Ä–∞–π—Ç–µ –Ω–∞–ø–∏—Ç–∫–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫:"

    msg = bot.send_message(chat_id, msg_text, reply_markup=markup, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_drinks_selection)

@text_only_handler
def process_drinks_selection(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å":
        view_alc_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    if message.text == "–ì–æ—Ç–æ–≤–æ":
        if 'selected_drinks' not in user_data[user_id] or not user_data[user_id]['selected_drinks']:
            bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω")
            bot.register_next_step_handler(message, process_drinks_selection)
            return

        process_next_drink_volume(message) 
        return

    elif message.text == "–£–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π":
        if 'selected_drinks' in user_data[user_id] and user_data[user_id]['selected_drinks']:
            removed_drink = user_data[user_id]['selected_drinks'].pop()
            bot.send_message(chat_id, f"‚úÖ –£–¥–∞–ª–µ–Ω –Ω–∞–ø–∏—Ç–æ–∫: *{removed_drink['name'].lower()}*!", parse_mode='Markdown')
        show_drinks_menu(message) 
        return

    elif message.text == "–£–±—Ä–∞—Ç—å –≤—Å–µ":
        if 'selected_drinks' in user_data[user_id] and user_data[user_id]['selected_drinks']:
            user_data[user_id]['selected_drinks'] = []
            bot.send_message(chat_id, "‚úÖ –í—Å–µ –Ω–∞–ø–∏—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã!")
        show_drinks_menu(message)  
        return

    try:
        drink_name = message.text.strip()
        selected_drink = next((drink for drink in alko_data['drinks'] if drink['name'] == drink_name), None)

        if not selected_drink:
            raise ValueError

        if 'selected_drinks' not in user_data[user_id]:
            user_data[user_id]['selected_drinks'] = []

        if selected_drink not in user_data[user_id]['selected_drinks']:
            user_data[user_id]['selected_drinks'].append(selected_drink)
            bot.send_message(chat_id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–∞–ø–∏—Ç–æ–∫: *{selected_drink['name'].lower()}*!", parse_mode='Markdown')

        show_drinks_menu(message) 

    except ValueError:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–∏—Ä–∞–π—Ç–µ –Ω–∞–ø–∏—Ç–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞")
        bot.register_next_step_handler(message, process_drinks_selection)

@text_only_handler
def process_next_drink_volume(message):
    chat_id = message.chat.id
    user_id = user_data[chat_id]['user_id']
    if 'current_drink_index' not in user_data[user_id]:
        user_data[user_id]['current_drink_index'] = 0
        user_data[user_id]['drinks_volumes'] = {}

    current_index = user_data[user_id]['current_drink_index']
    if current_index >= len(user_data[user_id]['selected_drinks']):
        show_drinking_speed_menu(message) 
        return

    current_drink = user_data[user_id]['selected_drinks'][current_index]

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)

    liters_buttons = [f"{vol} –ª" for vol in alko_data['volume_liters'] if vol <= 2.0]
    for i in range(0, len(liters_buttons), 3):
        markup.row(*liters_buttons[i:i+3])

    for cont in alko_data['volume_containers']:
        markup.add(f"{cont['name']} ({cont['volume']} –º–ª)")

    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    msg = bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –¥–ª—è *{current_drink['name'].lower()}*:",
                         reply_markup=markup, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_volume_selection)

@text_only_handler
def process_volume_selection(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å":
        view_alc_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        volume_text = message.text.strip()
        current_index = user_data[user_id]['current_drink_index']
        current_drink = user_data[user_id]['selected_drinks'][current_index]

        if volume_text.endswith(' –ª'):
            volume_liters = float(volume_text.split(' ')[0])
        elif '(' in volume_text and '–º–ª' in volume_text:
            volume_ml = int(volume_text.split('(')[1].split(' ')[0])
            volume_liters = volume_ml / 1000
        else:
            raise ValueError

        user_data[user_id]['drinks_volumes'][current_drink['id']] = volume_liters

        user_data[user_id]['current_drink_index'] += 1
        process_next_drink_volume(message)  

    except ValueError:
        current_index = user_data[user_id]['current_drink_index']
        current_drink = user_data[user_id]['selected_drinks'][current_index]
        bot.send_message(chat_id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –¥–ª—è *{current_drink['name'].lower()}*", parse_mode='Markdown')
        bot.register_next_step_handler(message, process_volume_selection)

@text_only_handler
def show_drinking_speed_menu(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(alko_data['drinking_speed'][0]['name'])

    speed_buttons = [speed['name'] for speed in alko_data['drinking_speed'][1:]]
    for i in range(0, len(speed_buttons), 3):
        markup.row(*speed_buttons[i:i+3])

    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    msg = bot.send_message(chat_id, "–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –≤—ã–ø–∏–ª–∏?", reply_markup=markup)
    bot.register_next_step_handler(msg, process_drinking_speed)

@text_only_handler
def process_drinking_speed(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å":
        view_alc_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        speed_name = message.text.strip()
        speed = next((s for s in alko_data['drinking_speed'] if s['name'] == speed_name), None)

        if not speed:
            raise ValueError

        user_data[user_id]['drinking_speed'] = speed['id']

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(alko_data['time_since_last_drink'][0]['name'])
        time_buttons = [time['name'] for time in alko_data['time_since_last_drink'][1:]]
        markup.row(*time_buttons)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        msg = bot.send_message(chat_id, "–ö–∞–∫ –¥–∞–≤–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø–∏—Ç—å?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_time_since_last_drink)

    except ValueError:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–∏–ª–∏")
        bot.register_next_step_handler(message, process_drinking_speed)

@text_only_handler
def process_time_since_last_drink(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å":
        view_alc_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        time_name = message.text.strip()
        time = next((t for t in alko_data['time_since_last_drink'] if t['name'] == time_name), None)

        if not time:
            raise ValueError

        user_data[user_id]['time_since_last_drink'] = time['id']

        if time['id'] == 0:
            user_data[user_id]['time_since_value'] = 0

            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            food_buttons = [food['name'] for food in alko_data['food']]
            markup.row(*food_buttons)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

            msg = bot.send_message(chat_id, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ–ª–∏?", reply_markup=markup)
            bot.register_next_step_handler(msg, process_food)
        else:
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

            time_type = "–º–∏–Ω." if time['id'] == 2 else "—á."
            msg = bot.send_message(
                chat_id,
                f"–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ {time_type} :",
                reply_markup=markup
            )
            bot.register_next_step_handler(msg, process_time_since_value)

    except:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(alko_data['time_since_last_drink'][0]['name'])

        time_buttons = [time['name'] for time in alko_data['time_since_last_drink'][1:]]
        markup.row(*time_buttons)

        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_time_since_last_drink)

@text_only_handler
def process_time_since_value(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å":
        view_alc_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        time_value = float(message.text.strip())
        user_data[user_id]['time_since_value'] = time_value

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        food_buttons = [food['name'] for food in alko_data['food']]
        markup.row(*food_buttons)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        msg = bot.send_message(chat_id, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ–ª–∏?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_food)

    except:
        time_id = user_data[user_id]['time_since_last_drink']
        time_type = next((time['name'] for time in alko_data['time_since_last_drink'] if time['id'] == time_id), "")

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        msg = bot.send_message(chat_id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ {time_type}", reply_markup=markup)
        bot.register_next_step_handler(msg, process_time_since_value)

@text_only_handler
def process_food(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å":
        view_alc_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        food_name = message.text.strip()
        food_name_normalized = food_name.lower()

        available_foods = [f['name'].lower() for f in alko_data.get('food', [])]

        food = next((f for f in alko_data['food'] if f['name'].lower() == food_name_normalized), None)

        if not food:
            raise ValueError(f"–ï–¥–∞ '{food_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {available_foods}")

        if user_id not in user_data:
            raise ValueError(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ user_data")

        user_data[user_id]['food'] = food['id']

        calculate_and_show_result(message)

    except Exception as e:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        food_buttons = [food['name'] for food in alko_data.get('food', [])]
        markup.row(*food_buttons)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(chat_id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∏–ª–∏ –æ—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_food)

@text_only_handler
def calculate_and_show_result(message):
    chat_id = message.chat.id
    user_id = user_data[chat_id]['user_id']
    data = user_data[user_id]

    r = 0.70 if data['gender'] == '–º—É–∂—Å–∫–æ–π' else 0.60
    total_alcohol_grams = 0
    for drink in data['selected_drinks']:
        drink_id = drink['id']
        volume_liters = data['drinks_volumes'][drink_id]
        strength = drink['strength'] / 100

        alcohol_grams = volume_liters * 1000 * strength * 0.79
        total_alcohol_grams += alcohol_grams

    c = total_alcohol_grams / (data['weight'] * r)

    drinking_speed = data['drinking_speed']
    if drinking_speed > 1:
        hours_drinking = drinking_speed - 1
        c = c * 0.8

    food_id = data['food']
    if food_id == 2:
        c = c * 0.9
    elif food_id == 3:
        c = c * 0.7

    time_id = data['time_since_last_drink']
    if time_id != 0:
        time_value = data['time_since_value']
        if time_id == 1:
            hours_passed = time_value
        else:
            hours_passed = time_value / 60

        elimination_rate = 0.15 if data['gender'] == '–º—É–∂—Å–∫–æ–π' else 0.10
        c = max(0, c - (hours_passed * elimination_rate))

    c = round(c, 2)

    if c > 0:
        elimination_rate = 0.15 if data['gender'] == '–º—É–∂—Å–∫–æ–π' else 0.10
        hours_to_sober = c / elimination_rate
        sober_time = datetime.now() + timedelta(hours=hours_to_sober)
        sober_time_str = sober_time.strftime("%d.%m.%Y –≤ %H:%M")

        recommendations = get_recommendations(c, data['gender'])

        result = (
            f"üìä *–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç*\n\n"
            f"üîπ –°–µ–π—á–∞—Å –≤ –≤–∞—à–µ–π –∫—Ä–æ–≤–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ: *{c}%*\n"
            f"üîπ –í—ã –±—É–¥–µ—Ç–µ —Ç—Ä–µ–∑–≤—ã –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ *{int(hours_to_sober)} —á. {int((hours_to_sober % 1) * 60)} –º–∏–Ω.*\n"
            f"üîπ –ê–ª–∫–æ–≥–æ–ª—å –≤—ã–≤–µ–¥–µ—Ç—Å—è –∏–∑ –∫—Ä–æ–≤–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ *{sober_time_str}*\n\n"
            f"üìå *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n{recommendations}"
        )
    else:
        result = "üìä *–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç*\n\n‚úÖ –í—ã —É–∂–µ —Ç—Ä–µ–∑–≤—ã –∏–ª–∏ –∞–ª–∫–æ–≥–æ–ª—å –µ—â—ë –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª –≤ –∫—Ä–æ–≤—å!"

    save_alcohol_calculation_to_history(message, c)
    user_data[user_id] = data
    bot.send_message(chat_id, result, parse_mode='Markdown')
    new_message_for_alko = message
    new_message_for_alko.text = "–ê–ª–∫–æ–≥–æ–ª—å"  
    view_alc_calc(new_message_for_alko, show_description=False)

def get_recommendations(promille, gender):
    if promille <= 0:
        return "‚úÖ –í—ã —Ç—Ä–µ–∑–≤—ã! –ú–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º!"

    recommendations = []

    if promille > 0.3:
        recommendations.append("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –Ω–æ—Ä–º–∞ –∞–ª–∫–æ–≥–æ–ª—è –≤ –∫—Ä–æ–≤–∏ (0.3%). –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ!")
        recommendations.append("üö´ –í —Ç–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å –æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è —Å–µ–±—è –∏ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö!")
    elif promille > 0.16:
        recommendations.append("‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã! –í—ã –±–ª–∏–∑–∫–∏ –∫ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—é –¥–æ–ø—É—Å—Ç–∏–º–æ–π –Ω–æ—Ä–º—ã –∞–ª–∫–æ–≥–æ–ª—è –≤ –∫—Ä–æ–≤–∏...")
        recommendations.append("üö¶ –õ—É—á—à–µ –≤–æ–∑–¥–µ—Ä–∂–∞—Ç—å—Å—è –æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º!")
    else:
        recommendations.append("‚úÖ –£—Ä–æ–≤–µ–Ω—å –∞–ª–∫–æ–≥–æ–ª—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–π –Ω–æ—Ä–º—ã, –Ω–æ –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!")
        recommendations.append("üîÑ –ê–ª–∫–æ–≥–æ–ª—å –µ—â–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤—Å–∞—Å—ã–≤–∞—Ç—å—Å—è –≤ –∫—Ä–æ–≤—å")

    if promille < 0.3:
        recommendations.append("\nüòä –õ–µ–≥–∫–∞—è —Å—Ç–µ–ø–µ–Ω—å –æ–ø—å—è–Ω–µ–Ω–∏—è:")
        recommendations.append("- –í—ã –º–æ–∂–µ—Ç–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ—Å—Ç—å –∏ —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")
        recommendations.append("- –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –≤–Ω–∏–º–∞–Ω–∏—è")
        recommendations.append("- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –¥–≤–∏–∂–µ–Ω–∏–π")
    elif promille < 0.6:
        recommendations.append("\nüç∑ –£–º–µ—Ä–µ–Ω–Ω–æ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ:")
        recommendations.append("- –ù–∞—Ä—É—à–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –∑–∞–º–µ—Ç–Ω—ã–º–∏")
        recommendations.append("- –°–Ω–∏–∂–∞–µ—Ç—Å—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏")
        recommendations.append("- –ú–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –∏–∑–ª–∏—à–Ω—è—è —Ä–∞–∑–≥–æ–≤–æ—Ä—á–∏–≤–æ—Å—Ç—å")
    elif promille < 1.0:
        recommendations.append("\nüö® –ó–∞–º–µ—Ç–Ω–æ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ:")
        recommendations.append("- –Ø–≤–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏–π")
        recommendations.append("- –ó–∞–º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª–∏")
        recommendations.append("- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å")
        recommendations.append("- –£—Ö—É–¥—à–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏")
    elif promille < 1.5:
        recommendations.append("\n‚ö†Ô∏è –°–∏–ª—å–Ω–æ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ:")
        recommendations.append("- –°–µ—Ä—å–µ–∑–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –º–æ—Ç–æ—Ä–∏–∫–∏ –∏ –º—ã—à–ª–µ–Ω–∏—è")
        recommendations.append("- –ù–µ—Å–≤—è–∑–Ω–∞—è —Ä–µ—á—å")
        recommendations.append("- –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ–º")
        recommendations.append("- –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø–æ—Ç–µ—Ä–∏ —Å–æ–∑–Ω–∞–Ω–∏—è")
    elif promille < 2.0:
        recommendations.append("\n‚ùå –û–ø–∞—Å–Ω–æ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ:")
        recommendations.append("- –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è")
        recommendations.append("- –í–æ–∑–º–æ–∂–Ω–∞ —Ç–æ—à–Ω–æ—Ç–∞ –∏ —Ä–≤–æ—Ç–∞")
        recommendations.append("- –°–∏–ª—å–Ω–æ–µ –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        recommendations.append("- –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ–º –±–µ–∑ –ø–æ–º–æ—â–∏")
    else:
        recommendations.append("\nüÜò –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ!")
        recommendations.append("- –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è")
        recommendations.append("- –û–±–µ—Å–ø–µ—á—å—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ")
        recommendations.append("- –ü—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–∑–æ–≤–∏—Ç–µ –≤—Ä–∞—á–∞")
        recommendations.append("- –†–∏—Å–∫ –∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–≥–æ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è")

    recommendations.append("\nüí° –°–æ–≤–µ—Ç—ã –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é:")
    recommendations.append("- –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã (1 —Å—Ç–∞–∫–∞–Ω –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)")
    recommendations.append("- –ü—Ä–∏–º–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É–≥–æ–ª—å (1 —Ç–∞–±–ª–µ—Ç–∫–∞ –Ω–∞ 10 –∫–≥ –≤–µ—Å–∞)")
    recommendations.append("- –í—ã–ø–µ–π—Ç–µ –∫—Ä–µ–ø–∫–∏–π —Å–ª–∞–¥–∫–∏–π —á–∞–π —Å –ª–∏–º–æ–Ω–æ–º")
    recommendations.append("- –ü—Ä–∏–º–∏—Ç–µ –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π –¥—É—à (–Ω–µ —Ö–æ–ª–æ–¥–Ω—ã–π!)")
    recommendations.append("- –°—ä–µ—à—å—Ç–µ —á—Ç–æ-—Ç–æ –∂–∏—Ä–Ω–æ–µ (–º–æ–ª–æ–∫–æ, —Å—ã—Ä, –æ—Ä–µ—Ö–∏)")
    recommendations.append("- –ò–∑–±–µ–≥–∞–π—Ç–µ –∫–æ—Ñ–µ–∏–Ω–∞ - –æ–Ω —É—Å–∏–ª–∏–≤–∞–µ—Ç –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ")
    recommendations.append("- –ù–µ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –±–µ–∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—Ä–∞—á–∞")

    if gender == '–∂–µ–Ω—Å–∫–∏–π':
        recommendations.append("\n‚ôÄÔ∏è –î–ª—è –∂–µ–Ω—â–∏–Ω:")
        recommendations.append("- –ê–ª–∫–æ–≥–æ–ª—å –≤—ã–≤–æ–¥–∏—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–µ–µ –Ω–∞ 15-20%")
        recommendations.append("- –ë—É–¥—å—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –¥–æ–∑–∏—Ä–æ–≤–∫–∞–º–∏")

    if promille > 0.5:
        recommendations.append("\nüöë –ü—Ä–∏ —Å–∏–ª—å–Ω–æ–º –æ–ø—å—è–Ω–µ–Ω–∏–∏:")
        recommendations.append("- –õ—è–≥—Ç–µ –Ω–∞ –±–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∞—Å–ø–∏—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ–π —Ä–≤–æ—Ç–µ")
        recommendations.append("- –ù–µ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ –æ–¥–Ω–æ–≥–æ")
        recommendations.append("- –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –¥—ã—Ö–∞–Ω–∏–µ –∏ –ø—É–ª—å—Å")
        recommendations.append("- –ü—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–æ–∑–Ω–∞–Ω–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–π—Ç–µ —Å–∫–æ—Ä—É—é")

    return "\n".join(recommendations)

def format_timestamp(timestamp):
    dt = datetime.strptime(timestamp, "%d.%m.%Y –≤ %H:%M")
    return dt.strftime("%d.%m.%Y –≤ %H:%M")

def save_alcohol_calculation_to_history(message, promille):
    chat_id = message.chat.id
    user_id = str(user_data[chat_id]['user_id'])  
    username = user_data[chat_id].get('username', 'unknown')

    sober_time = datetime.now() + timedelta(hours=promille / 0.15)
    sober_time_str = sober_time.strftime("%d.%m.%Y –≤ %H:%M")

    calculation_data = {
        'timestamp': datetime.now().strftime("%d.%m.%Y –≤ %H:%M"),
        'promille': promille,
        'sober_time': sober_time_str,
        'drinks': [
            {
                'name': drink['name'],
                'volume': user_data[int(user_id)]['drinks_volumes'][drink['id']], 
                'strength': drink['strength']
            } for drink in user_data[int(user_id)]['selected_drinks']
        ],
        'weight': user_data[int(user_id)]['weight'],
        'gender': user_data[int(user_id)]['gender']
    }

    if user_id not in user_history_alko:
        user_history_alko[user_id] = {
            'username': username,
            'alcohol_calculations': []
        }
    elif 'alcohol_calculations' not in user_history_alko[user_id]:
        user_history_alko[user_id]['alcohol_calculations'] = []

    user_history_alko[user_id]['alcohol_calculations'].append(calculation_data)
    
    if not USER_HISTORY_PATH_ALKO.endswith('alko_users.json'):
        raise ValueError("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–ª–∫–æ–≥–æ–ª—è –≤ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª!")
    
    save_user_history_alko()
    save_alcohol_to_excel(user_id, calculation_data)

def save_alcohol_to_excel(user_id, calculation):
    file_path = os.path.join(ALKO_EXCEL_DIR, f"{user_id}_alcohol.xlsx")
    
    calculations = user_history_alko.get(user_id, {}).get('alcohol_calculations', [])
    max_drinks = max(len(calc['drinks']) for calc in calculations) if calculations else len(calculation['drinks'])
    
    columns = ["–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞", "–ü–æ–ª", "–í–µ—Å (–∫–≥)", "–£—Ä–æ–≤–µ–Ω—å –∞–ª–∫–æ–≥–æ–ª—è (%)", "–í—Ä–µ–º—è –≤—ã—Ç—Ä–µ–∑–≤–ª–µ–Ω–∏—è"]
    drink_columns = [f"–ù–∞–ø–∏—Ç–æ–∫ {i+1}" for i in range(max_drinks)]
    volume_columns = [f"–û–±—ä–µ–º {i+1} (–ª)" for i in range(max_drinks)]
    strength_columns = [f"–ö—Ä–µ–ø–æ—Å—Ç—å {i+1} (%)" for i in range(max_drinks)]
    columns.extend(drink_columns + volume_columns + strength_columns)
    
    new_calc_data = {
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": calculation['timestamp'],
        "–ü–æ–ª": calculation['gender'].capitalize(),
        "–í–µ—Å (–∫–≥)": calculation['weight'],
        "–£—Ä–æ–≤–µ–Ω—å –∞–ª–∫–æ–≥–æ–ª—è (%)": calculation['promille'],
        "–í—Ä–µ–º—è –≤—ã—Ç—Ä–µ–∑–≤–ª–µ–Ω–∏—è": calculation['sober_time']
    }
    
    for i in range(max_drinks):
        drink_key = f"–ù–∞–ø–∏—Ç–æ–∫ {i+1}"
        volume_key = f"–û–±—ä–µ–º {i+1} (–ª)"
        strength_key = f"–ö—Ä–µ–ø–æ—Å—Ç—å {i+1} (%)"
        if i < len(calculation['drinks']):
            new_calc_data[drink_key] = calculation['drinks'][i]['name']
            new_calc_data[volume_key] = calculation['drinks'][i]['volume']
            new_calc_data[strength_key] = calculation['drinks'][i]['strength']
        else:
            new_calc_data[drink_key] = None
            new_calc_data[volume_key] = None
            new_calc_data[strength_key] = None

    new_calc_df = pd.DataFrame([new_calc_data], columns=columns)
    
    if os.path.exists(file_path):
        existing_data = pd.read_excel(file_path).dropna(axis=1, how='all')
        existing_data = existing_data.reindex(columns=columns, fill_value=None)
        updated_data = pd.concat([existing_data, new_calc_df], ignore_index=True)
    else:
        updated_data = new_calc_df
    
    updated_data.to_excel(file_path, index=False)
    
    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows():
        for cell in row:
            cell.alignment = Alignment(horizontal="center", vertical="center")
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_col=worksheet.max_column-3*max_drinks+1, max_col=worksheet.max_column):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

def update_alcohol_excel_file(user_id):
    file_path = os.path.join(ALKO_EXCEL_DIR, f"{user_id}_alcohol.xlsx")
    calculations = user_history_alko.get(user_id, {}).get('alcohol_calculations', [])

    if not calculations:
        columns = ["–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞", "–ü–æ–ª", "–í–µ—Å (–∫–≥)", "–£—Ä–æ–≤–µ–Ω—å –∞–ª–∫–æ–≥–æ–ª—è (%)", "–í—Ä–µ–º—è –≤—ã—Ç—Ä–µ–∑–≤–ª–µ–Ω–∏—è"]
        df = pd.DataFrame(columns=columns)
        df.to_excel(file_path, index=False)
        return

    max_drinks = max(len(calc['drinks']) for calc in calculations)

    columns = ["–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞", "–ü–æ–ª", "–í–µ—Å (–∫–≥)", "–£—Ä–æ–≤–µ–Ω—å –∞–ª–∫–æ–≥–æ–ª—è (%)", "–í—Ä–µ–º—è –≤—ã—Ç—Ä–µ–∑–≤–ª–µ–Ω–∏—è"]
    drink_columns = [f"–ù–∞–ø–∏—Ç–æ–∫ {i+1}" for i in range(max_drinks)]
    volume_columns = [f"–û–±—ä–µ–º {i+1} (–ª)" for i in range(max_drinks)]
    strength_columns = [f"–ö—Ä–µ–ø–æ—Å—Ç—å {i+1} (%)" for i in range(max_drinks)]
    columns.extend(drink_columns + volume_columns + strength_columns)

    calc_records = []
    for calc in calculations:
        calc_data = {
            "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": calc['timestamp'],
            "–ü–æ–ª": calc['gender'].capitalize(),
            "–í–µ—Å (–∫–≥)": calc['weight'],
            "–£—Ä–æ–≤–µ–Ω—å –∞–ª–∫–æ–≥–æ–ª—è (%)": calc['promille'],
            "–í—Ä–µ–º—è –≤—ã—Ç—Ä–µ–∑–≤–ª–µ–Ω–∏—è": calc['sober_time']
        }
        for i in range(max_drinks):
            drink_key = f"–ù–∞–ø–∏—Ç–æ–∫ {i+1}"
            volume_key = f"–û–±—ä–µ–º {i+1} (–ª)"
            strength_key = f"–ö—Ä–µ–ø–æ—Å—Ç—å {i+1} (%)"
            if i < len(calc['drinks']):
                calc_data[drink_key] = calc['drinks'][i]['name']
                calc_data[volume_key] = calc['drinks'][i]['volume']
                calc_data[strength_key] = calc['drinks'][i]['strength']
            else:
                calc_data[drink_key] = None
                calc_data[volume_key] = None
                calc_data[strength_key] = None
        calc_records.append(calc_data)

    df = pd.DataFrame(calc_records, columns=columns)
    df.to_excel(file_path, index=False)

    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows(min_row=2):
        for cell in row:
            cell.alignment = Alignment(horizontal='center', vertical='center')
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_row=2, min_col=len(columns)-3*max_drinks+1, max_col=len(columns)):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

# ----------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ê–õ–ö–û–ì–û–õ–¨ (–ø—Ä–æ—Å–º–æ—Ç—Ä –∞–ª–∫–æ–≥–æ–ª—è) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–ª–∫–æ–≥–æ–ª—è")
@check_function_state_decorator('–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–ª–∫–æ–≥–æ–ª—è')
@track_usage('–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–ª–∫–æ–≥–æ–ª—è')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_view_alcohol(message):
    user_id = str(message.from_user.id)  
    if user_id not in user_history_alko or 'alcohol_calculations' not in user_history_alko[user_id] or not user_history_alko[user_id]['alcohol_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è!")
        view_alc_calc(message, show_description=False)
        return
    view_alcohol_calculations(message)

@text_only_handler
def view_alcohol_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_alko or 'alcohol_calculations' not in user_history_alko[user_id] or not user_history_alko[user_id]['alcohol_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è!")
        view_alc_calc(message, show_description=False)
        return

    calculations = user_history_alko[user_id]['alcohol_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí ‚Ññ{i}. {timestamp}\n"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ê–ª–∫–æ–≥–æ–ª—å –≤ EXCEL")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_view_alcohol_selection)

@text_only_handler
def process_view_alcohol_selection(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å":
        view_alc_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return
    if message.text == "–ê–ª–∫–æ–≥–æ–ª—å –≤ EXCEL":
        send_alcohol_excel_file(message)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ê–ª–∫–æ–≥–æ–ª—å –≤ EXCEL")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_alcohol_selection)
        return

    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    calculations = user_history_alko.get(user_id, {}).get('alcohol_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è!")
        new_message_for_alko = message
        new_message_for_alko.text = "–ê–ª–∫–æ–≥–æ–ª—å"  
        view_alc_calc(new_message_for_alko, show_description=False)        
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–ê–ª–∫–æ–≥–æ–ª—å –≤ EXCEL")
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_view_alcohol_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        for index in valid_indices:
            calc = calculations[index]
            timestamp = calc['timestamp']
            drinks = "\n".join([f"{i+1}. {drink['name']} ({drink['strength']}%) - {drink['volume']} –ª." for i, drink in enumerate(calc['drinks'])])
            result = (
                f"üìä *–†–∞—Å—á–µ—Ç –æ—Ç {timestamp}*\n\n"
                f"üöπ –í–∞—à –ø–æ–ª - {calc['gender']}\n"
                f"üèãÔ∏è –í–∞—à –≤–µ—Å - {calc['weight']} –∫–≥\n\n"
                f"üç∑ –í—ã –ø–∏–ª–∏:\n{drinks}\n\n"
                f"üîç *–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç:*\n\n"
                f"üîπ –°–µ–π—á–∞—Å –≤ –≤–∞—à–µ–π –∫—Ä–æ–≤–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ: *{calc['promille']}%*\n"
                f"üîπ –í—ã –±—É–¥–µ—Ç–µ —Ç—Ä–µ–∑–≤—ã –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ *{int(calc['promille'] / 0.15)} —á. {int((calc['promille'] / 0.15 % 1) * 60)} –º–∏–Ω.*\n"
                f"üîπ –ê–ª–∫–æ–≥–æ–ª—å –≤—ã–≤–µ–¥–µ—Ç—Å—è –∏–∑ –∫—Ä–æ–≤–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ *{calc['sober_time']}*"
            )
            bot.send_message(chat_id, result, parse_mode='Markdown')

        new_message_for_alko = message
        new_message_for_alko.text = "–ê–ª–∫–æ–≥–æ–ª—å"  
        view_alc_calc(new_message_for_alko, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ê–ª–∫–æ–≥–æ–ª—å –≤ EXCEL")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_alcohol_selection)

@bot.message_handler(func=lambda message: message.text == "–ê–ª–∫–æ–≥–æ–ª—å –≤ EXCEL")
@check_function_state_decorator('–ê–ª–∫–æ–≥–æ–ª—å –≤ EXCEL')
@track_usage('–ê–ª–∫–æ–≥–æ–ª—å –≤ EXCEL')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def send_alcohol_excel_file(message):
    user_id = str(message.from_user.id)
    excel_file_path = os.path.join(ALKO_EXCEL_DIR, f"{user_id}_alcohol.xlsx")

    if os.path.exists(excel_file_path):
        with open(excel_file_path, 'rb') as excel_file:
            bot.send_document(message.chat.id, excel_file)
    else:
        bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª Excel –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –∞–ª–∫–æ–≥–æ–ª—è")
    new_message_for_alko = message
    new_message_for_alko.text = "–ê–ª–∫–æ–≥–æ–ª—å"  
    view_alc_calc(new_message_for_alko, show_description=False)

# ----------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ê–õ–ö–û–ì–û–õ–¨ (—É–¥–∞–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è")
@check_function_state_decorator('–£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è')
@track_usage('–£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_delete_alcohol(message):
    user_id = str(message.from_user.id)  
    if user_id not in user_history_alko or 'alcohol_calculations' not in user_history_alko[user_id] or not user_history_alko[user_id]['alcohol_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è!")
        new_message_for_alko = message
        new_message_for_alko.text = "–ê–ª–∫–æ–≥–æ–ª—å"  
        view_alc_calc(new_message_for_alko, show_description=False)
        return
    delete_alcohol_calculations(message)

@text_only_handler
def delete_alcohol_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_alko or 'alcohol_calculations' not in user_history_alko[user_id] or not user_history_alko[user_id]['alcohol_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è!")
        new_message_for_alko = message
        new_message_for_alko.text = "–ê–ª–∫–æ–≥–æ–ª—å"  
        view_alc_calc(new_message_for_alko, show_description=False)
        return

    calculations = user_history_alko[user_id]['alcohol_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí ‚Ññ{i}. {timestamp}\n"

    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_delete_alcohol_selection)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤:", reply_markup=markup)

@text_only_handler
def process_delete_alcohol_selection(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å":
        view_alc_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    calculations = user_history_alko.get(user_id, {}).get('alcohol_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è!")
        new_message_for_alko = message
        new_message_for_alko.text = "–ê–ª–∫–æ–≥–æ–ª—å"  
        view_alc_calc(new_message_for_alko, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_delete_alcohol_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        valid_indices.sort(reverse=True)
        for index in valid_indices:
            del calculations[index]

        save_user_history_alko()
        update_alcohol_excel_file(user_id)
        bot.send_message(chat_id, "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –∞–ª–∫–æ–≥–æ–ª—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")

        new_message_for_alko = message
        new_message_for_alko.text = "–ê–ª–∫–æ–≥–æ–ª—å"  
        view_alc_calc(new_message_for_alko, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤", reply_markup=markup)
        bot.register_next_step_handler(msg, process_delete_alcohol_selection)

# ----------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–†–ê–°–¢–ê–ú–û–ñ–ö–ê --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Ç–∞–º–æ–∂–∫–∞")
@check_function_state_decorator('–†–∞—Å—Ç–∞–º–æ–∂–∫–∞')
@track_usage('–†–∞—Å—Ç–∞–º–æ–∂–∫–∞')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_rastamozka_calc(message, show_description=True):
    global stored_message
    stored_message = message

    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞—Å—á–µ—Ç—É —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π*\n\n"
        "üìå *–†–∞—Å—á–µ—Ç —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏:*\n"
        "–†–∞—Å—á–µ—Ç –≤–µ–¥–µ—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º - *–∫—Ç–æ –≤–≤–æ–∑–∏—Ç, –≤–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ, —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è, –º–æ—â–Ω–æ—Å—Ç—å, –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è, —Å—Ç–æ–∏–º–æ—Å—Ç—å*\n\n"
        "_P.S. –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫. –¢–æ—á–Ω—ã–µ —Å—É–º–º—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!_\n\n"
        "üìå *–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n"
        "üìå *–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—á–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã"
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É', '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫', '–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    if show_description:
        bot.send_message(message.chat.id, description, parse_mode='Markdown')

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

RASTAMOZKA_JSON_PATH = os.path.join('files', 'files_for_calc', 'files_for_rastamozka', 'rastamozka.json')
USER_HISTORY_PATH_RASTAMOZKA = os.path.join('data', 'user', 'calculators', 'rastamozka', 'rastamozka_users.json')
RASTAMOZKA_EXCEL_DIR = os.path.join('data', 'user', 'calculators', 'rastamozka', 'excel')

rastamozka_data = {}
user_history_rastamozka = {}
user_data = {}

def fetch_exchange_rates_cbr():
    url = 'https://www.cbr-xml-daily.ru/daily_json.js'
    try:
        response = requests.get(url)
        data = response.json()
        rates = data['Valute']
        return {
            'USD': rates['USD']['Value'],  
            'EUR': rates['EUR']['Value'],  
            'BYN': rates['BYN']['Value'],  
            'CNY': rates['CNY']['Value'] / 10,  
            'JPY': rates['JPY']['Value'] / 100,  
            'KRW': rates['KRW']['Value'] / 1000, 
            'RUB': 1 
        }
    except Exception as e:
        return get_default_rates()

def get_default_rates():
    return {
        'USD': 83.6813,
        'EUR': 89.6553,
        'BYN': 27.34,
        'CNY': 11.46,
        'JPY': 0.55,
        'KRW': 0.05705,
        'RUB': 1
    }

EXCHANGE_RATES = fetch_exchange_rates_cbr()

def ensure_path_and_file(file_path):
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    if not os.path.exists(file_path):
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump({}, f, ensure_ascii=False, indent=2)

def load_rastamozka_data():
    global rastamozka_data
    try:
        with open(RASTAMOZKA_JSON_PATH, 'r', encoding='utf-8') as file:
            rastamozka_data = json.load(file)
    except Exception as e:
        pass

def load_user_history_rastamozka():
    global user_history_rastamozka
    try:
        if os.path.exists(USER_HISTORY_PATH_RASTAMOZKA):
            with open(USER_HISTORY_PATH_RASTAMOZKA, 'r', encoding='utf-8') as db_file:
                user_history_rastamozka = json.load(db_file)
        else:
            user_history_rastamozka = {}
    except Exception as e:
        user_history_rastamozka = {}

def save_user_history_rastamozka():
    try:
        with open(USER_HISTORY_PATH_RASTAMOZKA, 'w', encoding='utf-8') as db_file:
            json.dump(user_history_rastamozka, db_file, ensure_ascii=False, indent=2)
    except Exception as e:
        pass

ensure_path_and_file(RASTAMOZKA_JSON_PATH)
ensure_path_and_file(USER_HISTORY_PATH_RASTAMOZKA)
os.makedirs(RASTAMOZKA_EXCEL_DIR, exist_ok=True)
load_rastamozka_data()
load_user_history_rastamozka()

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–†–ê–°–¢–ê–ú–û–ñ–ö–ê (—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
@check_function_state_decorator('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É')
@track_usage('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def start_customs_calculation(message):
    if not rastamozka_data:
        bot.send_message(message.chat.id, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    user_id = message.from_user.id
    user_data[user_id] = {'user_id': user_id, 'username': message.from_user.username or 'unknown'}

    global EXCHANGE_RATES
    EXCHANGE_RATES = fetch_exchange_rates_cbr()

    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    markup.add("–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (–¥–ª—è —Å–µ–±—è)", "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (–¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏)")
    markup.add("–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–ö—Ç–æ –≤–≤–æ–∑–∏—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å?", reply_markup=markup)
    bot.register_next_step_handler(msg, process_car_importer_step)

@text_only_handler
def process_car_importer_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É":
        view_rastamozka_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        car_importer = message.text.strip()
        if car_importer not in rastamozka_data['the_car_is_importing'].values():
            raise ValueError

        user_data[user_id]['car_importer'] = car_importer

        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–î–æ 3 –ª–µ—Ç", "–û—Ç 3 –¥–æ 5 –ª–µ—Ç")
        markup.add("–û—Ç 5 –¥–æ 7 –ª–µ—Ç", "–ë–æ–ª–µ–µ 7 –ª–µ—Ç")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        msg = bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç —É –∞–≤—Ç–æ–º–æ–±–∏–ª—è?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_age_step)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (–¥–ª—è —Å–µ–±—è)", "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (–¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏)")
        markup.add("–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_importer_step)

@text_only_handler
def process_car_age_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É":
        view_rastamozka_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        car_age = message.text.strip()
        if car_age not in rastamozka_data['age_of_the_car'].values():
            raise ValueError

        user_data[user_id]['car_age'] = car_age

        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π", "–î–∏–∑–µ–ª—å–Ω—ã–π")
        markup.add("–ì–∏–±—Ä–∏–¥–Ω—ã–π", "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        msg = bot.send_message(message.chat.id, "–ö–∞–∫–æ–π —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è —É –∞–≤—Ç–æ–º–æ–±–∏–ª—è?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_engine_type_step)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–î–æ 3 –ª–µ—Ç", "–û—Ç 3 –¥–æ 5 –ª–µ—Ç")
        markup.add("–û—Ç 5 –¥–æ 7 –ª–µ—Ç", "–ë–æ–ª–µ–µ 7 –ª–µ—Ç")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_age_step)

@text_only_handler
def process_engine_type_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É":
        view_rastamozka_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return
    
    try:
        engine_type = message.text.strip()
        if engine_type not in rastamozka_data['engine_type'].values():
            raise ValueError

        user_data[user_id]['engine_type'] = engine_type

        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–õ–°", "–∫–í–¢")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –º–æ—â–Ω–æ—Å—Ç–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_engine_type_rastamozka_step)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π", "–î–∏–∑–µ–ª—å–Ω—ã–π")
        markup.add("–ì–∏–±—Ä–∏–¥–Ω—ã–π", "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_engine_type_step)

@text_only_handler
def process_engine_type_rastamozka_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É":
        view_rastamozka_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        engine_power = message.text.strip()
        if engine_power not in ["–õ–°", "–∫–í–¢"]:
            raise ValueError

        user_data[user_id]['engine_power'] = engine_power

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        if engine_power == "–∫–í–¢":
            msg = bot.send_message(message.chat.id, 
                                 "–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:\n*–ü–æ–¥—Å–∫–∞–∑–∫–∞:* _1 –∫–í–¢ = 1.36 –ª.—Å._", 
                                 reply_markup=markup, parse_mode='Markdown')
        else:
            msg = bot.send_message(message.chat.id, 
                                 "–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:", 
                                 reply_markup=markup)
        bot.register_next_step_handler(msg, process_engine_power_value_step)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–õ–°", "–∫–í–¢")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_engine_type_rastamozka_step)  

@text_only_handler
def process_engine_power_value_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É":
        view_rastamozka_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        power_value = float(message.text.strip())
        if user_data[user_id]['engine_power'] == "–∫–í–¢":
            power_value *= 1.36

        user_data[user_id]['engine_power_value'] = power_value

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        msg = bot.send_message(message.chat.id, 
                             "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è:\n*–ü–æ–¥—Å–∫–∞–∑–∫–∞:* _1 –ª. = 1000 —Å–º¬≥_", 
                             reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_engine_volume_step)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=markup)
        bot.register_next_step_handler(msg, process_engine_power_value_step)

@text_only_handler
def process_engine_volume_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É":
        view_rastamozka_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        volume_value = float(message.text.strip())
        user_data[user_id]['engine_volume'] = volume_value

        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å", "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å")
        markup.add("–î–æ–ª–ª–∞—Ä –°–®–ê", "–ï–≤—Ä–æ")
        markup.add("–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å", "–Ø–ø–æ–Ω—Å–∫–∞—è –π–µ–Ω–∞")
        markup.add("–ö–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_cost_step)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=markup)
        bot.register_next_step_handler(msg, process_engine_volume_step)

@text_only_handler
def process_car_cost_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É":
        view_rastamozka_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        car_cost_currency = message.text.strip()
        if car_cost_currency not in rastamozka_data['car_cost'].values():
            raise ValueError

        currency_key = {
            "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å": "RUB",
            "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å": "BYN",
            "–î–æ–ª–ª–∞—Ä –°–®–ê": "USD",
            "–ï–≤—Ä–æ": "EUR",
            "–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å": "CNY",
            "–Ø–ø–æ–Ω—Å–∫–∞—è –π–µ–Ω–∞": "JPY",
            "–ö–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞": "KRW"
        }.get(car_cost_currency)

        user_data[user_id]['car_cost_currency'] = currency_key

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        msg = bot.send_message(message.chat.id, 
                             "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", 
                             reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_cost_value_step)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å", "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å")
        markup.add("–î–æ–ª–ª–∞—Ä –°–®–ê", "–ï–≤—Ä–æ")
        markup.add("–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å", "–Ø–ø–æ–Ω—Å–∫–∞—è –π–µ–Ω–∞")
        markup.add("–ö–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_cost_step)

@text_only_handler
def process_car_cost_value_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É":
        view_rastamozka_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        car_cost_value = float(message.text.strip().replace(",", "."))
        user_data[user_id]['car_cost_value'] = car_cost_value
        calculate_customs(message)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_cost_value_step)

@text_only_handler
def calculate_customs(message):
    try:
        user_id_int = message.from_user.id 
        user_id_str = str(user_id_int) 
        data = user_data[user_id_int]

        car_cost_rub = data['car_cost_value'] * EXCHANGE_RATES.get(data['car_cost_currency'], 1)

        customs_fee = calculate_customs_fee(car_cost_rub)
        customs_duty = calculate_customs_duty(car_cost_rub, data['engine_volume'], data['car_age'], data['engine_type'], data['car_importer'])
        utilization_fee = calculate_utilization_fee(data['engine_volume'], data['engine_type'], data['car_age'], data['car_importer'])
        excise = calculate_excise(data['engine_power_value'], data['engine_type'], data['car_importer'])
        nds = calculate_nds(car_cost_rub, customs_duty, excise, data['car_importer'])
        total_customs = customs_fee + customs_duty + utilization_fee + excise + nds
        total_cost = car_cost_rub + total_customs

        result_message = (
            "*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–µ:*\n\n"
            "*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
            f"üöó –ò–º–ø–æ—Ä—Ç–µ—Ä: {data['car_importer']}\n"
            f"üìÖ –í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ: {data['car_age']}\n"
            f"üîß –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: {data['engine_type']}\n"
            f"üí™ –ú–æ—â–Ω–æ—Å—Ç—å: {data['engine_power_value']:.1f} –õ–°\n"
            f"üìè –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {data['engine_volume']:.1f} —Å–º¬≥\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {data['car_cost_value']:,.2f} {data['car_cost_currency']}\n\n"
            "*–†–∞—Å—á–µ—Ç:*\n\n"
            f"üõÉ –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä: {customs_fee:,.2f} ‚ÇΩ\n"
            f"üè¶ –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞: {customs_duty:,.2f} ‚ÇΩ\n"
            f"‚ôªÔ∏è –£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä: {utilization_fee:,.2f} ‚ÇΩ\n"
            f"üìà –ê–∫—Ü–∏–∑: {excise:,.2f} ‚ÇΩ\n"
            f"ü´∞ –ù–î–°: {nds:,.2f} ‚ÇΩ\n"
            f"üíµ –ò—Ç–æ–≥–æ: {total_customs:,.2f} ‚ÇΩ\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è + —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∞: {total_cost:,.2f} ‚ÇΩ"
        )

        username = data.get('username', 'unknown')
        timestamp = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")

        calculation_data = {
            'car_importer': data['car_importer'],
            'car_age': data['car_age'],
            'engine_type': data['engine_type'],
            'engine_power': data['engine_power'],
            'engine_power_value': round(data['engine_power_value'], 1),
            'engine_volume': round(data['engine_volume'], 1),
            'car_cost_currency': data['car_cost_currency'],
            'car_cost_value': round(data['car_cost_value'], 2),
            'car_cost_rub': round(car_cost_rub, 2),
            'customs_fee': round(customs_fee, 2),
            'customs_duty': round(customs_duty, 2),
            'utilization_fee': round(utilization_fee, 2),
            'excise': round(excise, 2),
            'nds': round(nds, 2),
            'total_customs': round(total_customs, 2),
            'total_cost': round(total_cost, 2),
            'timestamp': timestamp
        }

        if user_id_str not in user_history_rastamozka:
            user_history_rastamozka[user_id_str] = {
                'username': username,
                'rastamozka_calculations': []
            }
        elif 'rastamozka_calculations' not in user_history_rastamozka[user_id_str]:
            user_history_rastamozka[user_id_str]['rastamozka_calculations'] = []

        user_history_rastamozka[user_id_str]['rastamozka_calculations'].append(calculation_data)

        if not USER_HISTORY_PATH_RASTAMOZKA.endswith('rastamozka_users.json'):
            raise ValueError("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ –≤ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª!")

        save_user_history_rastamozka()
        save_rastamozka_to_excel(user_id_str, calculation_data)

        bot.send_message(message.chat.id, result_message, parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
        del user_data[user_id_int]  
        view_rastamozka_calc(message, show_description=False)

    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        view_rastamozka_calc(message, show_description=False)

def calculate_customs_fee(car_cost_rub):
    if car_cost_rub <= 200000:
        return 1067
    elif car_cost_rub <= 450000:
        return 2134
    elif car_cost_rub <= 1200000:
        return 4269
    elif car_cost_rub <= 2700000:
        return 11746
    elif car_cost_rub <= 4200000:
        return 16524
    elif car_cost_rub <= 5500000:
        return 21344
    elif car_cost_rub <= 7000000:
        return 27540
    else:
        return 30000

def calculate_customs_duty(car_cost_rub, engine_volume, car_age, engine_type, car_importer):
    if car_age == "–î–æ 3 –ª–µ—Ç":
        age_category = "–¥–æ 3 –ª–µ—Ç"
    elif car_age == "–û—Ç 3 –¥–æ 5 –ª–µ—Ç":
        age_category = "–æ—Ç 3 –¥–æ 5 –ª–µ—Ç"
    elif car_age == "–û—Ç 5 –¥–æ 7 –ª–µ—Ç":
        age_category = "–æ—Ç 5 –¥–æ 7 –ª–µ—Ç"
    elif car_age == "–ë–æ–ª–µ–µ 7 –ª–µ—Ç":
        age_category = "—Å—Ç–∞—Ä—à–µ 7 –ª–µ—Ç"
    else:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è!")

    if engine_type == "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π":
        return car_cost_rub * 0.15

    if car_importer == "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ":
        if engine_type == "–ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π":
            if age_category == "–¥–æ 3 –ª–µ—Ç":
                if engine_volume <= 3000:
                    return car_cost_rub * 0.15
                else:
                    return car_cost_rub * 0.125
            elif age_category == "–æ—Ç 3 –¥–æ 5 –ª–µ—Ç":
                if engine_volume <= 1000:
                    return max(car_cost_rub * 0.2, (0.36 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 1500:
                    return max(car_cost_rub * 0.2, (0.4 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 1800:
                    return max(car_cost_rub * 0.2, (0.36 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 2300:
                    return max(car_cost_rub * 0.2, (0.44 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 2800:
                    return max(car_cost_rub * 0.2, (0.44 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 3000:
                    return max(car_cost_rub * 0.2, (0.44 * engine_volume) * EXCHANGE_RATES['EUR'])
                else:
                    return max(car_cost_rub * 0.2, (0.8 * engine_volume) * EXCHANGE_RATES['EUR'])
            elif age_category == "–æ—Ç 5 –¥–æ 7 –ª–µ—Ç":
                if engine_volume <= 1000:
                    return max(car_cost_rub * 0.2, (0.36 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 1500:
                    return max(car_cost_rub * 0.2, (0.4 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 1800:
                    return max(car_cost_rub * 0.2, (0.36 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 2300:
                    return max(car_cost_rub * 0.2, (0.44 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 2800:
                    return max(car_cost_rub * 0.2, (0.44 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 3000:
                    return max(car_cost_rub * 0.2, (0.44 * engine_volume) * EXCHANGE_RATES['EUR'])
                else:
                    return max(car_cost_rub * 0.2, (0.8 * engine_volume) * EXCHANGE_RATES['EUR'])
            else:  
                if engine_volume <= 1000:
                    return (1.4 * engine_volume) * EXCHANGE_RATES['EUR']
                elif engine_volume <= 1500:
                    return (1.5 * engine_volume) * EXCHANGE_RATES['EUR']
                elif engine_volume <= 1800:
                    return (1.6 * engine_volume) * EXCHANGE_RATES['EUR']
                elif engine_volume <= 2300:
                    return (2.2 * engine_volume) * EXCHANGE_RATES['EUR']
                elif engine_volume <= 2800:
                    return (2.2 * engine_volume) * EXCHANGE_RATES['EUR']
                elif engine_volume <= 3000:
                    return (2.2 * engine_volume) * EXCHANGE_RATES['EUR']
                else:
                    return (3.2 * engine_volume) * EXCHANGE_RATES['EUR']
        elif engine_type == "–î–∏–∑–µ–ª—å–Ω—ã–π":
            if age_category == "–¥–æ 3 –ª–µ—Ç":
                return car_cost_rub * 0.15
            elif age_category == "–æ—Ç 3 –¥–æ 5 –ª–µ—Ç":
                if engine_volume <= 1500:
                    return max(car_cost_rub * 0.2, (0.32 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 2500:
                    return max(car_cost_rub * 0.2, (0.4 * engine_volume) * EXCHANGE_RATES['EUR'])
                else:
                    return max(car_cost_rub * 0.2, (0.8 * engine_volume) * EXCHANGE_RATES['EUR'])
            elif age_category == "–æ—Ç 5 –¥–æ 7 –ª–µ—Ç":
                if engine_volume <= 1500:
                    return max(car_cost_rub * 0.2, (0.32 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 2500:
                    return max(car_cost_rub * 0.2, (0.4 * engine_volume) * EXCHANGE_RATES['EUR'])
                else:
                    return max(car_cost_rub * 0.2, (0.8 * engine_volume) * EXCHANGE_RATES['EUR'])
            else:  
                if engine_volume <= 1500:
                    return (1.5 * engine_volume) * EXCHANGE_RATES['EUR']
                elif engine_volume <= 2500:
                    return (2.2 * engine_volume) * EXCHANGE_RATES['EUR']
                else:
                    return (3.2 * engine_volume) * EXCHANGE_RATES['EUR']
    else:
        if age_category == "–¥–æ 3 –ª–µ—Ç":
            car_cost_eur = car_cost_rub / EXCHANGE_RATES['EUR']
            if car_cost_eur <= 8500:
                return max(0.54 * car_cost_rub, (2.5 * engine_volume) * EXCHANGE_RATES['EUR'])
            elif car_cost_eur <= 16700:
                return max(0.48 * car_cost_rub, (3.5 * engine_volume) * EXCHANGE_RATES['EUR'])
            elif car_cost_eur <= 42300:
                return max(0.48 * car_cost_rub, (5.5 * engine_volume) * EXCHANGE_RATES['EUR'])
            elif car_cost_eur <= 84500:
                return max(0.48 * car_cost_rub, (7.5 * engine_volume) * EXCHANGE_RATES['EUR'])
            elif car_cost_eur <= 169000:
                return max(0.48 * car_cost_rub, (15 * engine_volume) * EXCHANGE_RATES['EUR'])
            else:
                return max(0.48 * car_cost_rub, (20 * engine_volume) * EXCHANGE_RATES['EUR'])
        elif age_category == "–æ—Ç 3 –¥–æ 5 –ª–µ—Ç":
            if engine_volume <= 1000:
                return (1.5 * engine_volume) * EXCHANGE_RATES['EUR']
            elif engine_volume <= 1500:
                return (1.7 * engine_volume) * EXCHANGE_RATES['EUR']
            elif engine_volume <= 1800:
                return (2.5 * engine_volume) * EXCHANGE_RATES['EUR']
            elif engine_volume <= 2300:
                return (2.7 * engine_volume) * EXCHANGE_RATES['EUR']
            elif engine_volume <= 3000:
                return (3.0 * engine_volume) * EXCHANGE_RATES['EUR']
            else:
                return (3.6 * engine_volume) * EXCHANGE_RATES['EUR']
        else:  
            if engine_volume <= 1000:
                return (3.0 * engine_volume) * EXCHANGE_RATES['EUR']
            elif engine_volume <= 1500:
                return (3.2 * engine_volume) * EXCHANGE_RATES['EUR']
            elif engine_volume <= 1800:
                return (3.5 * engine_volume) * EXCHANGE_RATES['EUR']
            elif engine_volume <= 2300:
                return (4.8 * engine_volume) * EXCHANGE_RATES['EUR']
            elif engine_volume <= 3000:
                return (5.0 * engine_volume) * EXCHANGE_RATES['EUR']
            else:
                return (5.7 * engine_volume) * EXCHANGE_RATES['EUR']

def calculate_utilization_fee(engine_volume, engine_type, car_age, car_importer):
    base_rate = 20000 if engine_type != "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π" else 0
    coefficient = get_utilization_coefficient(engine_volume, engine_type, car_age, car_importer)
    return base_rate * coefficient

def get_utilization_coefficient(engine_volume, engine_type, car_age, car_importer):
    if car_age == "–î–æ 3 –ª–µ—Ç":
        age_category = "–¥–æ 3 –ª–µ—Ç"
    elif car_age == "–û—Ç 3 –¥–æ 5 –ª–µ—Ç":
        age_category = "–æ—Ç 3 –¥–æ 5 –ª–µ—Ç"
    elif car_age == "–û—Ç 5 –¥–æ 7 –ª–µ—Ç":
        age_category = "–æ—Ç 5 –¥–æ 7 –ª–µ—Ç"
    elif car_age == "–ë–æ–ª–µ–µ 7 –ª–µ—Ç":
        age_category = "—Å—Ç–∞—Ä—à–µ 7 –ª–µ—Ç"
    else:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è!")

    if engine_type == "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π":
        if car_importer == "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ":
            return 33.37 if age_category == "–¥–æ 3 –ª–µ—Ç" else 58.7
        return 0.17 if age_category == "–¥–æ 3 –ª–µ—Ç" else 0.26

    if car_importer == "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ":
        if age_category == "–¥–æ 3 –ª–µ—Ç":
            if engine_volume <= 1000:
                return 9.01
            elif engine_volume <= 2000:
                return 33.37
            elif engine_volume <= 3000:
                return 93.77
            elif engine_volume <= 3500:
                return 107.67
            else:
                return 137.11
        elif age_category == "–æ—Ç 3 –¥–æ 5 –ª–µ—Ç":
            if engine_volume <= 1000:
                return 23.0
            elif engine_volume <= 2000:
                return 58.7
            elif engine_volume <= 3000:
                return 141.97
            elif engine_volume <= 3500:
                return 165.84
            else:
                return 180.24
        elif age_category == "–æ—Ç 5 –¥–æ 7 –ª–µ—Ç":
            if engine_volume <= 1000:
                return 25.0  
            elif engine_volume <= 2000:
                return 60.0  
            elif engine_volume <= 3000:
                return 145.0  
            elif engine_volume <= 3500:
                return 170.0 
            else:
                return 185.0  
        else: 
            if engine_volume <= 1000:
                return 27.0  
            elif engine_volume <= 2000:
                return 62.0  
            elif engine_volume <= 3000:
                return 150.0  
            elif engine_volume <= 3500:
                return 175.0  
            else:
                return 190.0  
    else: 
        if age_category == "–¥–æ 3 –ª–µ—Ç":
            if engine_volume <= 1000:
                return 0.17
            elif engine_volume <= 2000:
                return 0.17
            elif engine_volume <= 3000:
                return 0.17
            elif engine_volume <= 3500:
                return 107.67
            else:
                return 137.11
        else:  
            if engine_volume <= 1000:
                return 0.26
            elif engine_volume <= 2000:
                return 0.26
            elif engine_volume <= 3000:
                return 0.26
            elif engine_volume <= 3500:
                return 165.84
            else:
                return 180.24

def calculate_excise(engine_power, engine_type, car_importer):
    if car_importer == "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (–¥–ª—è —Å–µ–±—è)":
        return 0

    if engine_type == "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π":
        return 0

    if engine_power <= 90:
        return 0
    elif engine_power <= 150:
        return 61 * engine_power
    elif engine_power <= 200:
        return 583 * engine_power
    elif engine_power <= 300:
        return 955 * engine_power
    elif engine_power <= 400:
        return 1628 * engine_power
    elif engine_power <= 500:
        return 1685 * engine_power
    else:
        return 1740 * engine_power

def calculate_nds(car_cost_rub, customs_duty, excise, car_importer):
    if car_importer in ["–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (–¥–ª—è —Å–µ–±—è)", "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (–¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏)"]:
        return 0
    return (car_cost_rub + customs_duty + excise) * 0.2

def save_rastamozka_to_excel(user_id, calculation):
    file_path = os.path.join(RASTAMOZKA_EXCEL_DIR, f"{user_id}_rastamozka.xlsx")
    
    calculations = user_history_rastamozka.get(user_id, {}).get('rastamozka_calculations', [])
    
    columns = [
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
        "–ò–º–ø–æ—Ä—Ç–µ—Ä",
        "–í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ",
        "–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è",
        "–ú–æ—â–Ω–æ—Å—Ç—å (–õ–°)",
        "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (—Å–º¬≥)",
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
        "–í–∞–ª—é—Ç–∞",
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö",
        "–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä (‚ÇΩ)",
        "–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ (‚ÇΩ)",
        "–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä (‚ÇΩ)",
        "–ê–∫—Ü–∏–∑ (‚ÇΩ)",
        "–ù–î–° (‚ÇΩ)",
        "–ò—Ç–æ–≥–æ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∞ (‚ÇΩ)",
        "–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)"
    ]
    
    new_calc_data = {
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": calculation['timestamp'],
        "–ò–º–ø–æ—Ä—Ç–µ—Ä": calculation['car_importer'],
        "–í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ": calculation['car_age'],
        "–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è": calculation['engine_type'],
        "–ú–æ—â–Ω–æ—Å—Ç—å (–õ–°)": calculation['engine_power_value'],
        "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (—Å–º¬≥)": calculation['engine_volume'],
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è": calculation['car_cost_value'],
        "–í–∞–ª—é—Ç–∞": calculation['car_cost_currency'],
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö": calculation['car_cost_rub'],
        "–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä (‚ÇΩ)": calculation['customs_fee'],
        "–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ (‚ÇΩ)": calculation['customs_duty'],
        "–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä (‚ÇΩ)": calculation['utilization_fee'],
        "–ê–∫—Ü–∏–∑ (‚ÇΩ)": calculation['excise'],
        "–ù–î–° (‚ÇΩ)": calculation['nds'],
        "–ò—Ç–æ–≥–æ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∞ (‚ÇΩ)": calculation['total_customs'],
        "–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)": calculation['total_cost']
    }

    new_calc_df = pd.DataFrame([new_calc_data], columns=columns)
    
    if os.path.exists(file_path):
        existing_data = pd.read_excel(file_path).dropna(axis=1, how='all')
        existing_data = existing_data.reindex(columns=columns, fill_value=None)
        updated_data = pd.concat([existing_data, new_calc_df], ignore_index=True)
    else:
        updated_data = new_calc_df
    
    updated_data.to_excel(file_path, index=False)
    
    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows():
        for cell in row:
            cell.alignment = Alignment(horizontal="center", vertical="center")
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_col=worksheet.max_column-4, max_col=worksheet.max_column):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

def update_rastamozka_excel_file(user_id):
    file_path = os.path.join(RASTAMOZKA_EXCEL_DIR, f"{user_id}_rastamozka.xlsx")
    calculations = user_history_rastamozka.get(user_id, {}).get('rastamozka_calculations', [])

    if not calculations:
        columns = [
            "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
            "–ò–º–ø–æ—Ä—Ç–µ—Ä",
            "–í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ",
            "–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è",
            "–ú–æ—â–Ω–æ—Å—Ç—å (–õ–°)",
            "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (—Å–º¬≥)",
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
            "–í–∞–ª—é—Ç–∞",
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö",
            "–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä (‚ÇΩ)",
            "–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ (‚ÇΩ)",
            "–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä (‚ÇΩ)",
            "–ê–∫—Ü–∏–∑ (‚ÇΩ)",
            "–ù–î–° (‚ÇΩ)",
            "–ò—Ç–æ–≥–æ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∞ (‚ÇΩ)",
            "–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)"
        ]
        df = pd.DataFrame(columns=columns)
        df.to_excel(file_path, index=False)
        return

    columns = [
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
        "–ò–º–ø–æ—Ä—Ç–µ—Ä",
        "–í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ",
        "–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è",
        "–ú–æ—â–Ω–æ—Å—Ç—å (–õ–°)",
        "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (—Å–º¬≥)",
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
        "–í–∞–ª—é—Ç–∞",
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö",
        "–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä (‚ÇΩ)",
        "–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ (‚ÇΩ)",
        "–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä (‚ÇΩ)",
        "–ê–∫—Ü–∏–∑ (‚ÇΩ)",
        "–ù–î–° (‚ÇΩ)",
        "–ò—Ç–æ–≥–æ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∞ (‚ÇΩ)",
        "–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)"
    ]

    calc_records = []
    for calc in calculations:
        calc_data = {
            "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": calc['timestamp'],
            "–ò–º–ø–æ—Ä—Ç–µ—Ä": calc['car_importer'],
            "–í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ": calc['car_age'],
            "–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è": calc['engine_type'],
            "–ú–æ—â–Ω–æ—Å—Ç—å (–õ–°)": calc['engine_power_value'],
            "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (—Å–º¬≥)": calc['engine_volume'],
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è": calc['car_cost_value'],
            "–í–∞–ª—é—Ç–∞": calc['car_cost_currency'],
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö": calc['car_cost_rub'],
            "–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä (‚ÇΩ)": calc['customs_fee'],
            "–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ (‚ÇΩ)": calc['customs_duty'],
            "–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä (‚ÇΩ)": calc['utilization_fee'],
            "–ê–∫—Ü–∏–∑ (‚ÇΩ)": calc['excise'],
            "–ù–î–° (‚ÇΩ)": calc['nds'],
            "–ò—Ç–æ–≥–æ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∞ (‚ÇΩ)": calc['total_customs'],
            "–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)": calc['total_cost']
        }
        calc_records.append(calc_data)

    df = pd.DataFrame(calc_records, columns=columns)
    df.to_excel(file_path, index=False)

    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows(min_row=2):
        for cell in row:
            cell.alignment = Alignment(horizontal='center', vertical='center')
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_row=2, min_col=len(columns)-4, max_col=len(columns)):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–†–ê–°–¢–ê–ú–û–ñ–ö–ê (–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫")
@check_function_state_decorator('–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫')
@track_usage('–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_view_rastamozka(message):
    user_id = str(message.from_user.id)
    if user_id not in user_history_rastamozka or 'rastamozka_calculations' not in user_history_rastamozka[user_id] or not user_history_rastamozka[user_id]['rastamozka_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏!")
        view_rastamozka_calc(message, show_description=False)
        return
    view_rastamozka_calculations(message)

@text_only_handler
def view_rastamozka_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_rastamozka or 'rastamozka_calculations' not in user_history_rastamozka[user_id] or not user_history_rastamozka[user_id]['rastamozka_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏!")
        view_rastamozka_calc(message, show_description=False)
        return

    calculations = user_history_rastamozka[user_id]['rastamozka_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí *‚Ññ{i}.* {timestamp}\n"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–†–∞—Å—Ç–∞–º–æ–∂–∫–∞ –≤ EXCEL')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_view_rastamozka_selection)

@text_only_handler
def process_view_rastamozka_selection(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É":
        view_rastamozka_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return
    if message.text == "–†–∞—Å—Ç–∞–º–æ–∂–∫–∞ –≤ EXCEL":
        send_rastamozka_excel_file(message)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–†–∞—Å—Ç–∞–º–æ–∂–∫–∞ –≤ EXCEL')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_rastamozka_selection)
        return

    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    calculations = user_history_rastamozka.get(user_id, {}).get('rastamozka_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏!")
        view_rastamozka_calc(message, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–†–∞—Å—Ç–∞–º–æ–∂–∫–∞ –≤ EXCEL')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(
                chat_id,
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_view_rastamozka_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        for index in valid_indices:
            calc = calculations[index]
            required_keys = [
                'car_importer', 'car_age', 'engine_type', 'engine_power_value',
                'engine_volume', 'car_cost_value', 'car_cost_currency', 'customs_fee',
                'customs_duty', 'utilization_fee', 'excise', 'nds', 'total_customs', 'total_cost'
            ]
            for key in required_keys:
                if key not in calc:
                    bot.send_message(chat_id, f"‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞ ‚Ññ{index + 1} —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã! –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç!")
                    view_rastamozka_calc(message, show_description=False)
                    return

            result = (
                f"üìä *–†–∞—Å—á–µ—Ç —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ ‚Ññ{index + 1}. {calc['timestamp']}*\n\n"
                f"*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
                f"üöó –ò–º–ø–æ—Ä—Ç–µ—Ä: {calc['car_importer']}\n"
                f"üìÖ –í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ: {calc['car_age']}\n"
                f"üîß –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: {calc['engine_type']}\n"
                f"üí™ –ú–æ—â–Ω–æ—Å—Ç—å: {calc['engine_power_value']:.1f} –õ–°\n"
                f"üìè –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {calc['engine_volume']:.1f} —Å–º¬≥\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {calc['car_cost_value']:,.2f} {calc['car_cost_currency']}\n\n"
                f"*–†–∞—Å—á–µ—Ç:*\n\n"
                f"üõÉ –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä: {calc['customs_fee']:,.2f} ‚ÇΩ\n"
                f"üè¶ –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞: {calc['customs_duty']:,.2f} ‚ÇΩ\n"
                f"‚ôªÔ∏è –£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä: {calc['utilization_fee']:,.2f} ‚ÇΩ\n"
                f"üìà –ê–∫—Ü–∏–∑: {calc['excise']:,.2f} ‚ÇΩ\n"
                f"ü´∞ –ù–î–°: {calc['nds']:,.2f} ‚ÇΩ\n"
                f"üíµ –ò—Ç–æ–≥–æ: {calc['total_customs']:,.2f} ‚ÇΩ\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è + —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∞: {calc['total_cost']:,.2f} ‚ÇΩ"
            )
            bot.send_message(chat_id, result, parse_mode='Markdown')

        view_rastamozka_calc(message, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–†–∞—Å—Ç–∞–º–æ–∂–∫–∞ –≤ EXCEL')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_rastamozka_selection)

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Ç–∞–º–æ–∂–∫–∞ –≤ EXCEL")
@check_function_state_decorator('–†–∞—Å—Ç–∞–º–æ–∂–∫–∞ –≤ EXCEL')
@track_usage('–†–∞—Å—Ç–∞–º–æ–∂–∫–∞ –≤ EXCEL')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def send_rastamozka_excel_file(message):
    user_id = str(message.from_user.id)
    excel_file_path = os.path.join(RASTAMOZKA_EXCEL_DIR, f"{user_id}_rastamozka.xlsx")

    if os.path.exists(excel_file_path):
        with open(excel_file_path, 'rb') as excel_file:
            bot.send_document(message.chat.id, excel_file)
    else:
        bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª Excel –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏")
    view_rastamozka_calc(message, show_description=False)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–†–ê–°–¢–ê–ú–û–ñ–ö–ê (—É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫")
@check_function_state_decorator('–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫')
@track_usage('–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_delete_rastamozka(message):
    user_id = str(message.from_user.id)
    if user_id not in user_history_rastamozka or 'rastamozka_calculations' not in user_history_rastamozka[user_id] or not user_history_rastamozka[user_id]['rastamozka_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏!")
        view_rastamozka_calc(message, show_description=False)
        return
    delete_rastamozka_calculations(message)

@text_only_handler
def delete_rastamozka_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_rastamozka or 'rastamozka_calculations' not in user_history_rastamozka[user_id] or not user_history_rastamozka[user_id]['rastamozka_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏!")
        view_rastamozka_calc(message, show_description=False)
        return

    calculations = user_history_rastamozka[user_id]['rastamozka_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí *‚Ññ{i}.* {timestamp}\n"

    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_delete_rastamozka_selection)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤:", reply_markup=markup)

@text_only_handler
def process_delete_rastamozka_selection(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É":
        view_rastamozka_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    calculations = user_history_rastamozka.get(user_id, {}).get('rastamozka_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏!")
        view_rastamozka_calc(message, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_delete_rastamozka_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        valid_indices.sort(reverse=True)
        for index in valid_indices:
            del calculations[index]

        save_user_history_rastamozka()
        update_rastamozka_excel_file(user_id)
        bot.send_message(chat_id, "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
        view_rastamozka_calc(message, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup)
        bot.register_next_step_handler(msg, process_delete_rastamozka_selection)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–û–°–ê–ì–û --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–û–°–ê–ì–û")
@check_function_state_decorator('–û–°–ê–ì–û')
@track_usage('–û–°–ê–ì–û')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_osago_calc(message, show_description=True):
    global stored_message
    stored_message = message

    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞—Å—á–µ—Ç—É –û–°–ê–ì–û*\n\n"
        "üìå *–†–∞—Å—á–µ—Ç –û–°–ê–ì–û:*\n"
        "–†–∞—Å—á–µ—Ç –≤–µ–¥–µ—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º - *—Ä–µ–≥–∏–æ–Ω, –º–æ—â–Ω–æ—Å—Ç—å –∞–≤—Ç–æ, –≤–æ–∑—Ä–∞—Å—Ç –∏ —Å—Ç–∞–∂ –≤–æ–¥–∏—Ç–µ–ª–µ–π, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤–∞—Ä–∏–π, —Ç–∏–ø –ø–æ–ª–∏—Å–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π/–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π), –ø–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è*\n\n"
        "_P.S. –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤. –¢–æ—á–Ω—ã–µ —Å—É–º–º—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!_\n\n"
        "üìå *–ü—Ä–æ—Å–º–æ—Ç—Ä –û–°–ê–ì–û:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n"
        "üìå *–£–¥–∞–ª–µ–Ω–∏–µ –û–°–ê–ì–û:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—á–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã"
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –û–°–ê–ì–û', '–ü—Ä–æ—Å–º–æ—Ç—Ä –û–°–ê–ì–û', '–£–¥–∞–ª–µ–Ω–∏–µ –û–°–ê–ì–û')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    if show_description:
        bot.send_message(message.chat.id, description, parse_mode='Markdown')

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

OSAGO_JSON_PATH = os.path.join('files', 'files_for_calc', 'files_for_osago', 'osago.json')
USER_HISTORY_PATH_OSAGO = os.path.join('data', 'user', 'calculators', 'osago', 'osago_users.json')
OSAGO_EXCEL_DIR = os.path.join('data', 'user', 'calculators', 'osago', 'excel')

osago_data = {}
user_history_osago = {}
user_data = {}

def ensure_path_and_file(file_path):
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    if not os.path.exists(file_path):
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump({}, f, ensure_ascii=False, indent=2)

def load_osago_data():
    global osago_data
    try:
        with open(OSAGO_JSON_PATH, 'r', encoding='utf-8') as file:
            osago_data = json.load(file)
    except Exception as e:
        pass

def load_user_history_osago():
    global user_history_osago
    try:
        if os.path.exists(USER_HISTORY_PATH_OSAGO):
            with open(USER_HISTORY_PATH_OSAGO, 'r', encoding='utf-8') as db_file:
                user_history_osago = json.load(db_file)
        else:
            user_history_osago = {}
    except Exception as e:
        user_history_osago = {}

def save_user_history_osago():
    try:
        with open(USER_HISTORY_PATH_OSAGO, 'w', encoding='utf-8') as db_file:
            json.dump(user_history_osago, db_file, ensure_ascii=False, indent=2)
    except Exception as e:
        pass

ensure_path_and_file(OSAGO_JSON_PATH)
ensure_path_and_file(USER_HISTORY_PATH_OSAGO)
os.makedirs(OSAGO_EXCEL_DIR, exist_ok=True)
load_osago_data()
load_user_history_osago()

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–û–°–ê–ì–û (—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ—Å–∞–≥–æ) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –û–°–ê–ì–û")
@check_function_state_decorator('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –û–°–ê–ì–û')
@track_usage('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –û–°–ê–ì–û')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def start_osago_calculation(message):
    if not osago_data:
        bot.send_message(message.chat.id, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    user_id = message.from_user.id
    user_data[user_id] = {'user_id': user_id, 'username': message.from_user.username or 'unknown'}

    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    owner_types = [owner['name'] for owner in osago_data['owner_types']]
    for i in range(0, len(owner_types), 2):
        if i + 1 < len(owner_types):
            markup.row(owner_types[i], owner_types[i + 1])
        else:
            markup.add(owner_types[i])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")   
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')     
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–ö—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –¢–°?", reply_markup=markup)
    bot.register_next_step_handler(msg, process_owner_type_step)

@text_only_handler
def process_owner_type_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    owner_type = message.text.strip()
    if owner_type not in [owner['name'] for owner in osago_data['owner_types']]:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
        bot.register_next_step_handler(msg, process_owner_type_step)
        return

    user_data[user_id]['owner_type'] = owner_type

    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    vehicle_types = [vt['name'] for vt in osago_data['vehicle_types']]
    for i in range(0, len(vehicle_types), 2):
        if i + 1 < len(vehicle_types):
            markup.row(vehicle_types[i], vehicle_types[i + 1])
        else:
            markup.add(vehicle_types[i])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¢–°:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_vehicle_type_step)

@text_only_handler
def process_vehicle_type_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    vehicle_type = message.text.strip()
    vehicle = next((vt for vt in osago_data['vehicle_types'] if vt['name'] == vehicle_type), None)
    if not vehicle:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
        bot.register_next_step_handler(msg, process_vehicle_type_step)
        return

    user_data[user_id]['vehicle_type'] = vehicle_type
    user_data[user_id]['vehicle_id'] = vehicle['id']

    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    regions = [region['name'] for region in osago_data['regions']]
    for i in range(0, len(regions), 2):
        if i + 1 < len(regions):
            markup.row(regions[i], regions[i + 1])
        else:
            markup.add(regions[i])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_osago_region_step)

@text_only_handler
def process_osago_region_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    region_name = message.text.strip()
    region = next((r for r in osago_data['regions'] if r['name'] == region_name), None)
    if not region:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
        bot.register_next_step_handler(msg, process_osago_region_step)
        return

    user_data[user_id]['region'] = region_name
    user_data[user_id]['region_data'] = region

    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    if 'cities' in region and region['cities']:
        cities = list(region['cities'].keys())
        for i in range(0, len(cities), 2):
            if i + 1 < len(cities):
                markup.row(cities[i], cities[i + 1])
            else:
                markup.add(cities[i])
    else:
        markup.add("–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_city_step)

@text_only_handler
def process_city_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    city_name = message.text.strip()
    region = user_data[user_id]['region_data']
    if city_name != "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω" and ('cities' not in region or city_name not in region['cities']):
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
        bot.register_next_step_handler(msg, process_city_step)
        return

    user_data[user_id]['city'] = city_name
    if city_name == "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω":
        user_data[user_id]['kt'] = float(region['kt']) if region['kt'] else 1.0
    else:
        user_data[user_id]['kt'] = region['cities'].get(city_name, 1.0)

    vehicle_id = user_data[user_id]['vehicle_id']
    if vehicle_id >= 5 and vehicle_id <= 12: 
        user_data[user_id]['km'] = 1.0  
        proceed_to_usage_period(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.):", reply_markup=markup)
        bot.register_next_step_handler(msg, process_engine_power_step)

@text_only_handler
def process_engine_power_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        power = float(message.text.replace(',', '.'))
        user_data[user_id]['engine_power'] = power
        km = calculate_km(power)
        user_data[user_id]['km'] = km
        proceed_to_usage_period(message)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        bot.register_next_step_handler(msg, process_engine_power_step)

@text_only_handler
def proceed_to_usage_period(message):
    user_id = message.from_user.id
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    periods = [period['name'] for period in osago_data['usage_periods']]
    for i in range(0, len(periods), 2):
        if i + 1 < len(periods):
            markup.row(periods[i], periods[i + 1])
        else:
            markup.add(periods[i])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¢–°:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_usage_period_step)

@text_only_handler
def process_usage_period_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    period_name = message.text.strip()
    if period_name not in [p['name'] for p in osago_data['usage_periods']]:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
        bot.register_next_step_handler(msg, process_usage_period_step)
        return

    user_data[user_id]['usage_period'] = period_name
    ks = calculate_ks(period_name)
    user_data[user_id]['ks'] = ks

    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    markup.add("–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º", "–° –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–õ–∏—Ü–∞, –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_driver_restriction_step)

@text_only_handler
def process_driver_restriction_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    restriction = message.text.strip()
    if restriction not in ["–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º", "–° –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"]:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
        bot.register_next_step_handler(msg, process_driver_restriction_step)
        return

    user_data[user_id]['driver_restriction'] = restriction
    user_data[user_id]['ko'] = 2.27 if restriction == "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º" else 1.0  

    if restriction == "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∏ —Å—Ç–∞–∂ —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18, 0):", reply_markup=markup)
        bot.register_next_step_handler(msg, process_unrestricted_age_experience_step)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –¥–æ–ø—É—â–µ–Ω–æ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_restricted_driver_count_step)

@text_only_handler
def process_unrestricted_age_experience_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        age, experience = map(int, message.text.split(','))
        if age < 18:
            msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–æ–∑—Ä–∞—Å—Ç –≤–æ–¥–∏—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 18 –ª–µ—Ç")
            bot.register_next_step_handler(msg, process_unrestricted_age_experience_step)
            return
        if experience < 0:
            msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–°—Ç–∞–∂ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            bot.register_next_step_handler(msg, process_unrestricted_age_experience_step)
            return
        user_data[user_id]['insurer_age'] = age
        user_data[user_id]['insurer_experience'] = experience

        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–î–∞", "–ù–µ—Ç")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ë—ã–ª–∏ –ª–∏ –∞–≤–∞—Ä–∏–∏ (–ø–æ –µ–≥–æ –≤–∏–Ω–µ)?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_unrestricted_accidents_step)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∏ —Å—Ç–∞–∂ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18, 0)")
        bot.register_next_step_handler(msg, process_unrestricted_age_experience_step)

@text_only_handler
def process_unrestricted_accidents_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    accidents = message.text.strip()
    if accidents not in ["–î–∞", "–ù–µ—Ç"]:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç")
        bot.register_next_step_handler(msg, process_unrestricted_accidents_step)
        return

    if accidents == "–ù–µ—Ç":
        kbm = calculate_kbm(user_data[user_id]['insurer_age'], user_data[user_id]['insurer_experience'], 0)
        user_data[user_id]['kbm'] = kbm
        calculate_osago(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –±—ã–ª–æ –∞–≤–∞—Ä–∏–π (–ø–æ –µ–≥–æ –≤–∏–Ω–µ)?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_unrestricted_accident_count_step)

@text_only_handler
def process_unrestricted_accident_count_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        accident_count = int(message.text)
        kbm = calculate_kbm(user_data[user_id]['insurer_age'], user_data[user_id]['insurer_experience'], accident_count)
        user_data[user_id]['kbm'] = kbm
        calculate_osago(message)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        bot.register_next_step_handler(msg, process_unrestricted_accident_count_step)

@text_only_handler
def process_restricted_driver_count_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        driver_count = int(message.text)
        user_data[user_id]['driver_count'] = driver_count
        user_data[user_id]['drivers'] = []
        process_driver_info(message, 1)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        bot.register_next_step_handler(msg, process_restricted_driver_count_step)

@text_only_handler
def process_driver_info(message, driver_num):
    user_id = message.from_user.id
    if driver_num > user_data[user_id]['driver_count']:
        calculate_restricted_kbm(message)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∏ —Å—Ç–∞–∂ –¥–ª—è *–≤–æ–¥–∏—Ç–µ–ª—è ‚Ññ{driver_num}* (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18, 0):", reply_markup=markup, parse_mode='Markdown')
    bot.register_next_step_handler(msg, lambda m: process_driver_age_experience_step(m, driver_num))

@text_only_handler
def process_driver_age_experience_step(message, driver_num):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        age, experience = map(int, message.text.split(','))
        if age < 18:
            msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–æ–∑—Ä–∞—Å—Ç –≤–æ–¥–∏—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 18 –ª–µ—Ç")
            bot.register_next_step_handler(msg, lambda m: process_driver_age_experience_step(m, driver_num))
            return
        if experience < 0:
            msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–°—Ç–∞–∂ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            bot.register_next_step_handler(msg, lambda m: process_driver_age_experience_step(m, driver_num))
            return
        driver_data = {'age': age, 'experience': experience}
        user_data[user_id]['drivers'].append(driver_data)

        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–î–∞", "–ù–µ—Ç")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, f"–ë—ã–ª–∏ –ª–∏ –∞–≤–∞—Ä–∏–∏ —É *–≤–æ–¥–∏—Ç–µ–ª—è ‚Ññ{driver_num}* (–ø–æ –µ–≥–æ –≤–∏–Ω–µ)?", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, lambda m: process_driver_accidents_step(m, driver_num))
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∏ —Å—Ç–∞–∂ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18, 0)")
        bot.register_next_step_handler(msg, lambda m: process_driver_age_experience_step(m, driver_num))

@text_only_handler
def process_driver_accidents_step(message, driver_num):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    accidents = message.text.strip()
    if accidents not in ["–î–∞", "–ù–µ—Ç"]:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç")
        bot.register_next_step_handler(msg, lambda m: process_driver_accidents_step(m, driver_num))
        return

    if accidents == "–ù–µ—Ç":
        user_data[user_id]['drivers'][driver_num-1]['accidents'] = 0
        process_driver_info(message, driver_num + 1)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, f"–°–∫–æ–ª—å–∫–æ –±—ã–ª–æ –∞–≤–∞—Ä–∏–π —É *–≤–æ–¥–∏—Ç–µ–ª—è ‚Ññ{driver_num}* (–ø–æ –µ–≥–æ –≤–∏–Ω–µ)?", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, lambda m: process_driver_accident_count_step(m, driver_num))

@text_only_handler
def process_driver_accident_count_step(message, driver_num):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        accident_count = int(message.text)
        user_data[user_id]['drivers'][driver_num-1]['accidents'] = accident_count
        process_driver_info(message, driver_num + 1)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        bot.register_next_step_handler(msg, lambda m: process_driver_accident_count_step(m, driver_num))

def calculate_km(power):
    if power <= 50: return 0.6
    elif power <= 70: return 0.8
    elif power <= 100: return 1.0
    elif power <= 120: return 1.2
    elif power <= 150: return 1.4
    else: return 1.6

def calculate_ks(period_name):
    period_map = {
        "3 –º–µ—Å—è—Ü–∞": 0.5,
        "4 –º–µ—Å—è—Ü–∞": 0.6,
        "5 –º–µ—Å—è—Ü–µ–≤": 0.65,
        "6 –º–µ—Å—è—Ü–µ–≤": 0.7,
        "7 –º–µ—Å—è—Ü–µ–≤": 0.8,
        "8 –º–µ—Å—è—Ü–µ–≤": 0.9,
        "9 –º–µ—Å—è—Ü–µ–≤": 0.95,
        "10‚Äì12 –º–µ—Å—è—Ü–µ–≤": 1.0
    }
    return period_map.get(period_name, 1.0)

def calculate_kvs(age, experience):
    if age < 18 or experience < 0:
        raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 18, —Å—Ç–∞–∂ >= 0")
    if age <= 22 and experience <= 3: return 2.27  
    elif age <= 22 and experience > 3: return 1.93
    elif age > 22 and experience <= 3: return 1.87
    else: return 1.0

def calculate_kbm(age, experience, accidents):
    if age < 18 or experience < 0:
        raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 18, —Å—Ç–∞–∂ >= 0")
    
    if accidents > 0:
        if accidents == 1: return 1.55
        elif accidents == 2: return 2.25
        elif accidents == 3: return 2.45
        else: return 3.92
    
    base_class = 3
    final_class = base_class + min(experience, 10)
    
    for kmb_class in osago_data['kmb_classes']:
        if kmb_class['name'] == f"–ö–ª–∞—Å—Å {final_class}":
            return kmb_class['kbm']
    return 0.46

def get_base_tariff(vehicle_id):
    tariffs = {
        1: (1548, 5552),  
        2: (2471, 5431),  
        3: (2089, 6603),  
        4: (2966, 7396),  
        5: (2089, 6603),  
        6: (2966, 7396), 
        7: (2089, 6603),  
        8: (2966, 7396), 
        9: (4449, 8875),  
        10: (2966, 7396),
        11: (1483, 3698), 
        12: (1125, 3374)  
    }
    return tariffs.get(vehicle_id, (2471, 5431)) 

def calculate_restricted_kbm(message):
    user_id = message.from_user.id
    kvs_list = []
    kbm_list = []
    driver_results = []
    
    for i, driver in enumerate(user_data[user_id]['drivers'], 1):
        kvs = calculate_kvs(driver['age'], driver['experience'])
        kbm = calculate_kbm(driver['age'], driver['experience'], driver['accidents'])
        kvs_list.append(kvs)
        kbm_list.append(kbm)
        
        base_tariff_min, base_tariff_max = 1646, 7535
        kt = user_data[user_id]['kt']
        km = user_data[user_id]['km']
        ks = user_data[user_id]['ks']
        ko = user_data[user_id]['ko']
        
        min_cost = base_tariff_min * kt * km * kvs * ko * ks * kbm
        max_cost = base_tariff_max * kt * km * kvs * ko * ks * kbm
        
        driver_results.append({
            'driver_num': i,
            'kvs': kvs,
            'kbm': kbm,
            'min_cost': min_cost,
            'max_cost': max_cost
        })
    
    user_data[user_id]['kvs'] = max(kvs_list)  
    user_data[user_id]['kbm'] = max(kbm_list) 
    user_data[user_id]['driver_results'] = driver_results
    calculate_osago(message)

@text_only_handler
def calculate_osago(message):
    user_id_int = message.from_user.id  
    user_id_str = str(user_id_int)  
    data = user_data[user_id_int]

    base_tariff_min, base_tariff_max = get_base_tariff(data['vehicle_id'])
    kt = data['kt']
    km = data['km']
    ks = data['ks']
    ko = data['ko']

    if data['driver_restriction'] == "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º":
        kvs = calculate_kvs(data['insurer_age'], data['insurer_experience'])
        kbm = data['kbm']
        min_cost = base_tariff_min * kt * km * kvs * ko * ks * kbm
        max_cost = base_tariff_max * kt * km * kvs * ko * ks * kbm
        
        result_message = (
            "*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ –û–°–ê–ì–û (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π):*\n\n"
            "*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
            f"üë§ *–í–ª–∞–¥–µ–ª–µ—Ü –¢–°:* {data['owner_type']}\n"
            f"üöó *–¢–∏–ø –¢–°:* {data['vehicle_type']}\n"
            f"üåç *–†–µ–≥–∏–æ–Ω:* {data['region']}\n"
            f"üèô *–ì–æ—Ä–æ–¥:* {data['city']}\n"
            f"üí™ *–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:* {data.get('engine_power', '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')} –ª.—Å.\n"
            f"üìÖ *–ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* {data['usage_period']}\n"
            f"üöó *–õ–∏—Ü–∞, –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é:* {data['driver_restriction']}\n"
            f"üéÇ *–í–æ–∑—Ä–∞—Å—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è:* {data['insurer_age']}\n"
            f"‚è≥ *–°—Ç–∞–∂ —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è:* {data['insurer_experience']}\n"
            "\n*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç:*\n\n"
            f"üí∞ *–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:* {min_cost:,.0f} ‚Ä¶ {max_cost:,.0f} —Ä—É–±.\n"
            f"\n*–¢–∞—Ä–∏—Ñ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:*\n\n"
            f"üíµ *–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ* ‚Äì –æ—Ç {base_tariff_min} –¥–æ {base_tariff_max} —Ä—É–±.\n"
            f"‚≠ê *–ö–¢ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏):* {kt}\n"
            f"‚≠ê *–ö–ú (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏):* {km}\n"
            f"‚≠ê *–ö–í–° (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ–∑—Ä–∞—Å—Ç-—Å—Ç–∞–∂):* {kvs}\n"
            f"‚≠ê *–ö–û (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è):* {ko}\n"
            f"‚≠ê *–ö–° (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏):* {ks}\n"
            f"‚≠ê *–ö–ë–ú (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–æ–Ω—É—Å-–º–∞–ª—É—Å):* {kbm}\n"
        )
    else:
        result_message = (
            "*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ –û–°–ê–ì–û (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏):*\n\n"
            "*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
            f"üë§ *–í–ª–∞–¥–µ–ª–µ—Ü –¢–°:* {data['owner_type']}\n"
            f"üöó *–¢–∏–ø –¢–°:* {data['vehicle_type']}\n"
            f"üåç *–†–µ–≥–∏–æ–Ω:* {data['region']}\n"
            f"üèô *–ì–æ—Ä–æ–¥:* {data['city']}\n"
            f"üí™ *–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:* {data.get('engine_power', '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')} –ª.—Å.\n"
            f"üìÖ *–ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* {data['usage_period']}\n"
            f"üöó *–õ–∏—Ü–∞, –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é:* {data['driver_restriction']}\n"
            "\n*–î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π:*\n"
        )
        
        for i, driver in enumerate(data['drivers'], 1):
            result_message += (
                f"\nüë§ *–í–æ–¥–∏—Ç–µ–ª—å ‚Ññ{i}:*\n"
                f"üéÇ *–í–æ–∑—Ä–∞—Å—Ç:* {driver['age']}\n"
                f"‚è≥ *–°—Ç–∞–∂:* {driver['experience']}\n"
                f"üí• *–ê–≤–∞—Ä–∏–∏:* {driver['accidents']}\n"
            )
        
        result_message += "\n*–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º:*\n"
        for result in data['driver_results']:
            result_message += (
                f"\nüë§ *–í–æ–¥–∏—Ç–µ–ª—å ‚Ññ{result['driver_num']}:*\n"
                f"üí∞ *–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:* {result['min_cost']:,.0f} ‚Ä¶ {result['max_cost']:,.0f} —Ä—É–±.\n"
                f"‚≠ê *–ö–í–°:* {result['kvs']}\n"
                f"‚≠ê *–ö–ë–ú:* {result['kbm']}\n"
            )
        
        kvs = data['kvs']
        kbm = data['kbm']
        min_cost = base_tariff_min * kt * km * kvs * ko * ks * kbm
        max_cost = base_tariff_max * kt * km * kvs * ko * ks * kbm
        
        result_message += (
            "\n*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç (—Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π):*\n\n"
            f"üí∞ *–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:* {min_cost:,.0f} ‚Ä¶ {max_cost:,.0f} —Ä—É–±.\n"
            f"\n*–¢–∞—Ä–∏—Ñ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:*\n\n"
            f"üíµ *–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ* ‚Äì –æ—Ç {base_tariff_min} –¥–æ {base_tariff_max} —Ä—É–±.\n"
            f"‚≠ê *–ö–¢ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏):* {kt}\n"
            f"‚≠ê *–ö–ú (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏):* {km}\n"
            f"‚≠ê *–ö–í–° (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ–∑—Ä–∞—Å—Ç-—Å—Ç–∞–∂):* {kvs}\n"
            f"‚≠ê *–ö–û (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è):* {ko}\n"
            f"‚≠ê *–ö–° (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏):* {ks}\n"
            f"‚≠ê *–ö–ë–ú (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–æ–Ω—É—Å-–º–∞–ª—É—Å):* {kbm}\n"
        )

    username = data.get('username', 'unknown')
    timestamp = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
    
    calculation_data = {
        'owner_type': data['owner_type'],
        'vehicle_type': data['vehicle_type'],
        'region': data['region'],
        'city': data['city'],
        'engine_power': data.get('engine_power', '–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'),
        'usage_period': data['usage_period'],
        'driver_restriction': data['driver_restriction'],
        'kt': kt,
        'km': km,
        'ks': ks,
        'ko': ko,
        'min_cost': round(min_cost, 0),
        'max_cost': round(max_cost, 0),
        'timestamp': timestamp
    }

    if 'insurer_age' in data:
        calculation_data['insurer_age'] = data['insurer_age']
        calculation_data['insurer_experience'] = data['insurer_experience']
        calculation_data['kvs'] = calculate_kvs(data['insurer_age'], data['insurer_experience'])
        calculation_data['kbm'] = data['kbm']

    if 'drivers' in data:
        calculation_data['drivers'] = data['drivers']
        calculation_data['driver_results'] = data['driver_results']
        calculation_data['kvs'] = data['kvs']
        calculation_data['kbm'] = data['kbm']

    if user_id_str not in user_history_osago:
        user_history_osago[user_id_str] = {
            'username': username,
            'osago_calculations': []
        }
    elif 'osago_calculations' not in user_history_osago[user_id_str]:
        user_history_osago[user_id_str]['osago_calculations'] = []

    user_history_osago[user_id_str]['osago_calculations'].append(calculation_data)

    if not USER_HISTORY_PATH_OSAGO.endswith('osago_users.json'):
        raise ValueError("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –û–°–ê–ì–û –≤ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª!")

    save_user_history_osago()
    save_osago_to_excel(user_id_str, calculation_data)

    bot.send_message(message.chat.id, result_message, parse_mode='Markdown', reply_markup=ReplyKeyboardRemove())
    del user_data[user_id_int]  
    view_osago_calc(message, show_description=False)

def save_osago_to_excel(user_id, calculation):
    file_path = os.path.join(OSAGO_EXCEL_DIR, f"{user_id}_osago.xlsx")
    
    calculations = user_history_osago.get(user_id, {}).get('osago_calculations', [])
    
    columns = [
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
        "–í–ª–∞–¥–µ–ª–µ—Ü –¢–°",
        "–¢–∏–ø –¢–°",
        "–†–µ–≥–∏–æ–Ω",
        "–ì–æ—Ä–æ–¥",
        "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)",
        "–ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        "–õ–∏—Ü–∞, –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
        "–í–æ–∑—Ä–∞—Å—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è",
        "–°—Ç–∞–∂ —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è",
        "–ö–¢",
        "–ö–ú",
        "–ö–í–°",
        "–ö–û",
        "–ö–°",
        "–ö–ë–ú",
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)",
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)"
    ]
    
    new_calc_data = {
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": calculation['timestamp'],
        "–í–ª–∞–¥–µ–ª–µ—Ü –¢–°": calculation['owner_type'],
        "–¢–∏–ø –¢–°": calculation['vehicle_type'],
        "–†–µ–≥–∏–æ–Ω": calculation['region'],
        "–ì–æ—Ä–æ–¥": calculation['city'],
        "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)": calculation['engine_power'],
        "–ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": calculation['usage_period'],
        "–õ–∏—Ü–∞, –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é": calculation['driver_restriction'],
        "–í–æ–∑—Ä–∞—Å—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è": calculation.get('insurer_age', ''),
        "–°—Ç–∞–∂ —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è": calculation.get('insurer_experience', ''),
        "–ö–¢": calculation['kt'],
        "–ö–ú": calculation['km'],
        "–ö–í–°": calculation.get('kvs', ''),
        "–ö–û": calculation['ko'],
        "–ö–°": calculation['ks'],
        "–ö–ë–ú": calculation.get('kbm', ''),
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)": calculation['min_cost'],
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)": calculation['max_cost']
    }

    new_calc_df = pd.DataFrame([new_calc_data], columns=columns)
    
    if os.path.exists(file_path):
        existing_data = pd.read_excel(file_path).dropna(axis=1, how='all')
        existing_data = existing_data.reindex(columns=columns, fill_value=None)
        updated_data = pd.concat([existing_data, new_calc_df], ignore_index=True)
    else:
        updated_data = new_calc_df
    
    updated_data.to_excel(file_path, index=False)
    
    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows():
        for cell in row:
            cell.alignment = Alignment(horizontal="center", vertical="center")
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_col=worksheet.max_column-1, max_col=worksheet.max_column):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

def update_osago_excel_file(user_id):
    file_path = os.path.join(OSAGO_EXCEL_DIR, f"{user_id}_osago.xlsx")
    calculations = user_history_osago.get(user_id, {}).get('osago_calculations', [])

    if not calculations:
        columns = [
            "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
            "–í–ª–∞–¥–µ–ª–µ—Ü –¢–°",
            "–¢–∏–ø –¢–°",
            "–†–µ–≥–∏–æ–Ω",
            "–ì–æ—Ä–æ–¥",
            "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)",
            "–ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
            "–õ–∏—Ü–∞, –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
            "–í–æ–∑—Ä–∞—Å—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è",
            "–°—Ç–∞–∂ —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è",
            "–ö–¢",
            "–ö–ú",
            "–ö–í–°",
            "–ö–û",
            "–ö–°",
            "–ö–ë–ú",
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)",
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)"
        ]
        df = pd.DataFrame(columns=columns)
        df.to_excel(file_path, index=False)
        return

    columns = [
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
        "–í–ª–∞–¥–µ–ª–µ—Ü –¢–°",
        "–¢–∏–ø –¢–°",
        "–†–µ–≥–∏–æ–Ω",
        "–ì–æ—Ä–æ–¥",
        "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)",
        "–ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        "–õ–∏—Ü–∞, –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
        "–í–æ–∑—Ä–∞—Å—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è",
        "–°—Ç–∞–∂ —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è",
        "–ö–¢",
        "–ö–ú",
        "–ö–í–°",
        "–ö–û",
        "–ö–°",
        "–ö–ë–ú",
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)",
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)"
    ]

    calc_records = []
    for calc in calculations:
        calc_data = {
            "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": calc['timestamp'],
            "–í–ª–∞–¥–µ–ª–µ—Ü –¢–°": calc['owner_type'],
            "–¢–∏–ø –¢–°": calc['vehicle_type'],
            "–†–µ–≥–∏–æ–Ω": calc['region'],
            "–ì–æ—Ä–æ–¥": calc['city'],
            "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)": calc['engine_power'],
            "–ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": calc['usage_period'],
            "–õ–∏—Ü–∞, –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é": calc['driver_restriction'],
            "–í–æ–∑—Ä–∞—Å—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è": calc.get('insurer_age', ''),
            "–°—Ç–∞–∂ —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è": calc.get('insurer_experience', ''),
            "–ö–¢": calc['kt'],
            "–ö–ú": calc['km'],
            "–ö–í–°": calc.get('kvs', ''),
            "–ö–û": calc['ko'],
            "–ö–°": calc['ks'],
            "–ö–ë–ú": calc.get('kbm', ''),
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)": calc['min_cost'],
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)": calc['max_cost']
        }
        calc_records.append(calc_data)

    df = pd.DataFrame(calc_records, columns=columns)
    df.to_excel(file_path, index=False)

    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows(min_row=2):
        for cell in row:
            cell.alignment = Alignment(horizontal='center', vertical='center')
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_row=2, min_col=len(columns)-1, max_col=len(columns)):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–û–°–ê–ì–û (–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Å–∞–≥–æ) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –û–°–ê–ì–û")
@check_function_state_decorator('–ü—Ä–æ—Å–º–æ—Ç—Ä –û–°–ê–ì–û')
@track_usage('–ü—Ä–æ—Å–º–æ—Ç—Ä –û–°–ê–ì–û')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_view_osago(message):
    user_id = str(message.from_user.id)
    if user_id not in user_history_osago or 'osago_calculations' not in user_history_osago[user_id] or not user_history_osago[user_id]['osago_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –û–°–ê–ì–û!")
        view_osago_calc(message, show_description=False)
        return
    view_osago_calculations(message)

@text_only_handler
def view_osago_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_osago or 'osago_calculations' not in user_history_osago[user_id] or not user_history_osago[user_id]['osago_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –û–°–ê–ì–û!")
        view_osago_calc(message, show_description=False)
        return

    calculations = user_history_osago[user_id]['osago_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –û–°–ê–ì–û:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí *‚Ññ{i}.* {timestamp}\n"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–û–°–ê–ì–û –≤ EXCEL')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –û–°–ê–ì–û –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_view_osago_selection)

@text_only_handler
def process_view_osago_selection(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return
    if message.text == "–û–°–ê–ì–û –≤ EXCEL":
        send_osago_excel_file(message)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–û–°–ê–ì–û –≤ EXCEL')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(
            chat_id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –û–°–ê–ì–û –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_osago_selection)
        return

    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    calculations = user_history_osago.get(user_id, {}).get('osago_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –û–°–ê–ì–û!")
        view_osago_calc(message, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–û–°–ê–ì–û –≤ EXCEL')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(
                chat_id,
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_view_osago_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        for index in valid_indices:
            calc = calculations[index]
            vehicle = next((vt for vt in osago_data['vehicle_types'] if vt['name'] == calc['vehicle_type']), None)
            vehicle_id = vehicle['id'] if vehicle else 2
            base_tariff_min, base_tariff_max = get_base_tariff(vehicle_id)

            required_keys = [
                'owner_type', 'vehicle_type', 'region', 'city', 'engine_power',
                'usage_period', 'driver_restriction', 'kt', 'km', 'ks', 'ko', 'min_cost', 'max_cost'
            ]
            for key in required_keys:
                if key not in calc:
                    bot.send_message(chat_id, f"‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞ ‚Ññ{index + 1} —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã! –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç!")
                    view_osago_calc(message, show_description=False)
                    return

            if calc['driver_restriction'] == "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º":
                result_message = (
                    f"*üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ –û–°–ê–ì–û ‚Ññ{index + 1} (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π):*\n\n"
                    f"*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
                    f"üë§ *–í–ª–∞–¥–µ–ª–µ—Ü –¢–°:* {calc['owner_type']}\n"
                    f"üöó *–¢–∏–ø –¢–°:* {calc['vehicle_type']}\n"
                    f"üåç *–†–µ–≥–∏–æ–Ω:* {calc['region']}\n"
                    f"üèô *–ì–æ—Ä–æ–¥:* {calc['city']}\n"
                    f"üí™ *–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:* {calc['engine_power']}\n"
                    f"üìÖ *–ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* {calc['usage_period']}\n"
                    f"üöó *–õ–∏—Ü–∞, –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é:* {calc['driver_restriction']}\n"
                    f"üéÇ *–í–æ–∑—Ä–∞—Å—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è:* {calc.get('insurer_age', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"‚è≥ *–°—Ç–∞–∂ —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è:* {calc.get('insurer_experience', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"\n*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç:*\n\n"
                    f"üí∞ *–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:* {calc['min_cost']:,.0f} ‚Ä¶ {calc['max_cost']:,.0f} —Ä—É–±.\n"
                    f"\n*–¢–∞—Ä–∏—Ñ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:*\n\n"
                    f"üíµ *–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ* ‚Äì –æ—Ç {base_tariff_min} –¥–æ {base_tariff_max} —Ä—É–±.\n"
                    f"‚≠ê *–ö–¢ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏):* {calc['kt']}\n"
                    f"‚≠ê *–ö–ú (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏):* {calc['km']}\n"
                    f"‚≠ê *–ö–í–° (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ–∑—Ä–∞—Å—Ç-—Å—Ç–∞–∂):* {calc.get('kvs', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"‚≠ê *–ö–û (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è):* {calc['ko']}\n"
                    f"‚≠ê *–ö–° (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏):* {calc['ks']}\n"
                    f"‚≠ê *–ö–ë–ú (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–æ–Ω—É—Å-–º–∞–ª—É—Å):* {calc.get('kbm', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"\nüïí *–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞:* {calc['timestamp']}"
                )
            else:
                result_message = (
                    f"*üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ –û–°–ê–ì–û ‚Ññ{index + 1} (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏):*\n\n"
                    f"*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
                    f"üë§ *–í–ª–∞–¥–µ–ª–µ—Ü –¢–°:* {calc['owner_type']}\n"
                    f"üöó *–¢–∏–ø –¢–°:* {calc['vehicle_type']}\n"
                    f"üåç *–†–µ–≥–∏–æ–Ω:* {calc['region']}\n"
                    f"üèô *–ì–æ—Ä–æ–¥:* {calc['city']}\n"
                    f"üí™ *–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:* {calc['engine_power']}\n"
                    f"üìÖ *–ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* {calc['usage_period']}\n"
                    f"üöó *–õ–∏—Ü–∞, –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é:* {calc['driver_restriction']}\n"
                    "\n*–î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π:*\n"
                )

                for i, driver in enumerate(calc.get('drivers', []), 1):
                    result_message += (
                        f"\nüë§ *–í–æ–¥–∏—Ç–µ–ª—å ‚Ññ{i}:*\n"
                        f"üéÇ *–í–æ–∑—Ä–∞—Å—Ç:* {driver['age']}\n"
                        f"‚è≥ *–°—Ç–∞–∂:* {driver['experience']}\n"
                        f"üí• *–ê–≤–∞—Ä–∏–∏:* {driver.get('accidents', 0)}\n"
                    )

                result_message += "\n*–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º:*\n"
                for result in calc.get('driver_results', []):
                    result_message += (
                        f"\nüë§ *–í–æ–¥–∏—Ç–µ–ª—å ‚Ññ{result['driver_num']}:*\n"
                        f"üí∞ *–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:* {result['min_cost']:,.0f} ‚Ä¶ {result['max_cost']:,.0f} —Ä—É–±.\n"
                        f"‚≠ê *–ö–í–°:* {result['kvs']}\n"
                        f"‚≠ê *–ö–ë–ú:* {result['kbm']}\n"
                    )

                result_message += (
                    f"\n*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç (—Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π):*\n\n"
                    f"üí∞ *–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:* {calc['min_cost']:,.0f} ‚Ä¶ {calc['max_cost']:,.0f} —Ä—É–±.\n"
                    f"\n*–¢–∞—Ä–∏—Ñ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:*\n\n"
                    f"üíµ *–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ* ‚Äì –æ—Ç {base_tariff_min} –¥–æ {base_tariff_max} —Ä—É–±.\n"
                    f"‚≠ê *–ö–¢ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏):* {calc['kt']}\n"
                    f"‚≠ê *–ö–ú (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏):* {calc['km']}\n"
                    f"‚≠ê *–ö–í–° (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ–∑—Ä–∞—Å—Ç-—Å—Ç–∞–∂):* {calc.get('kvs', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"‚≠ê *–ö–û (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è):* {calc['ko']}\n"
                    f"‚≠ê *–ö–° (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏):* {calc['ks']}\n"
                    f"‚≠ê *–ö–ë–ú (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–æ–Ω—É—Å-–º–∞–ª—É—Å):* {calc.get('kbm', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"\nüïí *–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞:* {calc['timestamp']}"
                )

            bot.send_message(chat_id, result_message, parse_mode='Markdown')

        view_osago_calc(message, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–û–°–ê–ì–û –≤ EXCEL')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_osago_selection)

@bot.message_handler(func=lambda message: message.text == "–û–°–ê–ì–û –≤ EXCEL")
@check_function_state_decorator('–û–°–ê–ì–û –≤ EXCEL')
@track_usage('–û–°–ê–ì–û –≤ EXCEL')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def send_osago_excel_file(message):
    user_id = str(message.from_user.id)
    excel_file_path = os.path.join(OSAGO_EXCEL_DIR, f"{user_id}_osago.xlsx")

    if os.path.exists(excel_file_path):
        with open(excel_file_path, 'rb') as excel_file:
            bot.send_document(message.chat.id, excel_file)
    else:
        bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª Excel –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –û–°–ê–ì–û")
    view_osago_calc(message, show_description=False)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–û–°–ê–ì–û (—É–¥–∞–ª–µ–Ω–∏–µ –æ—Å–∞–≥–æ) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–µ–Ω–∏–µ –û–°–ê–ì–û")
@check_function_state_decorator('–£–¥–∞–ª–µ–Ω–∏–µ –û–°–ê–ì–û')
@track_usage('–£–¥–∞–ª–µ–Ω–∏–µ –û–°–ê–ì–û')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_delete_osago(message):
    user_id = str(message.from_user.id)
    if user_id not in user_history_osago or 'osago_calculations' not in user_history_osago[user_id] or not user_history_osago[user_id]['osago_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –û–°–ê–ì–û!")
        view_osago_calc(message, show_description=False)
        return
    delete_osago_calculations(message)

@text_only_handler
def delete_osago_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_osago or 'osago_calculations' not in user_history_osago[user_id] or not user_history_osago[user_id]['osago_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –û–°–ê–ì–û!")
        view_osago_calc(message, show_description=False)
        return

    calculations = user_history_osago[user_id]['osago_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –û–°–ê–ì–û:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí *‚Ññ{i}.* {timestamp}\n"

    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_delete_osago_selection)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤:", reply_markup=markup)

@text_only_handler
def process_delete_osago_selection(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    calculations = user_history_osago.get(user_id, {}).get('osago_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –û–°–ê–ì–û!")
        view_osago_calc(message, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_delete_osago_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        valid_indices.sort(reverse=True)
        for index in valid_indices:
            del calculations[index]

        save_user_history_osago()
        update_osago_excel_file(user_id)
        bot.send_message(chat_id, "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –û–°–ê–ì–û —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
        view_osago_calc(message, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup)
        bot.register_next_step_handler(msg, process_delete_osago_selection)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ê–í–¢–û–ö–†–ï–î–ò–¢ --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç")
@check_function_state_decorator('–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
@track_usage('–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_autokredit_calc(message, show_description=True):
    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞—Å—á–µ—Ç—É –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–∞*\n\n"
        "üìå *–†–∞—Å—á–µ—Ç –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–∞:*\n"
        "–†–∞—Å—á–µ—Ç –≤–µ–¥–µ—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º - *–¥–∞—Ç–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ, –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂, —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞, –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞, —Å—Ö–µ–º–∞ –æ–ø–ª–∞—Ç—ã, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≥–∞—à–µ–Ω–∏—è*\n\n"
        "_P.S. –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –¢–æ—á–Ω—ã–µ —Å—É–º–º—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —É—Å–ª–æ–≤–∏–π –±–∞–Ω–∫–∞ –∏ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!_\n\n"
        "üìå *–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n"
        "üìå *–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—á–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã"
    )

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç', '–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤', '–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    if show_description:
        bot.send_message(message.chat.id, description, parse_mode='Markdown')

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

KREDIT_USERS_PATH = os.path.join('data', 'user', 'calculators', 'kredit', 'kredit_users.json')
EXCEL_PATH_TEMPLATE = os.path.join('data', 'user', 'calculators', 'kredit', 'excel', '{user_id}', '{user_id}_{timestamp}_autokredit.xlsx')

user_data = {}
user_history_kredit = {}

loan_terms = {
    "1 –º–µ—Å—è—Ü": 1, "3 –º–µ—Å—è—Ü–∞": 3, "6 –º–µ—Å—è—Ü–µ–≤": 6, "1 –≥–æ–¥": 12, "1,5 –≥–æ–¥–∞": 18,
    "2 –≥–æ–¥–∞": 24, "3 –≥–æ–¥–∞": 36, "4 –≥–æ–¥–∞": 48, "5 –ª–µ—Ç": 60, "6 –ª–µ—Ç": 72,
    "7 –ª–µ—Ç": 84, "8 –ª–µ—Ç": 96, "9 –ª–µ—Ç": 108, "10 –ª–µ—Ç": 120, "15 –ª–µ—Ç": 180, "20 –ª–µ—Ç": 240
}

def ensure_path_and_file(file_path):
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    if not os.path.exists(file_path):
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump({}, f, ensure_ascii=False, indent=2)

def load_user_history_kredit():
    global user_history_kredit
    try:
        if os.path.exists(KREDIT_USERS_PATH):
            with open(KREDIT_USERS_PATH, 'r', encoding='utf-8') as db_file:
                user_history_kredit = json.load(db_file)
        else:
            user_history_kredit = {}
    except Exception as e:
        user_history_kredit = {}

def save_user_history_kredit():
    try:
        with open(KREDIT_USERS_PATH, 'w', encoding='utf-8') as db_file:
            json.dump(user_history_kredit, db_file, ensure_ascii=False, indent=2)
    except Exception as e:
        pass

ensure_path_and_file(KREDIT_USERS_PATH)
load_user_history_kredit()

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ê–í–¢–û–ö–†–ï–î–ò–¢ (—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç")
@check_function_state_decorator('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
@track_usage('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def start_car_loan_calculation(message):
    user_id = message.from_user.id
    user_data[user_id] = {'user_id': user_id, 'username': message.from_user.username}
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_loan_date_step)

@text_only_handler
def process_loan_date_step(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    try:
        loan_date = datetime.strptime(message.text, "%d.%m.%Y")
        current_date = datetime.now()
        if loan_date < current_date.replace(hour=0, minute=0, second=0, microsecond=0):
            raise ValueError("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π")
        user_data[user_id]['loan_date'] = loan_date
        
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –≤ —Ä—É–±–ª—è—Ö:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_price_step)
    except ValueError as e:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, str(e) if str(e) else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=markup)
        bot.register_next_step_handler(msg, process_loan_date_step)

@text_only_handler
def process_car_price_step(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    try:
        car_price = float(message.text.replace(',', '.'))
        if car_price <= 0:
            raise ValueError("–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
        user_data[user_id]['car_price'] = car_price
        
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–í ‚ÇΩ", "–í %")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_down_payment_type_step)
    except ValueError as e:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, str(e) if str(e) else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_price_step)

@text_only_handler
def process_down_payment_type_step(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    down_payment_type = message.text.strip()
    if down_payment_type not in ["–í ‚ÇΩ", "–í %"]:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤ ‚ÇΩ –∏–ª–∏ –≤ %", reply_markup=markup)
        bot.register_next_step_handler(msg, process_down_payment_type_step)
        return
    
    user_data[user_id]['down_payment_type'] = down_payment_type
    unit = "‚ÇΩ" if down_payment_type == "–í ‚ÇΩ" else "%"
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ *{unit}*:", reply_markup=markup, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_down_payment_amount_step)

@text_only_handler
def process_down_payment_amount_step(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    try:
        amount = float(message.text.replace(',', '.'))
        if amount < 0:
            raise ValueError("–°—É–º–º–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!")
        
        if user_data[user_id]['down_payment_type'] == "–í ‚ÇΩ":
            if amount >= user_data[user_id]['car_price']:
                raise ValueError("–ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ!")
            user_data[user_id]['down_payment'] = amount
        else:  
            if amount > 100:
                raise ValueError("–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100!")
            user_data[user_id]['down_payment'] = user_data[user_id]['car_price'] * (amount / 100)
        
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        terms = list(loan_terms.keys())
        for i in range(0, len(terms), 2):
            if i + 1 < len(terms):
                markup.row(terms[i], terms[i + 1])
            else:
                markup.add(terms[i])
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–¥–∞—á–∏ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_loan_term_step)
    except ValueError as e:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, str(e) if str(e) else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=markup)
        bot.register_next_step_handler(msg, process_down_payment_amount_step)

@text_only_handler
def process_loan_term_step(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    term = message.text.strip()
    if term not in loan_terms:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", reply_markup=markup)
        bot.register_next_step_handler(msg, process_loan_term_step)
        return
    
    user_data[user_id]['loan_term'] = loan_terms[term]
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_interest_rate_step)

@text_only_handler
def process_interest_rate_step(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    try:
        rate = float(message.text.replace(',', '.'))
        if rate <= 0:
            raise ValueError("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
        user_data[user_id]['interest_rate'] = rate / 100
        
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–†–∞–≤–Ω—ã–º–∏ –¥–æ–ª—è–º–∏", "–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ö–µ–º—É –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_payment_scheme_step)
    except ValueError as e:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, str(e) if str(e) else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=markup)
        bot.register_next_step_handler(msg, process_interest_rate_step)

@text_only_handler
def process_payment_scheme_step(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    scheme = message.text.strip()
    if scheme not in ["–†–∞–≤–Ω—ã–º–∏ –¥–æ–ª—è–º–∏", "–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏"]:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–≤–Ω—ã–º–∏ –¥–æ–ª—è–º–∏ –∏–ª–∏ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏", reply_markup=markup)
        bot.register_next_step_handler(msg, process_payment_scheme_step)
        return
    
    user_data[user_id]['payment_scheme'] = scheme
    markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≥–∞—à–µ–Ω–∏—è?", reply_markup=markup)
    bot.register_next_step_handler(msg, process_extra_payments_step)

@text_only_handler
def process_extra_payments_step(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    answer = message.text.strip()
    if answer not in ["–î–∞", "–ù–µ—Ç"]:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_extra_payments_step)
        return
    
    user_data[user_id]['has_extra_payments'] = answer == "–î–∞"
    if answer == "–ù–µ—Ç":
        calculate_loan(message)
    else:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–≥–∞—à–µ–Ω–∏–π:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_extra_payments_count_step)

@text_only_handler
def process_extra_payments_count_step(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    try:
        count = int(message.text)
        if count <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≥–∞—à–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
        user_data[user_id]['extra_payments_count'] = count
        user_data[user_id]['extra_payments'] = []
        process_extra_payment_info(message, 1)
    except ValueError as e:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, str(e) if str(e) else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=markup)
        bot.register_next_step_handler(msg, process_extra_payments_count_step)

@text_only_handler
def process_extra_payment_info(message, payment_num):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    if payment_num > user_data[user_id]['extra_payments_count']:
        calculate_loan(message)
        return
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, f"*–ü–æ–≥–∞—à–µ–Ω–∏–µ ‚Ññ{payment_num}*\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=markup, parse_mode='Markdown')
    bot.register_next_step_handler(msg, lambda m: process_extra_payment_date_step(m, payment_num))

@text_only_handler
def process_extra_payment_date_step(message, payment_num):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    try:
        payment_date = datetime.strptime(message.text, "%d.%m.%Y")
        if payment_date < user_data[user_id]['loan_date']:
            raise ValueError("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –≤—ã–¥–∞—á–∏ –∫—Ä–µ–¥–∏—Ç–∞")
        user_data[user_id]['extra_payments'].append({'date': payment_date})
        
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ", "–ï–∂–µ–º–µ—Å—è—á–Ω–æ", "–ï–∂–µ–≥–æ–¥–Ω–æ")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, f"*–ü–æ–≥–∞—à–µ–Ω–∏–µ ‚Ññ{payment_num}*\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, lambda m: process_extra_payment_frequency_step(m, payment_num))
    except ValueError as e:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, str(e) if str(e) else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=markup)
        bot.register_next_step_handler(msg, lambda m: process_extra_payment_date_step(m, payment_num))

@text_only_handler
def process_extra_payment_frequency_step(message, payment_num):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    frequency = message.text.strip()
    if frequency not in ["–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ", "–ï–∂–µ–º–µ—Å—è—á–Ω–æ", "–ï–∂–µ–≥–æ–¥–Ω–æ"]:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ, –µ–∂–µ–º–µ—Å—è—á–Ω–æ –∏–ª–∏ –µ–∂–µ–≥–æ–¥–Ω–æ", reply_markup=markup)
        bot.register_next_step_handler(msg, lambda m: process_extra_payment_frequency_step(m, payment_num))
        return
    
    user_data[user_id]['extra_payments'][payment_num-1]['frequency'] = frequency
    markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    markup.add("–°—Ä–æ–∫", "–°—É–º–º–∞")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, f"*–ü–æ–≥–∞—à–µ–Ω–∏–µ ‚Ññ{payment_num}*\n–ß—Ç–æ —É–º–µ–Ω—å—à–∞—Ç—å?", reply_markup=markup, parse_mode='Markdown')
    bot.register_next_step_handler(msg, lambda m: process_extra_payment_target_step(m, payment_num))

@text_only_handler
def process_extra_payment_target_step(message, payment_num):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    target = message.text.strip()
    if target not in ["–°—Ä–æ–∫", "–°—É–º–º–∞"]:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∏–ª–∏ —Å—É–º–º–∞", reply_markup=markup)
        bot.register_next_step_handler(msg, lambda m: process_extra_payment_target_step(m, payment_num))
        return
    
    user_data[user_id]['extra_payments'][payment_num-1]['target'] = target
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, f"*–ü–æ–≥–∞—à–µ–Ω–∏–µ ‚Ññ{payment_num}*\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–≥–∞—à–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:", reply_markup=markup, parse_mode='Markdown')
    bot.register_next_step_handler(msg, lambda m: process_extra_payment_amount_step(m, payment_num))

@text_only_handler
def process_extra_payment_amount_step(message, payment_num):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
        user_data[user_id]['extra_payments'][payment_num-1]['amount'] = amount
        process_extra_payment_info(message, payment_num + 1)
    except ValueError as e:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, str(e) if str(e) else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=markup)
        bot.register_next_step_handler(msg, lambda m: process_extra_payment_amount_step(m, payment_num))

@text_only_handler
def calculate_loan(message):
    user_id = message.from_user.id
    data = user_data[user_id]
    
    principal = data['car_price'] - data['down_payment']
    months = data['loan_term']
    monthly_rate = data['interest_rate'] / 12 / 100  
    
    payment_schedule = []
    total_interest = 0
    total_payment = 0
    monthly_payment = 0
    
    extra_payments = []
    if data.get('has_extra_payments', False):
        for extra in data['extra_payments']:
            payment_date = extra['date']
            amount = extra['amount']
            frequency = extra['frequency']
            target = extra['target']
            
            if frequency == "–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ":
                extra_payments.append({'date': payment_date, 'amount': amount, 'target': target})
            elif frequency == "–ï–∂–µ–º–µ—Å—è—á–Ω–æ":
                current_date = payment_date
                end_date = data['loan_date'] + timedelta(days=30 * months)
                while current_date <= end_date:
                    extra_payments.append({'date': current_date, 'amount': amount, 'target': target})
                    current_date += timedelta(days=30)
            elif frequency == "–ï–∂–µ–≥–æ–¥–Ω–æ":
                current_date = payment_date
                end_date = data['loan_date'] + timedelta(days=30 * months)
                while current_date <= end_date:
                    extra_payments.append({'date': current_date, 'amount': amount, 'target': target})
                    current_date += timedelta(days=365)
        extra_payments.sort(key=lambda x: x['date'])

    remaining_principal = principal
    start_date = data['loan_date']
    current_month = 0
    extra_payment_index = 0
    
    if data['payment_scheme'] == "–†–∞–≤–Ω—ã–º–∏ –¥–æ–ª—è–º–∏":
        monthly_payment = (principal * monthly_rate * (1 + monthly_rate) ** months) / ((1 + monthly_rate) ** months - 1)
        
        while remaining_principal > 0 and current_month < months:
            payment_date = start_date + timedelta(days=30 * current_month)
            
            extra_amount = 0
            extra_target = None
            while (extra_payment_index < len(extra_payments) and 
                   extra_payments[extra_payment_index]['date'].date() <= payment_date.date()):
                extra_amount += extra_payments[extra_payment_index]['amount']
                extra_target = extra_payments[extra_payment_index]['target']
                extra_payment_index += 1
            
            interest_payment = remaining_principal * monthly_rate
            principal_payment = monthly_payment - interest_payment
            
            if extra_amount > 0:
                if extra_target == "–°—É–º–º–∞":
                    adjusted_payment = monthly_payment - extra_amount
                    if adjusted_payment < 0:
                        extra_amount = monthly_payment
                        adjusted_payment = 0
                    principal_payment += extra_amount
                else:  
                    remaining_principal -= extra_amount
                    remaining_months = months - current_month - 1
                    if remaining_months > 0 and remaining_principal > 0:
                        monthly_payment = (remaining_principal * monthly_rate * (1 + monthly_rate) ** remaining_months) / ((1 + monthly_rate) ** remaining_months - 1)
                    else:
                        monthly_payment = 0
            
            total_monthly_payment = monthly_payment
            if total_monthly_payment > remaining_principal + interest_payment:
                total_monthly_payment = remaining_principal + interest_payment
                principal_payment = remaining_principal
            
            remaining_principal -= principal_payment
            if remaining_principal < 0:
                remaining_principal = 0
            
            total_interest += interest_payment
            total_payment += total_monthly_payment
            
            payment_schedule.append({
                'date': payment_date.strftime("%d.%m.%Y"),
                'remaining_principal': remaining_principal,
                'interest_payment': interest_payment,
                'principal_payment': principal_payment,
                'total_payment': total_monthly_payment
            })
            
            current_month += 1
            if monthly_payment == 0:
                break
    
    else: 
        monthly_principal = principal / months
        
        while remaining_principal > 0 and current_month < months:
            payment_date = start_date + timedelta(days=30 * current_month)
            
            extra_amount = 0
            extra_target = None
            while (extra_payment_index < len(extra_payments) and 
                   extra_payments[extra_payment_index]['date'].date() <= payment_date.date()):
                extra_amount += extra_payments[extra_payment_index]['amount']
                extra_target = extra_payments[extra_payment_index]['target']
                extra_payment_index += 1
            
            interest_payment = remaining_principal * monthly_rate
            principal_payment = monthly_principal
            
            if extra_amount > 0:
                if extra_target == "–°—É–º–º–∞":
                    principal_payment += extra_amount
                else:  
                    remaining_principal -= extra_amount
                    remaining_months = months - current_month - 1
                    if remaining_months > 0 and remaining_principal > 0:
                        monthly_principal = remaining_principal / remaining_months
                    else:
                        monthly_principal = 0
                    principal_payment = monthly_principal
            
            total_monthly_payment = principal_payment + interest_payment
            remaining_principal -= principal_payment
            if remaining_principal < 0:
                remaining_principal = 0
            
            total_interest += interest_payment
            total_payment += total_monthly_payment
            
            payment_schedule.append({
                'date': payment_date.strftime("%d.%m.%Y"),
                'remaining_principal': remaining_principal,
                'interest_payment': interest_payment,
                'principal_payment': principal_payment,
                'total_payment': total_monthly_payment
            })
            
            current_month += 1
            if monthly_principal == 0:
                break

    timestamp_display = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
    result_message = (
        f"*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç—É –Ω–∞ {timestamp_display}*\n\n"
        f"‚ú® *–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂:*\n"
        f"{monthly_payment if data['payment_scheme'] == '–†–∞–≤–Ω—ã–º–∏ –¥–æ–ª—è–º–∏' else payment_schedule[0]['total_payment']:,.2f} ‚ÇΩ\n\n"
        f"üèõÔ∏è *–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞:*\n"
        f"{principal:,.2f} ‚ÇΩ\n\n"
        f"üí∏ *–°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤:*\n"
        f"{total_interest:,.2f} ‚ÇΩ\n\n"
        f"üí∞ *–û–±—â–∞—è –≤—ã–ø–ª–∞—Ç–∞:*\n"
        f"{total_payment:,.2f} ‚ÇΩ\n\n"
        f"–û–∂–∏–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –≤—ã–ø–ª–∞—Ç –ø–æ –∫—Ä–µ–¥–∏—Ç—É..."
    )
    
    bot.send_message(message.chat.id, result_message, parse_mode='Markdown')
    
    timestamp = datetime.now().strftime("%d_%m_%Y_%H_%M")
    excel_path = EXCEL_PATH_TEMPLATE.format(user_id=user_id, timestamp=timestamp)
    
    os.makedirs(os.path.dirname(excel_path), exist_ok=True)
    save_to_excel(user_id, principal, total_interest, total_payment, payment_schedule, excel_path, timestamp_display)
    
    save_credit_calculation_to_history(user_id, principal, total_interest, total_payment, payment_schedule, timestamp_display)
    
    with open(excel_path, 'rb') as file:
        bot.send_document(message.chat.id, file, caption="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤—ã–ø–ª–∞—Ç –ø–æ –∫—Ä–µ–¥–∏—Ç—É")
    
    del user_data[user_id]
    view_autokredit_calc(message, show_description=False)

def save_to_excel(user_id, principal, total_interest, total_payment, payment_schedule, excel_path, timestamp_display):
    user_id_int = int(user_id)  
    workbook = openpyxl.Workbook()
    sheet = workbook.active
    
    sheet['A1'] = f"–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—ã–ø–ª–∞—Ç –ø–æ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç—É –Ω–∞ –¥–∞—Ç—É {timestamp_display}"
    sheet['A1'].font = Font(bold=True)
    sheet['A1'].alignment = Alignment(horizontal='center', vertical='center')
    sheet.merge_cells('A1:E1')
    
    sheet['A3'] = "–°—É–º–º–∞"
    sheet['B3'] = "–°—Ä–æ–∫"
    sheet['C3'] = "–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞"
    sheet['D3'] = "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç–∞"
    for col in ['A3', 'B3', 'C3', 'D3']:
        sheet[col].font = Font(bold=True)
        sheet[col].alignment = Alignment(horizontal='center', vertical='center')
    
    sheet['A4'] = f"{user_data[user_id_int]['car_price']:,.2f} —Ä—É–±.".replace(',', ' ')
    sheet['B4'] = f"{user_data[user_id_int]['loan_term']} –º–µ—Å"
    sheet['C4'] = f"{user_data[user_id_int]['interest_rate'] * 100:.2f}%"
    sheet['D4'] = f"{total_interest:,.2f} —Ä—É–±.".replace(',', ' ')
    for col in ['A4', 'B4', 'C4', 'D4']:
        sheet[col].alignment = Alignment(horizontal='center', vertical='center')
    
    thin_border = Border(
        left=Side(style='thin', color='000000'),
        right=Side(style='thin', color='000000'),
        top=Side(style='thin', color='000000'),
        bottom=Side(style='thin', color='000000')
    )
    light_green_fill = PatternFill(start_color='CCFFCC', end_color='CCFFCC', fill_type='solid')
    yellow_fill = PatternFill(start_color='FFFF99', end_color='FFFF99', fill_type='solid')
    
    headers = ["–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞", "–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞", "–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ %", "–ü–ª–∞—Ç–µ–∂ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–ª–≥", "–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞"]
    for col, header in enumerate(headers, 1):
        cell = sheet.cell(row=5, column=col)
        cell.value = header
        cell.font = Font(bold=True)
        cell.alignment = Alignment(horizontal='center', vertical='center')
        cell.border = thin_border
    
    for row, payment in enumerate(payment_schedule, 6):
        sheet.cell(row=row, column=1).value = payment['date']
        sheet.cell(row=row, column=2).value = f"{payment['remaining_principal']:,.2f}".replace(',', ' ')
        sheet.cell(row=row, column=3).value = f"{payment['interest_payment']:,.2f}".replace(',', ' ')
        sheet.cell(row=row, column=4).value = f"{payment['principal_payment']:,.2f}".replace(',', ' ')
        sheet.cell(row=row, column=5).value = f"{payment['total_payment']:,.2f}".replace(',', ' ')
        
        for col in range(1, 6):
            cell = sheet.cell(row=row, column=col)
            cell.alignment = Alignment(horizontal='center', vertical='center')
            cell.fill = light_green_fill
            cell.border = thin_border
    
    row = len(payment_schedule) + 7
    sheet.cell(row=row, column=1).value = "–ò—Ç–æ–≥–æ:"
    sheet.cell(row=row, column=3).value = f"{total_interest:,.2f}".replace(',', ' ')
    sheet.cell(row=row, column=5).value = f"{total_payment:,.2f}".replace(',', ' ')
    for col in [1, 3, 5]:
        cell = sheet.cell(row=row, column=col)
        cell.font = Font(bold=True)
        cell.alignment = Alignment(horizontal='center', vertical='center')
        cell.fill = yellow_fill
        cell.border = thin_border
    
    for col_idx in range(1, 6):
        column_letter = openpyxl.utils.get_column_letter(col_idx)
        max_length = 0
        for row in range(1, sheet.max_row + 1):
            cell = sheet.cell(row=row, column=col_idx)
            if isinstance(cell, openpyxl.cell.cell.MergedCell):
                continue
            try:
                cell_value = str(cell.value)
                if len(cell_value) > max_length:
                    max_length = len(cell_value)
            except:
                pass
        adjusted_width = (max_length + 2) * 1.2
        sheet.column_dimensions[column_letter].width = adjusted_width
    
    workbook.save(excel_path)

def save_credit_calculation_to_history(user_id, principal, total_interest, total_payment, payment_schedule, timestamp_display):
    user_id_int = int(user_id) 
    user_id_str = str(user_id)  
    username = user_data[user_id_int].get('username', 'unknown')
    
    calculation_data = {
        'car_price': user_data[user_id_int]['car_price'],
        'down_payment': user_data[user_id_int]['down_payment'],
        'loan_term': user_data[user_id_int]['loan_term'],
        'interest_rate': user_data[user_id_int]['interest_rate'] * 100,
        'payment_scheme': user_data[user_id_int]['payment_scheme'],
        'has_extra_payments': user_data[user_id_int]['has_extra_payments'],
        'loan_date': user_data[user_id_int]['loan_date'].strftime("%d.%m.%Y"),
        'principal': principal,
        'total_interest': total_interest,
        'total_payment': total_payment,
        'timestamp': timestamp_display
    }
    
    if user_data[user_id_int]['has_extra_payments']:
        calculation_data['extra_payments'] = [
            {**ep, 'date': ep['date'].strftime("%d.%m.%Y")} 
            for ep in user_data[user_id_int]['extra_payments']
        ]
    
    if user_id_str not in user_history_kredit:
        user_history_kredit[user_id_str] = {
            'username': username,
            'autokredit_calculations': []
        }
    elif 'autokredit_calculations' not in user_history_kredit[user_id_str]:
        user_history_kredit[user_id_str]['autokredit_calculations'] = []
    
    user_history_kredit[user_id_str]['autokredit_calculations'].append(calculation_data)
    
    if not KREDIT_USERS_PATH.endswith('kredit_users.json'):
        raise ValueError("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–∞ –≤ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª!")
    
    save_user_history_kredit()

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ê–í–¢–û–ö–†–ï–î–ò–¢ (–ø—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤")
@check_function_state_decorator('–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤')
@track_usage('–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_view_autokredit(message):
    user_id = str(message.from_user.id)
    if user_id not in user_history_kredit or 'autokredit_calculations' not in user_history_kredit[user_id] or not user_history_kredit[user_id]['autokredit_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤!")
        view_autokredit_calc(message, show_description=False)
        return
    view_autokredit_calculations(message)

@text_only_handler
def view_autokredit_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_kredit or 'autokredit_calculations' not in user_history_kredit[user_id] or not user_history_kredit[user_id]['autokredit_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤!")
        view_autokredit_calc(message, show_description=False)
        return

    calculations = user_history_kredit[user_id]['autokredit_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí *‚Ññ{i}.* {timestamp}\n"

    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_view_autokredit_selection)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)

@text_only_handler
def process_view_autokredit_selection(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    calculations = user_history_kredit.get(user_id, {}).get('autokredit_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤!")
        view_autokredit_calc(message, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_view_autokredit_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        for index in valid_indices:
            calc = calculations[index]
            result_message = (
                f"*üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç—É ‚Ññ{index + 1}:*\n\n"
                f"*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
                f"üìÖ *–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:* {calc['loan_date']}\n"
                f"üöó *–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ:* {calc['car_price']:,.2f} ‚ÇΩ\n"
                f"üí∞ *–ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂:* {calc['down_payment']:,.2f} ‚ÇΩ\n"
                f"‚è≥ *–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞:* {calc['loan_term']} –º–µ—Å.\n"
                f"üìà *–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞:* {calc['interest_rate']:.2f}%\n"
                f"üìã *–°—Ö–µ–º–∞ –æ–ø–ª–∞—Ç—ã:* {calc['payment_scheme']}\n"
                f"üí∏ *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≥–∞—à–µ–Ω–∏—è:* {'–î–∞' if calc['has_extra_payments'] else '–ù–µ—Ç'}\n"
            )

            if calc['has_extra_payments']:
                result_message += "\n*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≥–∞—à–µ–Ω–∏—è:*\n"
                for i, extra in enumerate(calc['extra_payments'], 1):
                    result_message += (
                        f"\n*–ü–æ–≥–∞—à–µ–Ω–∏–µ ‚Ññ{i}:*\n"
                        f"üìÖ *–î–∞—Ç–∞:* {extra['date']}\n"
                        f"üí∞ *–°—É–º–º–∞:* {extra['amount']:,.2f} ‚ÇΩ\n"
                        f"üîÑ *–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:* {extra['frequency']}\n"
                        f"üéØ *–¶–µ–ª—å:* {extra['target']}\n"
                    )

            result_message += (
                f"\n*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç:*\n\n"
                f"üèõÔ∏è *–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞:* {calc['principal']:,.2f} ‚ÇΩ\n"
                f"üí∏ *–°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤:* {calc['total_interest']:,.2f} ‚ÇΩ\n"
                f"üí∞ *–û–±—â–∞—è –≤—ã–ø–ª–∞—Ç–∞:* {calc['total_payment']:,.2f} ‚ÇΩ\n"
                f"üïí *–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞:* {calc['timestamp']}"
            )

            bot.send_message(chat_id, result_message, parse_mode='Markdown')

            timestamp = calc['timestamp'].replace(' –≤ ', '_').replace('.', '_').replace(':', '_')
            excel_path = EXCEL_PATH_TEMPLATE.format(user_id=user_id, timestamp=timestamp)
            if os.path.exists(excel_path):
                with open(excel_path, 'rb') as file:
                    bot.send_document(chat_id, file, caption=f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤—ã–ø–ª–∞—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ‚Ññ{index + 1}")
            else:
                bot.send_message(chat_id, "‚ùå Excel-—Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        view_autokredit_calc(message, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_autokredit_selection)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ê–í–¢–û–ö–†–ï–î–ò–¢ (—É–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤")
@check_function_state_decorator('–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤')
@track_usage('–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_delete_autokredit(message):
    user_id = str(message.from_user.id)
    if user_id not in user_history_kredit or 'autokredit_calculations' not in user_history_kredit[user_id] or not user_history_kredit[user_id]['autokredit_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤!")
        view_autokredit_calc(message, show_description=False)
        return
    delete_autokredit_calculations(message)

@text_only_handler
def delete_autokredit_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_kredit or 'autokredit_calculations' not in user_history_kredit[user_id] or not user_history_kredit[user_id]['autokredit_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤!")
        view_autokredit_calc(message, show_description=False)
        return

    calculations = user_history_kredit[user_id]['autokredit_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí *‚Ññ{i}.* {timestamp}\n"

    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_delete_autokredit_selection)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤:", reply_markup=markup)

@text_only_handler
def process_delete_autokredit_selection(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    calculations = user_history_kredit.get(user_id, {}).get('autokredit_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤!")
        view_autokredit_calc(message, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_delete_autokredit_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        valid_indices.sort(reverse=True)
        for index in valid_indices:
            calc = calculations[index]
            timestamp = calc['timestamp'].replace(' –≤ ', '_').replace('.', '_').replace(':', '_')
            excel_path = EXCEL_PATH_TEMPLATE.format(user_id=user_id, timestamp=timestamp)
            if os.path.exists(excel_path):
                os.remove(excel_path)
            del calculations[index]

        save_user_history_kredit()
        bot.send_message(chat_id, "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
        view_autokredit_calc(message, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup)
        bot.register_next_step_handler(msg, process_delete_autokredit_selection)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–®–ò–ù–´ --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–®–∏–Ω—ã")
@check_function_state_decorator('–®–∏–Ω—ã')
@track_usage('–®–∏–Ω—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_tire_calc(message, show_description=True):
    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —à–∏–Ω–Ω–æ–º—É –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É*\n\n"
        "üìå *–†–∞—Å—á–µ—Ç —à–∏–Ω –∏ –¥–∏—Å–∫–æ–≤:*\n"
        "–†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö - *—à–∏—Ä–∏–Ω–∞, –ø—Ä–æ—Ñ–∏–ª—å –∏ –¥–∏–∞–º–µ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω, —à–∏—Ä–∏–Ω–∞ –æ–±–æ–¥–∞ –∏ –≤—ã–ª–µ—Ç —Ç–µ–∫—É—â–∏—Ö –¥–∏—Å–∫–æ–≤, –∞ —Ç–∞–∫–∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ–≤—ã—Ö —à–∏–Ω –∏ –¥–∏—Å–∫–æ–≤*\n\n"
        "_P.S. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è. –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!_\n\n"
        "üìå *–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—á–µ—Ç–æ–≤:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n"
        "üìå *–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—á–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã"
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —à–∏–Ω—ã', '–ü—Ä–æ—Å–º–æ—Ç—Ä —à–∏–Ω', '–£–¥–∞–ª–µ–Ω–∏–µ —à–∏–Ω')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    if show_description:
        bot.send_message(message.chat.id, description, parse_mode='Markdown')

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

TIRE_HISTORY_PATH = os.path.join('data', 'user', 'calculators', 'tires', 'tire_users.json')
TIRE_EXCEL_DIR = os.path.join('data', 'user', 'calculators', 'tires', 'excel')

user_data = {}
user_history_tire = {}

def ensure_path_and_file(file_path):
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    if not os.path.exists(file_path):
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump({}, f, ensure_ascii=False, indent=2)

def load_user_history_tires():
    global user_history_tire
    try:
        if os.path.exists(TIRE_HISTORY_PATH):
            with open(TIRE_HISTORY_PATH, 'r', encoding='utf-8') as db_file:
                user_history_tire = json.load(db_file)
        else:
            user_history_tire = {}
    except Exception as e:
        user_history_tire = {}

def save_user_history_tires():
    try:
        with open(TIRE_HISTORY_PATH, 'w', encoding='utf-8') as db_file:
            json.dump(user_history_tire, db_file, ensure_ascii=False, indent=2)
    except Exception as e:
        pass

ensure_path_and_file(TIRE_HISTORY_PATH)
os.makedirs(TIRE_EXCEL_DIR, exist_ok=True)
load_user_history_tires()

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–®–ò–ù–´ (—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —à–∏–Ω—ã) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —à–∏–Ω—ã")
@check_function_state_decorator('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —à–∏–Ω—ã')
@track_usage('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —à–∏–Ω—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def start_tire_calculation(message):
    user_id = message.from_user.id
    user_data[user_id] = {'user_id': user_id, 'username': message.from_user.username or 'unknown'}

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (–º–º):\n\n_P.S. –≤–≤–æ–¥ –æ—Ç 135 –¥–æ 405 —Å —à–∞–≥–æ–º 10_", reply_markup=markup, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_current_width_step)

@text_only_handler
def process_current_width_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã":
        view_tire_calc(message, show_description=False)
        return 
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        width = int(message.text)
        if width < 135 or width > 405 or (width - 135) % 10 != 0:
            raise ValueError
        user_data[user_id]['current_width'] = width
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (%):\n\n_P.S. –≤–≤–æ–¥ –æ—Ç 30 –¥–æ 80 —Å —à–∞–≥–æ–º 5_", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_current_profile_step)
    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 135 –¥–æ 405 —Å —à–∞–≥–æ–º 10", reply_markup=markup)
        bot.register_next_step_handler(msg, process_current_width_step)

@text_only_handler
def process_current_profile_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã":
        view_tire_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        profile = int(message.text)
        if profile < 30 or profile > 80 or (profile - 30) % 5 != 0:
            raise ValueError
        user_data[user_id]['current_profile'] = profile
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–º–µ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (–¥—é–π–º—ã):\n\n_P.S. –≤–≤–æ–¥ –æ—Ç 12 –¥–æ 24 —Å —à–∞–≥–æ–º 1_", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_current_diameter_step)
    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 30 –¥–æ 80 —Å —à–∞–≥–æ–º 5", reply_markup=markup)
        bot.register_next_step_handler(msg, process_current_profile_step)

@text_only_handler
def process_current_diameter_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã":
        view_tire_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        diameter = int(message.text)
        if diameter < 12 or diameter > 24:
            raise ValueError
        user_data[user_id]['current_diameter'] = diameter
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –æ–±–æ–¥–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∏—Å–∫–æ–≤ (–¥—é–π–º—ã):\n\n_P.S. –≤–≤–æ–¥ –æ—Ç 4 –¥–æ 13 —Å —à–∞–≥–æ–º 0.5_", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_current_rim_width_step)
    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 12 –¥–æ 24", reply_markup=markup)
        bot.register_next_step_handler(msg, process_current_diameter_step)

@text_only_handler
def process_current_rim_width_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã":
        view_tire_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        rim_width = float(message.text.replace(',', '.'))
        if rim_width < 4 or rim_width > 13 or (rim_width * 2 % 1 != 0):
            raise ValueError
        user_data[user_id]['current_rim_width'] = rim_width
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—ã–ª–µ—Ç —Ç–µ–∫—É—â–∏—Ö –¥–∏—Å–∫–æ–≤ (ET, –º–º):\n\n_P.S. –≤–≤–æ–¥ –æ—Ç -55 –¥–æ 65 —Å —à–∞–≥–æ–º 1_", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_current_et_step)
    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 4 –¥–æ 13 —Å —à–∞–≥–æ–º 0.5", reply_markup=markup)
        bot.register_next_step_handler(msg, process_current_rim_width_step)

@text_only_handler
def process_current_et_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã":
        view_tire_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        et = int(message.text)
        if et < -55 or et > 65:
            raise ValueError
        user_data[user_id]['current_et'] = et
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –Ω–æ–≤—ã—Ö —à–∏–Ω (–º–º):\n\n_P.S. –≤–≤–æ–¥ –æ—Ç 135 –¥–æ 405 —Å —à–∞–≥–æ–º 10_", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_new_width_step)
    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç -55 –¥–æ 65", reply_markup=markup)
        bot.register_next_step_handler(msg, process_current_et_step)

@text_only_handler
def process_new_width_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã":
        view_tire_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        width = int(message.text)
        if width < 135 or width > 405 or (width - 135) % 10 != 0:
            raise ValueError
        user_data[user_id]['new_width'] = width
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –Ω–æ–≤—ã—Ö —à–∏–Ω (%):\n\n_P.S. –≤–≤–æ–¥ –æ—Ç 30 –¥–æ 80 —Å —à–∞–≥–æ–º 5_", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_new_profile_step)
    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 135 –¥–æ 405 —Å —à–∞–≥–æ–º 10", reply_markup=markup)
        bot.register_next_step_handler(msg, process_new_width_step)

@text_only_handler
def process_new_profile_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã":
        view_tire_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        profile = int(message.text)
        if profile < 30 or profile > 80 or (profile - 30) % 5 != 0:
            raise ValueError
        user_data[user_id]['new_profile'] = profile
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–º–µ—Ç—Ä –Ω–æ–≤—ã—Ö —à–∏–Ω (–¥—é–π–º—ã):\n\n_P.S. –≤–≤–æ–¥ –æ—Ç 12 –¥–æ 24 —Å —à–∞–≥–æ–º 1_", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_new_diameter_step)
    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 30 –¥–æ 80 —Å —à–∞–≥–æ–º 5", reply_markup=markup)
        bot.register_next_step_handler(msg, process_new_profile_step)

@text_only_handler
def process_new_diameter_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã":
        view_tire_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        diameter = int(message.text)
        if diameter < 12 or diameter > 24:
            raise ValueError
        user_data[user_id]['new_diameter'] = diameter
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –æ–±–æ–¥–∞ –Ω–æ–≤—ã—Ö –¥–∏—Å–∫–æ–≤ (–¥—é–π–º—ã):\n\n_P.S. –≤–≤–æ–¥ –æ—Ç 4 –¥–æ 13 —Å —à–∞–≥–æ–º 0.5_", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_new_rim_width_step)
    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 12 –¥–æ 24", reply_markup=markup)
        bot.register_next_step_handler(msg, process_new_diameter_step)

@text_only_handler
def process_new_rim_width_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã":
        view_tire_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        rim_width = float(message.text.replace(',', '.'))
        if rim_width < 4 or rim_width > 13 or (rim_width * 2 % 1 != 0):
            raise ValueError
        user_data[user_id]['new_rim_width'] = rim_width
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—ã–ª–µ—Ç –Ω–æ–≤—ã—Ö –¥–∏—Å–∫–æ–≤ (ET, –º–º):\n\n_P.S. –≤–≤–æ–¥ –æ—Ç -55 –¥–æ 65 —Å —à–∞–≥–æ–º 1_", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_new_et_step)
    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 4 –¥–æ 13 —Å —à–∞–≥–æ–º 0.5", reply_markup=markup)
        bot.register_next_step_handler(msg, process_new_rim_width_step)

@text_only_handler
def process_new_et_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã":
        view_tire_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        et = int(message.text)
        if et < -55 or et > 65:
            raise ValueError
        user_data[user_id]['new_et'] = et
        calculate_tire(message)
    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç -55 –¥–æ 65", reply_markup=markup)
        bot.register_next_step_handler(msg, process_new_et_step)

@text_only_handler
def calculate_tire(message):
    user_id = message.from_user.id
    data = user_data[user_id]

    current_diameter_mm = data['current_diameter'] * 25.4
    new_diameter_mm = data['new_diameter'] * 25.4
    current_rim_width_mm = data['current_rim_width'] * 25.4
    new_rim_width_mm = data['new_rim_width'] * 25.4

    current_profile_height = data['current_width'] * (data['current_profile'] / 100)
    new_profile_height = data['new_width'] * (data['new_profile'] / 100)

    current_total_diameter = current_diameter_mm + 2 * current_profile_height
    new_total_diameter = new_diameter_mm + 2 * new_profile_height

    diameter_diff_mm = new_total_diameter - current_total_diameter
    diameter_diff_percent = (diameter_diff_mm / current_total_diameter) * 100

    clearance_diff = diameter_diff_mm / 2
    speed_diff_percent = -diameter_diff_percent
    rim_width_diff_mm = new_rim_width_mm - current_rim_width_mm

    recommendation = "‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç" if abs(diameter_diff_percent) <= 3 and abs(rim_width_diff_mm) <= 25.4 else "‚ö†Ô∏è –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ > 3% –∏–ª–∏ —à–∏—Ä–∏–Ω–∞ –æ–±–æ–¥–∞ —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è)"

    width_effects = ""
    if data['new_width'] > data['current_width']:
        width_effects = (
            "üìà *–£–≤–µ–ª–∏—á–∏—Ç—Å—è —à–∏—Ä–∏–Ω–∞ —à–∏–Ω—ã:*\n\n"
            "‚úÖ –õ—É—á—à–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Å–∑–∞–¥–∏\n"
            "‚úÖ –£–ª—É—á—à–∏—Ç—Å—è —Å—Ü–µ–ø–ª–µ–Ω–∏–µ –∏ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏–µ (–ª–µ—Ç–æ)\n"
            "‚úÖ –£–≤–µ–ª–∏—á–∏—Ç—Å—è —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã —à–∏–Ω—ã\n"
            "‚ùå –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—Å—è —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞\n"
            "‚ùå –†–∏—Å–∫ –∑–∞—Ç–∏—Ä–∞–Ω–∏—è –ø–æ–¥–∫—Ä—ã–ª–∫–æ–≤\n"
        )
    elif data['new_width'] < data['current_width']:
        width_effects = (
            "üìâ *–£–º–µ–Ω—å—à–∏—Ç—Å—è —à–∏—Ä–∏–Ω–∞ —à–∏–Ω—ã:*\n\n"
            "‚úÖ –£–ª—É—á—à–∏—Ç—Å—è —Å—Ü–µ–ø–ª–µ–Ω–∏–µ –Ω–∞ –ª—å–¥—É –∏ —Å–Ω–µ–≥—É\n"
            "‚úÖ –£–º–µ–Ω—å—à–∏—Ç—Å—è —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞\n"
            "‚ùå –£—Ö—É–¥—à–∏—Ç—Å—è —Å—Ü–µ–ø–ª–µ–Ω–∏–µ (–ª–µ—Ç–æ)\n"
            "‚ùå –°–æ–∫—Ä–∞—Ç–∏—Ç—Å—è —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã —à–∏–Ω—ã\n"
        )

    profile_effects = ""
    if new_profile_height > current_profile_height:
        profile_effects = (
            "üìà *–£–≤–µ–ª–∏—á–∏—Ç—Å—è –≤—ã—Å–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è:*\n\n"
            "‚úÖ –ú–∞—à–∏–Ω–∞ —Å—Ç–∞–Ω–µ—Ç –º—è–≥—á–µ\n"
            "‚úÖ –ú–µ–Ω—å—à–µ —Ä–∏—Å–∫ –ø–æ–≤—Ä–µ–¥–∏—Ç—å —à–∏–Ω—É/–¥–∏—Å–∫\n"
            "‚ùå –•—É–∂–µ –¥–µ—Ä–∂–∏—Ç –¥–æ—Ä–æ–≥—É –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏\n"
        )
    elif new_profile_height < current_profile_height:
        profile_effects = (
            "üìâ *–£–º–µ–Ω—å—à–∏—Ç—Å—è –≤—ã—Å–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è:*\n\n"
            "‚úÖ –£–ª—É—á—à–∏—Ç—Å—è —É–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç—å\n"
            "‚ùå –ú–∞—à–∏–Ω–∞ —Å—Ç–∞–Ω–µ—Ç –∂–µ—Å—Ç—á–µ\n"
            "‚ùå –ë–æ–ª—å—à–µ —Ä–∏—Å–∫ –ø–æ–≤—Ä–µ–¥–∏—Ç—å –¥–∏—Å–∫/—à–∏–Ω—É\n"
        )

    clearance_effects = ""
    if clearance_diff > 0:
        clearance_effects = (
            "üìà *–£–≤–µ–ª–∏—á–∏—Ç—Å—è –∫–ª–∏—Ä–µ–Ω—Å:*\n\n"
            "‚úÖ –ö–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ –Ω–∞ —è–º–∞—Ö –∏ –±–µ–∑–¥–æ—Ä–æ–∂—å–µ\n"
            "‚ùå –£—Ö—É–¥—à–∏—Ç—Å—è —É–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç—å –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏\n"
            "‚ùå –†–∏—Å–∫ –∑–∞—Ç–∏—Ä–∞–Ω–∏—è –ø–æ–¥–∫—Ä—ã–ª–∫–æ–≤\n"
            f"‚ùå –°–ø–∏–¥–æ–º–µ—Ç—Ä –∑–∞–Ω–∏–∂–∞–µ—Ç –Ω–∞ {abs(speed_diff_percent):.1f}%\n"
        )
    elif clearance_diff < 0:
        clearance_effects = (
            "üìâ *–£–º–µ–Ω—å—à–∏—Ç—Å—è –∫–ª–∏—Ä–µ–Ω—Å:*\n\n"
            "‚úÖ –£–ª—É—á—à–∏—Ç—Å—è —É–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç—å –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏\n"
            "‚ùå –ú–µ–Ω–µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –Ω–∞ —è–º–∞—Ö\n"
            f"‚ùå –°–ø–∏–¥–æ–º–µ—Ç—Ä –∑–∞–≤—ã—à–∞–µ—Ç –Ω–∞ {abs(speed_diff_percent):.1f}%\n"
        )

    current_tire = f"{data['current_width']}/{data['current_profile']} R{data['current_diameter']}"
    current_rim = f"{data['current_rim_width']}x{data['current_diameter']} ET {data['current_et']}"
    new_tire = f"{data['new_width']}/{data['new_profile']} R{data['new_diameter']}"
    new_rim = f"{data['new_rim_width']}x{data['new_diameter']} ET {data['new_et']}"

    result_message = (
        "*–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ —à–∏–Ω –∏ –¥–∏—Å–∫–æ–≤:*\n\n"
        "*–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n\n"
        f"üìè –®–∏–Ω—ã: {current_tire}\n"
        f"üîç –î–∏—Å–∫–∏: {current_rim}\n"
        f"‚ÜîÔ∏è –®–∏—Ä–∏–Ω–∞ —à–∏–Ω—ã: {data['current_width']} –º–º\n"
        f"‚ÜïÔ∏è –í—ã—Å–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è: {current_profile_height:.1f} –º–º\n"
        f"üîÑ –î–∏–∞–º–µ—Ç—Ä: {current_total_diameter:.1f} –º–º\n"
        f"‚ÜîÔ∏è –®–∏—Ä–∏–Ω–∞ –æ–±–æ–¥–∞: {current_rim_width_mm:.1f} –º–º\n\n"
        "*–ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n\n"
        f"üìè –®–∏–Ω—ã: {new_tire}\n"
        f"üîç –î–∏—Å–∫–∏: {new_rim}\n"
        f"‚ÜîÔ∏è –®–∏—Ä–∏–Ω–∞ —à–∏–Ω—ã: {data['new_width']} –º–º\n"
        f"‚ÜïÔ∏è –í—ã—Å–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è: {new_profile_height:.1f} –º–º\n"
        f"üîÑ –î–∏–∞–º–µ—Ç—Ä: {new_total_diameter:.1f} –º–º\n"
        f"‚ÜîÔ∏è –®–∏—Ä–∏–Ω–∞ –æ–±–æ–¥–∞: {new_rim_width_mm:.1f} –º–º\n\n"
        "*–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:*\n\n"
        f"üîÑ –†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–∏–∞–º–µ—Ç—Ä–µ: {diameter_diff_mm:+.1f} –º–º ({diameter_diff_percent:+.1f}%)\n"
        f"üöó –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∏—Ä–µ–Ω—Å–∞: {clearance_diff:+.1f} –º–º\n"
        f"‚è± –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ø–∏–¥–æ–º–µ—Ç—Ä–∞: {speed_diff_percent:+.1f}%\n"
        f"‚ÜîÔ∏è –†–∞–∑–Ω–∏—Ü–∞ –≤ —à–∏—Ä–∏–Ω–µ –æ–±–æ–¥–∞: {rim_width_diff_mm:+.1f} –º–º\n\n"
        f"{width_effects}\n\n"
        f"{profile_effects}\n\n"
        f"{clearance_effects}\n\n"
        f"*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:*\n\n{recommendation}"
    )

    bot.send_message(message.chat.id, result_message, parse_mode='Markdown')
    
    save_tire_calculation_to_history(user_id, data, current_total_diameter, new_total_diameter, diameter_diff_mm, diameter_diff_percent)
    
    del user_data[user_id]
    view_tire_calc(message, show_description=False)

def save_tire_calculation_to_history(user_id, data, current_diameter, new_diameter, diff_mm, diff_percent):
    user_id_int = int(user_id)
    user_id_str = str(user_id)
    timestamp = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
    
    current_profile_height = data['current_width'] * (data['current_profile'] / 100)
    new_profile_height = data['new_width'] * (data['new_profile'] / 100)
    current_rim_width_mm = data['current_rim_width'] * 25.4
    new_rim_width_mm = data['new_rim_width'] * 25.4
    diameter_diff_mm = new_diameter - current_diameter
    diameter_diff_percent = (diameter_diff_mm / current_diameter) * 100
    clearance_diff = diameter_diff_mm / 2
    speed_diff_percent = -diameter_diff_percent
    rim_width_diff_mm = new_rim_width_mm - current_rim_width_mm
    recommendation = "‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç" if abs(diameter_diff_percent) <= 3 and abs(rim_width_diff_mm) <= 25.4 else "‚ö†Ô∏è –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ > 3% –∏–ª–∏ —à–∏—Ä–∏–Ω–∞ –æ–±–æ–¥–∞ —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è)"

    calculation_data = {
        'current_tire': f"{data['current_width']}/{data['current_profile']} R{data['current_diameter']}",
        'current_rim': f"{data['current_rim_width']}x{data['current_diameter']} ET {data['current_et']}",
        'new_tire': f"{data['new_width']}/{data['new_profile']} R{data['new_diameter']}",
        'new_rim': f"{data['new_rim_width']}x{data['new_diameter']} ET {data['new_et']}",
        'current_width': data['current_width'],
        'current_profile': data['current_profile'],
        'current_profile_height': round(current_profile_height, 1),
        'current_diameter': round(current_diameter, 1),
        'current_rim_width_mm': round(current_rim_width_mm, 1),
        'current_et': data['current_et'],
        'new_width': data['new_width'],
        'new_profile': data['new_profile'],
        'new_profile_height': round(new_profile_height, 1),
        'new_diameter': round(new_diameter, 1),
        'new_rim_width_mm': round(new_rim_width_mm, 1),
        'new_et': data['new_et'],
        'diameter_diff_mm': round(diameter_diff_mm, 1),
        'diameter_diff_percent': round(diameter_diff_percent, 1),
        'clearance_diff': round(clearance_diff, 1),
        'speed_diff_percent': round(speed_diff_percent, 1),
        'rim_width_diff_mm': round(rim_width_diff_mm, 1),
        'recommendation': recommendation,
        'timestamp': timestamp
    }

    if user_id_str not in user_history_tire:
        user_history_tire[user_id_str] = {
            'username': data.get('username', 'unknown'),
            'tire_calculations': []
        }
    elif 'tire_calculations' not in user_history_tire[user_id_str]:
        user_history_tire[user_id_str]['tire_calculations'] = []

    user_history_tire[user_id_str]['tire_calculations'].append(calculation_data)
    
    if not TIRE_HISTORY_PATH.endswith('tire_users.json'):
        raise ValueError("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —à–∏–Ω –≤ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª!")
    
    save_user_history_tires()
    save_tire_to_excel(user_id_str, calculation_data)

def save_tire_to_excel(user_id, calculation):
    file_path = os.path.join(TIRE_EXCEL_DIR, f"{user_id}_tires.xlsx")
    
    calculations = user_history_tire.get(user_id, {}).get('tire_calculations', [])
    
    columns = [
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
        "–¢–µ–∫—É—â–∏–µ —à–∏–Ω—ã", "–¢–µ–∫—É—â–∏–µ –¥–∏—Å–∫–∏", "–®–∏—Ä–∏–Ω–∞ —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (–º–º)", "–ü—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (%)",
        "–í—ã—Å–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (–º–º)", "–î–∏–∞–º–µ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (–º–º)", "–®–∏—Ä–∏–Ω–∞ –æ–±–æ–¥–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∏—Å–∫–æ–≤ (–º–º)", "–í—ã–ª–µ—Ç —Ç–µ–∫—É—â–∏—Ö –¥–∏—Å–∫–æ–≤ (ET, –º–º)",
        "–ù–æ–≤—ã–µ —à–∏–Ω—ã", "–ù–æ–≤—ã–µ –¥–∏—Å–∫–∏", "–®–∏—Ä–∏–Ω–∞ –Ω–æ–≤—ã—Ö —à–∏–Ω (–º–º)", "–ü—Ä–æ—Ñ–∏–ª—å –Ω–æ–≤—ã—Ö —à–∏–Ω (%)",
        "–í—ã—Å–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–æ–≤—ã—Ö —à–∏–Ω (–º–º)", "–î–∏–∞–º–µ—Ç—Ä –Ω–æ–≤—ã—Ö —à–∏–Ω (–º–º)", "–®–∏—Ä–∏–Ω–∞ –æ–±–æ–¥–∞ –Ω–æ–≤—ã—Ö –¥–∏—Å–∫–æ–≤ (–º–º)", "–í—ã–ª–µ—Ç –Ω–æ–≤—ã—Ö –¥–∏—Å–∫–æ–≤ (ET, –º–º)",
        "–†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–∏–∞–º–µ—Ç—Ä–µ (–º–º)", "–†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–∏–∞–º–µ—Ç—Ä–µ (%)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∏—Ä–µ–Ω—Å–∞ (–º–º)", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ø–∏–¥–æ–º–µ—Ç—Ä–∞ (%)", "–†–∞–∑–Ω–∏—Ü–∞ –≤ —à–∏—Ä–∏–Ω–µ –æ–±–æ–¥–∞ (–º–º)",
        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"
    ]
    
    new_calc_data = {
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": calculation['timestamp'],
        "–¢–µ–∫—É—â–∏–µ —à–∏–Ω—ã": calculation['current_tire'],
        "–¢–µ–∫—É—â–∏–µ –¥–∏—Å–∫–∏": calculation['current_rim'],
        "–®–∏—Ä–∏–Ω–∞ —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (–º–º)": calculation['current_width'],
        "–ü—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (%)": calculation['current_profile'],
        "–í—ã—Å–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (–º–º)": calculation['current_profile_height'],
        "–î–∏–∞–º–µ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (–º–º)": calculation['current_diameter'],
        "–®–∏—Ä–∏–Ω–∞ –æ–±–æ–¥–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∏—Å–∫–æ–≤ (–º–º)": calculation['current_rim_width_mm'],
        "–í—ã–ª–µ—Ç —Ç–µ–∫—É—â–∏—Ö –¥–∏—Å–∫–æ–≤ (ET, –º–º)": calculation['current_et'],
        "–ù–æ–≤—ã–µ —à–∏–Ω—ã": calculation['new_tire'],
        "–ù–æ–≤—ã–µ –¥–∏—Å–∫–∏": calculation['new_rim'],
        "–®–∏—Ä–∏–Ω–∞ –Ω–æ–≤—ã—Ö —à–∏–Ω (–º–º)": calculation['new_width'],
        "–ü—Ä–æ—Ñ–∏–ª—å –Ω–æ–≤—ã—Ö —à–∏–Ω (%)": calculation['new_profile'],
        "–í—ã—Å–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–æ–≤—ã—Ö —à–∏–Ω (–º–º)": calculation['new_profile_height'],
        "–î–∏–∞–º–µ—Ç—Ä –Ω–æ–≤—ã—Ö —à–∏–Ω (–º–º)": calculation['new_diameter'],
        "–®–∏—Ä–∏–Ω–∞ –æ–±–æ–¥–∞ –Ω–æ–≤—ã—Ö –¥–∏—Å–∫–æ–≤ (–º–º)": calculation['new_rim_width_mm'],
        "–í—ã–ª–µ—Ç –Ω–æ–≤—ã—Ö –¥–∏—Å–∫–æ–≤ (ET, –º–º)": calculation['new_et'],
        "–†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–∏–∞–º–µ—Ç—Ä–µ (–º–º)": calculation['diameter_diff_mm'],
        "–†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–∏–∞–º–µ—Ç—Ä–µ (%)": calculation['diameter_diff_percent'],
        "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∏—Ä–µ–Ω—Å–∞ (–º–º)": calculation['clearance_diff'],
        "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ø–∏–¥–æ–º–µ—Ç—Ä–∞ (%)": calculation['speed_diff_percent'],
        "–†–∞–∑–Ω–∏—Ü–∞ –≤ —à–∏—Ä–∏–Ω–µ –æ–±–æ–¥–∞ (–º–º)": calculation['rim_width_diff_mm'],
        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è": calculation['recommendation']
    }

    new_calc_df = pd.DataFrame([new_calc_data], columns=columns)
    
    if os.path.exists(file_path):
        existing_data = pd.read_excel(file_path).dropna(axis=1, how='all')
        existing_data = existing_data.reindex(columns=columns, fill_value=None)
        updated_data = pd.concat([existing_data, new_calc_df], ignore_index=True)
    else:
        updated_data = new_calc_df
    
    updated_data.to_excel(file_path, index=False)
    
    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows():
        for cell in row:
            cell.alignment = Alignment(horizontal="center", vertical="center")
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_col=worksheet.max_column-4, max_col=worksheet.max_column):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

def update_tire_excel_file(user_id):
    file_path = os.path.join(TIRE_EXCEL_DIR, f"{user_id}_tires.xlsx")
    calculations = user_history_tire.get(user_id, {}).get('tire_calculations', [])

    if not calculations:
        columns = [
            "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
            "–¢–µ–∫—É—â–∏–µ —à–∏–Ω—ã", "–¢–µ–∫—É—â–∏–µ –¥–∏—Å–∫–∏", "–®–∏—Ä–∏–Ω–∞ —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (–º–º)", "–ü—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (%)",
            "–í—ã—Å–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (–º–º)", "–î–∏–∞–º–µ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (–º–º)", "–®–∏—Ä–∏–Ω–∞ –æ–±–æ–¥–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∏—Å–∫–æ–≤ (–º–º)", "–í—ã–ª–µ—Ç —Ç–µ–∫—É—â–∏—Ö –¥–∏—Å–∫–æ–≤ (ET, –º–º)",
            "–ù–æ–≤—ã–µ —à–∏–Ω—ã", "–ù–æ–≤—ã–µ –¥–∏—Å–∫–∏", "–®–∏—Ä–∏–Ω–∞ –Ω–æ–≤—ã—Ö —à–∏–Ω (–º–º)", "–ü—Ä–æ—Ñ–∏–ª—å –Ω–æ–≤—ã—Ö —à–∏–Ω (%)",
            "–í—ã—Å–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–æ–≤—ã—Ö —à–∏–Ω (–º–º)", "–î–∏–∞–º–µ—Ç—Ä –Ω–æ–≤—ã—Ö —à–∏–Ω (–º–º)", "–®–∏—Ä–∏–Ω–∞ –æ–±–æ–¥–∞ –Ω–æ–≤—ã—Ö –¥–∏—Å–∫–æ–≤ (–º–º)", "–í—ã–ª–µ—Ç –Ω–æ–≤—ã—Ö –¥–∏—Å–∫–æ–≤ (ET, –º–º)",
            "–†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–∏–∞–º–µ—Ç—Ä–µ (–º–º)", "–†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–∏–∞–º–µ—Ç—Ä–µ (%)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∏—Ä–µ–Ω—Å–∞ (–º–º)", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ø–∏–¥–æ–º–µ—Ç—Ä–∞ (%)", "–†–∞–∑–Ω–∏—Ü–∞ –≤ —à–∏—Ä–∏–Ω–µ –æ–±–æ–¥–∞ (–º–º)",
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"
        ]
        df = pd.DataFrame(columns=columns)
        df.to_excel(file_path, index=False)
        return

    columns = [
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
        "–¢–µ–∫—É—â–∏–µ —à–∏–Ω—ã", "–¢–µ–∫—É—â–∏–µ –¥–∏—Å–∫–∏", "–®–∏—Ä–∏–Ω–∞ —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (–º–º)", "–ü—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (%)",
        "–í—ã—Å–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (–º–º)", "–î–∏–∞–º–µ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (–º–º)", "–®–∏—Ä–∏–Ω–∞ –æ–±–æ–¥–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∏—Å–∫–æ–≤ (–º–º)", "–í—ã–ª–µ—Ç —Ç–µ–∫—É—â–∏—Ö –¥–∏—Å–∫–æ–≤ (ET, –º–º)",
        "–ù–æ–≤—ã–µ —à–∏–Ω—ã", "–ù–æ–≤—ã–µ –¥–∏—Å–∫–∏", "–®–∏—Ä–∏–Ω–∞ –Ω–æ–≤—ã—Ö —à–∏–Ω (–º–º)", "–ü—Ä–æ—Ñ–∏–ª—å –Ω–æ–≤—ã—Ö —à–∏–Ω (%)",
        "–í—ã—Å–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–æ–≤—ã—Ö —à–∏–Ω (–º–º)", "–î–∏–∞–º–µ—Ç—Ä –Ω–æ–≤—ã—Ö —à–∏–Ω (–º–º)", "–®–∏—Ä–∏–Ω–∞ –æ–±–æ–¥–∞ –Ω–æ–≤—ã—Ö –¥–∏—Å–∫–æ–≤ (–º–º)", "–í—ã–ª–µ—Ç –Ω–æ–≤—ã—Ö –¥–∏—Å–∫–æ–≤ (ET, –º–º)",
        "–†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–∏–∞–º–µ—Ç—Ä–µ (–º–º)", "–†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–∏–∞–º–µ—Ç—Ä–µ (%)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∏—Ä–µ–Ω—Å–∞ (–º–º)", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ø–∏–¥–æ–º–µ—Ç—Ä–∞ (%)", "–†–∞–∑–Ω–∏—Ü–∞ –≤ —à–∏—Ä–∏–Ω–µ –æ–±–æ–¥–∞ (–º–º)",
        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"
    ]

    calc_records = []
    for calc in calculations:
        calc_data = {
            "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": calc['timestamp'],
            "–¢–µ–∫—É—â–∏–µ —à–∏–Ω—ã": calc['current_tire'],
            "–¢–µ–∫—É—â–∏–µ –¥–∏—Å–∫–∏": calc['current_rim'],
            "–®–∏—Ä–∏–Ω–∞ —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (–º–º)": calc['current_width'],
            "–ü—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (%)": calc['current_profile'],
            "–í—ã—Å–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (–º–º)": calc['current_profile_height'],
            "–î–∏–∞–º–µ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö —à–∏–Ω (–º–º)": calc['current_diameter'],
            "–®–∏—Ä–∏–Ω–∞ –æ–±–æ–¥–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∏—Å–∫–æ–≤ (–º–º)": calc['current_rim_width_mm'],
            "–í—ã–ª–µ—Ç —Ç–µ–∫—É—â–∏—Ö –¥–∏—Å–∫–æ–≤ (ET, –º–º)": calc['current_et'],
            "–ù–æ–≤—ã–µ —à–∏–Ω—ã": calc['new_tire'],
            "–ù–æ–≤—ã–µ –¥–∏—Å–∫–∏": calc['new_rim'],
            "–®–∏—Ä–∏–Ω–∞ –Ω–æ–≤—ã—Ö —à–∏–Ω (–º–º)": calc['new_width'],
            "–ü—Ä–æ—Ñ–∏–ª—å –Ω–æ–≤—ã—Ö —à–∏–Ω (%)": calc['new_profile'],
            "–í—ã—Å–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–æ–≤—ã—Ö —à–∏–Ω (–º–º)": calc['new_profile_height'],
            "–î–∏–∞–º–µ—Ç—Ä –Ω–æ–≤—ã—Ö —à–∏–Ω (–º–º)": calc['new_diameter'],
            "–®–∏—Ä–∏–Ω–∞ –æ–±–æ–¥–∞ –Ω–æ–≤—ã—Ö –¥–∏—Å–∫–æ–≤ (–º–º)": calc['new_rim_width_mm'],
            "–í—ã–ª–µ—Ç –Ω–æ–≤—ã—Ö –¥–∏—Å–∫–æ–≤ (ET, –º–º)": calc['new_et'],
            "–†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–∏–∞–º–µ—Ç—Ä–µ (–º–º)": calc['diameter_diff_mm'],
            "–†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–∏–∞–º–µ—Ç—Ä–µ (%)": calc['diameter_diff_percent'],
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∏—Ä–µ–Ω—Å–∞ (–º–º)": calc['clearance_diff'],
            "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ø–∏–¥–æ–º–µ—Ç—Ä–∞ (%)": calc['speed_diff_percent'],
            "–†–∞–∑–Ω–∏—Ü–∞ –≤ —à–∏—Ä–∏–Ω–µ –æ–±–æ–¥–∞ (–º–º)": calc['rim_width_diff_mm'],
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è": calc['recommendation']
        }
        calc_records.append(calc_data)

    df = pd.DataFrame(calc_records, columns=columns)
    df.to_excel(file_path, index=False)

    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows(min_row=2):
        for cell in row:
            cell.alignment = Alignment(horizontal='center', vertical='center')
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_row=2, min_col=len(columns)-4, max_col=len(columns)):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–®–ò–ù–´ (–ø—Ä–æ—Å–º–æ—Ç—Ä —à–∏–Ω) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä —à–∏–Ω")
@check_function_state_decorator('–ü—Ä–æ—Å–º–æ—Ç—Ä —à–∏–Ω')
@track_usage('–ü—Ä–æ—Å–º–æ—Ç—Ä —à–∏–Ω')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_view_tire_calc(message):
    user_id = str(message.from_user.id)
    if user_id not in user_history_tire or 'tire_calculations' not in user_history_tire[user_id] or not user_history_tire[user_id]['tire_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —à–∏–Ω!")
        view_tire_calc(message, show_description=False)
        return
    view_tire_calculations(message)

@text_only_handler
def view_tire_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_tire or 'tire_calculations' not in user_history_tire[user_id] or not user_history_tire[user_id]['tire_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —à–∏–Ω!")
        view_tire_calc(message, show_description=False)
        return

    calculations = user_history_tire[user_id]['tire_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —à–∏–Ω:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí *‚Ññ{i}.* {timestamp}\n"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–®–∏–Ω—ã –≤ EXCEL')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_view_tire_selection)

@text_only_handler
def process_view_tire_selection(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã":
        view_tire_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return
    if message.text == "–®–∏–Ω—ã –≤ EXCEL":
        send_tire_excel_file(message)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–®–∏–Ω—ã –≤ EXCEL')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ —à–∏–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_tire_selection)
        return

    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    calculations = user_history_tire.get(user_id, {}).get('tire_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —à–∏–Ω!")
        view_tire_calc(message, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–®–∏–Ω—ã –≤ EXCEL')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_view_tire_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        for index in valid_indices:
            calc = calculations[index]
            required_keys = [
                'current_width', 'new_width', 'current_profile_height', 'new_profile_height',
                'current_diameter', 'new_diameter', 'current_rim_width_mm', 'new_rim_width_mm',
                'diameter_diff_mm', 'diameter_diff_percent', 'clearance_diff', 'speed_diff_percent',
                'rim_width_diff_mm', 'recommendation', 'current_tire', 'current_rim', 'new_tire', 'new_rim'
            ]
            for key in required_keys:
                if key not in calc:
                    bot.send_message(chat_id, f"‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞ ‚Ññ{index + 1} —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã! –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç!")
                    view_tire_calc(message, show_description=False)
                    return

            width_effects = ""
            if calc['new_width'] > calc['current_width']:
                width_effects = (
                    "üìà *–£–≤–µ–ª–∏—á–∏—Ç—Å—è —à–∏—Ä–∏–Ω–∞ —à–∏–Ω—ã:*\n\n"
                    "‚úÖ –õ—É—á—à–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Å–∑–∞–¥–∏\n"
                    "‚úÖ –£–ª—É—á—à–∏—Ç—Å—è —Å—Ü–µ–ø–ª–µ–Ω–∏–µ –∏ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏–µ (–ª–µ—Ç–æ)\n"
                    "‚úÖ –£–≤–µ–ª–∏—á–∏—Ç—Å—è —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã —à–∏–Ω—ã\n"
                    "‚ùå –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—Å—è —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞\n"
                    "‚ùå –†–∏—Å–∫ –∑–∞—Ç–∏—Ä–∞–Ω–∏—è –ø–æ–¥–∫—Ä—ã–ª–∫–æ–≤\n"
                )
            elif calc['new_width'] < calc['current_width']:
                width_effects = (
                    "üìâ *–£–º–µ–Ω—å—à–∏—Ç—Å—è —à–∏—Ä–∏–Ω–∞ —à–∏–Ω—ã:*\n\n"
                    "‚úÖ –£–ª—É—á—à–∏—Ç—Å—è —Å—Ü–µ–ø–ª–µ–Ω–∏–µ –Ω–∞ –ª—å–¥—É –∏ —Å–Ω–µ–≥—É\n"
                    "‚úÖ –£–º–µ–Ω—å—à–∏—Ç—Å—è —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞\n"
                    "‚ùå –£—Ö—É–¥—à–∏—Ç—Å—è —Å—Ü–µ–ø–ª–µ–Ω–∏–µ (–ª–µ—Ç–æ)\n"
                    "‚ùå –°–æ–∫—Ä–∞—Ç–∏—Ç—Å—è —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã —à–∏–Ω—ã\n"
                )

            profile_effects = ""
            if calc['new_profile_height'] > calc['current_profile_height']:
                profile_effects = (
                    "üìà *–£–≤–µ–ª–∏—á–∏—Ç—Å—è –≤—ã—Å–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è:*\n\n"
                    "‚úÖ –ú–∞—à–∏–Ω–∞ —Å—Ç–∞–Ω–µ—Ç –º—è–≥—á–µ\n"
                    "‚úÖ –ú–µ–Ω—å—à–µ —Ä–∏—Å–∫ –ø–æ–≤—Ä–µ–¥–∏—Ç—å —à–∏–Ω—É/–¥–∏—Å–∫\n"
                    "‚ùå –•—É–∂–µ –¥–µ—Ä–∂–∏—Ç –¥–æ—Ä–æ–≥—É –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏\n"
                )
            elif calc['new_profile_height'] < calc['current_profile_height']:
                profile_effects = (
                    "üìâ *–£–º–µ–Ω—å—à–∏—Ç—Å—è –≤—ã—Å–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è:*\n\n"
                    "‚úÖ –£–ª—É—á—à–∏—Ç—Å—è —É–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç—å\n"
                    "‚ùå –ú–∞—à–∏–Ω–∞ —Å—Ç–∞–Ω–µ—Ç –∂–µ—Å—Ç—á–µ\n"
                    "‚ùå –ë–æ–ª—å—à–µ —Ä–∏—Å–∫ –ø–æ–≤—Ä–µ–¥–∏—Ç—å –¥–∏—Å–∫/—à–∏–Ω—É\n"
                )

            clearance_effects = ""
            if calc['clearance_diff'] > 0:
                clearance_effects = (
                    "üìà *–£–≤–µ–ª–∏—á–∏—Ç—Å—è –∫–ª–∏—Ä–µ–Ω—Å:*\n\n"
                    "‚úÖ –ö–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ –Ω–∞ —è–º–∞—Ö –∏ –±–µ–∑–¥–æ—Ä–æ–∂—å–µ\n"
                    "‚ùå –£—Ö—É–¥—à–∏—Ç—Å—è —É–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç—å –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏\n"
                    "‚ùå –†–∏—Å–∫ –∑–∞—Ç–∏—Ä–∞–Ω–∏—è –ø–æ–¥–∫—Ä—ã–ª–∫–æ–≤\n"
                    f"‚ùå –°–ø–∏–¥–æ–º–µ—Ç—Ä –∑–∞–Ω–∏–∂–∞–µ—Ç –Ω–∞ {abs(calc['speed_diff_percent']):.1f}%\n"
                )
            elif calc['clearance_diff'] < 0:
                clearance_effects = (
                    "üìâ *–£–º–µ–Ω—å—à–∏—Ç—Å—è –∫–ª–∏—Ä–µ–Ω—Å:*\n\n"
                    "‚úÖ –£–ª—É—á—à–∏—Ç—Å—è —É–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç—å –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏\n"
                    "‚ùå –ú–µ–Ω–µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –Ω–∞ —è–º–∞—Ö\n"
                    f"‚ùå –°–ø–∏–¥–æ–º–µ—Ç—Ä –∑–∞–≤—ã—à–∞–µ—Ç –Ω–∞ {abs(calc['speed_diff_percent']):.1f}%\n"
                )

            result_message = (
                f"*üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ —à–∏–Ω ‚Ññ{index + 1}:*\n\n"
                f"*–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n\n"
                f"üìè –®–∏–Ω—ã: {calc['current_tire']}\n"
                f"üîç –î–∏—Å–∫–∏: {calc['current_rim']}\n"
                f"‚ÜîÔ∏è –®–∏—Ä–∏–Ω–∞ —à–∏–Ω—ã: {calc['current_width']} –º–º\n"
                f"‚ÜïÔ∏è –í—ã—Å–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è: {calc['current_profile_height']:.1f} –º–º\n"
                f"üîÑ –î–∏–∞–º–µ—Ç—Ä: {calc['current_diameter']:.1f} –º–º\n"
                f"‚ÜîÔ∏è –®–∏—Ä–∏–Ω–∞ –æ–±–æ–¥–∞: {calc['current_rim_width_mm']:.1f} –º–º\n\n"
                f"*–ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n\n"
                f"üìè –®–∏–Ω—ã: {calc['new_tire']}\n"
                f"üîç –î–∏—Å–∫–∏: {calc['new_rim']}\n"
                f"‚ÜîÔ∏è –®–∏—Ä–∏–Ω–∞ —à–∏–Ω—ã: {calc['new_width']} –º–º\n"
                f"‚ÜïÔ∏è –í—ã—Å–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è: {calc['new_profile_height']:.1f} –º–º\n"
                f"üîÑ –î–∏–∞–º–µ—Ç—Ä: {calc['new_diameter']:.1f} –º–º\n"
                f"‚ÜîÔ∏è –®–∏—Ä–∏–Ω–∞ –æ–±–æ–¥–∞: {calc['new_rim_width_mm']:.1f} –º–º\n\n"
                f"*–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:*\n\n"
                f"üîÑ –†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–∏–∞–º–µ—Ç—Ä–µ: {calc['diameter_diff_mm']:+.1f} –º–º ({calc['diameter_diff_percent']:+.1f}%)\n"
                f"üöó –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∏—Ä–µ–Ω—Å–∞: {calc['clearance_diff']:+.1f} –º–º\n"
                f"‚è± –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ø–∏–¥–æ–º–µ—Ç—Ä–∞: {calc['speed_diff_percent']:+.1f}%\n"
                f"‚ÜîÔ∏è –†–∞–∑–Ω–∏—Ü–∞ –≤ —à–∏—Ä–∏–Ω–µ –æ–±–æ–¥–∞: {calc['rim_width_diff_mm']:+.1f} –º–º\n\n"
                f"{width_effects}\n\n"
                f"{profile_effects}\n\n"
                f"{clearance_effects}\n\n"
                f"*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:*\n\n{calc['recommendation']}\n\n"
                f"üïí *–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞:* {calc['timestamp']}"
            )

            bot.send_message(chat_id, result_message, parse_mode='Markdown')

        view_tire_calc(message, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–®–∏–Ω—ã –≤ EXCEL')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_tire_selection)

@bot.message_handler(func=lambda message: message.text == "–®–∏–Ω—ã –≤ EXCEL")
@check_function_state_decorator('–®–∏–Ω—ã –≤ EXCEL')
@track_usage('–®–∏–Ω—ã –≤ EXCEL')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def send_tire_excel_file(message):
    user_id = str(message.from_user.id)
    excel_file_path = os.path.join(TIRE_EXCEL_DIR, f"{user_id}_tires.xlsx")

    if os.path.exists(excel_file_path):
        with open(excel_file_path, 'rb') as excel_file:
            bot.send_document(message.chat.id, excel_file)
    else:
        bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª Excel –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —à–∏–Ω")
    view_tire_calc(message, show_description=False)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–®–ò–ù–´ (—É–¥–∞–ª–µ–Ω–∏–µ —à–∏–Ω) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–µ–Ω–∏–µ —à–∏–Ω")
@check_function_state_decorator('–£–¥–∞–ª–µ–Ω–∏–µ —à–∏–Ω')
@track_usage('–£–¥–∞–ª–µ–Ω–∏–µ —à–∏–Ω')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_delete_tire_calc(message):
    user_id = str(message.from_user.id)
    if user_id not in user_history_tire or 'tire_calculations' not in user_history_tire[user_id] or not user_history_tire[user_id]['tire_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —à–∏–Ω!")
        view_tire_calc(message, show_description=False)
        return
    delete_tire_calculations(message)

@text_only_handler
def delete_tire_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_tire or 'tire_calculations' not in user_history_tire[user_id] or not user_history_tire[user_id]['tire_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —à–∏–Ω!")
        view_tire_calc(message, show_description=False)
        return

    calculations = user_history_tire[user_id]['tire_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —à–∏–Ω:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí *‚Ññ{i}.* {timestamp}\n"

    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_delete_tire_selection)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤:", reply_markup=markup)

@text_only_handler
def process_delete_tire_selection(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã":
        view_tire_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    calculations = user_history_tire.get(user_id, {}).get('tire_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —à–∏–Ω!")
        view_tire_calc(message, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_delete_tire_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        valid_indices.sort(reverse=True)
        for index in valid_indices:
            del calculations[index]

        save_user_history_tires()
        update_tire_excel_file(user_id)
        bot.send_message(chat_id, "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —à–∏–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
        view_tire_calc(message, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —à–∏–Ω—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup)
        bot.register_next_step_handler(msg, process_delete_tire_selection)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ù–ê–õ–û–ì --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ù–∞–ª–æ–≥")
@check_function_state_decorator('–ù–∞–ª–æ–≥')
@track_usage('–ù–∞–ª–æ–≥')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_nalog_calc(message, show_description=True):
    global stored_message
    stored_message = message

    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞—Å—á–µ—Ç—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –Ω–∞–ª–æ–≥–∞*\n\n"
        "üìå *–†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–∞:*\n"
        "–†–∞—Å—á–µ—Ç –≤–µ–¥–µ—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º - *—Ä–µ–≥–∏–æ–Ω, —Ç–∏–ø –¢–°, –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –≤–ª–∞–¥–µ–Ω–∏—è, –Ω–∞–ª–∏—á–∏–µ –ª—å–≥–æ—Ç, —Å—Ç–æ–∏–º–æ—Å—Ç—å –¢–° (–¥–ª—è –∞–≤—Ç–æ –¥–æ—Ä–æ–∂–µ 10 –º–ª–Ω —Ä—É–±.)*\n\n"
        "_P.S. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–µ–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞, —Å–ª–µ–¥—É–π—Ç–µ –ø–æ —Ñ–æ—Ä–º—É–ª–µ:_\n"
        "_–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞ (—Ä—É–±.) = –Ω–∞–ª–æ–≥–æ–≤–∞—è –±–∞–∑–∞ (–ª.—Å.) √ó —Å—Ç–∞–≤–∫–∞ (—Ä—É–±.) √ó (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤ –≤–ª–∞–¥–µ–Ω–∏—è / 12 –º–µ—Å—è—Ü–µ–≤)_\n\n"
        "üìå *–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ª–æ–≥–æ–≤:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n"
        "üìå *–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—á–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã"
    )

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–ª–æ–≥', '–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ª–æ–≥–æ–≤', '–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    if show_description:
        bot.send_message(message.chat.id, description, parse_mode='Markdown')

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

NALOG_JSON_PATH = os.path.join('files', 'files_for_calc', 'files_for_nalog', 'nalog.json')
USER_HISTORY_PATH_NALOG = os.path.join('data', 'user', 'calculators', 'nalog', 'nalog_users.json')
PERECHEN_AUTO_PATH = os.path.join('files', 'files_for_calc', 'files_for_nalog', 'auto_10mln_rub_2025.json')
TRANSPORT_TAX_BASE_PATH = os.path.join('files', 'files_for_calc', 'files_for_nalog', 'transport_tax_{year}.json')
NALOG_EXCEL_DIR = os.path.join('data', 'user', 'calculators', 'nalog', 'excel')

def ensure_path_and_file(file_path):
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    if not os.path.exists(file_path):
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump({}, f, ensure_ascii=False, indent=2)

ensure_path_and_file(NALOG_JSON_PATH)
ensure_path_and_file(USER_HISTORY_PATH_NALOG)
ensure_path_and_file(PERECHEN_AUTO_PATH)
ensure_path_and_file(TRANSPORT_TAX_BASE_PATH.format(year=2025))
os.makedirs(NALOG_EXCEL_DIR, exist_ok=True)

nalog_data = {}
user_history_nalog = {}
user_data = {}
expensive_cars = []
tax_rates = {}
available_years = [2021, 2022, 2023, 2024, 2025]

def load_nalog_data():
    global nalog_data
    try:
        with open(NALOG_JSON_PATH, 'r', encoding='utf-8') as file:
            nalog_data = json.load(file)
    except Exception as e:
        pass

def load_user_history_nalog():
    global user_history_nalog
    try:
        if os.path.exists(USER_HISTORY_PATH_NALOG):
            with open(USER_HISTORY_PATH_NALOG, 'r', encoding='utf-8') as db_file:
                user_history_nalog = json.load(db_file)
        else:
            user_history_nalog = {}
            save_user_history_nalog()
    except Exception as e:
        user_history_nalog = {}

def save_user_history_nalog():
    try:
        with open(USER_HISTORY_PATH_NALOG, 'w', encoding='utf-8') as db_file:
            json.dump(user_history_nalog, db_file, ensure_ascii=False, indent=2)
    except Exception as e:
        pass

def load_expensive_cars():
    global expensive_cars
    try:
        with open(PERECHEN_AUTO_PATH, 'r', encoding='utf-8') as file:
            data = json.load(file) 
            car_data = []
            for section in data:
                cost_range = "10-15" if "10 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –¥–æ 15 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ä—É–±–ª–µ–π" in section['subtitle'] else "15+"
                for car in section['cars']:
                    car_data.append({
                        "brand": car['brand'],
                        "model": car['model'],
                        "engine_type": car['engine_type'],
                        "engine_volume": str(car['engine_displacement']) if car['engine_displacement'] is not None else "N/A",
                        "years_passed": car['age'],
                        "cost_range": cost_range
                    })
            expensive_cars = car_data
    except json.JSONDecodeError as e:
        pass
    except Exception as e:
        pass

def load_tax_rates(year):
    global tax_rates
    try:
        tax_file_path = TRANSPORT_TAX_BASE_PATH.format(year=year)
        if not os.path.exists(tax_file_path):
            raise FileNotFoundError(f"–§–∞–π–ª {tax_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        with open(tax_file_path, 'r', encoding='utf-8') as file:
            tax_rates = json.load(file)
    except Exception as e:
        tax_rates = {}

load_nalog_data()
load_user_history_nalog()
load_expensive_cars()
load_tax_rates(2025)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ù–ê–õ–û–ì (—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–ª–æ–≥) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–ª–æ–≥")
@check_function_state_decorator('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–ª–æ–≥')
@track_usage('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–ª–æ–≥')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def start_tax_calculation(message):
    if not nalog_data:
        bot.send_message(message.chat.id, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    user_id = message.from_user.id
    user_data[user_id] = {'user_id': user_id, 'username': message.from_user.username or 'unknown'}

    markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    regions = list(tax_rates.keys())
    for i in range(0, len(regions), 2):
        if i + 1 < len(regions):
            markup.row(regions[i], regions[i + 1])
        else:
            markup.add(regions[i])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_nalog_region_step)

@text_only_handler
def process_nalog_region_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    region_name = message.text.strip()
    if region_name not in tax_rates:
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        regions = list(tax_rates.keys())
        for i in range(0, len(regions), 2):
            if i + 1 < len(regions):
                markup.row(regions[i], regions[i + 1])
            else:
                markup.add(regions[i])
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_nalog_region_step)
        return

    user_data[user_id]['region'] = region_name

    markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    years = [str(year) for year in available_years]
    for i in range(0, len(years), 2):
        if i + 1 < len(years):
            markup.row(years[i], years[i + 1])
        else:
            markup.add(years[i])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –¥–ª—è –Ω–∞–ª–æ–≥–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_year_step)

@text_only_handler
def process_year_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        year = int(message.text)
        if year not in available_years:
            raise ValueError
        user_data[user_id]['year'] = year
        load_tax_rates(year)
        if not tax_rates:
            bot.send_message(message.chat.id, f"‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞ `{year}` –≥–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!", parse_mode='Markdown')
            new_message_for_nalog = message
            new_message_for_nalog.text = "–ù–∞–ª–æ–≥"  
            view_nalog_calc(new_message_for_nalog, show_description=False)
            return
    except ValueError:
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        years = [str(year) for year in available_years]
        for i in range(0, len(years), 2):
            if i + 1 < len(years):
                markup.row(years[i], years[i + 1])
            else:
                markup.add(years[i])
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞: {', '.join(years)}", reply_markup=markup)
        bot.register_next_step_handler(msg, process_year_step)
        return

    markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    months = [str(i) for i in range(1, 13)]
    for i in range(0, len(months), 2):
        if i + 1 < len(months):
            markup.row(months[i], months[i + 1])
        else:
            markup.add(months[i])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –≤–ª–∞–¥–µ–Ω–∏—è –¢–°:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_ownership_months_step)

@text_only_handler
def process_ownership_months_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        months = int(message.text)
        if months < 1 or months > 12:
            raise ValueError
        user_data[user_id]['ownership_months'] = months
    except ValueError:
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        months = [str(i) for i in range(1, 13)]
        for i in range(0, len(months), 2):
            if i + 1 < len(months):
                markup.row(months[i], months[i + 1])
            else:
                markup.add(months[i])
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12", reply_markup=markup)
        bot.register_next_step_handler(msg, process_ownership_months_step)
        return

    markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    vehicle_types = list(tax_rates[user_data[user_id]['region']].keys())
    for i in range(0, len(vehicle_types), 2):
        if i + 1 < len(vehicle_types):
            markup.row(vehicle_types[i], vehicle_types[i + 1])
        else:
            markup.add(vehicle_types[i])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–í–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_vehicle_type_nalog_step)

@text_only_handler
def process_vehicle_type_nalog_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    vehicle_type = message.text.strip()
    if vehicle_type not in tax_rates[user_data[user_id]['region']]:
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        vehicle_types = list(tax_rates[user_data[user_id]['region']].keys())
        for i in range(0, len(vehicle_types), 2):
            if i + 1 < len(vehicle_types):
                markup.row(vehicle_types[i], vehicle_types[i + 1])
            else:
                markup.add(vehicle_types[i])
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¢–°!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_vehicle_type_nalog_step)
        return

    user_data[user_id]['vehicle_type'] = vehicle_type
    user_data[user_id]['metric'] = "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)"

    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.):", reply_markup=markup)
    bot.register_next_step_handler(msg, process_metric_value_step)

@text_only_handler
def process_metric_value_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        value = float(message.text.replace(',', '.'))
        user_data[user_id]['metric_value'] = value
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        bot.register_next_step_handler(msg, process_metric_value_step)
        return

    if user_data[user_id]['vehicle_type'] == "–õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏":
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–î–∞", "–ù–µ—Ç")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–¢–° —Å—Ç–æ–∏—Ç –±–æ–ª—å—à–µ 10 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ä—É–±–ª–µ–π?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_expensive_car_step)
    else:
        proceed_to_benefits(message)

@text_only_handler
def process_expensive_car_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    if message.text not in ["–î–∞", "–ù–µ—Ç"]:
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–î–∞", "–ù–µ—Ç")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_expensive_car_step)
        return

    user_data[user_id]['is_expensive'] = message.text == "–î–∞"

    if user_data[user_id]['is_expensive']:
        brands = sorted(set(car['brand'] for car in expensive_cars))
        brand_list = "\n".join(f"üìú ‚Ññ{i+1}. {brand}" for i, brand in enumerate(brands))
        user_data[user_id]['brands'] = brands

        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, f"*–ú–∞—Ä–∫–∞ –¢–°:*\n\n{brand_list}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—Ä–∫–∏:", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_brand_step)
    else:
        proceed_to_benefits(message)

@text_only_handler
def process_brand_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        brand_idx = int(message.text) - 1
        brands = user_data[user_id]['brands']
        if brand_idx < 0 or brand_idx >= len(brands):
            raise ValueError
        selected_brand = brands[brand_idx]
        user_data[user_id]['selected_brand'] = selected_brand

        models = sorted(set(car['model'] for car in expensive_cars if car['brand'] == selected_brand))
        model_list = "\n".join(f"‚ú® ‚Ññ{i+1}. {model}" for i, model in enumerate(models))
        user_data[user_id]['models'] = models

        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, f"*–ú–æ–¥–µ–ª—å –¢–°:*\n\n{model_list}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏:", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_model_step)
    except ValueError:
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(user_data[user_id]['brands'])}", reply_markup=markup)
        bot.register_next_step_handler(msg, process_brand_step)

@text_only_handler
def process_model_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        model_idx = int(message.text) - 1
        models = user_data[user_id]['models']
        if model_idx < 0 or model_idx >= len(models):
            raise ValueError
        selected_model = models[model_idx]
        user_data[user_id]['selected_model'] = selected_model

        selected_brand = user_data[user_id]['selected_brand']
        years_passed_list = sorted(set(car['years_passed'] for car in expensive_cars if car['brand'] == selected_brand and car['model'] == selected_model))
        years = []
        current_year = user_data[user_id]['year']
        for years_passed in years_passed_list:
            if "–æ—Ç" in years_passed and "–¥–æ" in years_passed:
                match = re.search(r'–æ—Ç (\d+) –¥–æ (\d+)', years_passed)
                if match:
                    start, end = map(int, match.groups())
                    for y in range(start, end + 1):
                        years.append(current_year - y)
            elif "–¥–æ" in years_passed:
                match = re.search(r'–¥–æ (\d+)', years_passed)
                if match:
                    end = int(match.group(1))
                    for y in range(0, end + 1):
                        years.append(current_year - y)
            else:
                match = re.search(r'(\d+)', years_passed)
                if match:
                    y = int(match.group(1))
                    years.append(current_year - y)
        years = sorted(set(years))
        user_data[user_id]['years'] = years
        year_list = "\n".join(f"üìÖ ‚Ññ{i+1}. {year}" for i, year in enumerate(years))

        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, f"*–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:*\n\n{year_list}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ–¥–∞:", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_year_of_manufacture_step)
    except ValueError:
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(user_data[user_id]['models'])}", reply_markup=markup)
        bot.register_next_step_handler(msg, process_model_step)

@text_only_handler
def process_year_of_manufacture_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return
    
    try:
        year_idx = int(message.text) - 1
        years = user_data[user_id]['years']
        if year_idx < 0 or year_idx >= len(years):
            raise ValueError
        selected_year = years[year_idx]
        user_data[user_id]['year_of_manufacture'] = selected_year
        proceed_to_benefits(message)
    except ValueError:
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(user_data[user_id]['years'])}", reply_markup=markup)
        bot.register_next_step_handler(msg, process_year_of_manufacture_step)

@text_only_handler
def proceed_to_benefits(message):
    user_id = message.from_user.id
    markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    benefits = ["–ù–µ—Ç", "–î–∞"]
    markup.add(*benefits)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–ò–º–µ—é –ª–∏ —è –ø—Ä–∞–≤–æ –Ω–∞ –ª—å–≥–æ—Ç—É?", reply_markup=markup)
    bot.register_next_step_handler(msg, process_benefits_step)

@text_only_handler
def process_benefits_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    benefit_desc = message.text.strip()
    if benefit_desc not in ["–ù–µ—Ç", "–î–∞"]:
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        benefits = ["–ù–µ—Ç", "–î–∞"]
        markup.add(*benefits)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_benefits_step)
        return

    user_data[user_id]['benefit'] = benefit_desc
    calculate_tax(message)

@text_only_handler
def calculate_tax(message):
    user_id_int = message.from_user.id  
    user_id_str = str(user_id_int)  
    data = user_data[user_id_int]

    tax_base = data['metric_value']
    region = data['region']
    vehicle_type = data['vehicle_type']
    rates = tax_rates[region][vehicle_type]

    rate = 0.0
    for condition, value in rates.items():
        if "–¥–æ" in condition:
            limit = float(condition.split()[1])
            if tax_base <= limit:
                rate = value
                break
        elif "—Å–≤—ã—à–µ" in condition:
            limit = float(condition.split()[1])
            if tax_base > limit:
                rate = value

    ownership_months = data['ownership_months']
    months_coefficient = ownership_months / 12
    benefit = data['benefit']
    benefit_coefficient = 1.0 if benefit == "–ù–µ—Ç" else 0.0
    increasing_coefficient = 1.0
    expensive_details = "–ù–µ—Ç"

    if data.get('is_expensive', False):
        years_passed = data['year'] - data['year_of_manufacture']
        if years_passed <= 3:
            increasing_coefficient = 3.0
            expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 3.0, –¥–æ 3 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {data['year_of_manufacture']})"
        elif years_passed <= 5:
            increasing_coefficient = 2.0
            expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 2.0, 3-5 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {data['year_of_manufacture']})"
        elif years_passed <= 10:
            increasing_coefficient = 1.5
            expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.5, 5-10 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {data['year_of_manufacture']})"

    tax = tax_base * rate * months_coefficient * increasing_coefficient * benefit_coefficient
    result_message = (
        f"*üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –Ω–∞–ª–æ–≥–∞*\n\n"
        f"*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
        f"üåç *–†–µ–≥–∏–æ–Ω:* {data['region']}\n"
        f"üìÖ *–ì–æ–¥:* {data['year']}\n"
        f"üöó *–¢–∏–ø –¢–°:* {data['vehicle_type']}\n"
        f"üí™ *–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:* {tax_base} –ª.—Å.\n"
        f"‚è≥ *–ú–µ—Å—è—Ü–µ–≤ –≤–ª–∞–¥–µ–Ω–∏—è:* {ownership_months}\n"
        f"üí∞ *–¢–° –¥–æ—Ä–æ–∂–µ 10 –º–ª–Ω —Ä—É–±.:* {expensive_details}\n"
        f"‚≠ê *–õ—å–≥–æ—Ç—ã:* {benefit}\n\n"
        f"*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç:*\n\n"
        f"üí∞ *–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞:* {tax:,.2f} —Ä—É–±.\n\n"
        f"*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞:*\n\n"
        f"üìè *–ù–∞–ª–æ–≥–æ–≤–∞—è –±–∞–∑–∞:* {tax_base} –ª.—Å.\n"
        f"üíµ *–°—Ç–∞–≤–∫–∞:* {rate} —Ä—É–±./–ª.—Å.\n"
        f"‚≠ê *–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è:* {months_coefficient:.2f} ({ownership_months}/12)\n"
        f"‚≠ê *–ü–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:* {increasing_coefficient}\n"
        f"‚≠ê *–õ—å–≥–æ—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:* {benefit_coefficient}"
    )

    timestamp = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
    calculation_data = {
        'region': data['region'],
        'year': data['year'],
        'vehicle_type': data['vehicle_type'],
        'engine_power': tax_base,
        'ownership_months': ownership_months,
        'is_expensive': data.get('is_expensive', False),
        'benefit': benefit,
        'tax': tax,
        'rate': rate,
        'months_coefficient': months_coefficient,
        'increasing_coefficient': increasing_coefficient,
        'benefit_coefficient': benefit_coefficient,
        'timestamp': timestamp
    }
    if data.get('is_expensive', False):
        calculation_data['year_of_manufacture'] = data['year_of_manufacture']
        calculation_data['selected_brand'] = data['selected_brand']
        calculation_data['selected_model'] = data['selected_model']

    if user_id_str not in user_history_nalog:
        user_history_nalog[user_id_str] = {
            'username': data.get('username', 'unknown'),
            'nalog_calculations': []
        }
    elif 'nalog_calculations' not in user_history_nalog[user_id_str]:
        user_history_nalog[user_id_str]['nalog_calculations'] = []

    user_history_nalog[user_id_str]['nalog_calculations'].append(calculation_data)
    
    if not USER_HISTORY_PATH_NALOG.endswith('nalog_users.json'):
        raise ValueError("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ª–æ–≥–∞ –≤ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª!")
    
    save_user_history_nalog()
    save_nalog_to_excel(user_id_str, calculation_data)

    bot.send_message(message.chat.id, result_message, parse_mode='Markdown', reply_markup=ReplyKeyboardRemove())
    
    del user_data[user_id_int]  
    new_message_for_nalog = message
    new_message_for_nalog.text = "–ù–∞–ª–æ–≥"  
    view_nalog_calc(new_message_for_nalog, show_description=False)

def save_nalog_to_excel(user_id, calculation):
    file_path = os.path.join(NALOG_EXCEL_DIR, f"{user_id}_nalog.xlsx")
    
    calculations = user_history_nalog.get(user_id, {}).get('nalog_calculations', [])
    
    columns = [
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
        "–†–µ–≥–∏–æ–Ω",
        "–ì–æ–¥",
        "–¢–∏–ø –¢–°",
        "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)",
        "–ú–µ—Å—è—Ü–µ–≤ –≤–ª–∞–¥–µ–Ω–∏—è",
        "–¢–° –¥–æ—Ä–æ–∂–µ 10 –º–ª–Ω —Ä—É–±.",
        "–ú–∞—Ä–∫–∞ –¢–°",
        "–ú–æ–¥–µ–ª—å –¢–°",
        "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞",
        "–õ—å–≥–æ—Ç—ã",
        "–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞ (—Ä—É–±.)",
        "–°—Ç–∞–≤–∫–∞ (—Ä—É–±./–ª.—Å.)",
        "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è",
        "–ü–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç",
        "–õ—å–≥–æ—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç"
    ]
    
    expensive_details = "–ù–µ—Ç"
    if calculation['is_expensive']:
        years_passed = calculation['year'] - calculation['year_of_manufacture']
        if years_passed <= 3:
            expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 3.0, –¥–æ 3 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {calculation['year_of_manufacture']})"
        elif years_passed <= 5:
            expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 2.0, 3-5 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {calculation['year_of_manufacture']})"
        elif years_passed <= 10:
            expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.5, 5-10 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {calculation['year_of_manufacture']})"

    new_calc_data = {
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": calculation['timestamp'],
        "–†–µ–≥–∏–æ–Ω": calculation['region'],
        "–ì–æ–¥": calculation['year'],
        "–¢–∏–ø –¢–°": calculation['vehicle_type'],
        "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)": calculation['engine_power'],
        "–ú–µ—Å—è—Ü–µ–≤ –≤–ª–∞–¥–µ–Ω–∏—è": calculation['ownership_months'],
        "–¢–° –¥–æ—Ä–æ–∂–µ 10 –º–ª–Ω —Ä—É–±.": expensive_details,
        "–ú–∞—Ä–∫–∞ –¢–°": calculation.get('selected_brand', ''),
        "–ú–æ–¥–µ–ª—å –¢–°": calculation.get('selected_model', ''),
        "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞": calculation.get('year_of_manufacture', ''),
        "–õ—å–≥–æ—Ç—ã": calculation['benefit'],
        "–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞ (—Ä—É–±.)": calculation['tax'],
        "–°—Ç–∞–≤–∫–∞ (—Ä—É–±./–ª.—Å.)": calculation['rate'],
        "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è": calculation['months_coefficient'],
        "–ü–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": calculation['increasing_coefficient'],
        "–õ—å–≥–æ—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": calculation['benefit_coefficient']
    }

    new_calc_df = pd.DataFrame([new_calc_data], columns=columns)
    
    if os.path.exists(file_path):
        existing_data = pd.read_excel(file_path).dropna(axis=1, how='all')
        existing_data = existing_data.reindex(columns=columns, fill_value=None)
        updated_data = pd.concat([existing_data, new_calc_df], ignore_index=True)
    else:
        updated_data = new_calc_df
    
    updated_data.to_excel(file_path, index=False)
    
    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows():
        for cell in row:
            cell.alignment = Alignment(horizontal="center", vertical="center")
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_col=worksheet.max_column-1, max_col=worksheet.max_column):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

def update_nalog_excel_file(user_id):
    file_path = os.path.join(NALOG_EXCEL_DIR, f"{user_id}_nalog.xlsx")
    calculations = user_history_nalog.get(user_id, {}).get('nalog_calculations', [])

    if not calculations:
        columns = [
            "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
            "–†–µ–≥–∏–æ–Ω",
            "–ì–æ–¥",
            "–¢–∏–ø –¢–°",
            "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)",
            "–ú–µ—Å—è—Ü–µ–≤ –≤–ª–∞–¥–µ–Ω–∏—è",
            "–¢–° –¥–æ—Ä–æ–∂–µ 10 –º–ª–Ω —Ä—É–±.",
            "–ú–∞—Ä–∫–∞ –¢–°",
            "–ú–æ–¥–µ–ª—å –¢–°",
            "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞",
            "–õ—å–≥–æ—Ç—ã",
            "–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞ (—Ä—É–±.)",
            "–°—Ç–∞–≤–∫–∞ (—Ä—É–±./–ª.—Å.)",
            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è",
            "–ü–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç",
            "–õ—å–≥–æ—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç"
        ]
        df = pd.DataFrame(columns=columns)
        df.to_excel(file_path, index=False)
        return

    columns = [
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
        "–†–µ–≥–∏–æ–Ω",
        "–ì–æ–¥",
        "–¢–∏–ø –¢–°",
        "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)",
        "–ú–µ—Å—è—Ü–µ–≤ –≤–ª–∞–¥–µ–Ω–∏—è",
        "–¢–° –¥–æ—Ä–æ–∂–µ 10 –º–ª–Ω —Ä—É–±.",
        "–ú–∞—Ä–∫–∞ –¢–°",
        "–ú–æ–¥–µ–ª—å –¢–°",
        "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞",
        "–õ—å–≥–æ—Ç—ã",
        "–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞ (—Ä—É–±.)",
        "–°—Ç–∞–≤–∫–∞ (—Ä—É–±./–ª.—Å.)",
        "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è",
        "–ü–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç",
        "–õ—å–≥–æ—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç"
    ]

    calc_records = []
    for calc in calculations:
        expensive_details = "–ù–µ—Ç"
        if calc['is_expensive']:
            years_passed = calc['year'] - calc['year_of_manufacture']
            if years_passed <= 3:
                expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 3.0, –¥–æ 3 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {calc['year_of_manufacture']})"
            elif years_passed <= 5:
                expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 2.0, 3-5 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {calc['year_of_manufacture']})"
            elif years_passed <= 10:
                expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.5, 5-10 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {calc['year_of_manufacture']})"

        calc_data = {
            "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": calc['timestamp'],
            "–†–µ–≥–∏–æ–Ω": calc['region'],
            "–ì–æ–¥": calc['year'],
            "–¢–∏–ø –¢–°": calc['vehicle_type'],
            "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)": calc['engine_power'],
            "–ú–µ—Å—è—Ü–µ–≤ –≤–ª–∞–¥–µ–Ω–∏—è": calc['ownership_months'],
            "–¢–° –¥–æ—Ä–æ–∂–µ 10 –º–ª–Ω —Ä—É–±.": expensive_details,
            "–ú–∞—Ä–∫–∞ –¢–°": calc.get('selected_brand', ''),
            "–ú–æ–¥–µ–ª—å –¢–°": calc.get('selected_model', ''),
            "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞": calc.get('year_of_manufacture', ''),
            "–õ—å–≥–æ—Ç—ã": calc['benefit'],
            "–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞ (—Ä—É–±.)": calc['tax'],
            "–°—Ç–∞–≤–∫–∞ (—Ä—É–±./–ª.—Å.)": calc['rate'],
            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è": calc['months_coefficient'],
            "–ü–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": calc['increasing_coefficient'],
            "–õ—å–≥–æ—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": calc['benefit_coefficient']
        }
        calc_records.append(calc_data)

    df = pd.DataFrame(calc_records, columns=columns)
    df.to_excel(file_path, index=False)

    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows(min_row=2):
        for cell in row:
            cell.alignment = Alignment(horizontal='center', vertical='center')
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_row=2, min_col=len(columns)-1, max_col=len(columns)):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ù–ê–õ–û–ì (–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ª–æ–≥–æ–≤) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ª–æ–≥–æ–≤")
@check_function_state_decorator('–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ª–æ–≥–æ–≤')
@track_usage('–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ª–æ–≥–æ–≤')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_view_nalog(message):
    user_id = str(message.from_user.id)
    if user_id not in user_history_nalog or 'nalog_calculations' not in user_history_nalog[user_id] or not user_history_nalog[user_id]['nalog_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞–ª–æ–≥–∞!")
        new_message_for_nalog = message
        new_message_for_nalog.text = "–ù–∞–ª–æ–≥"
        view_nalog_calc(new_message_for_nalog, show_description=False)
        return
    view_nalog_calculations(message)

@text_only_handler
def view_nalog_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_nalog or 'nalog_calculations' not in user_history_nalog[user_id] or not user_history_nalog[user_id]['nalog_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞–ª–æ–≥–∞!")
        new_message_for_nalog = message
        new_message_for_nalog.text = "–ù–∞–ª–æ–≥"
        view_nalog_calc(new_message_for_nalog, show_description=False)
        return

    calculations = user_history_nalog[user_id]['nalog_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞–ª–æ–≥–∞:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí *‚Ññ{i}.* {timestamp}\n"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ù–∞–ª–æ–≥ –≤ EXCEL')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ —à–∏–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_view_nalog_selection)

@text_only_handler
def process_view_nalog_selection(message):
    chat_id = message.chat.id 
    user_id = str(message.from_user.id)

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        new_message_for_nalog = message
        new_message_for_nalog.text = "–ù–∞–ª–æ–≥"
        view_nalog_calc(new_message_for_nalog, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return
    if message.text == "–ù–∞–ª–æ–≥ –≤ EXCEL":
        send_nalog_excel_file(message)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–ù–∞–ª–æ–≥ –≤ EXCEL')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_nalog_selection)
        return

    calculations = user_history_nalog.get(user_id, {}).get('nalog_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞–ª–æ–≥–∞!")
        new_message_for_nalog = message
        new_message_for_nalog.text = "–ù–∞–ª–æ–≥"
        view_nalog_calc(new_message_for_nalog, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–ù–∞–ª–æ–≥ –≤ EXCEL')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_view_nalog_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        for index in valid_indices:
            calc = calculations[index]
            expensive_details = "–ù–µ—Ç"
            if calc['is_expensive']:
                years_passed = calc['year'] - calc['year_of_manufacture']
                if years_passed <= 3:
                    expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 3.0, –¥–æ 3 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {calc['year_of_manufacture']})"
                elif years_passed <= 5:
                    expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 2.0, 3-5 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {calc['year_of_manufacture']})"
                elif years_passed <= 10:
                    expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.5, 5-10 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {calc['year_of_manufacture']})"

            result_message = (
                f"*üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –Ω–∞–ª–æ–≥–∞ ‚Ññ{index + 1}*\n\n"
                f"*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
                f"üåç *–†–µ–≥–∏–æ–Ω:* {calc['region']}\n"
                f"üìÖ *–ì–æ–¥:* {calc['year']}\n"
                f"üöó *–¢–∏–ø –¢–°:* {calc['vehicle_type']}\n"
                f"üí™ *–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:* {calc['engine_power']} –ª.—Å.\n"
                f"‚è≥ *–ú–µ—Å—è—Ü–µ–≤ –≤–ª–∞–¥–µ–Ω–∏—è:* {calc['ownership_months']}\n"
                f"üí∞ *–¢–° –¥–æ—Ä–æ–∂–µ 10 –º–ª–Ω —Ä—É–±.:* {expensive_details}\n"
                f"‚≠ê *–õ—å–≥–æ—Ç—ã:* {calc['benefit']}\n\n"
                f"*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç:*\n\n"
                f"üí∞ *–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞:* {calc['tax']:,.2f} —Ä—É–±.\n\n"
                f"*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞:*\n\n"
                f"üìè *–ù–∞–ª–æ–≥–æ–≤–∞—è –±–∞–∑–∞:* {calc['engine_power']} –ª.—Å.\n"
                f"üíµ *–°—Ç–∞–≤–∫–∞:* {calc['rate']} —Ä—É–±./–ª.—Å.\n"
                f"‚≠ê *–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è:* {calc['months_coefficient']:.2f} ({calc['ownership_months']}/12)\n"
                f"‚≠ê *–ü–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:* {calc['increasing_coefficient']}\n"
                f"‚≠ê *–õ—å–≥–æ—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:* {calc['benefit_coefficient']}\n\n"
                f"üïí *–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞:* {calc['timestamp']}"
            )
            bot.send_message(chat_id, result_message, parse_mode='Markdown')

        new_message_for_nalog = message
        new_message_for_nalog.text = "–ù–∞–ª–æ–≥"
        view_nalog_calc(new_message_for_nalog, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–ù–∞–ª–æ–≥ –≤ EXCEL')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_nalog_selection)

@bot.message_handler(func=lambda message: message.text == "–ù–∞–ª–æ–≥ –≤ EXCEL")
@check_function_state_decorator('–ù–∞–ª–æ–≥ –≤ EXCEL')
@track_usage('–ù–∞–ª–æ–≥ –≤ EXCEL')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def send_nalog_excel_file(message):
    user_id = str(message.from_user.id)
    excel_file_path = os.path.join(NALOG_EXCEL_DIR, f"{user_id}_nalog.xlsx")

    if os.path.exists(excel_file_path):
        with open(excel_file_path, 'rb') as excel_file:
            bot.send_document(message.chat.id, excel_file)
    else:
        bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª Excel –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –Ω–∞–ª–æ–≥–∞")
    new_message_for_nalog = message
    new_message_for_nalog.text = "–ù–∞–ª–æ–≥"
    view_nalog_calc(new_message_for_nalog, show_description=False)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ù–ê–õ–û–ì (—É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤")
@check_function_state_decorator('–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤')
@track_usage('–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_delete_nalog(message):
    user_id = str(message.from_user.id)
    if user_id not in user_history_nalog or 'nalog_calculations' not in user_history_nalog[user_id] or not user_history_nalog[user_id]['nalog_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞–ª–æ–≥–∞!")
        new_message_for_nalog = message
        new_message_for_nalog.text = "–ù–∞–ª–æ–≥"  
        view_nalog_calc(new_message_for_nalog, show_description=False)
        return
    delete_nalog_calculations(message)

@text_only_handler
def delete_nalog_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_nalog or 'nalog_calculations' not in user_history_nalog[user_id] or not user_history_nalog[user_id]['nalog_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞–ª–æ–≥–∞!")
        new_message_for_nalog = message
        new_message_for_nalog.text = "–ù–∞–ª–æ–≥"  
        view_nalog_calc(new_message_for_nalog, show_description=False)
        return

    calculations = user_history_nalog[user_id]['nalog_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞–ª–æ–≥–∞:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí *‚Ññ{i}.* {timestamp}\n"

    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_delete_nalog_selection)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤:", reply_markup=markup)

@text_only_handler
def process_delete_nalog_selection(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    calculations = user_history_nalog.get(user_id, {}).get('nalog_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞–ª–æ–≥–∞!")
        new_message_for_nalog = message
        new_message_for_nalog.text = "–ù–∞–ª–æ–≥"  
        view_nalog_calc(new_message_for_nalog, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_delete_nalog_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        valid_indices.sort(reverse=True)
        for index in valid_indices:
            del calculations[index]

        save_user_history_nalog()
        update_nalog_excel_file(user_id)
        bot.send_message(chat_id, "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –Ω–∞–ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
        new_message_for_nalog = message
        new_message_for_nalog.text = "–ù–∞–ª–æ–≥"  
        view_nalog_calc(new_message_for_nalog, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup)
        bot.register_next_step_handler(msg, process_delete_nalog_selection)

# --------------------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–¢—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã")
@check_function_state_decorator('–¢—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã')
@track_usage('–¢—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_expense_and_repairs(message, show_description=True):
    user_id = message.from_user.id

    expense_data = load_expense_data(user_id).get(str(user_id), {})
    repair_data = load_repair_data(user_id).get(str(user_id), {})

    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤*\n\n"
        "üìå *–í—ã–±–æ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:*\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ *–≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç*, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ "
        "–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ \"–≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç\"\n\n"
        "üìå *–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–∏:*\n"
        "–í—ã–±–∏—Ä–∞–µ—Ç–µ *–∫–∞—Ç–µ–≥–æ—Ä–∏—é*, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç—Ä–∞—Ç–∞/—Ä–µ–º–æ–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏. "
        "–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –¥–∞—é—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å\n\n"
        "üìå *–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö:*\n"
        "–í–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–∞—Ç/—Ä–µ–º–æ–Ω—Ç–æ–≤ - *–Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç–∞, —Å—É–º–º–∞*\n\n"
        "üìå *–î—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:*\n"
        "–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É\n\n"
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É")
    item2 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã")
    item3 = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–º–æ–Ω—Ç")
    item4 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã")
    item5 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã")
    item6 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã")
    item7 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    item8 = types.KeyboardButton("–í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")

    markup.add(item8)
    markup.add(item1, item3)
    markup.add(item2, item4)
    markup.add(item5, item6)
    markup.add(item7)

    bot.clear_step_handler_by_chat_id(user_id)

    if show_description:
        bot.send_message(user_id, description, parse_mode='Markdown')

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —É—á–µ—Ç–∞ —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
@check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤')
@track_usage('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def return_to_expense_and_repairs(message):
    handle_expense_and_repairs(message, show_description=False)

# --------------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç) ---------------------------------------------------

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
TRANSPORT_DIR = os.path.join(BASE_DIR, "data", "user", "expenses_and_repairs", "transport")
REPAIRS_DIR = os.path.join(BASE_DIR, "data", "user", "expenses_and_repairs", "repairs")
EXPENSES_DIR = os.path.join(BASE_DIR, "data", "user", "expenses_and_repairs", "expenses")

def ensure_transport_directory():
    os.makedirs(TRANSPORT_DIR, exist_ok=True)
    os.makedirs(os.path.join(REPAIRS_DIR, "excel"), exist_ok=True)
    os.makedirs(os.path.join(EXPENSES_DIR, "excel"), exist_ok=True)

ensure_transport_directory()

class States:
    ADDING_TRANSPORT = 1
    CONFIRMING_DELETE = 2

user_transport = {}

def save_transport_data(user_id, transport_data):
    file_path = os.path.join(TRANSPORT_DIR, f"{user_id}_transport.json")
    data = {"user_id": int(user_id), "transport": {}}
    for index, item in enumerate(transport_data, start=1):
        data["transport"][str(index)] = item
    with open(file_path, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

def load_transport_data(user_id):
    file_path = os.path.join(TRANSPORT_DIR, f"{user_id}_transport.json")
    if os.path.exists(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as file:
                data = json.load(file)
                if isinstance(data, dict) and "transport" in data:
                    return list(data["transport"].values())
                elif isinstance(data, list):
                    return data  
                else:
                    return []
        except json.JSONDecodeError as e:
            return []
        except Exception as e:
            return []
    return []

def reload_transport_data(user_id):
    user_id = str(user_id)
    try:
        user_transport[user_id] = load_transport_data(user_id)
    except Exception as e:
        user_transport[user_id] = []

def load_all_transport():
    user_transport.clear()
    for user_file in os.listdir(TRANSPORT_DIR):
        if user_file.endswith("_transport.json"):
            try:
                user_id = user_file.split("_")[0]
                user_transport[user_id] = load_transport_data(user_id)
            except Exception as e:
                pass

load_all_transport()

@bot.message_handler(func=lambda message: message.text == "–í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@check_function_state_decorator('–í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def manage_transport(message):
    user_id = str(message.chat.id)

    keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    keyboard.add("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    keyboard.add("–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    keyboard.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    keyboard.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def return_to_transport_menu(message):
    manage_transport(message)

def create_transport_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return markup

# --------------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–æ—Ä—Ç) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@check_function_state_decorator('–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def add_transport(message):
    user_id = str(message.chat.id)
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=create_transport_keyboard())
    bot.register_next_step_handler(message, process_brand)

def format_brand_model(text):
    return " ".join(word.capitalize() for word in text.strip().split())

@text_only_handler
def process_brand(message):
    user_id = str(message.chat.id)

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    brand = format_brand_model(message.text)
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=create_transport_keyboard())
    bot.register_next_step_handler(message, process_model, brand)

@text_only_handler
def process_model(message, brand):
    user_id = str(message.chat.id)

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    model = format_brand_model(message.text)
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=create_transport_keyboard())
    bot.register_next_step_handler(message, process_year, brand, model)

@text_only_handler
def process_year(message, brand, model):
    user_id = str(message.chat.id)

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    try:
        year = int(message.text)
        if year < 1960 or year > 3000:
            raise ValueError("–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1960 –≥. –¥–æ 3000 –≥.")
    except ValueError:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –≥–æ–¥–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –æ—Ç 1960 –≥. –¥–æ 3000 –≥.", reply_markup=create_transport_keyboard())
        bot.register_next_step_handler(message, process_year, brand, model)
        return

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä:", reply_markup=create_transport_keyboard())
    bot.register_next_step_handler(message, process_license_plate, brand, model, year)

@text_only_handler
def process_license_plate(message, brand, model, year):
    user_id = str(message.chat.id)
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    license_plate = message.text.upper()
    pattern = r'^[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•ABEKMHOPCTYX]\d{3}[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•ABEKMHOPCTYX]{2}\d{2,3}$'
    if not re.match(pattern, license_plate):
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –≥–æ—Å–Ω–æ–º–µ—Ä–∞!\n–ì–æ—Å–Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É –≥–æ—Å–Ω–æ–º–µ—Ä–æ–≤ –†–§ (–ê121–ê–ê21 –∏–ª–∏ –ê121–ê–ê121)", reply_markup=create_transport_keyboard())
        bot.register_next_step_handler(message, process_license_plate, brand, model, year)
        return

    if any(t["license_plate"] == license_plate for t in user_transport.get(user_id, [])):
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –≥–æ—Å–Ω–æ–º–µ—Ä–∞!\n–¢–∞–∫–æ–π –≥–æ—Å–Ω–æ–º–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_markup=create_transport_keyboard())
        bot.register_next_step_handler(message, process_license_plate, brand, model, year)
        return

    if user_id not in user_transport:
        user_transport[user_id] = []

    user_transport[user_id].append({"brand": brand, "model": model, "year": year, "license_plate": license_plate})
    save_transport_data(user_id, user_transport[user_id])

    bot.send_message(user_id, f"‚úÖ *–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω*\n\n*{brand} - {model} - {year} - {license_plate}*", parse_mode="Markdown", reply_markup=create_transport_keyboard())
    manage_transport(message)

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_transport(message):
    user_id = str(message.chat.id)
    
    reload_transport_data(user_id)
    
    if user_id in user_transport and user_transport[user_id]:
        transport_list = user_transport[user_id]
        response = "\n\n".join([
            f"‚Ññ{index + 1}. {item['brand']} - {item['model']} - {item['year']} - `{item['license_plate']}`"
            for index, item in enumerate(transport_list)
        ])
        bot.send_message(
            user_id,
            f"üöô *–í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç*\n\n{response}",
            parse_mode="Markdown"
        )
    else:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!")
    manage_transport(message)

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_transport(message):
    user_id = str(message.chat.id)
    
    reload_transport_data(user_id)
    
    if user_id in user_transport and user_transport[user_id]:
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        transport_list = user_transport[user_id]

        for index, item in enumerate(transport_list, start=1):
            keyboard.add(f"‚Ññ{index}. {item['brand']} - {item['model']} - {item['year']} - {item['license_plate']}")

        keyboard.add("–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        keyboard.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        keyboard.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        bot.register_next_step_handler(message, process_transport_selection_for_deletion)
    else:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!")
        manage_transport(message)

def get_return_menu_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return markup

@text_only_handler
def process_transport_selection_for_deletion(message):
    user_id = str(message.chat.id)
    selected_transport = message.text.strip()

    if selected_transport == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if selected_transport == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return
    if selected_transport == "–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        delete_all_transports(message)
        return

    transport_list = user_transport.get(user_id, [])
    if transport_list:
        try:
            index = int(selected_transport.split('.')[0].replace("‚Ññ", "").strip()) - 1
            if 0 <= index < len(transport_list):
                transport_to_delete = transport_list[index]
                bot.send_message(
                    user_id,
                    f"‚ö†Ô∏è *–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?*\n\n{transport_to_delete['brand']} - {transport_to_delete['model']} - {transport_to_delete['year']} - {transport_to_delete['license_plate']}\n\n"
                    "–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–¥–∞* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–Ω–µ—Ç* –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                    parse_mode="Markdown",
                    reply_markup=get_return_menu_keyboard()
                )
                bot.register_next_step_handler(message, partial(process_confirmation, transport_to_delete=transport_to_delete))
            else:
                raise ValueError("–ò–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        except ValueError:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞")
            delete_transport(message)
    else:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!")
        manage_transport(message)

def delete_expense_related_to_transport(user_id, transport, selected_transport=""):
    expense_data = load_expense_data(user_id)
    if str(user_id) in expense_data:
        updated_expense = [
            expense for expense in expense_data[str(user_id)].get('expense', [])
            if not (
                expense.get('transport', {}).get('brand') == transport.get('brand') and
                expense.get('transport', {}).get('model') == transport.get('model') and
                expense.get('transport', {}).get('license_plate') == transport.get('license_plate')
            )
        ]
        expense_data[str(user_id)]['expense'] = updated_expense
        if expense_data.get('selected_transport') == f"{transport['brand']} {transport['model']} ({transport['license_plate']})":
            expense_data['selected_transport'] = ""
        save_expense_data(user_id, expense_data, selected_transport)
    update_excel_file_expense(user_id)

def delete_repairs_related_to_transport(user_id, transport):
    repair_data = load_repair_data(user_id)
    if str(user_id) in repair_data:
        updated_repairs = [
            repair for repair in repair_data[str(user_id)].get("repairs", [])
            if not (
                repair.get('transport', {}).get('brand') == transport.get('brand') and
                repair.get('transport', {}).get('model') == transport.get('model') and
                repair.get('transport', {}).get('license_plate') == transport.get('license_plate')
            )
        ]
        repair_data[str(user_id)]["repairs"] = updated_repairs
        if repair_data.get('selected_transport') == f"{transport['brand']} {transport['model']} ({transport['license_plate']})":
            repair_data['selected_transport'] = ""
        save_repair_data(user_id, repair_data, selected_transport="")
    update_repairs_excel_file(user_id)

@text_only_handler
def process_confirmation(message, transport_to_delete):
    user_id = str(message.chat.id)
    confirmation = message.text.strip().lower()

    if confirmation == "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if confirmation == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    if confirmation == "–¥–∞":
        if user_id in user_transport and transport_to_delete in user_transport[user_id]:
            user_transport[user_id].remove(transport_to_delete)
            delete_expense_related_to_transport(user_id, transport_to_delete)
            delete_repairs_related_to_transport(user_id, transport_to_delete)
            save_transport_data(user_id, user_transport[user_id])
            bot.send_message(user_id, "‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º —Ç—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")
        else:
            bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
    elif confirmation == "–Ω–µ—Ç":
        bot.send_message(user_id, "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!", parse_mode="Markdown")
    else:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–¥–∞* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–Ω–µ—Ç* –¥–ª—è –æ—Ç–º–µ–Ω—ã", parse_mode="Markdown")
        bot.register_next_step_handler(message, partial(process_confirmation, transport_to_delete=transport_to_delete))
    manage_transport(message)

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_all_transports(message):
    user_id = str(message.chat.id)
    if user_id in user_transport and user_transport[user_id]:
        bot.send_message(
            user_id,
            "‚ö†Ô∏è *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?*\n\n"
            "–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ *–¥–∞* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–Ω–µ—Ç* –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode="Markdown",
            reply_markup=get_return_menu_keyboard()
        )
        bot.register_next_step_handler(message, process_delete_all_confirmation)
    else:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!")
        manage_transport(message)

@text_only_handler
def process_delete_all_confirmation(message):
    user_id = str(message.chat.id)
    confirmation = message.text.strip().lower()

    if confirmation == "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if confirmation == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    if confirmation == "–¥–∞":
        if user_id in user_transport and user_transport[user_id]:
            transports = user_transport[user_id]
            user_transport[user_id] = []
            for transport in transports:
                delete_expense_related_to_transport(user_id, transport)
                delete_repairs_related_to_transport(user_id, transport)
            save_transport_data(user_id, user_transport[user_id])
            bot.send_message(user_id, "‚úÖ –í–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º —Ç—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")
        else:
            bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
    elif confirmation == "–Ω–µ—Ç":
        bot.send_message(user_id, "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!", parse_mode="Markdown")
    else:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–¥–∞* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–Ω–µ—Ç* –¥–ª—è –æ—Ç–º–µ–Ω—ã", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_delete_all_confirmation)
    manage_transport(message)

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–∏–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@check_function_state_decorator('–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def edit_transport(message):
    user_id = str(message.chat.id)
    
    reload_transport_data(user_id)
    
    transports = user_transport.get(user_id, [])
    if not transports:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", reply_markup=create_transport_keyboard())
        manage_transport(message)
        return

    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    for index, transport in enumerate(transports, start=1):
        keyboard.add(f"‚Ññ{index}. {transport['brand']} - {transport['model']} - {transport['year']} - {transport['license_plate']}")
    keyboard.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    keyboard.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=keyboard)
    bot.register_next_step_handler(message, process_transport_selection_for_edit)

@text_only_handler
def process_transport_selection_for_edit(message):
    user_id = str(message.chat.id)
    selected_transport_text = message.text.strip()

    if selected_transport_text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if selected_transport_text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    transports = user_transport.get(user_id, [])
    try:
        index = int(selected_transport_text.split('.')[0].replace("‚Ññ", "").strip()) - 1
        if 0 <= index < len(transports):
            selected_transport = transports[index]
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            keyboard.add("–ú–∞—Ä–∫–∞", "–ú–æ–¥–µ–ª—å", "–ì–æ–¥", "–ì–æ—Å–Ω–æ–º–µ—Ä")
            keyboard.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
            keyboard.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            bot.send_message(user_id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)
            bot.register_next_step_handler(message, partial(process_field_selection, selected_transport=selected_transport))
        else:
            raise ValueError("–ò–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    except ValueError:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_transport_selection_for_edit)

@text_only_handler
def process_field_selection(message, selected_transport):
    user_id = str(message.chat.id)
    field = message.text.strip()

    if field == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if field == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    if field not in ["–ú–∞—Ä–∫–∞", "–ú–æ–¥–µ–ª—å", "–ì–æ–¥", "–ì–æ—Å–Ω–æ–º–µ—Ä"]:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö", parse_mode="Markdown")
        keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        keyboard.add("–ú–∞—Ä–∫–∞", "–ú–æ–¥–µ–ª—å", "–ì–æ–¥", "–ì–æ—Å–Ω–æ–º–µ—Ä")
        keyboard.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        keyboard.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.register_next_step_handler(message, partial(process_field_selection, selected_transport=selected_transport))
        return

    current = {
        "–ú–∞—Ä–∫–∞": selected_transport['brand'],
        "–ú–æ–¥–µ–ª—å": selected_transport['model'],
        "–ì–æ–¥": str(selected_transport['year']),
        "–ì–æ—Å–Ω–æ–º–µ—Ä": selected_transport['license_plate']
    }
    bot.send_message(user_id, f'–¢–µ–∫—É—â–∏–π(-–∞—è) *{field.lower()}* —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ - {current[field]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:', reply_markup=create_transport_keyboard(), parse_mode="Markdown")
    bot.register_next_step_handler(message, partial(process_new_value, selected_transport=selected_transport, field=field))

@text_only_handler
def process_new_value(message, selected_transport, field):
    user_id = str(message.chat.id)
    new_value = message.text.strip()

    if new_value == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if new_value == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    if field == "–ì–æ–¥":
        try:
            new_value = int(new_value)
            if new_value < 1960 or new_value > 3000:
                raise ValueError
        except ValueError:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –≥–æ–¥–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –æ—Ç 1960 –≥. –¥–æ 3000 –≥.", reply_markup=create_transport_keyboard())
            bot.register_next_step_handler(message, partial(process_new_value, selected_transport=selected_transport, field=field))
            return
    elif field == "–ì–æ—Å–Ω–æ–º–µ—Ä":
        pattern = r'^[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•ABEKMHOPCTYX]\d{3}[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•ABEKMHOPCTYX]{2}\d{2,3}$'
        if not re.match(pattern, new_value.upper()):
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –≥–æ—Å–Ω–æ–º–µ—Ä–∞!\n–ì–æ—Å–Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É –≥–æ—Å–Ω–æ–º–µ—Ä–æ–≤ –†–§ (–ê121–ê–ê21 –∏–ª–∏ –ê121–ê–ê121)", reply_markup=create_transport_keyboard())
            bot.register_next_step_handler(message, partial(process_new_value, selected_transport=selected_transport, field=field))
            return
        if any(t['license_plate'] == new_value.upper() and t != selected_transport for t in user_transport.get(user_id, [])):
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –≥–æ—Å–Ω–æ–º–µ—Ä–∞!\n–¢–∞–∫–æ–π –≥–æ—Å–Ω–æ–º–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_markup=create_transport_keyboard())
            bot.register_next_step_handler(message, partial(process_new_value, selected_transport=selected_transport, field=field))
            return
        new_value = new_value.upper()
    elif field in ["–ú–∞—Ä–∫–∞", "–ú–æ–¥–µ–ª—å"]:
        new_value = format_brand_model(new_value)

    old_transport = selected_transport.copy()
    field_key = "license_plate" if field == "–ì–æ—Å–Ω–æ–º–µ—Ä" else field.lower()
    selected_transport[field_key] = new_value
    save_transport_data(user_id, user_transport.get(user_id, []))

    update_related_data(user_id, old_transport, selected_transport, field_key, new_value)
    update_excel_files_after_transport_change(user_id, old_transport, selected_transport)

    bot.send_message(user_id, f'‚úÖ *{field}* —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω(-–∞)!', parse_mode="Markdown", reply_markup=create_transport_keyboard())
    manage_transport(message)

def update_related_data(user_id, old_transport, new_transport, field_key, new_value):
    updated = False

    expense_data = load_expense_data(user_id)
    if str(user_id) in expense_data and (expense_data[str(user_id)].get('expense') or expense_data.get('selected_transport')):
        old_selected = f"{old_transport['brand']} {old_transport['model']} ({old_transport['license_plate']})"
        new_selected = f"{new_transport['brand']} {new_transport['model']} ({new_transport['license_plate']})"
        if expense_data.get('selected_transport') == old_selected:
            expense_data['selected_transport'] = new_selected
        for expense in expense_data[str(user_id)].get('expense', []):
            transport_data = expense.get('transport', {})
            if (
                transport_data.get('brand') == old_transport['brand'] and
                transport_data.get('model') == old_transport['model'] and
                transport_data.get('license_plate') == old_transport['license_plate']
            ):
                transport_data[field_key] = new_value
        save_expense_data(user_id, expense_data, new_selected)
        updated = True

    repair_data = load_repair_data(user_id)
    if str(user_id) in repair_data and (repair_data[str(user_id)].get('repairs') or repair_data.get('selected_transport')):
        old_selected = f"{old_transport['brand']} {old_transport['model']} ({old_transport['license_plate']})"
        new_selected = f"{new_transport['brand']} {new_transport['model']} ({new_transport['license_plate']})"
        if repair_data.get('selected_transport') == old_selected:
            repair_data['selected_transport'] = new_selected
        for repair in repair_data[str(user_id)].get('repairs', []):
            transport_data = repair.get('transport', {})
            if (
                transport_data.get('brand') == old_transport['brand'] and
                transport_data.get('model') == old_transport['model'] and
                transport_data.get('license_plate') == old_transport['license_plate']
            ):
                transport_data[field_key] = new_value
        save_repair_data(user_id, repair_data, new_selected)
        updated = True

    if not updated:
        pass

def update_excel_files_after_transport_change(user_id, old_transport, new_transport):
    expense_excel_path = os.path.join(EXPENSES_DIR, "excel", f"{user_id}_expenses.xlsx")
    expense_data = load_expense_data(user_id)
    expenses = expense_data.get(str(user_id), {}).get('expense', [])

    if expenses:
        try:
            if os.path.exists(expense_excel_path):
                workbook = load_workbook(expense_excel_path)
            else:
                workbook = Workbook()
                workbook.remove(workbook.active)

            if "Summary" not in workbook.sheetnames:
                summary_sheet = workbook.create_sheet("Summary")
            else:
                summary_sheet = workbook["Summary"]
                summary_sheet.delete_rows(2, summary_sheet.max_row)

            headers = ["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]
            if summary_sheet.max_row == 0:
                summary_sheet.append(headers)
                for cell in summary_sheet[1]:
                    cell.font = Font(bold=True)
                    cell.alignment = Alignment(horizontal="center")

            for expense in expenses:
                transport = expense.get('transport', {})
                row_data = [
                    f"{transport.get('brand', '')} {transport.get('model', '')} ({transport.get('license_plate', '')})",
                    expense.get("category", ""),
                    expense.get("name", ""),
                    expense.get("date", ""),
                    float(expense.get("amount", 0)),
                    expense.get("description", ""),
                ]
                summary_sheet.append(row_data)

            unique_transports = set(
                (exp.get("transport", {}).get("brand", ""), exp.get("transport", {}).get("model", ""), exp.get("transport", {}).get("license_plate", ""))
                for exp in expenses
            )

            for sheet_name in workbook.sheetnames[:]:
                if sheet_name == "Summary":
                    continue
                parts = sheet_name.split("_")
                if len(parts) != 3 or (parts[0], parts[1], parts[2]) not in unique_transports:
                    del workbook[sheet_name]

            for brand, model, license_plate in unique_transports:
                sheet_name = f"{brand}_{model}_{license_plate}"[:31]
                if sheet_name not in workbook.sheetnames:
                    transport_sheet = workbook.create_sheet(sheet_name)
                    transport_sheet.append(headers)
                    for cell in transport_sheet[1]:
                        cell.font = Font(bold=True)
                        cell.alignment = Alignment(horizontal="center")
                else:
                    transport_sheet = workbook[sheet_name]
                    transport_sheet.delete_rows(2, transport_sheet.max_row)

                for expense in expenses:
                    if (
                        expense.get("transport", {}).get("brand", "") == brand and
                        expense.get("transport", {}).get("model", "") == model and
                        expense.get("transport", {}).get("license_plate", "") == license_plate
                    ):
                        row_data = [
                            f"{brand} {model} ({license_plate})",
                            expense.get("category", ""),
                            expense.get("name", ""),
                            expense.get("date", ""),
                            float(expense.get("amount", 0)),
                            expense.get("description", ""),
                        ]
                        transport_sheet.append(row_data)

            for sheet_name in workbook.sheetnames:
                sheet = workbook[sheet_name]
                for col in sheet.columns:
                    max_length = max(len(str(cell.value)) for cell in col if cell.value)
                    sheet.column_dimensions[get_column_letter(col[0].column)].width = max_length + 2

            workbook.save(expense_excel_path)
            workbook.close()
        except Exception as e:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç –≤ Excel!", parse_mode="Markdown")
    else:
        if os.path.exists(expense_excel_path):
            os.remove(expense_excel_path)

    repair_excel_path = os.path.join(REPAIRS_DIR, "excel", f"{user_id}_repairs.xlsx")
    repair_data = load_repair_data(user_id)
    repairs = repair_data.get(str(user_id), {}).get('repairs', [])

    if repairs:
        try:
            if os.path.exists(repair_excel_path):
                workbook = load_workbook(repair_excel_path)
            else:
                workbook = Workbook()
                workbook.remove(workbook.active)

            if "Summary" not in workbook.sheetnames:
                summary_sheet = workbook.create_sheet("Summary")
            else:
                summary_sheet = workbook["Summary"]
                summary_sheet.delete_rows(2, summary_sheet.max_row)

            headers = ["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]
            if summary_sheet.max_row == 0:
                summary_sheet.append(headers)
                for cell in summary_sheet[1]:
                    cell.font = Font(bold=True)
                    cell.alignment = Alignment(horizontal="center")

            for repair in repairs:
                transport = repair.get('transport', {})
                row_data = [
                    f"{transport.get('brand', '')} {transport.get('model', '')} ({transport.get('license_plate', '')})",
                    repair.get("category", ""),
                    repair.get("name", ""),
                    repair.get("date", ""),
                    float(repair.get("amount", 0)),
                    repair.get("description", ""),
                ]
                summary_sheet.append(row_data)

            unique_transports = set(
                (rep.get("transport", {}).get("brand", ""), rep.get("transport", {}).get("model", ""), rep.get("transport", {}).get("license_plate", ""))
                for rep in repairs
            )

            for sheet_name in workbook.sheetnames[:]:
                if sheet_name == "Summary":
                    continue
                parts = sheet_name.split("_")
                if len(parts) != 3 or (parts[0], parts[1], parts[2]) not in unique_transports:
                    del workbook[sheet_name]

            for brand, model, license_plate in unique_transports:
                sheet_name = f"{brand}_{model}_{license_plate}"[:31]
                if sheet_name not in workbook.sheetnames:
                    transport_sheet = workbook.create_sheet(sheet_name)
                    transport_sheet.append(headers)
                    for cell in transport_sheet[1]:
                        cell.font = Font(bold=True)
                        cell.alignment = Alignment(horizontal="center")
                else:
                    transport_sheet = workbook[sheet_name]
                    transport_sheet.delete_rows(2, transport_sheet.max_row)

                for repair in repairs:
                    if (
                        repair.get("transport", {}).get("brand", "") == brand and
                        repair.get("transport", {}).get("model", "") == model and
                        repair.get("transport", {}).get("license_plate", "") == license_plate
                    ):
                        row_data = [
                            f"{brand} {model} ({license_plate})",
                            repair.get("category", ""),
                            repair.get("name", ""),
                            repair.get("date", ""),
                            float(repair.get("amount", 0)),
                            repair.get("description", ""),
                        ]
                        transport_sheet.append(row_data)

            for sheet_name in workbook.sheetnames:
                sheet = workbook[sheet_name]
                for col in sheet.columns:
                    max_length = max(len(str(cell.value)) for cell in col if cell.value)
                    sheet.column_dimensions[get_column_letter(col[0].column)].width = max_length + 2

            workbook.save(repair_excel_path)
            workbook.close()
        except Exception as e:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤ –≤ Excel!", parse_mode="Markdown")
    else:
        if os.path.exists(repair_excel_path):
            os.remove(repair_excel_path)

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—Ç—Ä–∞—Ç—ã) ---------------------------------------------------

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_BASE_DIR = os.path.join(BASE_DIR, "data", "user", "expenses_and_repairs")
EXPENSE_DIR = os.path.join(DATA_BASE_DIR, "expenses")

def ensure_directories():
    os.makedirs(EXPENSE_DIR, exist_ok=True)

ensure_directories()

user_transport = {}

def save_expense_data(user_id, user_data, selected_transport=None):
    ensure_directories() 

    file_path = os.path.join(EXPENSE_DIR, f"{user_id}_expenses.json")

    current_data = load_expense_data(user_id)

    user_data["user_categories"] = user_data.get("user_categories", current_data.get("user_categories", []))
    user_data["expense"] = current_data.get("expense", [])

    if selected_transport is not None:
        user_data["selected_transport"] = selected_transport

    with open(file_path, "w", encoding="utf-8") as file:
        json.dump(user_data, file, ensure_ascii=False, indent=4)

def load_expense_data(user_id):
    ensure_directories() 

    file_path = os.path.join(EXPENSE_DIR, f"{user_id}_expenses.json")

    if not os.path.exists(file_path):
        return {"user_categories": [], "selected_transport": "", "expense": []}

    try:
        with open(file_path, "r", encoding="utf-8") as file:
            data = json.load(file)
    except (FileNotFoundError, ValueError) as e:
        data = {"user_categories": [], "selected_transport": "", "expense": []}

    return data

def get_user_categories(user_id):
    data = load_expense_data(user_id)
    default_categories = ["–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–ê–ó–°", "–ú–æ–π–∫–∞", "–ü–∞—Ä–∫–æ–≤–∫–∞", "–ü–ª–∞—Ç–Ω–∞—è –¥–æ—Ä–æ–≥–∞", "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞", "–®—Ç—Ä–∞—Ñ—ã"]
    user_categories = data.get("user_categories", [])
    return default_categories + user_categories

def add_user_category(user_id, new_category):
    data = load_expense_data(user_id)

    if "user_categories" not in data:
        data["user_categories"] = []
    if new_category not in data["user_categories"]:
        data["user_categories"].append(new_category)

    save_expense_data(user_id, data)

def remove_user_category(user_id, category_to_remove, selected_transport=""):
    data = load_expense_data(user_id)
    if "user_categories" in data and category_to_remove in data["user_categories"]:
        data["user_categories"].remove(category_to_remove)
        save_expense_data(user_id, data, selected_transport)

def get_user_transport_keyboard(user_id):
    transports = load_transport_data(user_id) 
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    for i in range(0, len(transports), 2):
        transport_buttons = [
            types.KeyboardButton(f"{transport['brand']} {transport['model']} ({transport['license_plate']})")
            for transport in transports[i:i+2]
        ]
        markup.row(*transport_buttons)

    markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"))
    return markup

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–∑–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É")
@check_function_state_decorator('–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É')
@track_usage('–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def record_expense(message):
    user_id = str(message.from_user.id)

    transports = load_transport_data(user_id) 

    if not transports:
        bot.send_message(user_id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?", reply_markup=create_transport_options_markup(), parse_mode="Markdown")
        bot.register_next_step_handler(message, ask_add_transport)
        return

    markup = get_user_transport_keyboard(user_id)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞—Ç—ã:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, handle_transport_selection_for_expense)
    
@text_only_handler
def handle_transport_selection_for_expense(message):
    user_id = str(message.from_user.id)  
    selected_transport = message.text.strip()

    if selected_transport == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return
    elif selected_transport == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    elif selected_transport == "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        add_transport(message)
        return

    transports = load_transport_data(user_id)
    selected_brand, selected_model, selected_license_plate = None, None, None

    for transport in transports:
        formatted_transport = f"{transport['brand']} {transport['model']} ({transport['license_plate']})"
        if formatted_transport == selected_transport:
            selected_brand = transport['brand']
            selected_model = transport['model']
            selected_license_plate = transport['license_plate']
            break
    else:
        markup = get_user_transport_keyboard(user_id)
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, handle_transport_selection_for_expense)
        return

    process_category_selection(user_id, selected_brand, selected_model, selected_license_plate)

def process_category_selection(user_id, brand, model, license_plate, prompt_message=None):
    categories = get_user_categories(user_id)

    system_emoji = "üîπ"
    user_emoji = "üî∏"

    category_list = "\n".join(
        f"{system_emoji if i < 7 else user_emoji} {i + 1}. {category}"
        for i, category in enumerate(categories)
    )
    category_list = f"*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*\n\n{category_list}"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(
        types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"),
        types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    )
    markup.add(
        types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    )
    markup.add(
        types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    )
    if prompt_message:
        bot.send_message(user_id, category_list, reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(prompt_message, get_expense_category, brand, model, license_plate)
    else:
        prompt_message = bot.send_message(user_id, category_list, reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(prompt_message, get_expense_category, brand, model, license_plate)

@text_only_handler
def get_expense_category(message, brand, model, license_plate):
    user_id = message.from_user.id

    selected_index = message.text.strip()

    if selected_index == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return
    elif selected_index == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if selected_index == '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
        selected_category = "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        proceed_to_expense_name(message, selected_category, brand, model, license_plate)
        return

    if selected_index == '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(
            types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        )
        markup.add(
            types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        )
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, add_new_category, brand, model, license_plate)
        return

    if selected_index == '–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
        handle_category_removal(message, brand, model, license_plate)
        return

    if selected_index.isdigit():
        index = int(selected_index) - 1
        categories = get_user_categories(user_id)
        if 0 <= index < len(categories):
            selected_category = categories[index]
            proceed_to_expense_name(message, selected_category, brand, model, license_plate)
        else:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, get_expense_category, brand, model, license_plate)
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")
        bot.register_next_step_handler(message, get_expense_category, brand, model, license_plate)

@text_only_handler
def add_new_category(message, brand, model, license_plate):
    user_id = message.from_user.id

    new_category = message.text.strip().lower()

    if new_category in ["–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if new_category == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_expense_and_repairs(message)
        else:
            return_to_menu(message)
        return

    if not new_category:
        bot.send_message(user_id, "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        bot.register_next_step_handler(message, add_new_category, brand, model, license_plate)
        return

    user_categories = [cat.lower() for cat in get_user_categories(user_id)]
    if new_category in user_categories:
        bot.send_message(user_id, "–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        bot.register_next_step_handler(message, add_new_category, brand, model, license_plate)
        return

    add_user_category(user_id, new_category)
    bot.send_message(user_id, f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è *{new_category}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", parse_mode="Markdown")
    process_category_selection(user_id, brand, model, license_plate)

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
@track_usage('–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_category_removal(message, brand=None, model=None, license_plate=None):
    user_id = message.from_user.id
    categories = get_user_categories(user_id)

    system_emoji = "üîπ"
    user_emoji = "üî∏"

    category_list = "\n".join(
        f"{system_emoji if i < 7 else user_emoji} {i + 1}. {category}"
        for i, category in enumerate(categories)
    )
    category_list = f"*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã:*\n\n{category_list}"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    bot.send_message(user_id, category_list, reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, remove_selected_category, brand, model, license_plate)

@text_only_handler
def remove_selected_category(message, brand, model, license_plate):
    user_id = message.from_user.id

    selected_index = message.text.strip()

    if selected_index == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return
    elif selected_index == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if selected_index == '0':
        bot.send_message(user_id, "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
        return process_category_selection(user_id, brand, model, license_plate)

    if selected_index.isdigit():
        index = int(selected_index) - 1
        categories = get_user_categories(user_id)
        default_categories = ["–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–∞–∑—Å", "–º–æ–π–∫–∞", "–ø–∞—Ä–∫–æ–≤–∫–∞", "–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Ä–æ–≥–∞", "—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞", "—à—Ç—Ä–∞—Ñ—ã"]

        if 0 <= index < len(categories):
            category_to_remove = categories[index].lower()
            if category_to_remove in default_categories:
                bot.send_message(user_id, f"‚ö†Ô∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é *{categories[index]}*!", parse_mode="Markdown")
                return bot.register_next_step_handler(message, remove_selected_category, brand, model, license_plate)

            remove_user_category(user_id, categories[index]) 
            bot.send_message(user_id, f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è *{categories[index]}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", parse_mode="Markdown")
        else:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            return bot.register_next_step_handler(message, remove_selected_category, brand, model, license_plate)
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")
        return bot.register_next_step_handler(message, remove_selected_category, brand, model, license_plate)

    return process_category_selection(user_id, brand, model, license_plate)

@text_only_handler
def proceed_to_expense_name(message, selected_category, brand, model, license_plate):
    user_id = message.from_user.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, get_expense_name, selected_category, brand, model, license_plate)

@text_only_handler
def get_expense_name(message, selected_category, brand, model, license_plate):
    user_id = message.from_user.id

    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_expense_and_repairs(message)
        else:
            return_to_menu(message)
        return

    expense_name = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_skip = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_skip)
    markup.add(item_return)
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:", reply_markup=markup)
    bot.register_next_step_handler(message, get_expense_description, selected_category, expense_name, brand, model, license_plate)

@text_only_handler
def get_expense_description(message, selected_category, expense_name, brand, model, license_plate):
    user_id = message.from_user.id

    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_expense_and_repairs(message)
        else:
            return_to_menu(message)
        return

    description = message.text if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ" else ""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=markup)
    bot.register_next_step_handler(message, get_expense_date, selected_category, expense_name, description, brand, model, license_plate)

@text_only_handler
def get_expense_date(message, selected_category, expense_name, description, brand, model, license_plate):
    user_id = message.from_user.id

    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_expense_and_repairs(message)
        else:
            return_to_menu(message)
        return

    expense_date = message.text

    if re.match(r"^\d{2}\.\d{2}\.\d{4}$", expense_date):
        try:
            day, month, year = map(int, expense_date.split('.'))
            if 1 <= month <= 12 and 1 <= day <= 31 and 2000 <= year <= 3000:
                datetime.strptime(expense_date, "%d.%m.%Y")
            else:
                raise ValueError
        except ValueError:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            bot.register_next_step_handler(message, get_expense_date, selected_category, expense_name, description, brand, model, license_plate)
            return
    else:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, get_expense_date, selected_category, expense_name, description, brand, model, license_plate)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, get_expense_amount, selected_category, expense_name, description, expense_date, brand, model, license_plate)

def is_numeric(s):
    if s is not None:
        try:
            float(s)
            return True
        except ValueError:
            return False
    return False

@text_only_handler
def get_expense_amount(message, selected_category, expense_name, description, expense_date, brand, model, license_plate):
    user_id = message.from_user.id

    expense_amount = message.text.replace(",", ".")
    if not is_numeric(expense_amount):
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!")
        bot.register_next_step_handler(message, get_expense_amount, selected_category, expense_name, description, expense_date, brand, model, license_plate)
        return

    data = load_expense_data(user_id)
    if str(user_id) not in data:
        data[str(user_id)] = {"expense": []}

    selected_transport = f"{brand} {model} {license_plate}"
    expense = data[str(user_id)].get("expense", [])
    new_expense = {
        "category": selected_category,
        "name": expense_name,
        "date": expense_date,
        "amount": expense_amount,
        "description": description,
        "transport": {"brand": brand, "model": model, "license_plate": license_plate}
    }
    expense.append(new_expense)
    data[str(user_id)]["expense"] = expense
    save_expense_data(user_id, data, selected_transport)

    save_expense_to_excel(user_id, new_expense)

    bot.send_message(user_id, "‚úÖ –¢—Ä–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞!")
    return_to_expense_and_repairs(message)

def save_expense_to_excel(user_id, expense):
    excel_path = os.path.join("data", "user", "expenses_and_repairs", "expenses", "excel", f"{user_id}_expenses.xlsx")

    directory = os.path.dirname(excel_path)
    if not os.path.exists(directory):
        os.makedirs(directory)

    try:
        if os.path.exists(excel_path):
            workbook = load_workbook(excel_path)
        else:
            workbook = Workbook()
            workbook.remove(workbook.active)

        summary_sheet = workbook["Summary"] if "Summary" in workbook.sheetnames else workbook.create_sheet("Summary")

        transport_sheet_name = f"{expense['transport']['brand']}_{expense['transport']['model']}_{expense['transport']['license_plate']}"
        transport_sheet = workbook[transport_sheet_name] if transport_sheet_name in workbook.sheetnames else workbook.create_sheet(transport_sheet_name)

        headers = ["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]

        def setup_sheet(sheet):
            if sheet.max_row == 1:
                sheet.append(headers)
                for cell in sheet[1]:
                    cell.font = Font(bold=True)
                    cell.alignment = Alignment(horizontal="center")

        for sheet in [summary_sheet, transport_sheet]:
            setup_sheet(sheet)
            row_data = [
                f"{expense['transport']['brand']} {expense['transport']['model']} {expense['transport']['license_plate']}",
                expense["category"],
                expense["name"],
                expense["date"],
                float(expense["amount"]),
                expense["description"],
            ]
            sheet.append(row_data)

        for sheet in [summary_sheet, transport_sheet]:
            for col in sheet.columns:
                max_length = max(len(str(cell.value)) for cell in col)
                sheet.column_dimensions[get_column_letter(col[0].column)].width = max_length + 2

        workbook.save(excel_path)
    except Exception as e:
        raise

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã) ---------------------------------------------------

selected_transport_dict = {}

MAX_MESSAGE_LENGTH = 4096

def send_message_with_split(user_id, message_text, parse_mode=None):

    MAX_MESSAGE_LENGTH = 4096
    try:
        if len(message_text) <= MAX_MESSAGE_LENGTH:
            bot.send_message(user_id, message_text, parse_mode=parse_mode)
        else:
            message_parts = [message_text[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(message_text), MAX_MESSAGE_LENGTH)]
            for part in message_parts:
                bot.send_message(user_id, part, parse_mode=parse_mode)
    except Exception as e:
        bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã")
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_expense(message):
    user_id = str(message.from_user.id)

    transport_list = load_transport_data(user_id)

    if not transport_list:
        bot.send_message(user_id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?", reply_markup=create_transport_options_markup())
        bot.register_next_step_handler(message, ask_add_transport)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    for i in range(0, len(transport_list), 2):
        transport_buttons = []
        for j in range(i, min(i + 2, len(transport_list))):
            transport = transport_list[j]
            transport_name = f"{transport['brand']} {transport['model']} ({transport['license_plate']})"
            transport_buttons.append(types.KeyboardButton(transport_name))

        markup.add(*transport_buttons)

    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_transport_selection)

def ask_add_transport(message):
    user_id = str(message.from_user.id)

    if message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        add_transport(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç!", reply_markup=create_transport_options_markup())
        bot.register_next_step_handler(message, ask_add_transport)

def create_transport_options_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_add_transport = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    item_cancel = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_add_transport)
    markup.add(item_cancel)
    markup.add(item_main)
    return markup

def filter_expense_by_transport(user_id, expense):
    selected_transport = selected_transport_dict.get(user_id)
    if not selected_transport:
        return expense

    filtered_expense = []
    for exp in expense:
        transport = exp.get('transport', {})
        if not all(k in transport for k in ['brand', 'model', 'license_plate']):
            continue
        if f"{transport['brand']} {transport['model']} ({transport['license_plate']})" == selected_transport:
            filtered_expense.append(exp)
    return filtered_expense

@text_only_handler
def handle_transport_selection(message):
    user_id = message.from_user.id
    selected_transport = message.text

    if selected_transport == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return

    if selected_transport == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    selected_transport_dict[user_id] = selected_transport

    bot.send_message(user_id, f"üëÄ –ü–æ–∫–∞–∑—ã–≤–∞—é —Ç—Ä–∞—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: *{selected_transport}*", parse_mode="Markdown")
    send_menu1(user_id)

def send_menu1(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–¢—Ä–∞—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)")
    item2 = types.KeyboardButton("–¢—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)")
    item3 = types.KeyboardButton("–¢—Ä–∞—Ç—ã (–≥–æ–¥)")
    item4 = types.KeyboardButton("–¢—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
    item_excel = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã –≤ EXCEL")
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1, item2)
    markup.add(item3, item4)
    markup.add(item_excel)
    markup.add(item_return)
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞—Ç:", reply_markup=markup)

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã –≤ excel) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã –≤ EXCEL")
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã –≤ EXCEL')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã –≤ EXCEL')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def send_expense_excel(message):
    user_id = str(message.from_user.id)

    excel_path = os.path.join("data", "user", "expenses_and_repairs", "expenses", "excel", f"{user_id}_expenses.xlsx")

    try:
        if not os.path.exists(excel_path):
            bot.send_message(user_id, "‚ùå –§–∞–π–ª —Å –≤–∞—à–∏–º–∏ —Ç—Ä–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return_to_expense_and_repairs(message)
            return
        with open(excel_path, 'rb') as excel_file:
            bot.send_document(user_id, excel_file)
    except Exception as e:
        bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        return_to_expense_and_repairs(message)

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–¢—Ä–∞—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)")
@check_function_state_decorator('–¢—Ä–∞—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)')
@track_usage('–¢—Ä–∞—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_expense_by_category(message):
    user_id = str(message.from_user.id)
    user_data = load_expense_data(user_id)
    expense = user_data.get(str(user_id), {}).get("expense", [])

    expense = filter_expense_by_transport(user_id, expense)

    categories = set(exp.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') for exp in expense)
    if not categories:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        send_menu1(user_id)
        return

    category_buttons = [types.KeyboardButton(category) for category in categories]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*category_buttons)
    item_return_to_expense = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_return_to_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return_to_expense)
    markup.add(item_return_to_main)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞—Ç:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, handle_category_selection)

@text_only_handler
def handle_category_selection(message):
    user_id = str(message.from_user.id)
    selected_category = message.text

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    user_data = load_expense_data(user_id)
    expense = user_data.get(str(user_id), {}).get("expense", [])

    expense = filter_expense_by_transport(user_id, expense)

    if selected_category not in {exp.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') for exp in expense}:
        bot.send_message(user_id, "–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", parse_mode="Markdown")
        view_expense_by_category(message)
        return

    category_expense = [exp for exp in expense if exp.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') == selected_category]

    total_expense = 0
    expense_details = []

    for index, exp in enumerate(category_expense, start=1):
        expense_name = exp.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        expense_date = exp.get("date", "")
        amount = float(exp.get("amount", 0))
        total_expense += amount

        expense_details.append(
            f"üí∏ *‚Ññ {index}*\n\n"
            f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {selected_category}\n"
            f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {expense_name}\n"
            f"üìÖ *–î–∞—Ç–∞:* {expense_date}\n"
            f"üí∞ *–°—É–º–º–∞:* {amount} —Ä—É–±.\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {exp.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
        )

    if expense_details:
        message_text = f"–¢—Ä–∞—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category.lower()}*:\n\n" + "\n\n".join(expense_details)
        send_message_with_split(user_id, message_text, parse_mode="Markdown")
        bot.send_message(user_id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category.lower()}*: *{total_expense}* —Ä—É–±.", parse_mode="Markdown")
    else:
        bot.send_message(user_id, f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category.lower()}* —Ç—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", parse_mode="Markdown")

    send_menu1(user_id)

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—Ç—Ä–∞—Ç—ã –ø–æ –º–µ—Å—è—Ü—É) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–¢—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)")
@check_function_state_decorator('–¢—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)')
@track_usage('–¢—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_expense_by_month(message):
    user_id = str(message.from_user.id)  

    transports = load_transport_data(user_id)
    if not transports:
        bot.send_message(user_id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?", reply_markup=create_transport_options_markup(), parse_mode="Markdown")
        bot.register_next_step_handler(message, ask_add_transport)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ (–ú–ú.–ì–ì–ì–ì) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞—Ç –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, get_expense_by_month)

@text_only_handler
def get_expense_by_month(message):
    user_id = str(message.from_user.id)
    date = message.text.strip() if message.text else None

    if not date:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!", parse_mode="Markdown")
        bot.register_next_step_handler(message, get_expense_by_month)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if not re.match(r"^(0[1-9]|1[0-2])\.(20[0-9]{2}|2[1-9][0-9]{2}|3000)$", date):
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì!", parse_mode="Markdown")
        bot.register_next_step_handler(message, get_expense_by_month)
        return

    try:
        month, year = map(int, date.split("."))
    except ValueError as e:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, get_expense_by_month)
        return

    user_data = load_expense_data(user_id).get(user_id, {})
    expense = user_data.get("expense", [])

    expense = filter_expense_by_transport(user_id, expense)

    total_expense = 0
    expense_details = []

    for index, exp in enumerate(expense, start=1):
        expense_date = exp.get("date", "")
        if not expense_date or len(expense_date.split(".")) != 3:
            continue

        try:
            expense_day, expense_month, expense_year = map(int, expense_date.split("."))
            if expense_month == month and expense_year == year:
                amount = float(exp.get("amount", 0))
                total_expense += amount

                expense_name = exp.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                description = exp.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                category = exp.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

                expense_details.append(
                    f"üí∏ *‚Ññ {index}*\n\n"
                    f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
                    f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {expense_name}\n"
                    f"üìÖ *–î–∞—Ç–∞:* {expense_date}\n"
                    f"üí∞ *–°—É–º–º–∞:* {amount} —Ä—É–±.\n"
                    f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
                )
        except (ValueError, TypeError) as e:
            continue

    if expense_details:
        message_text = f"–¢—Ä–∞—Ç—ã –∑–∞ *{date}* –º–µ—Å—è—Ü:\n\n" + "\n\n".join(expense_details)
        send_message_with_split(user_id, message_text, parse_mode="Markdown")
        bot.send_message(user_id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç –∑–∞ *{date}* –º–µ—Å—è—Ü: *{total_expense}* —Ä—É–±.", parse_mode="Markdown")
    else:
        bot.send_message(user_id, f"‚ùå –ó–∞ *{date}* –º–µ—Å—è—Ü —Ç—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", parse_mode="Markdown")

    send_menu1(user_id)

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—Ç—Ä–∞—Ç—ã –ø–æ –≥–æ–¥—É) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–¢—Ä–∞—Ç—ã (–≥–æ–¥)")
@check_function_state_decorator('–¢—Ä–∞—Ç—ã (–≥–æ–¥)')
@track_usage('–¢—Ä–∞—Ç—ã (–≥–æ–¥)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_expense_by_license_plate(message):
    user_id = message.from_user.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–ì–ì–ì–ì) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞—Ç –∑–∞ —ç—Ç–æ—Ç –≥–æ–¥:", reply_markup=markup)
    bot.register_next_step_handler(message, get_expense_by_license_plate)

@text_only_handler
def get_expense_by_license_plate(message):
    user_id = message.from_user.id

    year_input = message.text.strip()

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if not year_input.isdigit() or len(year_input) != 4:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì!")
        bot.register_next_step_handler(message, get_expense_by_license_plate)
        return

    year = int(year_input)
    if year < 2000 or year > 3000:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì!")
        bot.register_next_step_handler(message, get_expense_by_license_plate)
        return

    user_data = load_expense_data(user_id)
    expense = user_data.get(str(user_id), {}).get("expense", [])

    expense = filter_expense_by_transport(user_id, expense)

    total_expense = 0
    expense_details = []

    for index, expense in enumerate(expense, start=1):
        expense_date = expense.get("date", "")
        if "." in expense_date:
            date_parts = expense_date.split(".")
            if len(date_parts) >= 3:
                expense_year = int(date_parts[2])
                if expense_year == year:
                    amount = float(expense.get("amount", 0))
                    total_expense += amount

                    expense_name = expense.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    description = expense.get("description", "")
                    category = expense.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

                    expense_details.append(
                        f"üí∏ *‚Ññ {index}*\n\n"
                        f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
                        f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {expense_name}\n"
                        f"üìÖ *–î–∞—Ç–∞:* {expense_date}\n"
                        f"üí∞ *–°—É–º–º–∞:* {amount} —Ä—É–±.\n"
                        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
                    )

    if expense_details:
        message_text = f"–¢—Ä–∞—Ç—ã –∑–∞ *{year}* –≥–æ–¥:\n\n" + "\n\n".join(expense_details)
        send_message_with_split(user_id, message_text, parse_mode="Markdown")
        bot.send_message(user_id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç –∑–∞ *{year}* –≥–æ–¥: *{total_expense}* —Ä—É–±.", parse_mode="Markdown")
    else:
        bot.send_message(user_id, f"‚ùå –ó–∞ *{year}* –≥–æ–¥ —Ç—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", parse_mode="Markdown")

    send_menu1(user_id)

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–≤—Å–µ –≤—Ä–µ–º—è) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–¢—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
@check_function_state_decorator('–¢—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')
@track_usage('–¢—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_all_expense(message):
    user_id = message.from_user.id

    user_data = load_expense_data(user_id)
    expense = user_data.get(str(user_id), {}).get("expense", [])

    expense = filter_expense_by_transport(user_id, expense)

    total_expense = 0
    expense_details = []

    for index, expense in enumerate(expense, start=1):
        amount = float(expense.get("amount", 0))
        total_expense += amount

        expense_name = expense.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        expense_date = expense.get("date", "")
        description = expense.get("description", "")
        category = expense.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

        expense_details.append(
            f"üí∏ *‚Ññ {index}*\n\n"
            f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
            f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {expense_name}\n"
            f"üìÖ *–î–∞—Ç–∞:* {expense_date}\n"
            f"üí∞ *–°—É–º–º–∞:* {amount} —Ä—É–±.\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
        )

    if expense_details:
        message_text = "*–í—Å–µ* —Ç—Ä–∞—Ç—ã:\n\n" + "\n\n".join(expense_details)
        send_message_with_split(user_id, message_text, parse_mode="Markdown")
        bot.send_message(user_id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö —Ç—Ä–∞—Ç: *{total_expense}* —Ä—É–±.", parse_mode="Markdown")
    else:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", parse_mode="Markdown")

    send_menu1(user_id)

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã) ---------------------------------------------------

selected_transports = {}
expense_to_delete_dict = {}
selected_categories = {}
user_expense_to_delete = {}

MAX_MESSAGE_LENGTH = 4096

def send_long_message(user_id, text):
    while len(text) > MAX_MESSAGE_LENGTH:
        bot.send_message(user_id, text[:MAX_MESSAGE_LENGTH], parse_mode="Markdown")
        text = text[MAX_MESSAGE_LENGTH:]
    bot.send_message(user_id, text, parse_mode="Markdown")

def save_selected_transport(user_id, selected_transport):
    user_data = load_expense_data(user_id)
    user_data["selected_transport"] = selected_transport
    save_expense_data(user_id, user_data)

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã")
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã')
@track_usage('–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def initiate_delete_expenses(message):
    user_id = str(message.from_user.id)

    transport_data = load_transport_data(user_id)
    if not transport_data:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?", reply_markup=markup)
        bot.register_next_step_handler(message, ask_add_transport)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    transport_buttons = [
        f"{transport['brand']} {transport['model']} ({transport['license_plate']})"
        for transport in transport_data
    ]
    for i in range(0, len(transport_buttons), 2):
        markup.row(*transport_buttons[i:i + 2])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_transport_selection_for_deletion)

@text_only_handler
def handle_transport_selection_for_deletion(message):
    user_id = str(message.from_user.id)
    selected_transport = message.text.strip()

    if selected_transport == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if selected_transport == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_menu(message)
        return

    transport_data = load_transport_data(user_id)
    transport_found = any(
        f"{transport['brand']} {transport['model']} ({transport['license_plate']})" == selected_transport
        for transport in transport_data
    )
    if not transport_found:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        transport_buttons = [
            f"{transport['brand']} {transport['model']} ({transport['license_plate']})"
            for transport in transport_data
        ]
        for i in range(0, len(transport_buttons), 2):
            markup.row(*transport_buttons[i:i + 2])
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown", reply_markup=markup)
        bot.register_next_step_handler(message, handle_transport_selection_for_deletion)
        return

    selected_transports[user_id] = selected_transport
    save_selected_transport(user_id, selected_transport)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("Del —Ç—Ä–∞—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)", "Del —Ç—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)")
    markup.add("Del —Ç—Ä–∞—Ç—ã (–≥–æ–¥)", "Del —Ç—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, handle_deletion_option)

@text_only_handler
def handle_deletion_option(message):
    user_id = str(message.from_user.id)
    option = message.text.strip()

    if option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_menu(message)
        return

    selected_transport = selected_transports.get(user_id, "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    if option == "Del —Ç—Ä–∞—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)":
        delete_expense_by_category(message)
    elif option == "Del —Ç—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)":
        delete_expense_by_month(message)
    elif option == "Del —Ç—Ä–∞—Ç—ã (–≥–æ–¥)":
        delete_expense_by_year(message)
    elif option == "Del —Ç—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)":
        delete_all_expense_for_selected_transport(message)
    else:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        initiate_delete_expenses(message)

# ------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "Del —Ç—Ä–∞—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)")
@check_function_state_decorator('Del —Ç—Ä–∞—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)')
@track_usage('Del —Ç—Ä–∞—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_expense_by_category(message):
    user_id = str(message.from_user.id)

    user_data = load_expense_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    try:
        transport_info = selected_transport.split(" ")
        if len(transport_info) < 3:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        selected_brand = transport_info[0].strip()
        selected_model = transport_info[1].strip()
        selected_license_plate = transport_info[2].strip().replace("(", "").replace(")", "")
    except (ValueError, IndexError) as e:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    expense = user_data.get(str(user_id), {}).get("expense", [])

    categories = list({
        exp.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        for exp in expense
        if all(k in exp.get("transport", {}) for k in ['brand', 'model', 'license_plate'])
        and exp["transport"]["brand"] == selected_brand
        and exp["transport"]["model"] == selected_model
        and exp["transport"]["license_plate"] == selected_license_plate
    })

    if not categories:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É *{selected_transport}*!", parse_mode="Markdown")
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    markup.add(*[types.KeyboardButton(category) for category in categories])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, handle_category_selection_for_deletion)

@text_only_handler
def handle_category_selection_for_deletion(message):
    user_id = str(message.from_user.id)
    selected_category = message.text.strip()

    if selected_category == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_categories:
            del selected_categories[user_id]
        if user_id in user_expense_to_delete:
            del user_expense_to_delete[user_id]
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if selected_category == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_categories:
            del selected_categories[user_id]
        if user_id in user_expense_to_delete:
            del user_expense_to_delete[user_id]
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_menu(message)
        return

    selected_transport = selected_transports.get(user_id)
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        if user_id in selected_categories:
            del selected_categories[user_id]
        return_to_expense_and_repairs(message)
        return

    try:
        transport_info = selected_transport.split(" ")
        if len(transport_info) < 3:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        selected_brand = transport_info[0].strip()
        selected_model = transport_info[1].strip()
        selected_license_plate = transport_info[2].strip().replace("(", "").replace(")", "")
    except (ValueError, IndexError) as e:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        if user_id in selected_categories:
            del selected_categories[user_id]
        return_to_expense_and_repairs(message)
        return

    selected_categories[user_id] = selected_category

    user_data = load_expense_data(user_id).get(user_id, {})
    expense = user_data.get("expense", [])

    expense_to_delete = [
        exp for exp in expense
        if exp.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") == selected_category
        and all(k in exp.get("transport", {}) for k in ['brand', 'model', 'license_plate'])
        and exp["transport"]["brand"] == selected_brand
        and exp["transport"]["model"] == selected_model
        and exp["transport"]["license_plate"] == selected_license_plate
    ]

    if not expense_to_delete:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category.lower()}* –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É *{selected_transport}*!", parse_mode="Markdown")
        if user_id in selected_categories:
            del selected_categories[user_id]
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    user_expense_to_delete[user_id] = expense_to_delete

    expense_list_text = f"–°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category.lower()}*:\n\n"
    for index, exp in enumerate(expense_to_delete, start=1):
        expense_name = exp.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        expense_date = exp.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        expense_list_text += f"üìÑ ‚Ññ{index}. {expense_name} - ({expense_date})\n\n"

    expense_list_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    send_long_message(user_id, expense_list_text)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    bot.register_next_step_handler(message, delete_expense_confirmation)

@text_only_handler
def delete_expense_confirmation(message):
    user_id = str(message.from_user.id)
    selected_option = message.text.strip()

    if selected_option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_categories:
            del selected_categories[user_id]
        if user_id in user_expense_to_delete:
            del user_expense_to_delete[user_id]
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if selected_option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_categories:
            del selected_categories[user_id]
        if user_id in user_expense_to_delete:
            del user_expense_to_delete[user_id]
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_menu(message)
        return

    expense_to_delete = user_expense_to_delete.get(user_id, [])
    if not expense_to_delete:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!", parse_mode="Markdown")
        if user_id in selected_categories:
            del selected_categories[user_id]
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    try:
        indices = [int(num.strip()) - 1 for num in selected_option.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(expense_to_delete):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup, parse_mode="Markdown")
            bot.register_next_step_handler(msg, delete_expense_confirmation)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(user_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")

        valid_indices.sort(reverse=True)
        deleted_expense_names = []
        user_data = load_expense_data(user_id).get(user_id, {})
        user_expense = user_data.get("expense", [])

        for index in valid_indices:
            deleted_expense = expense_to_delete.pop(index)
            deleted_expense_names.append(deleted_expense.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').lower())
            if deleted_expense in user_expense:
                user_expense.remove(deleted_expense)

        user_data["expense"] = user_expense
        save_expense_data(user_id, {user_id: user_data})
        update_excel_file_expense(user_id)

        bot.send_message(user_id, f"‚úÖ –¢—Ä–∞—Ç—ã *{', '.join(deleted_expense_names)}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")

        if not expense_to_delete:
            if user_id in user_expense_to_delete:
                del user_expense_to_delete[user_id]
            if user_id in selected_categories:
                del selected_categories[user_id]
            if user_id in selected_transports:
                del selected_transports[user_id]

        return_to_expense_and_repairs(message)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(msg, delete_expense_confirmation)

# ------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã –ø–æ –º–µ—Å—è—Ü—É) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "Del —Ç—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)")
@check_function_state_decorator('Del —Ç—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)')
@track_usage('Del —Ç—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_expense_by_month(message):
    user_id = str(message.from_user.id)

    user_data = load_expense_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ (–ú–ú.–ì–ì–ì–ì) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_delete_expense_by_month)

@text_only_handler
def process_delete_expense_by_month(message):
    user_id = str(message.from_user.id)
    month_year = message.text.strip()

    if month_year == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if month_year == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_menu(message)
        return

    match = re.match(r"^(0[1-9]|1[0-2])\.(20[0-9]{2}|2[1-9][0-9]{2}|3000)$", month_year)
    if not match:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, "–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü –∏–ª–∏ –≥–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ú–ú.–ì–ì–ì–ì)", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_delete_expense_by_month)
        return

    selected_month, selected_year = map(int, match.groups())

    user_data = load_expense_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    try:
        transport_info = selected_transport.split(" ")
        if len(transport_info) < 3:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        selected_brand = transport_info[0].strip()
        selected_model = transport_info[1].strip()
        selected_license_plate = transport_info[2].strip().replace("(", "").replace(")", "")
    except (ValueError, IndexError) as e:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    expense = user_data.get(str(user_id), {}).get("expense", [])

    if not expense:
        bot.send_message(user_id, f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç –∑–∞ *{month_year}* –º–µ—Å—è—Ü!", parse_mode="Markdown")
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    expense_to_delete = []
    for index, exp in enumerate(expense, start=1):
        expense_date = exp.get("date", "")
        if not expense_date or len(expense_date.split(".")) != 3:
            continue
        try:
            expense_day, expense_month, expense_year = map(int, expense_date.split("."))
            transport = exp.get("transport", {})
            if not all(k in transport for k in ['brand', 'model', 'license_plate']):
                continue
            if (expense_month == selected_month and
                expense_year == selected_year and
                transport['brand'] == selected_brand and
                transport['model'] == selected_model and
                transport['license_plate'] == selected_license_plate):
                expense_to_delete.append((index, exp))
        except (ValueError, TypeError) as e:
            continue

    if expense_to_delete:
        expense_to_delete_dict[user_id] = expense_to_delete
        expense_list_text = f"–°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞ *{month_year}* –º–µ—Å—è—Ü:\n\n"
        for index, exp in expense_to_delete:
            expense_name = exp.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            expense_date = exp.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            expense_list_text += f"üìÑ ‚Ññ{index}. {expense_name} - ({expense_date})\n\n"
        expense_list_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        send_long_message(user_id, expense_list_text)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.register_next_step_handler(message, confirm_delete_expense_month)
    else:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞ *{month_year}* –º–µ—Å—è—Ü!", parse_mode="Markdown")
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)

@text_only_handler
def confirm_delete_expense_month(message):
    user_id = str(message.from_user.id)
    selected_option = message.text.strip()

    if selected_option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in expense_to_delete_dict:
            del expense_to_delete_dict[user_id]
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if selected_option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in expense_to_delete_dict:
            del expense_to_delete_dict[user_id]
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_menu(message)
        return

    expense_to_delete = expense_to_delete_dict.get(user_id, [])
    if not expense_to_delete:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—è—Ü—É!", parse_mode="Markdown")
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    try:
        indices = [int(num.strip()) - 1 for num in selected_option.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(expense_to_delete):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup, parse_mode="Markdown")
            bot.register_next_step_handler(msg, confirm_delete_expense_month)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(user_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")

        valid_indices.sort(reverse=True)
        deleted_expense_names = []
        user_data = load_expense_data(user_id).get(str(user_id), {})
        user_expense = user_data.get("expense", [])

        for index in valid_indices:
            _, deleted_expense = expense_to_delete.pop(index)
            deleted_expense_names.append(deleted_expense.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').lower())
            if deleted_expense in user_expense:
                user_expense.remove(deleted_expense)

        user_data["expense"] = user_expense
        save_expense_data(user_id, {str(user_id): user_data})
        update_excel_file_expense(user_id)

        bot.send_message(user_id, f"‚úÖ –¢—Ä–∞—Ç—ã *{', '.join(deleted_expense_names)}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")

        if not expense_to_delete:
            if user_id in expense_to_delete_dict:
                del expense_to_delete_dict[user_id]
            if user_id in selected_transports:
                del selected_transports[user_id]
        else:
            expense_to_delete_dict[user_id] = expense_to_delete

        return_to_expense_and_repairs(message)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(msg, confirm_delete_expense_month)

# ------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã –ø–æ –≥–æ–¥—É) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "Del —Ç—Ä–∞—Ç—ã (–≥–æ–¥)")
@check_function_state_decorator('Del —Ç—Ä–∞—Ç—ã (–≥–æ–¥)')
@track_usage('Del —Ç—Ä–∞—Ç—ã (–≥–æ–¥)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_expense_by_year(message):
    user_id = str(message.from_user.id)

    user_data = load_expense_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå ‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (–ì–ì–ì–ì) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç –∑–∞ —ç—Ç–æ—Ç –≥–æ–¥:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_delete_expense_by_year)

@text_only_handler
def process_delete_expense_by_year(message):
    user_id = str(message.from_user.id)
    year_input = message.text.strip()

    if year_input == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if year_input == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_menu(message)
        return

    if not year_input.isdigit() or len(year_input) != 4 or not (2000 <= int(year_input) <= 3000):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì (2000-3000)!", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_delete_expense_by_year)
        return

    year = int(year_input)

    user_data = load_expense_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    try:
        transport_info = selected_transport.split(" ")
        if len(transport_info) < 3:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        selected_brand = transport_info[0].strip()
        selected_model = transport_info[1].strip()
        selected_license_plate = transport_info[2].strip().replace("(", "").replace(")", "")
    except (ValueError, IndexError) as e:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    expense = user_data.get(str(user_id), {}).get("expense", [])

    if not expense:
        bot.send_message(
            user_id, f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç –∑–∞ *{year}* –≥–æ–¥!",parse_mode="Markdown")
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    expense_to_delete = []
    for index, exp in enumerate(expense, start=1):
        expense_date = exp.get("date", "")
        if not expense_date or len(expense_date.split(".")) != 3:
            continue
        try:
            expense_day, expense_month, expense_year = map(int, expense_date.split("."))
            transport = exp.get("transport", {})
            if not all(k in transport for k in ['brand', 'model', 'license_plate']):
                continue
            if (expense_year == year and
                transport['brand'] == selected_brand and
                transport['model'] == selected_model and
                transport['license_plate'] == selected_license_plate):
                expense_to_delete.append((index, exp))
        except (ValueError, TypeError) as e:
            continue

    if expense_to_delete:
        expense_to_delete_dict[user_id] = expense_to_delete
        expense_list_text = f"–°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞ *{year}* –≥–æ–¥:\n\n"
        for index, exp in expense_to_delete:
            expense_name = exp.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            expense_date = exp.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            expense_list_text += f"üìÑ ‚Ññ{index}. {expense_name} - ({expense_date})\n\n"
        expense_list_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        send_long_message(user_id, expense_list_text)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.register_next_step_handler(message, confirm_delete_expense_year)
    else:
        bot.send_message(
            user_id, f"‚ùå –ó–∞ *{year}* –≥–æ–¥ —Ç—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", parse_mode="Markdown")
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)

@text_only_handler
def confirm_delete_expense_year(message):
    user_id = str(message.from_user.id)
    selected_option = message.text.strip()

    if selected_option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in expense_to_delete_dict:
            del expense_to_delete_dict[user_id]
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if selected_option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in expense_to_delete_dict:
            del expense_to_delete_dict[user_id]
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_menu(message)
        return

    expense_to_delete = expense_to_delete_dict.get(user_id, [])
    if not expense_to_delete:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –≥–æ–¥—É!", parse_mode="Markdown")
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    try:
        indices = [int(num.strip()) - 1 for num in selected_option.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(expense_to_delete):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup, parse_mode="Markdown")
            bot.register_next_step_handler(msg, confirm_delete_expense_year)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(user_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")

        valid_indices.sort(reverse=True)
        deleted_expense_names = []
        user_data = load_expense_data(user_id).get(str(user_id), {})
        user_expense = user_data.get("expense", [])

        for index in valid_indices:
            _, deleted_expense = expense_to_delete.pop(index)
            deleted_expense_names.append(deleted_expense.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').lower())
            if deleted_expense in user_expense:
                user_expense.remove(deleted_expense)

        user_data["expense"] = user_expense
        save_expense_data(user_id, {str(user_id): user_data})
        update_excel_file_expense(user_id)

        bot.send_message(user_id, f"‚úÖ –¢—Ä–∞—Ç—ã *{', '.join(deleted_expense_names)}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")

        if not expense_to_delete:
            if user_id in expense_to_delete_dict:
                del expense_to_delete_dict[user_id]
            if user_id in selected_transports:
                del selected_transports[user_id]
        else:
            expense_to_delete_dict[user_id] = expense_to_delete

        return_to_expense_and_repairs(message)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(msg, confirm_delete_expense_year)

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã –ø–æ –≤—Å–µ –≤—Ä–µ–º—è) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "Del —Ç—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
@check_function_state_decorator('Del —Ç—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')
@track_usage('Del —Ç—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_all_expense_for_selected_transport(message):
    user_id = str(message.from_user.id)

    user_data = load_expense_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    bot.send_message(user_id, f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç—Ä–∞—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}*?\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–¥–∞* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–Ω–µ—Ç* –¥–ª—è –æ—Ç–º–µ–Ω—ã", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, confirm_delete_all_expense)

@text_only_handler
def confirm_delete_all_expense(message):
    user_id = str(message.from_user.id)
    response = message.text.strip().lower()

    if response == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if response == "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_menu(message)
        return

    user_data = load_expense_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    try:
        transport_info = selected_transport.split(" ")
        if len(transport_info) < 3:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        selected_brand = transport_info[0].strip()
        selected_model = transport_info[1].strip()
        selected_license_plate = transport_info[2].strip().replace("(", "").replace(")", "")
    except (ValueError, IndexError) as e:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    if response == "–¥–∞":
        expense = user_data.get(str(user_id), {}).get("expense", [])
        if not expense:
            bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", parse_mode="Markdown")
            if user_id in selected_transports:
                del selected_transports[user_id]
            return_to_expense_and_repairs(message)
            return

        expense_to_keep = []
        for exp in expense:
            transport = exp.get("transport", {})
            if not all(k in transport for k in ['brand', 'model', 'license_plate']):
                expense_to_keep.append(exp)
                continue
            if not (transport['brand'] == selected_brand and
                    transport['model'] == selected_model and
                    transport['license_plate'] == selected_license_plate):
                expense_to_keep.append(exp)

        user_data[str(user_id)] = user_data.get(str(user_id), {})
        user_data[str(user_id)]["expense"] = expense_to_keep
        save_expense_data(user_id, user_data)
        update_excel_file_expense(user_id)

        bot.send_message(user_id, f"‚úÖ –í—Å–µ —Ç—Ä–∞—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")
    elif response == "–Ω–µ—Ç":
        bot.send_message(user_id, "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω–æ!", parse_mode="Markdown")
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–î–∞", "–ù–µ—Ç")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–¥–∞* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–Ω–µ—Ç* –¥–ª—è –æ—Ç–º–µ–Ω—ã", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, confirm_delete_all_expense)
        return

    if user_id in selected_transports:
        del selected_transports[user_id]
    return_to_expense_and_repairs(message)

def update_excel_file_expense(user_id):
    user_id = str(user_id)
    user_data = load_expense_data(user_id).get(user_id, {})
    expense = user_data.get("expense", [])
    excel_file_path = os.path.join("data", "user", "expenses_and_repairs", "expenses", "excel", f"{user_id}_expenses.xlsx")

    try:
        if not os.path.exists(excel_file_path):
            workbook = openpyxl.Workbook()
            workbook.remove(workbook.active)
        else:
            workbook = load_workbook(excel_file_path)

        headers = ["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]
        summary_sheet = workbook["Summary"] if "Summary" in workbook.sheetnames else workbook.create_sheet("Summary")

        if summary_sheet.max_row > 1:
            summary_sheet.delete_rows(2, summary_sheet.max_row - 1)
        if summary_sheet.max_row == 0:
            summary_sheet.append(headers)
            for cell in summary_sheet[1]:
                cell.font = Font(bold=True)
                cell.alignment = Alignment(horizontal="center")

        unique_transports = set()
        valid_expenses = []
        for exp in expense:
            transport = exp.get("transport", {})
            if not all(k in transport for k in ['brand', 'model', 'license_plate']):
                continue
            unique_transports.add((transport["brand"], transport["model"], transport["license_plate"]))
            valid_expenses.append(exp)

        for exp in valid_expenses:
            transport = exp["transport"]
            row_data = [
                f"{transport['brand']} {transport['model']} ({transport['license_plate']})",
                exp.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                exp.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                exp.get("date", ""),
                float(exp.get("amount", 0)),
                exp.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"),
            ]
            summary_sheet.append(row_data)

        for sheet_name in workbook.sheetnames:
            if sheet_name != "Summary":
                try:
                    brand, model, license_plate = sheet_name.split('_')
                    if (brand, model, license_plate) not in unique_transports:
                        del workbook[sheet_name]
                except ValueError:
                    continue

        for brand, model, license_plate in unique_transports:
            sheet_name = f"{brand}_{model}_{license_plate}"[:31]
            transport_sheet = workbook[sheet_name] if sheet_name in workbook.sheetnames else workbook.create_sheet(sheet_name)

            if transport_sheet.max_row > 1:
                transport_sheet.delete_rows(2, transport_sheet.max_row - 1)
            if transport_sheet.max_row == 0:
                transport_sheet.append(headers)
                for cell in transport_sheet[1]:
                    cell.font = Font(bold=True)
                    cell.alignment = Alignment(horizontal="center")

            for exp in valid_expenses:
                transport = exp["transport"]
                if (transport["brand"], transport["model"], transport["license_plate"]) == (brand, model, license_plate):
                    row_data = [
                        f"{brand} {model} ({license_plate})",
                        exp.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                        exp.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                        exp.get("date", ""),
                        float(exp.get("amount", 0)),
                        exp.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"),
                    ]
                    transport_sheet.append(row_data)

        for sheet in workbook:
            for col in sheet.columns:
                max_length = max(len(str(cell.value)) for cell in col if cell.value) + 2
                sheet.column_dimensions[get_column_letter(col[0].column)].width = max_length

        workbook.save(excel_file_path)
        workbook.close()

    except Exception as e:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞ —Ç—Ä–∞—Ç!", parse_mode="Markdown")

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—Ä–µ–º–æ–Ω—Ç—ã) ---------------------------------------------------

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_BASE_DIR = os.path.join(BASE_DIR, "data", "user", "expenses_and_repairs")
REPAIRS_DIR = os.path.join(DATA_BASE_DIR, "repairs")

def ensure_directories():
    os.makedirs(REPAIRS_DIR, exist_ok=True)
    os.makedirs(os.path.join(REPAIRS_DIR, "excel"), exist_ok=True)

ensure_directories()

user_transport = {}  

def format_transport_string(transport):
    if isinstance(transport, dict):
        return f"{transport.get('brand', '').strip()} {transport.get('model', '').strip()} ({transport.get('license_plate', '').strip()})".lower()
    return transport.strip().lower()

def save_repair_data(user_id, user_data, selected_transport=None):
    ensure_directories()
    
    file_path = os.path.join(REPAIRS_DIR, f"{user_id}_repairs.json")
    
    current_data = load_repair_data(user_id)
    
    if selected_transport:
        current_data["selected_transport"] = selected_transport
    else:
        current_data.setdefault("selected_transport", "")
    
    current_data.setdefault("user_categories", [])
    if "user_categories" in user_data:
        current_data["user_categories"] = user_data["user_categories"]
    
    current_data[str(user_id)] = user_data.get(str(user_id), {"repairs": []})
    
    with open(file_path, "w", encoding="utf-8") as file:
        json.dump(current_data, file, ensure_ascii=False, indent=4)

def load_repair_data(user_id):
    ensure_directories()
    
    file_path = os.path.join(REPAIRS_DIR, f"{user_id}_repairs.json")
    
    if not os.path.exists(file_path):
        return {"user_categories": [], "selected_transport": "", str(user_id): {"repairs": []}}
    
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            data = json.load(file)
            data.setdefault("user_categories", [])
            data.setdefault("selected_transport", "")
            data.setdefault(str(user_id), {"repairs": []})
            return data
    except Exception as e:
        return {"user_categories": [], "selected_transport": "", str(user_id): {"repairs": []}}

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–º–æ–Ω—Ç) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–º–æ–Ω—Ç")
@check_function_state_decorator('–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–º–æ–Ω—Ç')
@track_usage('–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–º–æ–Ω—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def record_repair(message):
    user_id = message.from_user.id
    
    markup = get_user_transport_keyboard(user_id)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–º–æ–Ω—Ç–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_transport_selection_for_repair)

@text_only_handler
def handle_transport_selection_for_repair(message):
    user_id = message.from_user.id
    selected_transport = message.text.strip()
    
    if selected_transport == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return
    if selected_transport == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if selected_transport == "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        add_transport(message)
        return
    
    transports = load_transport_data(user_id)
    for transport in transports:
        formatted_transport = f"{transport['brand']} {transport['model']} ({transport['license_plate']})"
        if formatted_transport == selected_transport:
            brand, model, license_plate = transport['brand'], transport['model'], transport['license_plate']
            save_repair_data(user_id, load_repair_data(user_id), selected_transport)
            process_category_selection_repair(user_id, brand, model, license_plate)
            return
    
    bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="Markdown")
    markup = get_user_transport_keyboard(user_id)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_transport_selection_for_repair)

def process_category_selection_repair(user_id, brand, model, license_plate):
    categories = get_user_repair_categories(user_id)
    
    system_emoji = "üîπ"
    user_emoji = "üî∏"
    
    category_list = "\n".join(
        f"{system_emoji if i < 7 else user_emoji} {i + 1}. {category}"
        for i, category in enumerate(categories)
    )
    category_list = f"*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*\n\n{category_list}"
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(
        types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"),
        types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    )
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    message = bot.send_message(user_id, category_list, reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, partial(get_repair_category, brand=brand, model=model, license_plate=license_plate))

def get_user_repair_categories(user_id):
    data = load_repair_data(user_id)
    system_categories = ["–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–¢–û", "–†–µ–º–æ–Ω—Ç", "–ó–∞–ø—á–∞—Å—Ç—å", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞", "–ö—É–∑–æ–≤"]
    user_categories = data.get("user_categories", [])
    return system_categories + user_categories

def add_repair_category(user_id, new_category):
    data = load_repair_data(user_id)
    data.setdefault("user_categories", [])
    if new_category not in data["user_categories"]:
        data["user_categories"].append(new_category)
        save_repair_data(user_id, data)
        return True
    return False

def remove_repair_category(user_id, category_to_remove):
    data = load_repair_data(user_id)
    if "user_categories" in data and category_to_remove in data["user_categories"]:
        data["user_categories"].remove(category_to_remove)
        save_repair_data(user_id, data)
        return True
    return False

@text_only_handler
def get_repair_category(message, brand, model, license_plate):
    user_id = message.from_user.id
    selected_index = message.text.strip()
    
    if selected_index == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return
    if selected_index == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if selected_index == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, partial(add_new_repair_category, brand=brand, model=model, license_plate=license_plate))
        return
    if selected_index == "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        handle_repair_category_removal(message, brand, model, license_plate)
        return
    
    if selected_index.isdigit():
        index = int(selected_index) - 1
        categories = get_user_repair_categories(user_id)
        if 0 <= index < len(categories):
            selected_category = categories[index]
            proceed_to_repair_name(message, selected_category, brand, model, license_plate)
        else:
            bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="Markdown")
            process_category_selection_repair(user_id, brand, model, license_plate)
    else:
        bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!", parse_mode="Markdown")
        process_category_selection_repair(user_id, brand, model, license_plate)

@text_only_handler
def add_new_repair_category(message, brand, model, license_plate):
    user_id = message.from_user.id
    new_category = message.text.strip()
    
    if new_category in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if new_category == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_expense_and_repairs(message)
        else:
            return_to_menu(message)
        return
    
    if not new_category:
        bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!", parse_mode="Markdown")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.register_next_step_handler(message, partial(add_new_repair_category, brand=brand, model=model, license_plate=license_plate))
        return
    
    system_categories = ["–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–¢–û", "–†–µ–º–æ–Ω—Ç", "–ó–∞–ø—á–∞—Å—Ç—å", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞", "–ö—É–∑–æ–≤"]
    if new_category in system_categories or new_category in get_user_repair_categories(user_id):
        bot.send_message(user_id, f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è *{new_category}* —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", parse_mode="Markdown")
    else:
        if add_repair_category(user_id, new_category):
            bot.send_message(user_id, f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è *{new_category}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", parse_mode="Markdown")
        else:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{new_category}*!", parse_mode="Markdown")
    
    process_category_selection_repair(user_id, brand, model, license_plate)

@text_only_handler
def handle_repair_category_removal(message, brand, model, license_plate):
    user_id = message.from_user.id
    categories = get_user_repair_categories(user_id)
    system_categories = ["–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–¢–û", "–†–µ–º–æ–Ω—Ç", "–ó–∞–ø—á–∞—Å—Ç—å", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞", "–ö—É–∑–æ–≤"]
    user_categories = [cat for cat in categories if cat not in system_categories]
    
    if not user_categories:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", parse_mode="Markdown")
        process_category_selection_repair(user_id, brand, model, license_plate)
        return
    
    user_emoji = "üî∏"
    
    category_list = "\n".join(
        f"{user_emoji} {i + 1}. {category}"
        for i, category in enumerate(user_categories)
    )
    bot.send_message(user_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã:\n\n{category_list}", parse_mode="Markdown")
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("0"))
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    bot.register_next_step_handler(message, partial(remove_repair_category_handler, user_categories=user_categories, brand=brand, model=model, license_plate=license_plate))

@text_only_handler
def remove_repair_category_handler(message, user_categories, brand, model, license_plate):
    user_id = message.from_user.id
    selected_index = message.text.strip()
    
    if selected_index == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return
    if selected_index == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if selected_index == "0":
        process_category_selection_repair(user_id, brand, model, license_plate)
        return
    
    if selected_index.isdigit():
        index = int(selected_index) - 1
        if 0 <= index < len(user_categories):
            category_to_remove = user_categories[index]
            if remove_repair_category(user_id, category_to_remove):
                bot.send_message(user_id, f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è *{category_to_remove}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", parse_mode="Markdown")
            else:
                bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category_to_remove}*!", parse_mode="Markdown")
            process_category_selection_repair(user_id, brand, model, license_plate)
        else:
            bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="Markdown")
            handle_repair_category_removal(message, brand, model, license_plate)
    else:
        bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ 0!", parse_mode="Markdown")
        handle_repair_category_removal(message, brand, model, license_plate)

@text_only_handler
def proceed_to_repair_name(message, selected_category, brand, model, license_plate):
    user_id = message.from_user.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, partial(get_repair_name, selected_category=selected_category, brand=brand, model=model, license_plate=license_plate))

@text_only_handler
def get_repair_name(message, selected_category, brand, model, license_plate):
    user_id = message.from_user.id
    repair_name = message.text.strip()
    
    if repair_name in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if repair_name == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_expense_and_repairs(message)
        else:
            return_to_menu(message)
        return
    
    if not repair_name:
        bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞!", parse_mode="Markdown")
        proceed_to_repair_name(message, selected_category, brand, model, license_plate)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"))
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:", reply_markup=markup)
    bot.register_next_step_handler(message, partial(get_repair_description, selected_category=selected_category, repair_name=repair_name, brand=brand, model=model, license_plate=license_plate))

@text_only_handler
def get_repair_description(message, selected_category, repair_name, brand, model, license_plate):
    user_id = message.from_user.id
    repair_description = message.text.strip() if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ" else ""
    
    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_expense_and_repairs(message)
        else:
            return_to_menu(message)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–º–æ–Ω—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=markup)
    bot.register_next_step_handler(message, partial(get_repair_date, selected_category=selected_category, repair_name=repair_name, repair_description=repair_description, brand=brand, model=model, license_plate=license_plate))

def is_valid_date(date_str):
    pattern = r'^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.(2000|20[0-2][0-9])$'
    return bool(re.match(pattern, date_str))

@text_only_handler
def get_repair_date(message, selected_category, repair_name, repair_description, brand, model, license_plate):
    user_id = message.from_user.id
    repair_date = message.text.strip()
    
    if repair_date in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if repair_date == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_expense_and_repairs(message)
        else:
            return_to_menu(message)
        return
    
    if not is_valid_date(repair_date):
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.", parse_mode="Markdown")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.register_next_step_handler(message, partial(get_repair_date, selected_category=selected_category, repair_name=repair_name, repair_description=repair_description, brand=brand, model=model, license_plate=license_plate))
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–µ–º–æ–Ω—Ç–∞:", reply_markup=markup)
    bot.register_next_step_handler(
        message,
        partial(
            save_repair_data_final,
            selected_category=selected_category,
            repair_name=repair_name,
            repair_description=repair_description,
            repair_date=repair_date,
            brand=brand,
            model=model,
            license_plate=license_plate,
            selected_transport=f"{brand} {model} ({license_plate})"
        )
    )

@text_only_handler
def save_repair_data_final(message, selected_category, repair_name, repair_description, repair_date, brand, model, license_plate, selected_transport):
    user_id = message.from_user.id
    repair_amount = message.text.strip()
    
    if repair_amount in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if repair_amount == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_expense_and_repairs(message)
        else:
            return_to_menu(message)
        return
    
    try:
        repair_amount = float(repair_amount)
        if repair_amount < 0:
            raise ValueError("–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
        
        repair_data = {
            "category": selected_category,
            "name": repair_name,
            "date": repair_date,
            "amount": repair_amount,
            "description": repair_description,
            "transport": {
                "brand": brand,
                "model": model,
                "license_plate": license_plate
            }
        }
        
        user_data = load_repair_data(user_id)
        user_data.setdefault(str(user_id), {"repairs": []})
        user_data[str(user_id)]["repairs"].append(repair_data)
        
        save_repair_data(user_id, user_data, selected_transport)
        save_repair_to_excel(user_id, repair_data)
        
        bot.send_message(user_id, f"‚úÖ –†–µ–º–æ–Ω—Ç *{repair_name}* —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!", parse_mode="Markdown")
        return_to_expense_and_repairs(message)
    
    except ValueError:
        bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!", parse_mode="Markdown")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.register_next_step_handler(
            message,
            partial(
                save_repair_data_final,
                selected_category=selected_category,
                repair_name=repair_name,
                repair_description=repair_description,
                repair_date=repair_date,
                brand=brand,
                model=model,
                license_plate=license_plate,
                selected_transport=selected_transport
            )
        )

def save_repair_to_excel(user_id, repair_data):
    excel_path = os.path.join(REPAIRS_DIR, "excel", f"{user_id}_repairs.xlsx")
    
    try:
        if os.path.exists(excel_path):
            try:
                workbook = load_workbook(excel_path)
            except Exception:
                workbook = Workbook()
                workbook.remove(workbook.active)
        else:
            workbook = Workbook()
            workbook.remove(workbook.active)
        
        if "Summary" not in workbook.sheetnames:
            summary_sheet = workbook.create_sheet("Summary")
        else:
            summary_sheet = workbook["Summary"]
        
        transport_sheet_name = f"{repair_data['transport']['brand']}_{repair_data['transport']['model']}_{repair_data['transport']['license_plate']}"[:31]
        if transport_sheet_name not in workbook.sheetnames:
            transport_sheet = workbook.create_sheet(transport_sheet_name)
        else:
            transport_sheet = workbook[transport_sheet_name]
        
        headers = ["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]
        
        def setup_sheet(sheet):
            if sheet.max_row == 0 or sheet[1][0].value != headers[0]:
                sheet.append(headers)
                for cell in sheet[1]:
                    cell.font = Font(bold=True)
                    cell.alignment = Alignment(horizontal="center")
        
        for sheet in [summary_sheet, transport_sheet]:
            setup_sheet(sheet)
            row_data = [
                f"{repair_data['transport']['brand']} {repair_data['transport']['model']} ({repair_data['transport']['license_plate']})",
                repair_data["category"],
                repair_data["name"],
                repair_data["date"],
                float(repair_data["amount"]),
                repair_data["description"],
            ]
            sheet.append(row_data)
        
        for sheet in [summary_sheet, transport_sheet]:
            for col in sheet.columns:
                max_length = max(len(str(cell.value)) for cell in col if cell.value)
                sheet.column_dimensions[get_column_letter(col[0].column)].width = max_length + 2
        
        workbook.save(excel_path)
        workbook.close()
    
    except Exception as e:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Excel!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã) ---------------------------------------------------

selected_repair_transport_dict = {}

def filter_repairs_by_transport(user_id, repairs):
    selected_transport = selected_repair_transport_dict.get(user_id, load_repair_data(user_id).get("selected_transport", ""))
    if not selected_transport:
        return repairs
    
    selected_transport = format_transport_string(selected_transport)
    
    filtered_repairs = [
        repair for repair in repairs
        if format_transport_string(repair.get("transport", {})) == selected_transport
    ]
    return filtered_repairs

def send_repair_menu(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–†–µ–º–æ–Ω—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)"), types.KeyboardButton("–†–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)"))
    markup.add(types.KeyboardButton("–†–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)"), types.KeyboardButton("–†–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)"))
    markup.add(types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –≤ EXCEL"))
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã")
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_repairs(message):
    user_id = message.from_user.id
    transport_list = load_transport_data(user_id)
    
    if not transport_list:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"))
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
        bot.send_message(user_id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?", reply_markup=markup)
        bot.register_next_step_handler(message, ask_add_transport)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    transport_buttons = [
        types.KeyboardButton(f"{transport['brand']} {transport['model']} ({transport['license_plate']})")
        for transport in transport_list
    ]
    for i in range(0, len(transport_buttons), 2):
        markup.add(*transport_buttons[i:i+2])
    
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_transport_selection_for_repairs)

@text_only_handler
def handle_transport_selection_for_repairs(message):
    user_id = message.from_user.id
    selected_transport = message.text.strip()
    
    if selected_transport == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return
    if selected_transport == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    transport_list = load_transport_data(user_id)
    if selected_transport not in [f"{t['brand']} {t['model']} ({t['license_plate']})" for t in transport_list]:
        bot.send_message(user_id, "‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="Markdown")
        view_repairs(message)
        return
    
    selected_repair_transport_dict[user_id] = selected_transport
    save_repair_data(user_id, load_repair_data(user_id), selected_transport)
    
    bot.send_message(user_id, f"üëÄ –ü–æ–∫–∞–∑—ã–≤–∞—é —Ä–µ–º–æ–Ω—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: *{selected_transport}*", parse_mode="Markdown")
    send_repair_menu(user_id)

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –≤ excel) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –≤ EXCEL")
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –≤ EXCEL')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –≤ EXCEL')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def send_repairs_excel(message):
    user_id = message.from_user.id
    excel_path = os.path.join(REPAIRS_DIR, "excel", f"{user_id}_repairs.xlsx")
    
    if not os.path.exists(excel_path):
        bot.send_message(user_id, "‚ùå –§–∞–π–ª —Å –≤–∞—à–∏–º–∏ —Ä–µ–º–æ–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
        return
    
    try:
        with open(excel_path, 'rb') as excel_file:
            bot.send_document(user_id, excel_file)
    except Exception as e:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ Excel!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–µ–º–æ–Ω—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)")
@check_function_state_decorator('–†–µ–º–æ–Ω—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)')
@track_usage('–†–µ–º–æ–Ω—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_repairs_by_category(message):
    user_id = message.from_user.id
    user_data = load_repair_data(user_id)
    repairs = user_data.get(str(user_id), {}).get("repairs", [])
    
    filtered_repairs = filter_repairs_by_transport(user_id, repairs)
    categories = sorted(set(repair["category"] for repair in filtered_repairs))
    
    if not categories:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        send_repair_menu(user_id)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*[types.KeyboardButton(category) for category in categories])
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_repair_category_selection)

@text_only_handler
def handle_repair_category_selection(message):
    user_id = message.from_user.id
    selected_category = message.text.strip()
    
    if selected_category in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if selected_category == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_expense_and_repairs(message)
        else:
            return_to_menu(message)
        return
    
    user_data = load_repair_data(user_id)
    repairs = user_data.get(str(user_id), {}).get("repairs", [])
    filtered_repairs = filter_repairs_by_transport(user_id, repairs)
    
    category_repairs = [repair for repair in filtered_repairs if repair["category"] == selected_category]
    
    if not category_repairs:
        bot.send_message(user_id, f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category}* —Ä–µ–º–æ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", parse_mode="Markdown")
        send_repair_menu(user_id)
        return
    
    total_repairs_amount = 0
    repair_details = []
    
    for index, repair in enumerate(category_repairs, start=1):
        repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        repair_date = repair.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        repair_amount = float(repair.get("amount", 0))
        total_repairs_amount += repair_amount
        
        repair_details.append(
            f"üîß *‚Ññ {index}*\n\n"
            f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {repair['category']}\n"
            f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {repair_name}\n"
            f"üìÖ *–î–∞—Ç–∞:* {repair_date}\n"
            f"üí∞ *–°—É–º–º–∞:* {repair_amount:.2f} —Ä—É–±.\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {repair.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
        )
    
    message_text = f"*–†–µ–º–æ–Ω—Ç—ã* –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category}*:\n\n" + "\n\n".join(repair_details)
    send_message_with_split(user_id, message_text, parse_mode="Markdown")
    bot.send_message(
        user_id,
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category}*: *{total_repairs_amount:.2f}* —Ä—É–±.",
        parse_mode="Markdown"
    )
    
    send_repair_menu(user_id)

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –º–µ—Å—è—Ü—É) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)")
@check_function_state_decorator('–†–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)')
@track_usage('–†–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_repairs_by_month(message):
    user_id = message.from_user.id
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ (–ú–ú.–ì–ì–ì–ì) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, get_repairs_by_month)

@text_only_handler
def get_repairs_by_month(message):
    user_id = message.from_user.id
    date = message.text.strip()
    
    if date == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return
    if date == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    match = re.match(r"^(0[1-9]|1[0-2])\.(20[0-9]{2})$", date)
    if not match:
        bot.send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì!", parse_mode="Markdown")
        bot.register_next_step_handler(message, get_repairs_by_month)
        return
    
    month, year = match.groups()
    
    user_data = load_repair_data(user_id)
    repairs = user_data.get(str(user_id), {}).get("repairs", [])
    filtered_repairs = filter_repairs_by_transport(user_id, repairs)
    
    total_repairs = 0
    repair_details = []
    
    for index, repair in enumerate(filtered_repairs, start=1):
        repair_date = repair.get("date", "")
        if repair_date and repair_date.split(".")[1:3] == [month, year]:
            amount = float(repair.get("amount", 0))
            total_repairs += amount
            
            repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            description = repair.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
            category = repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            
            repair_details.append(
                f"üîß *‚Ññ {index}*\n\n"
                f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
                f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {repair_name}\n"
                f"üìÖ *–î–∞—Ç–∞:* {repair_date}\n"
                f"üí∞ *–°—É–º–º–∞:* {amount:.2f} —Ä—É–±.\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
            )
    
    if repair_details:
        message_text = f"*–†–µ–º–æ–Ω—Ç—ã* –∑–∞ *{date}* –º–µ—Å—è—Ü:\n\n" + "\n\n".join(repair_details)
        send_message_with_split(user_id, message_text, parse_mode="Markdown")
        bot.send_message(user_id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ *{date}* –º–µ—Å—è—Ü: *{total_repairs:.2f}* —Ä—É–±.", parse_mode="Markdown")
    else:
        bot.send_message(user_id, f"‚ùå –ó–∞ *{date}* –º–µ—Å—è—Ü —Ä–µ–º–æ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", parse_mode="Markdown")
    
    send_repair_menu(user_id)

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –≥–æ–¥—É) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)")
@check_function_state_decorator('–†–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)')
@track_usage('–†–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_repairs_by_year(message):
    user_id = message.from_user.id
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (–ì–ì–ì–ì) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, get_repairs_by_year)

@text_only_handler
def get_repairs_by_year(message):
    user_id = message.from_user.id
    year = message.text.strip()
    
    if year == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return
    if year == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    if not re.match(r"^(20[0-9]{2})$", year):
        bot.send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì!", parse_mode="Markdown")
        bot.register_next_step_handler(message, get_repairs_by_year)
        return
    
    user_data = load_repair_data(user_id)
    repairs = user_data.get(str(user_id), {}).get("repairs", [])
    filtered_repairs = filter_repairs_by_transport(user_id, repairs)
    
    total_repairs = 0
    repair_details = []
    
    for index, repair in enumerate(filtered_repairs, start=1):
        repair_date = repair.get("date", "")
        if repair_date and repair_date.split(".")[-1] == year:
            amount = float(repair.get("amount", 0))
            total_repairs += amount
            
            repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            description = repair.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
            category = repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            
            repair_details.append(
                f"üîß *‚Ññ {index}*\n\n"
                f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
                f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {repair_name}\n"
                f"üìÖ *–î–∞—Ç–∞:* {repair_date}\n"
                f"üí∞ *–°—É–º–º–∞:* {amount:.2f} —Ä—É–±.\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
            )
    
    if repair_details:
        message_text = f"*–†–µ–º–æ–Ω—Ç—ã* –∑–∞ *{year}* –≥–æ–¥:\n\n" + "\n\n".join(repair_details)
        send_message_with_split(user_id, message_text, parse_mode="Markdown")
        bot.send_message(user_id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ *{year}* –≥–æ–¥: *{total_repairs:.2f}* —Ä—É–±.", parse_mode="Markdown")
    else:
        bot.send_message(user_id, f"‚ùå –ó–∞ *{year}* –≥–æ–¥ —Ä–µ–º–æ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", parse_mode="Markdown")
    
    send_repair_menu(user_id)

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –≤—Å–µ –≤—Ä–µ–º—è) -------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
@check_function_state_decorator('–†–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')
@track_usage('–†–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_all_repairs(message):
    user_id = message.from_user.id
    user_data = load_repair_data(user_id)
    repairs = user_data.get(str(user_id), {}).get("repairs", [])
    filtered_repairs = filter_repairs_by_transport(user_id, repairs)
    
    total_repairs = 0
    repair_details = []
    
    for index, repair in enumerate(filtered_repairs, start=1):
        amount = float(repair.get("amount", 0))
        total_repairs += amount
        
        repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        repair_date = repair.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        description = repair.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
        category = repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        
        repair_details.append(
            f"üîß *‚Ññ {index}*\n\n"
            f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
            f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {repair_name}\n"
            f"üìÖ *–î–∞—Ç–∞:* {repair_date}\n"
            f"üí∞ *–°—É–º–º–∞:* {amount:.2f} —Ä—É–±.\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
        )
    
    if repair_details:
        message_text = "*–í—Å–µ —Ä–µ–º–æ–Ω—Ç—ã*:\n\n" + "\n\n".join(repair_details)
        send_message_with_split(user_id, message_text, parse_mode="Markdown")
        bot.send_message(user_id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤: *{total_repairs:.2f}* —Ä—É–±.", parse_mode="Markdown")
    else:
        bot.send_message(user_id, "‚ùå –†–µ–º–æ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", parse_mode="Markdown")
    
    send_repair_menu(user_id)

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã) -------------------------------------------------

selected_repair_transports = {}
repairs_to_delete_dict = {}
selected_repair_categories = {}
user_repairs_to_delete = {}

MAX_MESSAGE_LENGTH = 4096

def send_message_with_split(user_id, text, parse_mode=None):
    while len(text) > MAX_MESSAGE_LENGTH:
        bot.send_message(user_id, text[:MAX_MESSAGE_LENGTH], parse_mode=parse_mode)
        text = text[MAX_MESSAGE_LENGTH:]
    bot.send_message(user_id, text, parse_mode=parse_mode)

def format_transport_string(transport):
    if isinstance(transport, dict):
        return f"{transport.get('brand', '')} {transport.get('model', '')} ({transport.get('license_plate', '')})"
    parts = transport.split(" ")
    if len(parts) < 3:
        return None
    brand = parts[0]
    model = parts[1]
    license_plate = parts[2].strip("()")
    return {"brand": brand, "model": model, "license_plate": license_plate}

def filter_repairs_by_transport(user_id, repairs):
    selected_transport = selected_repair_transports.get(user_id) or load_repair_data(user_id).get("selected_transport", "")
    if not selected_transport:
        return []
    transport_dict = format_transport_string(selected_transport)
    if not transport_dict:
        return []
    return [
        repair for repair in repairs
        if all(
            repair.get("transport", {}).get(key) == transport_dict[key]
            for key in ["brand", "model", "license_plate"]
        )
    ]

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã")
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã')
@track_usage('–£–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def initiate_delete_repairs(message):
    user_id = str(message.from_user.id)
    
    transport_data = load_transport_data(user_id)
    if not transport_data:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?", reply_markup=markup)
        bot.register_next_step_handler(message, ask_add_transport)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    transport_buttons = [
        f"{transport['brand']} {transport['model']} ({transport['license_plate']})"
        for transport in transport_data
    ]
    for i in range(0, len(transport_buttons), 2):
        markup.row(*transport_buttons[i:i + 2])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_repair_transport_selection_for_deletion)

@text_only_handler
def handle_repair_transport_selection_for_deletion(message):
    user_id = str(message.from_user.id)
    selected_transport = message.text.strip()
    
    if selected_transport == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if selected_transport == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_menu(message)
        return
    
    transport_data = load_transport_data(user_id)
    transport_exists = any(
        f"{t['brand']} {t['model']} ({t['license_plate']})" == selected_transport
        for t in transport_data
    )
    if not transport_exists:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        transport_buttons = [
            f"{t['brand']} {t['model']} ({t['license_plate']})"
            for t in transport_data
        ]
        for i in range(0, len(transport_buttons), 2):
            markup.row(*transport_buttons[i:i + 2])
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown", reply_markup=markup)
        bot.register_next_step_handler(message, handle_repair_transport_selection_for_deletion)
        return
    
    selected_repair_transports[user_id] = selected_transport
    user_data = load_repair_data(user_id)
    user_data["selected_transport"] = selected_transport
    save_repair_data(user_id, user_data)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("Del —Ä–µ–º–æ–Ω—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)", "Del —Ä–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)")
    markup.add("Del —Ä–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)", "Del —Ä–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_repair_deletion_option)

@text_only_handler
def handle_repair_deletion_option(message):
    user_id = str(message.from_user.id)
    option = message.text.strip()
    
    if option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_menu(message)
        return
    
    selected_transport = selected_repair_transports.get(user_id, "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    if option == "Del —Ä–µ–º–æ–Ω—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)":
        delete_repairs_by_category(message)
    elif option == "Del —Ä–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)":
        delete_repairs_by_month(message)
    elif option == "Del —Ä–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)":
        delete_repairs_by_year(message)
    elif option == "Del —Ä–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)":
        delete_all_repairs_for_selected_transport(message)
    else:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        initiate_delete_repairs(message)

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏) -------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "Del —Ä–µ–º–æ–Ω—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)")
@check_function_state_decorator('Del —Ä–µ–º–æ–Ω—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)')
@track_usage('Del —Ä–µ–º–æ–Ω—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_repairs_by_category(message):
    user_id = str(message.from_user.id)
    user_data = load_repair_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    try:
        transport_dict = format_transport_string(selected_transport)
        if not transport_dict:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        selected_brand = transport_dict["brand"]
        selected_model = transport_dict["model"]
        selected_license_plate = transport_dict["license_plate"]
    except (ValueError, IndexError) as e:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    repairs = user_data.get(str(user_id), {}).get("repairs", [])
    filtered_repairs = filter_repairs_by_transport(user_id, repairs)
    
    if not filtered_repairs:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}*!", parse_mode="Markdown")
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    
    categories = sorted(set(repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") for repair in filtered_repairs))
    
    if not categories:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}*!", parse_mode="Markdown")
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    markup.add(*[types.KeyboardButton(category) for category in categories])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_repair_category_selection_for_deletion)

@text_only_handler
def handle_repair_category_selection_for_deletion(message):
    user_id = str(message.from_user.id)
    selected_category = message.text.strip()
    
    if selected_category == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_repair_categories:
            del selected_repair_categories[user_id]
        if user_id in user_repairs_to_delete:
            del user_repairs_to_delete[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if selected_category == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_repair_categories:
            del selected_repair_categories[user_id]
        if user_id in user_repairs_to_delete:
            del user_repairs_to_delete[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_menu(message)
        return
    
    user_data = load_repair_data(user_id)
    repairs = user_data.get(str(user_id), {}).get("repairs", [])
    filtered_repairs = filter_repairs_by_transport(user_id, repairs)
    
    if not any(repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") == selected_category for repair in filtered_repairs):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        categories = sorted(set(repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") for repair in filtered_repairs))
        markup.add(*[types.KeyboardButton(category) for category in categories])
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è *{selected_category}* –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", parse_mode="Markdown", reply_markup=markup)
        bot.register_next_step_handler(message, handle_repair_category_selection_for_deletion)
        return
    
    selected_repair_categories[user_id] = selected_category
    repairs_to_delete = [
        (index + 1, repair) for index, repair in enumerate(filtered_repairs)
        if repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") == selected_category
    ]
    
    if not repairs_to_delete:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category}* –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        if user_id in selected_repair_categories:
            del selected_repair_categories[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    
    repairs_to_delete_dict[user_id] = repairs_to_delete
    
    repair_list_text = f"–°–ø–∏—Å–æ–∫ —Ä–µ–º–æ–Ω—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category}*:\n\n"
    for index, repair in repairs_to_delete:
        repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        repair_date = repair.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        repair_list_text += f"üîß ‚Ññ{index}. {repair_name} - ({repair_date})\n"
    
    repair_list_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    send_message_with_split(user_id, repair_list_text, parse_mode="Markdown")
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    bot.register_next_step_handler(message, confirm_delete_repair_category)

@text_only_handler
def confirm_delete_repair_category(message):
    user_id = str(message.from_user.id)
    selected_option = message.text.strip()

    if selected_option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in repairs_to_delete_dict:
            del repairs_to_delete_dict[user_id]
        if user_id in selected_repair_categories:
            del selected_repair_categories[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if selected_option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in repairs_to_delete_dict:
            del repairs_to_delete_dict[user_id]
        if user_id in selected_repair_categories:
            del selected_repair_categories[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_menu(message)
        return
    if selected_option == "0":
        bot.send_message(user_id, "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!", parse_mode="Markdown")
        if user_id in repairs_to_delete_dict:
            del repairs_to_delete_dict[user_id]
        if user_id in selected_repair_categories:
            del selected_repair_categories[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    repairs_to_delete = repairs_to_delete_dict.get(user_id, [])
    if not repairs_to_delete:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!", parse_mode="Markdown")
        if user_id in selected_repair_categories:
            del selected_repair_categories[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    try:
        indices = [int(num.strip()) for num in selected_option.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if any(i == index for i, _ in repairs_to_delete):
                valid_indices.append(index)
            else:
                invalid_indices.append(index)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–º–æ–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup, parse_mode="Markdown")
            bot.register_next_step_handler(msg, confirm_delete_repair_category)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(user_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")

        deleted_repair_names = []
        user_data = load_repair_data(user_id)
        user_repairs = user_data.get(str(user_id), {}).get("repairs", [])

        for index in sorted(valid_indices, reverse=True):
            selected_repair = next((r for i, r in repairs_to_delete if i == index), None)
            if selected_repair:
                _, deleted_repair = selected_repair
                deleted_repair_names.append(deleted_repair.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                if deleted_repair in user_repairs:
                    user_repairs.remove(deleted_repair)
                repairs_to_delete.remove((index, deleted_repair))

        user_data[str(user_id)]["repairs"] = user_repairs
        save_repair_data(user_id, user_data)
        update_repairs_excel_file(user_id)

        bot.send_message(user_id, f"‚úÖ –†–µ–º–æ–Ω—Ç—ã *{', '.join(deleted_repair_names)}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")

        if not repairs_to_delete:
            if user_id in repairs_to_delete_dict:
                del repairs_to_delete_dict[user_id]
            if user_id in selected_repair_categories:
                del selected_repair_categories[user_id]
            if user_id in selected_repair_transports:
                del selected_repair_transports[user_id]
        else:
            repairs_to_delete_dict[user_id] = repairs_to_delete

        return_to_expense_and_repairs(message)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(msg, confirm_delete_repair_category)

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –º–µ—Å—è—Ü—É) -------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "Del —Ä–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)")
@check_function_state_decorator('Del —Ä–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)')
@track_usage('Del —Ä–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_repairs_by_month(message):
    user_id = str(message.from_user.id)
    
    user_data = load_repair_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ (–ú–ú.–ì–ì–ì–ì) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, delete_repairs_by_month_handler)

@text_only_handler
def delete_repairs_by_month_handler(message):
    user_id = str(message.from_user.id)
    month_year = message.text.strip()
    
    if month_year == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if month_year == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_menu(message)
        return
    
    match = re.match(r"^(0[1-9]|1[0-2])\.(20[0-9]{2}|2[1-9][0-9]{2}|3000)$", month_year)
    if not match:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id,"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì!", parse_mode="Markdown", reply_markup=markup)
        bot.register_next_step_handler(message, delete_repairs_by_month_handler)
        return
    
    selected_month, selected_year = map(int, match.groups())
    
    user_data = load_repair_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    try:
        transport_dict = format_transport_string(selected_transport)
        if not transport_dict:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        selected_brand = transport_dict["brand"]
        selected_model = transport_dict["model"]
        selected_license_plate = transport_dict["license_plate"]
    except (ValueError, IndexError) as e:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    repairs = user_data.get(str(user_id), {}).get("repairs", [])
    
    if not repairs:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}*!", parse_mode="Markdown")
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    
    repairs_to_delete = []
    for index, repair in enumerate(repairs, start=1):
        repair_date = repair.get("date", "")
        if not repair_date or len(repair_date.split(".")) != 3:
            continue
        try:
            day, month, year = map(int, repair_date.split("."))
            transport = repair.get("transport", {})
            if not all(k in transport for k in ["brand", "model", "license_plate"]):
                continue
            if (month == selected_month and
                year == selected_year and
                transport["brand"] == selected_brand and
                transport["model"] == selected_model and
                transport["license_plate"] == selected_license_plate):
                repairs_to_delete.append((index, repair))
        except (ValueError, TypeError) as e:
            continue
    
    if not repairs_to_delete:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ *{month_year}* –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}*!", parse_mode="Markdown")
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    
    repairs_to_delete_dict[user_id] = repairs_to_delete
    
    repair_list_text = f"–°–ø–∏—Å–æ–∫ —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ *{month_year}*:\n\n"
    for index, repair in repairs_to_delete:
        repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        repair_date = repair.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        repair_list_text += f"üîß ‚Ññ{index}. {repair_name} - ({repair_date})\n"
    
    repair_list_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    send_message_with_split(user_id, repair_list_text, parse_mode="Markdown")
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    bot.register_next_step_handler(message, confirm_delete_repair_month)

@text_only_handler
def confirm_delete_repair_month(message):
    user_id = str(message.from_user.id)
    selected_option = message.text.strip()

    if selected_option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in repairs_to_delete_dict:
            del repairs_to_delete_dict[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if selected_option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in repairs_to_delete_dict:
            del repairs_to_delete_dict[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_menu(message)
        return
    if selected_option == "0":
        bot.send_message(user_id, "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!", parse_mode="Markdown")
        if user_id in repairs_to_delete_dict:
            del repairs_to_delete_dict[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    repairs_to_delete = repairs_to_delete_dict.get(user_id, [])
    if not repairs_to_delete:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—è—Ü—É!", parse_mode="Markdown")
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    try:
        indices = [int(num.strip()) for num in selected_option.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if any(i == index for i, _ in repairs_to_delete):
                valid_indices.append(index)
            else:
                invalid_indices.append(index)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–º–æ–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup, parse_mode="Markdown")
            bot.register_next_step_handler(msg, confirm_delete_repair_month)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(user_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")

        deleted_repair_names = []
        user_data = load_repair_data(user_id)
        user_repairs = user_data.get(str(user_id), {}).get("repairs", [])

        for index in sorted(valid_indices, reverse=True):
            selected_repair = next((r for i, r in repairs_to_delete if i == index), None)
            if selected_repair:
                _, deleted_repair = selected_repair
                deleted_repair_names.append(deleted_repair.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                if deleted_repair in user_repairs:
                    user_repairs.remove(deleted_repair)
                repairs_to_delete.remove((index, deleted_repair))

        user_data[str(user_id)]["repairs"] = user_repairs
        save_repair_data(user_id, user_data)
        update_repairs_excel_file(user_id)

        bot.send_message(user_id, f"‚úÖ –†–µ–º–æ–Ω—Ç—ã *{', '.join(deleted_repair_names)}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")

        if not repairs_to_delete:
            if user_id in repairs_to_delete_dict:
                del repairs_to_delete_dict[user_id]
            if user_id in selected_repair_transports:
                del selected_repair_transports[user_id]
        else:
            repairs_to_delete_dict[user_id] = repairs_to_delete

        return_to_expense_and_repairs(message)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(msg, confirm_delete_repair_month)

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –≥–æ–¥—É) -------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "Del —Ä–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)")
@check_function_state_decorator('Del —Ä–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)')
@track_usage('Del —Ä–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_repairs_by_year(message):
    user_id = str(message.from_user.id)
    
    user_data = load_repair_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (–ì–ì–ì–ì) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, delete_repairs_by_year_handler)

@text_only_handler
def delete_repairs_by_year_handler(message):
    user_id = str(message.from_user.id)
    year = message.text.strip()
    
    if year == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if year == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_menu(message)
        return
    
    if not re.match(r"^(20[0-9]{2}|2[1-9][0-9]{2}|3000)$", year):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì!", parse_mode="Markdown", reply_markup=markup)
        bot.register_next_step_handler(message, delete_repairs_by_year_handler)
        return
    
    user_data = load_repair_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    try:
        transport_dict = format_transport_string(selected_transport)
        if not transport_dict:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        selected_brand = transport_dict["brand"]
        selected_model = transport_dict["model"]
        selected_license_plate = transport_dict["license_plate"]
    except (ValueError, IndexError) as e:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    repairs = user_data.get(str(user_id), {}).get("repairs", [])
    
    if not repairs:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}*!", parse_mode="Markdown")
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    
    repairs_to_delete = []
    for index, repair in enumerate(repairs, start=1):
        repair_date = repair.get("date", "")
        if not repair_date or len(repair_date.split(".")) != 3:
            continue
        try:
            day, month, repair_year = map(int, repair_date.split("."))
            transport = repair.get("transport", {})
            if not all(k in transport for k in ["brand", "model", "license_plate"]):
                continue
            if (repair_year == int(year) and
                transport["brand"] == selected_brand and
                transport["model"] == selected_model and
                transport["license_plate"] == selected_license_plate):
                repairs_to_delete.append((index, repair))
        except (ValueError, TypeError) as e:
            continue
    
    if not repairs_to_delete:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ *{year}* –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}*!", parse_mode="Markdown")
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    
    repairs_to_delete_dict[user_id] = repairs_to_delete
    
    repair_list_text = f"–°–ø–∏—Å–æ–∫ —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ *{year}*:\n\n"
    for index, repair in repairs_to_delete:
        repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        repair_date = repair.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        repair_list_text += f"üîß ‚Ññ{index}. {repair_name} - ({repair_date})\n"
    
    repair_list_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    send_message_with_split(user_id, repair_list_text, parse_mode="Markdown")
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    bot.register_next_step_handler(message, confirm_delete_repair_year)

@text_only_handler
def confirm_delete_repair_year(message):
    user_id = str(message.from_user.id)
    selected_option = message.text.strip()

    if selected_option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in repairs_to_delete_dict:
            del repairs_to_delete_dict[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if selected_option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in repairs_to_delete_dict:
            del repairs_to_delete_dict[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_menu(message)
        return
    if selected_option == "0":
        bot.send_message(user_id, "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!", parse_mode="Markdown")
        if user_id in repairs_to_delete_dict:
            del repairs_to_delete_dict[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    repairs_to_delete = repairs_to_delete_dict.get(user_id, [])
    if not repairs_to_delete:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –≥–æ–¥—É!", parse_mode="Markdown")
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    try:
        indices = [int(num.strip()) for num in selected_option.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if any(i == index for i, _ in repairs_to_delete):
                valid_indices.append(index)
            else:
                invalid_indices.append(index)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–º–æ–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup, parse_mode="Markdown")
            bot.register_next_step_handler(msg, confirm_delete_repair_year)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(user_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")

        deleted_repair_names = []
        user_data = load_repair_data(user_id)
        user_repairs = user_data.get(str(user_id), {}).get("repairs", [])

        for index in sorted(valid_indices, reverse=True):
            selected_repair = next((r for i, r in repairs_to_delete if i == index), None)
            if selected_repair:
                _, deleted_repair = selected_repair
                deleted_repair_names.append(deleted_repair.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                if deleted_repair in user_repairs:
                    user_repairs.remove(deleted_repair)
                repairs_to_delete.remove((index, deleted_repair))

        user_data[str(user_id)]["repairs"] = user_repairs
        save_repair_data(user_id, user_data)
        update_repairs_excel_file(user_id)

        bot.send_message(user_id, f"‚úÖ –†–µ–º–æ–Ω—Ç—ã *{', '.join(deleted_repair_names)}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")

        if not repairs_to_delete:
            if user_id in repairs_to_delete_dict:
                del repairs_to_delete_dict[user_id]
            if user_id in selected_repair_transports:
                del selected_repair_transports[user_id]
        else:
            repairs_to_delete_dict[user_id] = repairs_to_delete

        return_to_expense_and_repairs(message)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(msg, confirm_delete_repair_year)

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –≤—Å–µ –≤—Ä–µ–º—è) -------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "Del —Ä–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
@check_function_state_decorator('Del —Ä–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')
@track_usage('Del —Ä–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_all_repairs_for_selected_transport(message):
    user_id = str(message.from_user.id)
    
    user_data = load_repair_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    bot.send_message(user_id, f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–µ–º–æ–Ω—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}*?\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–î–∞* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–ù–µ—Ç* –¥–ª—è –æ—Ç–º–µ–Ω—ã", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, confirm_delete_all_repairs)

@text_only_handler
def confirm_delete_all_repairs(message):
    user_id = str(message.from_user.id)
    response = message.text.strip().lower()
    
    if response == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if response == "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_menu(message)
        return
    
    user_data = load_repair_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    try:
        transport_dict = format_transport_string(selected_transport)
        if not transport_dict:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        selected_brand = transport_dict["brand"]
        selected_model = transport_dict["model"]
        selected_license_plate = transport_dict["license_plate"]
    except (ValueError, IndexError) as e:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    if response == "–¥–∞":
        repairs = user_data.get(str(user_id), {}).get("repairs", [])
        if not repairs:
            bot.send_message(user_id, f"‚ùå –ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}*!", parse_mode="Markdown")
            if user_id in selected_repair_transports:
                del selected_repair_transports[user_id]
            return_to_expense_and_repairs(message)
            return
        
        repairs_to_keep = []
        for repair in repairs:
            transport = repair.get("transport", {})
            if not all(k in transport for k in ["brand", "model", "license_plate"]):
                repairs_to_keep.append(repair)
                continue
            if not (transport["brand"] == selected_brand and
                    transport["model"] == selected_model and
                    transport["license_plate"] == selected_license_plate):
                repairs_to_keep.append(repair)
        
        user_data[str(user_id)]["repairs"] = repairs_to_keep
        save_repair_data(user_id, user_data)
        update_repairs_excel_file(user_id)
        
        bot.send_message(user_id, f"‚úÖ –í—Å–µ —Ä–µ–º–æ–Ω—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")
    elif response == "–Ω–µ—Ç":
        bot.send_message(user_id, "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!", parse_mode="Markdown")
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–î–∞", "–ù–µ—Ç")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–¥–∞* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–Ω–µ—Ç* –¥–ª—è –æ—Ç–º–µ–Ω—ã", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, confirm_delete_all_repairs)
        return
    
    if user_id in selected_repair_transports:
        del selected_repair_transports[user_id]
    return_to_expense_and_repairs(message)

def update_repairs_excel_file(user_id):
    user_id = str(user_id)
    user_data = load_repair_data(user_id)
    repairs = user_data.get(user_id, {}).get("repairs", [])
    excel_file_path = os.path.join("data", "user", "expenses_and_repairs", "repairs", "excel", f"{user_id}_repairs.xlsx")
    
    try:
        if not os.path.exists(excel_file_path):
            workbook = openpyxl.Workbook()
            workbook.remove(workbook.active)
        else:
            workbook = openpyxl.load_workbook(excel_file_path)
        
        headers = ["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]
        summary_sheet = workbook["Summary"] if "Summary" in workbook.sheetnames else workbook.create_sheet("Summary")
        
        if summary_sheet.max_row > 1:
            summary_sheet.delete_rows(2, summary_sheet.max_row - 1)
        if summary_sheet.max_row == 0:
            summary_sheet.append(headers)
            for cell in summary_sheet[1]:
                cell.font = Font(bold=True)
                cell.alignment = Alignment(horizontal="center")
        
        unique_transports = set()
        valid_repairs = []
        for repair in repairs:
            transport = repair.get("transport", {})
            if not all(k in transport for k in ['brand', 'model', 'license_plate']):
                continue
            unique_transports.add((transport["brand"], transport["model"], transport["license_plate"]))
            valid_repairs.append(repair)
        
        for repair in valid_repairs:
            transport = repair["transport"]
            row_data = [
                f"{transport['brand']} {transport['model']} ({transport['license_plate']})",
                repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                repair.get("date", ""),
                float(repair.get("amount", 0)),
                repair.get("description", ""),
            ]
            summary_sheet.append(row_data)
        
        for sheet_name in workbook.sheetnames:
            if sheet_name != "Summary":
                try:
                    brand, model, license_plate = sheet_name.split('_')
                    if (brand, model, license_plate) not in unique_transports:
                        del workbook[sheet_name]
                except ValueError:
                    continue
        
        for brand, model, license_plate in unique_transports:
            sheet_name = f"{brand}_{model}_{license_plate}"[:31]
            transport_sheet = workbook[sheet_name] if sheet_name in workbook.sheetnames else workbook.create_sheet(sheet_name)
            
            if transport_sheet.max_row > 1:
                transport_sheet.delete_rows(2, transport_sheet.max_row - 1)
            if transport_sheet.max_row == 0:
                transport_sheet.append(headers)
                for cell in transport_sheet[1]:
                    cell.font = Font(bold=True)
                    cell.alignment = Alignment(horizontal="center")
            
            for repair in valid_repairs:
                transport = repair["transport"]
                if (transport["brand"], transport["model"], transport["license_plate"]) == (brand, model, license_plate):
                    row_data = [
                        f"{brand} {model} ({license_plate})",
                        repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                        repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                        repair.get("date", ""),
                        float(repair.get("amount", 0)),
                        repair.get("description", ""),
                    ]
                    transport_sheet.append(row_data)
        
        for sheet in workbook:
            for col in sheet.columns:
                max_length = max(len(str(cell.value)) for cell in col if cell.value) + 2
                sheet.column_dimensions[get_column_letter(col[0].column)].width = max_length
        
        workbook.save(excel_file_path)
        workbook.close()
    
    except Exception as e:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤!", parse_mode="Markdown")

# ----------------------------------------------- –ù–ê–ô–¢–ò –¢–†–ê–ù–°–ü–û–†–¢ ---------------------------------------------------

LATITUDE_KEY = 'latitude'
LONGITUDE_KEY = 'longitude'

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_BASE_DIR = os.path.join(BASE_DIR, "data")
FIND_TRANSPORT_DIR = os.path.join(DATA_BASE_DIR, "user", "findtransport")

def ensure_directories():
    os.makedirs(FIND_TRANSPORT_DIR, exist_ok=True)

ensure_directories()

def save_location_data(location_data):
    ensure_directories() 

    file_path = os.path.join(FIND_TRANSPORT_DIR, "location_data.json")
    with open(file_path, "w", encoding="utf-8") as json_file:
        json.dump(location_data, json_file, indent=4, ensure_ascii=False)

def load_location_data():
    ensure_directories()  

    file_path = os.path.join(FIND_TRANSPORT_DIR, "location_data.json")
    if not os.path.exists(file_path):
        return {}

    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, ValueError):
        return {}

location_data = load_location_data()

@bot.message_handler(func=lambda message: message.text == "–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@check_function_state_decorator('–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def start_transport_search(message, show_description=True):
    global location_data
    user_id = str(message.from_user.id)

    if user_id in location_data and location_data[user_id].get('start_location') is not None and location_data[user_id].get('end_location') is None:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
        item2 = types.KeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
        item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1, item2)
        markup.add(item3)
        bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å?", reply_markup=markup)
        bot.register_next_step_handler(message, continue_or_restart)
    else:
        start_new_transport_search(message, show_description=show_description)

@text_only_handler
def start_new_transport_search(message, show_description=True):
    global location_data
    user_id = str(message.from_user.id)
    location_data[user_id] = {'start_location': None, 'end_location': None}
    save_location_data(location_data)
    request_transport_location(message, show_description=show_description)

@text_only_handler
def request_transport_location(message, show_description=True):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)
    item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)

    help_message = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–æ–∏—Å–∫—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞*\n\n"
        "üìå *–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–π:*\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –¥–≤–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏, *—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞* –∏ *–≤–∞—à–∞*\n\n"
        "üìå *–ü–æ–∏—Å–∫:*\n"
        "–í—ã–≤–æ–¥ *—Å—Å—ã–ª–∫–∏ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º* –æ—Ç —Ç–æ—á–∫–∏ –ê –¥–æ B"
    )

    if show_description:
        bot.send_message(message.chat.id, help_message, parse_mode="Markdown")

    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_car_location)

@text_only_handler
def continue_or_restart(message):
    if message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        request_user_location(message)
    elif message.text == "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        start_new_transport_search(message)
    else:
        return_to_menu(message)

@text_only_handler
def request_user_location(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)
    item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)

    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_car_location)

@bot.message_handler(content_types=['location'])
@check_function_state_decorator('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏')
@track_usage('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@check_subscription_chanal
@rate_limit_with_captcha
def handle_car_location(message):
    global location_data
    user_id = str(message.from_user.id)

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if user_id not in location_data:
        location_data[user_id] = {'start_location': None, 'end_location': None}

    if location_data[user_id]['start_location'] is None:
        if message.location is not None:
            location_data[user_id]['start_location'] = {
                LATITUDE_KEY: message.location.latitude,
                LONGITUDE_KEY: message.location.longitude
            }

            location_data[user_id]['process'] = 'in_progress'
            save_location_data(location_data)

            request_user_location(message)
        else:
            handle_location_error(message)

    elif location_data[user_id]['end_location'] is None:
        if message.location is not None:
            location_data[user_id]['end_location'] = {
                LATITUDE_KEY: message.location.latitude,
                LONGITUDE_KEY: message.location.longitude
            }

            location_data[user_id]['process'] = 'completed'
            save_location_data(location_data)

            send_map_link(message.chat.id, location_data[user_id]['start_location'], location_data[user_id]['end_location'])
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
            item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            markup.add(item1)
            markup.add(item2)
            bot.send_message(message.chat.id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–∞–π–¥–µ–Ω!\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫:", reply_markup=markup)
        else:
            handle_location_error(message)

@text_only_handler
def handle_location_error(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    bot.register_next_step_handler(message, handle_car_location)

def send_map_link(chat_id, start_location, end_location):
    map_url = f"https://yandex.ru/maps/?rtext={end_location['latitude']},{end_location['longitude']}~{start_location['latitude']},{start_location['longitude']}&rtt=pd"
    short_url = shorten_url(map_url)
    bot.send_message(chat_id, f"üìç *–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:* [—Å—Å—ã–ª–∫–∞]({short_url})", parse_mode="Markdown")

# ----------------------------------------------- –ü–û–ò–°–ö –ú–ï–°–¢ ---------------------------------------------------

geolocator = Nominatim(user_agent="geo_bot")

user_locations = {}

def get_yandex_maps_search_url(latitude, longitude, query):
    base_url = "https://yandex.ru/maps/?"
    search_params = {
        'll': f"{longitude},{latitude}",
        'z': 15,
        'text': query,
        'mode': 'search'
    }
    query_string = "&".join([f"{key}={value}" for key, value in search_params.items()])
    return f"{base_url}{query_string}"

def shorten_url(original_url):
    endpoint = 'https://clck.ru/--'
    response = requests.get(endpoint, params={'url': original_url})
    return response.text

@bot.message_handler(func=lambda message: message.text == "–ü–æ–∏—Å–∫ –º–µ—Å—Ç")
@check_function_state_decorator('–ü–æ–∏—Å–∫ –º–µ—Å—Ç')
@track_usage('–ü–æ–∏—Å–∫ –º–µ—Å—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def placesearch(message, show_description=True):
    user_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_azs = types.KeyboardButton("–ê–ó–°")
    button_car_wash = types.KeyboardButton("–ê–≤—Ç–æ–º–æ–π–∫–∏")
    button_auto_service = types.KeyboardButton("–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã")
    button_parking = types.KeyboardButton("–ü–∞—Ä–∫–æ–≤–∫–∏")
    button_evacuation = types.KeyboardButton("–≠–≤–∞–∫—É–∞—Ü–∏—è")
    button_gibdd_mreo = types.KeyboardButton("–ì–ò–ë–î–î")
    button_accident_commissioner = types.KeyboardButton("–ö–æ–º–∏—Å—Å–∞—Ä—ã")
    button_impound = types.KeyboardButton("–®—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–∞")
    item1 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(button_azs, button_car_wash, button_auto_service)
    markup.add(button_parking, button_evacuation, button_gibdd_mreo, button_accident_commissioner, button_impound)
    markup.add(item1)

    help_message = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–æ–∏—Å–∫—É –º–µ—Å—Ç*\n\n"
        "üìå *–í—ã–±–æ—Ä –ø–æ–∏—Å–∫–∞:*\n"
        "–í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫\n\n"
        "üìå *–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏:*\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è\n\n"
        "üìå *–ü–æ–∏—Å–∫:*\n"
        "–í—ã–≤–æ–¥ —Å—Å—ã–ª–∫–∏(-–æ–∫) —Å –±–ª–∏–∂–∞–π—à–∏–º–∏ –º–µ—Å—Ç–∞–º–∏ –ø–æ –≤–∞—à–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏\n\n"
    )

    if show_description:
        bot.send_message(user_id, help_message, parse_mode="Markdown")

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–∏—Å–∫–∞:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ")
@check_function_state_decorator('–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ')
@track_usage('–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_reset_category(message):
    global selected_category
    selected_category = None
    placesearch(message, show_description=False)

selected_category = None

@bot.message_handler(func=lambda message: message.text in {"–ê–ó–°", "–ê–≤—Ç–æ–º–æ–π–∫–∏", "–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã", "–ü–∞—Ä–∫–æ–≤–∫–∏", "–≠–≤–∞–∫—É–∞—Ü–∏—è", "–ì–ò–ë–î–î", "–ö–æ–º–∏—Å—Å–∞—Ä—ã", "–®—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–∞"})
@check_function_state_decorator('–ê–ó–°')
@check_function_state_decorator('–ê–≤—Ç–æ–º–æ–π–∫–∏')
@check_function_state_decorator('–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã')
@check_function_state_decorator('–ü–∞—Ä–∫–æ–≤–∫–∏')
@check_function_state_decorator('–≠–≤–∞–∫—É–∞—Ü–∏—è')
@check_function_state_decorator('–ì–ò–ë–î–î')
@check_function_state_decorator('–ö–æ–º–∏—Å—Å–∞—Ä—ã')
@check_function_state_decorator('–®—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–∞')
@track_usage('–ê–ó–°')
@track_usage('–ê–≤—Ç–æ–º–æ–π–∫–∏')
@track_usage('–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã')
@track_usage('–ü–∞—Ä–∫–æ–≤–∫–∏')
@track_usage('–≠–≤–∞–∫—É–∞—Ü–∏—è')
@track_usage('–ì–ò–ë–î–î')
@track_usage('–ö–æ–º–∏—Å—Å–∞—Ä—ã')
@track_usage('–®—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–∞')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_menu_category_buttons(message):
    global selected_category
    if message.text in {"–ê–ó–°", "–ê–≤—Ç–æ–º–æ–π–∫–∏", "–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã", "–ü–∞—Ä–∫–æ–≤–∫–∏", "–≠–≤–∞–∫—É–∞—Ü–∏—è", "–ì–ò–ë–î–î", "–ö–æ–º–∏—Å—Å–∞—Ä—ã", "–®—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–∞"}:
        selected_category = message.text
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_send_location = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
        button_reset_category = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ")
        item1 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        keyboard.add(button_send_location)
        keyboard.add(button_reset_category)
        keyboard.add(item1)
        bot.send_message(message.chat.id, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!\n–í–∞–º –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - *{selected_category.lower()}:*", reply_markup=keyboard, parse_mode="Markdown")
    else:
        selected_category = None
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é!")

@bot.message_handler(content_types=['location'])
@check_function_state_decorator('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏')
@track_usage('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@check_subscription_chanal
@rate_limit_with_captcha
def handle_location(message):
    global selected_category
    user_id = message.chat.id
    latitude = message.location.latitude
    longitude = message.location.longitude

    if user_tracking.get(user_id, {}).get('tracking', False):
        user_tracking[user_id]['location'] = message.location

        if not user_tracking[user_id].get('started', False):
            user_tracking[user_id]['started'] = True
            track_user_location(user_id, message.location)

        return
    elif selected_category:
        try:
            location = geolocator.reverse((latitude, longitude), language='ru', timeout=10)
            address = location.address

            search_url = get_yandex_maps_search_url(latitude, longitude, selected_category)
            short_search_url = shorten_url(search_url)

            message_text = f"üèôÔ∏è *–ë–ª–∏–∂–∞–π—à–∏–µ {selected_category.lower()} –ø–æ –∞–¥—Ä–µ—Å—É:* \n\n{address}\n\n"
            message_text += f"üó∫Ô∏è [–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É]({short_search_url})"

            bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

            selected_category = None

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button_reset_category = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ")
            item1 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            keyboard.add(button_reset_category)
            keyboard.add(item1)
            bot.send_message(message.chat.id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ, –º–µ—Å—Ç–∞ –Ω–∞–π–¥–µ–Ω—ã!\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ –¥—Ä—É–≥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=keyboard)

        except Exception as e:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é!")

# ------------------------------------------------------------- –ü–û–ì–û–î–ê ---------------------------------------------------------

OPENWEATHERMAP_API_KEY = '2949ae1ef99c838462d16e7b0caf65b5' # API
WEATHERAPI_API_KEY = 'd4d47e9a095046949fe83849253004' # API  
OPENWEATHERMAP_WEATHER_URL = 'http://api.openweathermap.org/data/2.5/weather'
OPENWEATHERMAP_FORECAST_URL = 'http://api.openweathermap.org/data/2.5/forecast'
OPENMETEO_FORECAST_URL = 'https://api.open-meteo.com/v1/forecast'
WEATHERAPI_CURRENT_URL = 'https://api.weatherapi.com/v1/current.json'
WEATHERAPI_FORECAST_URL = 'https://api.weatherapi.com/v1/forecast.json'
NOMINATIM_URL = 'https://nominatim.openstreetmap.org/reverse'

MAX_MESSAGE_LENGTH = 4096
user_data = {}

file_path = "files/files_for_price_weather/combined_cities.txt"
os.makedirs(os.path.dirname(file_path), exist_ok=True)

if not os.path.exists(file_path):
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write("")
    except Exception as e:
        pass

def load_cities_from_file(file_path="files/files_for_price_weather/combined_cities.txt"):
    cities = {}
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            for line in file:
                city_name_rus, city_name_eng = line.strip().split(' - ')
                cities[city_name_eng.lower()] = city_name_rus
    except Exception as e:
        pass
    return cities

def translate_weather_description(english_description):
    translation_dict = {
        'clear sky': '—è—Å–Ω–æ–µ –Ω–µ–±–æ',
        'few clouds': '–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
        'scattered clouds': '—Ä–∞—Å—Å–µ—è–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞',
        'broken clouds': '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏',
        'shower rain': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
        'rain': '–¥–æ–∂–¥—å',
        'thunderstorm': '–≥—Ä–æ–∑–∞',
        'snow': '—Å–Ω–µ–≥',
        'mist': '—Ç—É–º–∞–Ω',
        'light snow': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥',
        'overcast clouds': '–ø–∞—Å–º—É—Ä–Ω–æ',
        'heavy snow': '—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥',
        'sunny': '—è—Å–Ω–æ–µ –Ω–µ–±–æ',
        'partly cloudy': '–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
        'cloudy': '–æ–±–ª–∞—á–Ω–æ',
        'overcast': '–ø–∞—Å–º—É—Ä–Ω–æ',
        'light rain': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
        'moderate rain': '–¥–æ–∂–¥—å',
        'heavy rain': '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
        'patchy rain possible': '–≤–æ–∑–º–æ–∂–µ–Ω –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
        'light snow showers': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥',
        'heavy snow showers': '—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥',
        'fog': '—Ç—É–º–∞–Ω',
        'thundery outbreaks possible': '–≤–æ–∑–º–æ–∂–Ω–∞ –≥—Ä–æ–∑–∞'
    }
    return translation_dict.get(english_description.lower(), english_description)

def get_city_coordinates(city):
    try:
        params = {'q': city, 'format': 'json', 'limit': 1}
        headers = {'User-Agent': 'TelegramWeatherBot/1.0'}
        response = requests.get('https://nominatim.openstreetmap.org/search', params=params, headers=headers, timeout=5)
        data = response.json()
        if data and len(data) > 0:
            return {'latitude': float(data[0]['lat']), 'longitude': float(data[0]['lon'])}
        return None
    except Exception:
        return None

def get_city_name(latitude, longitude):
    try:
        params = {
            'lat': latitude,
            'lon': longitude,
            'format': 'json',
            'zoom': 10 
        }
        headers = {'User-Agent': 'TelegramWeatherBot/1.0'}
        response = requests.get(NOMINATIM_URL, params=params, headers=headers, timeout=5)
        data = response.json()
        if data and 'address' in data:
            city = data['address'].get('city') or data['address'].get('town') or data['address'].get('village') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥'
            return city
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥'
    except Exception:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥'

def fetch_weather_data(url_type, params, api_type='openweathermap'):
    try:
        if api_type == 'openweathermap':
            response = requests.get(params['url'], params=params['params'], timeout=10)
            if response.status_code == 200:
                return response.json(), 'openweathermap'
            return None, 'openweathermap'

        elif api_type == 'openmeteo':
            openmeteo_params = {
                'latitude': params['params'].get('lat') or params['params'].get('latitude'),
                'longitude': params['params'].get('lon') or params['params'].get('longitude'),
                'current_weather': 'true' if url_type == 'weather' else 'false',
                'hourly': 'temperature_2m,relativehumidity_2m,pressure_msl,windspeed_10m,weathercode' if url_type == 'forecast' else '',
                'daily': 'temperature_2m_max,temperature_2m_min,weathercode' if url_type == 'forecast' else '',
                'timezone': 'auto'
            }
            response = requests.get(OPENMETEO_FORECAST_URL, params=openmeteo_params, timeout=10)
            if response.status_code == 200:
                return response.json(), 'openmeteo'
            return None, 'openmeteo'

        elif api_type == 'weatherapi':
            weatherapi_params = {
                'key': WEATHERAPI_API_KEY,
                'q': params['params'].get('q', f"{params['params'].get('lat')},{params['params'].get('lon')}"),
                'lang': 'ru'
            }
            if url_type == 'forecast':
                weatherapi_params['days'] = params.get('days', 7)
            url = WEATHERAPI_CURRENT_URL if url_type == 'weather' else WEATHERAPI_FORECAST_URL
            response = requests.get(url, params=weatherapi_params, timeout=10)
            if response.status_code == 200:
                return response.json(), 'weatherapi'
            return None, 'weatherapi'

    except Exception:
        return None, api_type

def normalize_weather_data(data, api_type, url_type):
    if not data:
        return None

    if api_type == 'openweathermap':
        return data

    elif api_type == 'openmeteo':
        if url_type == 'weather':
            weather_code = data['current_weather']['weathercode']
            description = {
                0: 'clear sky', 1: 'few clouds', 2: 'scattered clouds', 3: 'broken clouds',
                45: 'fog', 51: 'light rain', 61: 'rain', 71: 'light snow', 73: 'snow', 75: 'heavy snow',
                95: 'thunderstorm'
            }.get(weather_code, 'unknown')
            return {
                'main': {
                    'temp': data['current_weather']['temperature'],
                    'feels_like': data['current_weather']['temperature'],
                    'humidity': data.get('hourly', {}).get('relativehumidity_2m', [0])[0],
                    'pressure': data.get('hourly', {}).get('pressure_msl', [0])[0]
                },
                'wind': {'speed': data['current_weather']['windspeed']},
                'weather': [{'description': description}]
            }
        elif url_type == 'forecast':
            forecasts = []
            for i, time in enumerate(data['hourly']['time']):
                weather_code = data['hourly']['weathercode'][i]
                description = {
                    0: 'clear sky', 1: 'few clouds', 2: 'scattered clouds', 3: 'broken clouds',
                    45: 'fog', 51: 'light rain', 61: 'rain', 71: 'light snow', 73: 'snow', 75: 'heavy snow',
                    95: 'thunderstorm'
                }.get(weather_code, 'unknown')
                forecasts.append({
                    'dt_txt': time,
                    'main': {
                        'temp': data['hourly']['temperature_2m'][i],
                        'feels_like': data['hourly']['temperature_2m'][i],
                        'humidity': data['hourly']['relativehumidity_2m'][i],
                        'pressure': data['hourly']['pressure_msl'][i]
                    },
                    'wind': {'speed': data['hourly']['windspeed_10m'][i]},
                    'weather': [{'description': description}]
                })
            return {'list': forecasts}

    elif api_type == 'weatherapi':
        if url_type == 'weather':
            return {
                'main': {
                    'temp': data['current']['temp_c'],
                    'feels_like': data['current']['feelslike_c'],
                    'humidity': data['current']['humidity'],
                    'pressure': data['current']['pressure_mb']
                },
                'wind': {'speed': data['current']['wind_kph'] / 3.6},
                'weather': [{'description': data['current']['condition']['text']}]
            }
        elif url_type == 'forecast':
            forecasts = []
            for day in data['forecast']['forecastday']:
                for hour in day['hour']:
                    forecasts.append({
                        'dt_txt': hour['time'],
                        'main': {
                            'temp': hour['temp_c'],
                            'feels_like': hour['feelslike_c'],
                            'humidity': hour['humidity'],
                            'pressure': hour['pressure_mb']
                        },
                        'wind': {'speed': hour['wind_kph'] / 3.6},
                        'weather': [{'description': hour['condition']['text']}]
                    })
            return {'list': forecasts}

    return None

def get_current_weather(coords):
    try:
        city_name = get_city_name(coords['latitude'], coords['longitude'])
        params = {
            'url': OPENWEATHERMAP_WEATHER_URL,
            'params': {
                'lat': coords['latitude'],
                'lon': coords['longitude'],
                'appid': OPENWEATHERMAP_API_KEY,
                'units': 'metric',
                'lang': 'ru'
            }
        }

        for api in ['openweathermap', 'openmeteo', 'weatherapi']:
            data, api_type = fetch_weather_data('weather', params, api)
            if data:
                data = normalize_weather_data(data, api_type, 'weather')
                if data:
                    temperature = round(data['main']['temp'])
                    feels_like = round(data['main']['feels_like'])
                    humidity = data['main']['humidity']
                    pressure = data['main']['pressure']
                    wind_speed = data['wind']['speed']
                    description = translate_weather_description(data['weather'][0]['description'])

                    current_time = datetime.now().strftime("%H:%M")
                    current_date = datetime.now().strftime("%d.%m.%Y")

                    return (
                        f"*–ü–æ–≥–æ–¥–∞ –Ω–∞ {current_date} –≤ {current_time}*:\n"
                        f"*(–≥. {city_name}; {coords['latitude']}, {coords['longitude']})*\n\n"
                        f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temperature}¬∞C\n"
                        f"üå¨Ô∏è *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {feels_like}¬∞C\n"
                        f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {humidity}%\n"
                        f"„ÄΩÔ∏è *–î–∞–≤–ª–µ–Ω–∏–µ:* {pressure} –º–º —Ä—Ç. —Å—Ç.\n"
                        f"üí® *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {wind_speed} –º/—Å\n"
                        f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
                    )
        return None
    except Exception as e:
        return None

@bot.message_handler(func=lambda message: message.text == "–ü–æ–≥–æ–¥–∞")
@check_function_state_decorator('–ü–æ–≥–æ–¥–∞')
@track_usage('–ü–æ–≥–æ–¥–∞')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def weather(message, show_description=True):
    try:
        help_message = (
            "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø–æ–≥–æ–¥—ã*\n\n"
            "üìå *–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞:*\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ\n\n"
            "üìå *–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞:*\n"
            "–í—ã–±–∏—Ä–∞–µ—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã –∏–∑ –∫–Ω–æ–ø–æ–∫\n\n"
            "üìå *–ü–æ–≥–æ–¥–∞:*\n"
            "–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞\n\n"
        )

        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(telebot.types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True))
        markup.row(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

        if show_description:
            bot.send_message(message.chat.id, help_message, parse_mode="Markdown")

        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, handle_input_5)

    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@text_only_handler
def handle_input_5(message):
    try:
        if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            return_to_menu(message)
            return

        if message.location:
            latitude = message.location.latitude
            longitude = message.location.longitude

            save_user_location(message.chat.id, latitude, longitude, None)

            markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
            markup.row('–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞')
            markup.row('–ù–µ–¥–µ–ª—è', '–ú–µ—Å—è—Ü')
            markup.row('–î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ')
            markup.row('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=markup)
            return

        cities = load_cities_from_file()
        city_input = message.text.strip().lower()
        city_eng = None
        city_rus = None

        for eng, rus in cities.items():
            if rus.lower() == city_input:
                city_eng = eng
                city_rus = rus
                break

        if city_eng:
            user_data[message.chat.id] = {'city': city_eng, 'city_rus': city_rus}
            markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
            markup.row('–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞')
            markup.row('–ù–µ–¥–µ–ª—è', '–ú–µ—Å—è—Ü')
            markup.row('–î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ')
            markup.row('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: *{city_rus}*\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=markup, parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é")
            bot.register_next_step_handler(message, handle_input_5)

    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–≤–æ–¥–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@bot.message_handler(func=lambda message: message.text in ['–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞', '–ù–µ–¥–µ–ª—è', '–ú–µ—Å—è—Ü', '–î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ'])
@check_function_state_decorator('–°–µ–≥–æ–¥–Ω—è')
@check_function_state_decorator('–ó–∞–≤—Ç—Ä–∞')
@check_function_state_decorator('–ù–µ–¥–µ–ª—è')
@check_function_state_decorator('–ú–µ—Å—è—Ü')
@check_function_state_decorator('–î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ')
@track_usage('–°–µ–≥–æ–¥–Ω—è')
@track_usage('–ó–∞–≤—Ç—Ä–∞')
@track_usage('–ù–µ–¥–µ–ª—è')
@track_usage('–ú–µ—Å—è—Ü')
@track_usage('–î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_period_5(message):
    period = message.text.lower()
    chat_id = message.chat.id

    user_locations = load_user_locations()
    coords = user_locations.get(str(chat_id))
    city_data = user_data.get(chat_id, {})

    if not coords and not city_data:
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –∏–ª–∏ –≥–æ—Ä–æ–¥–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞...")
        weather(message, show_description=False)
        return

    if period == '–¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ':
        user_data.pop(chat_id, None)
        user_locations.pop(str(chat_id), None)
        weather(message, show_description=False)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if coords:
        if period == '—Å–µ–≥–æ–¥–Ω—è':
            send_weather(chat_id, coords, 'weather')
        elif period == '–∑–∞–≤—Ç—Ä–∞':
            send_forecast_daily(chat_id, coords, 'forecast', 1)
        elif period == '–Ω–µ–¥–µ–ª—è':
            send_forecast_weekly(chat_id, coords, 'forecast', 8)
        elif period == '–º–µ—Å—è—Ü':
            send_forecast_monthly(chat_id, coords, 'forecast', 31)
    elif city_data:
        city = city_data.get('city')
        city_rus = city_data.get('city_rus')
        if period == '—Å–µ–≥–æ–¥–Ω—è':
            send_weather_by_city(chat_id, city, city_rus, 'weather')
        elif period == '–∑–∞–≤—Ç—Ä–∞':
            send_forecast_daily_by_city(chat_id, city, city_rus, 'forecast', 1)
        elif period == '–Ω–µ–¥–µ–ª—è':
            send_forecast_weekly_by_city(chat_id, city, city_rus, 'forecast', 8)
        elif period == '–º–µ—Å—è—Ü':
            send_forecast_monthly_by_city(chat_id, city, city_rus, 'forecast', 31)

def send_weather(chat_id, coords, url_type):
    try:
        weather_message = get_current_weather(coords)
        if weather_message:
            bot.send_message(chat_id, weather_message, parse_mode="Markdown")
            send_forecast_remaining_day(chat_id, coords, 'forecast')
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É!")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def send_forecast_remaining_day(chat_id, coords, url_type):
    try:
        params = {
            'url': OPENWEATHERMAP_FORECAST_URL,
            'params': {
                'lat': coords['latitude'],
                'lon': coords['longitude'],
                'appid': OPENWEATHERMAP_API_KEY,
                'units': 'metric',
                'lang': 'ru'
            }
        }

        for api in ['openweathermap', 'openmeteo', 'weatherapi']:
            data, api_type = fetch_weather_data(url_type, params, api)
            if data:
                data = normalize_weather_data(data, api_type, url_type)
                if data:
                    forecasts = data['list']
                    now = datetime.now()
                    message = "*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –¥–Ω—è:*\n\n"

                    for forecast in forecasts:
                        date_time = datetime.strptime(forecast['dt_txt'], "%Y-%m-%d %H:%M:%S")
                        if now.date() == date_time.date() and date_time > now:
                            formatted_date = date_time.strftime("%d.%m.%Y")
                            formatted_time = date_time.strftime("%H:%M")
                            temperature = round(forecast['main']['temp'])
                            feels_like = round(forecast['main']['feels_like'])
                            humidity = forecast['main']['humidity']
                            pressure = forecast['main']['pressure']
                            wind_speed = forecast['wind']['speed']
                            description = translate_weather_description(forecast['weather'][0]['description'])

                            message += (
                                f"*–ü–æ–≥–æ–¥–∞ –Ω–∞ {formatted_date} –≤ {formatted_time}:*\n\n"
                                f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temperature}¬∞C\n"
                                f"üå¨Ô∏è *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {feels_like}¬∞C\n"
                                f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {humidity}%\n"
                                f"„ÄΩÔ∏è *–î–∞–≤–ª–µ–Ω–∏–µ:* {pressure} –º–º —Ä—Ç. —Å—Ç.\n"
                                f"üí® *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {wind_speed} –º/—Å\n"
                                f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
                            )

                    if message == "*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –¥–Ω—è:*\n\n":
                        message = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –¥–Ω—è!"

                    bot.send_message(chat_id, message, parse_mode="Markdown")
                    return
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –¥–Ω—è!")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –¥–Ω—è!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def send_forecast_daily(chat_id, coords, url_type, days_ahead):
    try:
        params = {
            'url': OPENWEATHERMAP_FORECAST_URL,
            'params': {
                'lat': coords['latitude'],
                'lon': coords['longitude'],
                'appid': OPENWEATHERMAP_API_KEY,
                'units': 'metric',
                'lang': 'ru'
            },
            'days': days_ahead
        }

        for api in ['openweathermap', 'openmeteo', 'weatherapi']:
            data, api_type = fetch_weather_data(url_type, params, api)
            if data:
                data = normalize_weather_data(data, api_type, url_type)
                if data:
                    forecast = data['list'][min(days_ahead * 8, len(data['list']) - 1)]
                    date_time = datetime.strptime(forecast['dt_txt'], "%Y-%m-%d %H:%M:%S")
                    temperature = round(forecast['main']['temp'])
                    feels_like = round(forecast['main']['feels_like'])
                    humidity = forecast['main']['humidity']
                    pressure = forecast['main']['pressure']
                    wind_speed = forecast['wind']['speed']
                    description = translate_weather_description(forecast['weather'][0]['description'])

                    message = (
                        f"*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {date_time.strftime('%d.%m.%Y')}*\n\n"
                        f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temperature}¬∞C\n"
                        f"üå¨Ô∏è *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {feels_like}¬∞C\n"
                        f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {humidity}%\n"
                        f"„ÄΩÔ∏è *–î–∞–≤–ª–µ–Ω–∏–µ:* {pressure} –º–º —Ä—Ç. —Å—Ç.\n"
                        f"üí® *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {wind_speed} –º/—Å\n"
                        f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
                    )
                    bot.send_message(chat_id, message, parse_mode="Markdown")
                    send_hourly_forecast_tomorrow(chat_id, coords, url_type)
                    return
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞!")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def send_hourly_forecast_tomorrow(chat_id, coords, url_type):
    try:
        params = {
            'url': OPENWEATHERMAP_FORECAST_URL,
            'params': {
                'lat': coords['latitude'],
                'lon': coords['longitude'],
                'appid': OPENWEATHERMAP_API_KEY,
                'units': 'metric',
                'lang': 'ru'
            }
        }

        for api in ['openweathermap', 'openmeteo', 'weatherapi']:
            data, api_type = fetch_weather_data(url_type, params, api)
            if data:
                data = normalize_weather_data(data, api_type, url_type)
                if data:
                    forecasts = data['list']
                    now = datetime.now()
                    tomorrow = now + timedelta(days=1)
                    message = "*–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:*\n\n"

                    for forecast in forecasts:
                        date_time = datetime.strptime(forecast['dt_txt'], "%Y-%m-%d %H:%M:%S")
                        if tomorrow.date() == date_time.date():
                            formatted_time = date_time.strftime("%H:%M")
                            formatted_date = date_time.strftime("%d.%m.%Y")
                            temperature = round(forecast['main']['temp'])
                            feels_like = round(forecast['main']['feels_like'])
                            humidity = forecast['main']['humidity']
                            pressure = forecast['main']['pressure']
                            wind_speed = forecast['wind']['speed']
                            description = translate_weather_description(forecast['weather'][0]['description'])

                            message += (
                                f"*–ü–æ–≥–æ–¥–∞ –Ω–∞ {formatted_date} –≤ {formatted_time}:*\n\n"
                                f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temperature}¬∞C\n"
                                f"üå¨Ô∏è *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {feels_like}¬∞C\n"
                                f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {humidity}%\n"
                                f"„ÄΩÔ∏è *–î–∞–≤–ª–µ–Ω–∏–µ:* {pressure} –º–º —Ä—Ç. —Å—Ç.\n"
                                f"üí® *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {wind_speed} –º/—Å\n"
                                f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
                            )

                    if message == "*–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:*\n\n":
                        message = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞!"

                    message_chunks = [message[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(message), MAX_MESSAGE_LENGTH)]
                    for chunk in message_chunks:
                        bot.send_message(chat_id, chunk, parse_mode="Markdown")
                    return
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞!")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def send_forecast_weekly(chat_id, coords, url_type, retries=3):
    try:
        params = {
            'url': OPENWEATHERMAP_FORECAST_URL,
            'params': {
                'lat': coords['latitude'],
                'lon': coords['longitude'],
                'appid': OPENWEATHERMAP_API_KEY,
                'units': 'metric',
                'lang': 'ru'
            }
        }

        daily_forecasts = defaultdict(list)
        message = "*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n\n"

        for api in ['openweathermap', 'openmeteo', 'weatherapi']:
            for attempt in range(retries):
                data, api_type = fetch_weather_data(url_type, params, api)
                if data:
                    data = normalize_weather_data(data, api_type, url_type)
                    if data:
                        forecasts = data['list']
                        for forecast in forecasts:
                            date_time = datetime.strptime(forecast['dt_txt'], "%Y-%m-%d %H:%M:%S")
                            date_str = date_time.strftime('%d.%m.%Y')

                            if len(daily_forecasts) >= 7 and date_str not in daily_forecasts:
                                break

                            temperature = round(forecast['main']['temp'])
                            feels_like = round(forecast['main']['feels_like'])
                            humidity = forecast['main']['humidity']
                            pressure = forecast['main']['pressure']
                            wind_speed = forecast['wind']['speed']
                            description = translate_weather_description(forecast['weather'][0]['description'])

                            daily_forecasts[date_str].append({
                                'temperature': temperature,
                                'feels_like': feels_like,
                                'humidity': humidity,
                                'pressure': pressure,
                                'wind_speed': wind_speed,
                                'description': description
                            })

                        for date, forecasts in daily_forecasts.items():
                            temp_sum = sum(f['temperature'] for f in forecasts)
                            feels_like_sum = sum(f['feels_like'] for f in forecasts)
                            count = len(forecasts)
                            avg_temp = round(temp_sum / count)
                            avg_feels_like = round(feels_like_sum / count)

                            message += (
                                f"*–ü–æ–≥–æ–¥–∞ –Ω–∞ {date}:*\n\n"
                                f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {avg_temp}¬∞C\n"
                                f"üå¨Ô∏è *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {avg_feels_like}¬∞C\n"
                                f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {forecasts[0]['humidity']}%\n"
                                f"„ÄΩÔ∏è *–î–∞–≤–ª–µ–Ω–∏–µ:* {forecasts[0]['pressure']} –º–º —Ä—Ç. —Å—Ç.\n"
                                f"üí® *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {forecasts[0]['wind_speed']} –º/—Å\n"
                                f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {forecasts[0]['description']}\n\n"
                            )

                        bot.send_message(chat_id, message, parse_mode="Markdown")
                        return
                if attempt == retries - 1:
                    break
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é!")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def send_forecast_monthly(chat_id, coords, url_type, days=31):
    try:
        params = {
            'url': OPENWEATHERMAP_FORECAST_URL,
            'params': {
                'lat': coords['latitude'],
                'lon': coords['longitude'],
                'appid': OPENWEATHERMAP_API_KEY,
                'units': 'metric',
                'lang': 'ru'
            },
            'days': days
        }

        for api in ['openweathermap', 'weatherapi']:
            data, api_type = fetch_weather_data(url_type, params, api)
            if data:
                data = normalize_weather_data(data, api_type, url_type)
                if data:
                    forecasts = data['list']
                    message = "*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü:*\n\n"

                    daily_forecasts = {}
                    for forecast in forecasts:
                        date_time = datetime.strptime(forecast['dt_txt'], "%Y-%m-%d %H:%M:%S")
                        date_str = date_time.strftime('%d.%m.%Y')

                        if date_str not in daily_forecasts:
                            daily_forecasts[date_str] = {
                                'temperature': round(forecast['main']['temp']),
                                'feels_like': round(forecast['main']['feels_like'])
                            }

                    for date, values in daily_forecasts.items():
                        message += (
                            f"*{date}:*\n\n"
                            f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {values['temperature']}¬∞C\n"
                            f"üå¨Ô∏è *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {values['feels_like']}¬∞C\n\n"
                        )

                    unavailable_dates = [
                        date for date in pd.date_range(start=datetime.now(), periods=days).strftime('%d.%m.%Y')
                        if date not in daily_forecasts
                    ]

                    if unavailable_dates:
                        start_date = unavailable_dates[0]
                        end_date = unavailable_dates[-1]
                        message += (
                            f"*–° {start_date} –ø–æ {end_date}:*\n\n_"
                            f"–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π_\n\n"
                        )

                    if message == "*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü:*\n\n":
                        message = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –º–µ—Å—è—Ü!"

                    bot.send_message(chat_id, message, parse_mode="Markdown")
                    return
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü!")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –º–µ—Å—è—Ü!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def send_weather_by_city(chat_id, city, city_rus, url_type):
    try:
        params = {
            'url': OPENWEATHERMAP_WEATHER_URL,
            'params': {
                'q': city,
                'appid': OPENWEATHERMAP_API_KEY,
                'units': 'metric',
                'lang': 'ru'
            }
        }

        coords = get_city_coordinates(city_rus)
        if coords:
            params['params']['lat'] = coords['latitude']
            params['params']['lon'] = coords['longitude']

        for api in ['openweathermap', 'openmeteo', 'weatherapi']:
            data, api_type = fetch_weather_data(url_type, params, api)
            if data:
                data = normalize_weather_data(data, api_type, url_type)
                if data:
                    temperature = round(data['main']['temp'])
                    feels_like = round(data['main']['feels_like'])
                    humidity = data['main']['humidity']
                    pressure = data['main']['pressure']
                    wind_speed = data['wind']['speed']
                    description = translate_weather_description(data['weather'][0]['description'])

                    current_time = datetime.now().strftime("%H:%M")
                    current_date = datetime.now().strftime("%d.%m.%Y")

                    message = (
                        f"*–ü–æ–≥–æ–¥–∞ –≤ {city_rus} –Ω–∞ {current_date} –≤ {current_time}:*\n\n"
                        f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temperature}¬∞C\n"
                        f"üå¨Ô∏è *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {feels_like}¬∞C\n"
                        f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {humidity}%\n"
                        f"„ÄΩÔ∏è *–î–∞–≤–ª–µ–Ω–∏–µ:* {pressure} –º–º —Ä—Ç. —Å—Ç.\n"
                        f"üí® *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {wind_speed} –º/—Å\n"
                        f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
                    )
                    bot.send_message(chat_id, message, parse_mode="Markdown")
                    send_forecast_remaining_day_by_city(chat_id, city, city_rus, 'forecast')
                    return
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞!")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def send_forecast_remaining_day_by_city(chat_id, city, city_rus, url_type):
    try:
        params = {
            'url': OPENWEATHERMAP_FORECAST_URL,
            'params': {
                'q': city,
                'appid': OPENWEATHERMAP_API_KEY,
                'units': 'metric',
                'lang': 'ru'
            }
        }

        coords = get_city_coordinates(city_rus)
        if coords:
            params['params']['lat'] = coords['latitude']
            params['params']['lon'] = coords['longitude']

        for api in ['openweathermap', 'openmeteo', 'weatherapi']:
            data, api_type = fetch_weather_data(url_type, params, api)
            if data:
                data = normalize_weather_data(data, api_type, url_type)
                if data:
                    forecasts = data['list']
                    now = datetime.now()
                    message = "*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –¥–Ω—è:*\n\n"

                    for forecast in forecasts:
                        date_time = datetime.strptime(forecast['dt_txt'], "%Y-%m-%d %H:%M:%S")
                        if now.date() == date_time.date() and date_time > now:
                            formatted_date = date_time.strftime("%d.%m.%Y")
                            formatted_time = date_time.strftime("%H:%M")
                            temperature = round(forecast['main']['temp'])
                            feels_like = round(forecast['main']['feels_like'])
                            humidity = forecast['main']['humidity']
                            pressure = forecast['main']['pressure']
                            wind_speed = forecast['wind']['speed']
                            description = translate_weather_description(forecast['weather'][0]['description'])

                            message += (
                                f"*–ü–æ–≥–æ–¥–∞ –Ω–∞ {formatted_date} –≤ {formatted_time}:*\n\n"
                                f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temperature}¬∞C\n"
                                f"üå¨Ô∏è *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {feels_like}¬∞C\n"
                                f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {humidity}%\n"
                                f"„ÄΩÔ∏è *–î–∞–≤–ª–µ–Ω–∏–µ:* {pressure} –º–º —Ä—Ç. —Å—Ç.\n"
                                f"üí® *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {wind_speed} –º/—Å\n"
                                f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
                            )

                    if message == "*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –¥–Ω—è:*\n\n":
                        message = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –¥–Ω—è!"

                    bot.send_message(chat_id, message, parse_mode="Markdown")
                    return
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –¥–Ω—è!")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –¥–Ω—è!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def send_forecast_daily_by_city(chat_id, city, city_rus, url_type, days_ahead):
    try:
        params = {
            'url': OPENWEATHERMAP_FORECAST_URL,
            'params': {
                'q': city,
                'appid': OPENWEATHERMAP_API_KEY,
                'units': 'metric',
                'lang': 'ru'
            },
            'days': days_ahead
        }

        coords = get_city_coordinates(city_rus)
        if coords:
            params['params']['lat'] = coords['latitude']
            params['params']['lon'] = coords['longitude']

        for api in ['openweathermap', 'openmeteo', 'weatherapi']:
            data, api_type = fetch_weather_data(url_type, params, api)
            if data:
                data = normalize_weather_data(data, api_type, url_type)
                if data:
                    forecast = data['list'][min(days_ahead * 8, len(data['list']) - 1)]
                    date_time = datetime.strptime(forecast['dt_txt'], "%Y-%m-%d %H:%M:%S")
                    temperature = round(forecast['main']['temp'])
                    feels_like = round(forecast['main']['feels_like'])
                    humidity = forecast['main']['humidity']
                    pressure = forecast['main']['pressure']
                    wind_speed = forecast['wind']['speed']
                    description = translate_weather_description(forecast['weather'][0]['description'])

                    message = (
                        f"*–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city_rus} –Ω–∞ {date_time.strftime('%d.%m.%Y')}*\n\n"
                        f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temperature}¬∞C\n"
                        f"üå¨Ô∏è *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {feels_like}¬∞C\n"
                        f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {humidity}%\n"
                        f"„ÄΩÔ∏è *–î–∞–≤–ª–µ–Ω–∏–µ:* {pressure} –º–º —Ä—Ç. —Å—Ç.\n"
                        f"üí® *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {wind_speed} –º/—Å\n"
                        f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
                    )
                    bot.send_message(chat_id, message, parse_mode="Markdown")
                    send_hourly_forecast_tomorrow_by_city(chat_id, city, city_rus, url_type)
                    return
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞!")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def send_hourly_forecast_tomorrow_by_city(chat_id, city, city_rus, url_type):
    try:
        params = {
            'url': OPENWEATHERMAP_FORECAST_URL,
            'params': {
                'q': city,
                'appid': OPENWEATHERMAP_API_KEY,
                'units': 'metric',
                'lang': 'ru'
            }
        }

        coords = get_city_coordinates(city_rus)
        if coords:
            params['params']['lat'] = coords['latitude']
            params['params']['lon'] = coords['longitude']

        for api in ['openweathermap', 'openmeteo', 'weatherapi']:
            data, api_type = fetch_weather_data(url_type, params, api)
            if data:
                data = normalize_weather_data(data, api_type, url_type)
                if data:
                    forecasts = data['list']
                    now = datetime.now()
                    tomorrow = now + timedelta(days=1)
                    message = "*–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:*\n\n"

                    for forecast in forecasts:
                        date_time = datetime.strptime(forecast['dt_txt'], "%Y-%m-%d %H:%M:%S")
                        if tomorrow.date() == date_time.date():
                            formatted_time = date_time.strftime("%H:%M")
                            formatted_date = date_time.strftime("%d.%m.%Y")
                            temperature = round(forecast['main']['temp'])
                            feels_like = round(forecast['main']['feels_like'])
                            humidity = forecast['main']['humidity']
                            pressure = forecast['main']['pressure']
                            wind_speed = forecast['wind']['speed']
                            description = translate_weather_description(forecast['weather'][0]['description'])

                            message += (
                                f"*–ü–æ–≥–æ–¥–∞ –Ω–∞ {formatted_date} –≤ {formatted_time}:*\n\n"
                                f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temperature}¬∞C\n"
                                f"üå¨Ô∏è *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {feels_like}¬∞C\n"
                                f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {humidity}%\n"
                                f"„ÄΩÔ∏è *–î–∞–≤–ª–µ–Ω–∏–µ:* {pressure} –º–º —Ä—Ç. —Å—Ç.\n"
                                f"üí® *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {wind_speed} –º/—Å\n"
                                f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
                            )

                    if message == "*–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:*\n\n":
                        message = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞!"

                    message_chunks = [message[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(message), MAX_MESSAGE_LENGTH)]
                    for chunk in message_chunks:
                        bot.send_message(chat_id, chunk, parse_mode="Markdown")
                    return
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞!")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def send_forecast_weekly_by_city(chat_id, city, city_rus, url_type, retries=3):
    try:
        params = {
            'url': OPENWEATHERMAP_FORECAST_URL,
            'params': {
                'q': city,
                'appid': OPENWEATHERMAP_API_KEY,
                'units': 'metric',
                'lang': 'ru'
            }
        }

        coords = get_city_coordinates(city_rus)
        if coords:
            params['params']['lat'] = coords['latitude']
            params['params']['lon'] = coords['longitude']

        daily_forecasts = defaultdict(list)
        message = "*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n\n"

        for api in ['openweathermap', 'openmeteo', 'weatherapi']:
            for attempt in range(retries):
                data, api_type = fetch_weather_data(url_type, params, api)
                if data:
                    data = normalize_weather_data(data, api_type, url_type)
                    if data:
                        forecasts = data['list']
                        for forecast in forecasts:
                            date_time = datetime.strptime(forecast['dt_txt'], "%Y-%m-%d %H:%M:%S")
                            date_str = date_time.strftime('%d.%m.%Y')

                            if len(daily_forecasts) >= 7 and date_str not in daily_forecasts:
                                break

                            temperature = round(forecast['main']['temp'])
                            feels_like = round(forecast['main']['feels_like'])
                            humidity = forecast['main']['humidity']
                            pressure = forecast['main']['pressure']
                            wind_speed = forecast['wind']['speed']
                            description = translate_weather_description(forecast['weather'][0]['description'])

                            daily_forecasts[date_str].append({
                                'temperature': temperature,
                                'feels_like': feels_like,
                                'humidity': humidity,
                                'pressure': pressure,
                                'wind_speed': wind_speed,
                                'description': description
                            })

                        for date, forecasts in daily_forecasts.items():
                            temp_sum = sum(f['temperature'] for f in forecasts)
                            feels_like_sum = sum(f['feels_like'] for f in forecasts)
                            count = len(forecasts)
                            avg_temp = round(temp_sum / count)
                            avg_feels_like = round(feels_like_sum / count)

                            message += (
                                f"*–ü–æ–≥–æ–¥–∞ –Ω–∞ {date}:*\n\n"
                                f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {avg_temp}¬∞C\n"
                                f"üå¨Ô∏è *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {avg_feels_like}¬∞C\n"
                                f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {forecasts[0]['humidity']}%\n"
                                f"„ÄΩÔ∏è *–î–∞–≤–ª–µ–Ω–∏–µ:* {forecasts[0]['pressure']} –º–º —Ä—Ç. —Å—Ç.\n"
                                f"üí® *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {forecasts[0]['wind_speed']} –º/—Å\n"
                                f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {forecasts[0]['description']}\n\n"
                            )

                        bot.send_message(chat_id, message, parse_mode="Markdown")
                        return
                if attempt == retries - 1:
                    break
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é!")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def send_forecast_monthly_by_city(chat_id, city, city_rus, url_type, days=31):
    try:
        params = {
            'url': OPENWEATHERMAP_FORECAST_URL,
            'params': {
                'q': city,
                'appid': OPENWEATHERMAP_API_KEY,
                'units': 'metric',
                'lang': 'ru'
            },
            'days': days
        }

        coords = get_city_coordinates(city_rus)
        if coords:
            params['params']['lat'] = coords['latitude']
            params['params']['lon'] = coords['longitude']

        for api in ['openweathermap', 'weatherapi']:
            data, api_type = fetch_weather_data(url_type, params, api)
            if data:
                data = normalize_weather_data(data, api_type, url_type)
                if data:
                    forecasts = data['list']
                    message = "*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü:*\n\n"

                    daily_forecasts = {}
                    for forecast in forecasts:
                        date_time = datetime.strptime(forecast['dt_txt'], "%Y-%m-%d %H:%M:%S")
                        date_str = date_time.strftime('%d.%m.%Y')

                        if date_str not in daily_forecasts:
                            daily_forecasts[date_str] = {
                                'temperature': round(forecast['main']['temp']),
                                'feels_like': round(forecast['main']['feels_like'])
                            }

                    for date, values in daily_forecasts.items():
                        message += (
                            f"*{date}:*\n\n"
                            f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {values['temperature']}¬∞C\n"
                            f"üå¨Ô∏è *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {values['feels_like']}¬∞C\n\n"
                        )

                    unavailable_dates = [
                        date for date in pd.date_range(start=datetime.now(), periods=days).strftime('%d.%m.%Y')
                        if date not in daily_forecasts
                    ]

                    if unavailable_dates:
                        start_date = unavailable_dates[0]
                        end_date = unavailable_dates[-1]
                        message += (
                            f"*–° {start_date} –ø–æ {end_date}:*\n\n_"
                            f"–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π_\n\n"
                        )

                    if message == "*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü:*\n\n":
                        message = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –º–µ—Å—è—Ü!"

                    bot.send_message(chat_id, message, parse_mode="Markdown")
                    return
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü!")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –º–µ—Å—è—Ü!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

# --------------------------------------------------- –¶–ï–ù–´ –ù–ê –¢–û–ü–õ–ò–í–û ---------------------------------------------------------

BASE_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), "data", "user")
CITYFORPRICE_DIR = os.path.join(BASE_DIR, "cityforprice")
AZS_DIR = os.path.join(BASE_DIR, "azs")
DATA_FILE_PATH = os.path.join(CITYFORPRICE_DIR, "city_for_the_price.json")
PROXY_FILE_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "files", "files_for_price_weather", "proxy.txt")
TOR_BRIDGES_FILE_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "files", "files_for_price_weather", "tor_most.txt")

for directory in [CITYFORPRICE_DIR, AZS_DIR]:
    os.makedirs(directory, exist_ok=True)

if not os.path.exists(DATA_FILE_PATH):
    try:
        with open(DATA_FILE_PATH, "w", encoding="utf-8") as f:
            json.dump({}, f, ensure_ascii=False, indent=4)
    except Exception:
        pass
if not os.path.exists(PROXY_FILE_PATH):
    try:
        with open(PROXY_FILE_PATH, 'w', encoding='utf-8') as f:
            f.write("")
    except Exception as e:
        pass
if not os.path.exists(TOR_BRIDGES_FILE_PATH):
    try:
        with open(TOR_BRIDGES_FILE_PATH, 'w', encoding='utf-8') as f:
            f.write("")
    except Exception as e:
        pass

if not os.path.exists(DATA_FILE_PATH):
    try:
        with open(DATA_FILE_PATH, "w", encoding="utf-8") as f:
            json.dump({}, f, ensure_ascii=False, indent=4)
    except Exception:
        pass

user_state = {}
user_data = {}

def load_citys_users_data():
    global user_data
    try:
        with open(DATA_FILE_PATH, "r", encoding="utf-8") as f:
            raw_data = json.load(f)

        unique_user_data = {}
        for chat_id, data in raw_data.items():
            if chat_id not in unique_user_data:
                unique_user_data[chat_id] = {
                    'city_code': data.get('city_code'),
                    'site_type': data.get('site_type', 'default_site_type'),
                    'recent_cities': data.get('recent_cities', [])
                }
            else:
                existing_cities = unique_user_data[chat_id].get('recent_cities', [])
                new_cities = data.get('recent_cities', [])
                unique_user_data[chat_id]['recent_cities'] = list(set(existing_cities + new_cities))
                if data.get('city_code'):
                    unique_user_data[chat_id]['city_code'] = data['city_code']

        user_data = unique_user_data
        save_citys_users_data()  
    except (FileNotFoundError, json.JSONDecodeError):
        user_data = {}
        save_citys_users_data()
    except Exception as e:
        user_data = {}

def save_citys_users_data():
    try:
        with open(DATA_FILE_PATH, "w", encoding="utf-8") as f:
            json.dump(user_data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        pass
    
load_citys_users_data()

def create_filename(city_code, date):
    date_str = date.strftime('%d_%m_%Y')
    return f"{city_code}_table_azs_data_{date_str}.json"

def save_fuel_data(city_code, fuel_prices):
    filename = f'{city_code}_table_azs_data.json'
    filepath = os.path.join(AZS_DIR, filename)

    with open(filepath, 'w', encoding='utf-8') as f:
        json.dump(fuel_prices, f, ensure_ascii=False, indent=4)

def load_saved_data(city_code):
    filename = f'{city_code}_table_azs_data.json'
    filepath = os.path.join(AZS_DIR, filename)

    if not os.path.exists(filepath):
        return None

    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return None

cities_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'files', 'files_for_price_weather', 'combined_cities.txt')

def load_cities():
    cities = {}
    try:
        with open(cities_file_path, 'r', encoding='utf-8') as file:
            for line in file:
                if '-' in line:
                    city, city_code = line.strip().split(' - ')
                    cities[city.lower()] = city_code
    except (FileNotFoundError, Exception):
        pass
    return cities

cities_dict = load_cities()

def get_city_code(city_name):
    return cities_dict.get(city_name.lower())

def load_proxies():
    proxies = []
    try:
        with open(PROXY_FILE_PATH, 'r', encoding='utf-8') as f:
            for line in f:
                proxy = line.strip()
                if proxy:
                    proxies.append(proxy)
    except FileNotFoundError:
        pass
    return proxies

def load_tor_bridges():
    bridges = []
    try:
        with open(TOR_BRIDGES_FILE_PATH, 'r', encoding='utf-8') as f:
            for line in f:
                bridge = line.strip()
                if bridge and bridge.startswith('obfs4'):
                    bridges.append(bridge)
    except FileNotFoundError:
        print(f"–§–∞–π–ª {TOR_BRIDGES_FILE_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ—Å—Ç–æ–≤: {e}")
    return bridges

@bot.message_handler(func=lambda message: message.text == "–¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ")
@check_function_state_decorator('–¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ')
@track_usage('–¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def fuel_prices_command(message, show_description=True):
    chat_id = message.chat.id
    load_citys_users_data()
    user_state[chat_id] = "choosing_city"

    str_chat_id = str(chat_id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

    if str_chat_id in user_data and 'recent_cities' in user_data[str_chat_id]:
        recent_cities = user_data[str_chat_id]['recent_cities']
        city_buttons = [types.KeyboardButton(city.capitalize()) for city in recent_cities]
        markup.row(*city_buttons)

    markup.add(types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    reference_info = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ü–µ–Ω–∞–º –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ*\n\n"
        "üìå *–ì–æ—Ä–æ–¥:* –í–≤–æ–¥–∏—Ç—Å—è *–≥–æ—Ä–æ–¥* –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è *–≥–µ–æ–ø–æ–∑–∏—Ü–∏—è* –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö —Ü–µ–Ω –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ —Ä–∞–∑–Ω—ã—Ö –º–∞—Ä–æ–∫ –ê–ó–°\n\n"
        "üìå *–¢–∏–ø:* –í—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ *(–ê–ò-92, –ê–ò-95, –ê–ò-98, –ê–ò-100, –î–¢, –ì–ê–ó)*\n\n"
        "üìå *–¶–µ–Ω—ã:* *–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω* –Ω–∞ –Ω—É–∂–Ω—ã–π –≤–∏–¥ —Ç–æ–ø–ª–∏–≤–∞ *–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ*\n\n"
        "_P.S. –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑-–∑–∞ —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ telegram. "
        "–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è 1 —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏. –ï—Å–ª–∏ –≤–∞—à –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, "
        "—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä –≥. –ú–æ—Å–∫–≤–∞ –∏–ª–∏ –≥. –ß–µ–±–æ–∫—Å–∞—Ä—ã, –∏ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç—Ç–∏—Ö –≥–æ—Ä–æ–¥–æ–≤, "
        "—Ç–æ —Å–ª–µ–¥—É–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É) –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã!_"
    )

    if show_description:
        bot.send_message(chat_id, reference_info, parse_mode='Markdown')

    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:", reply_markup=markup)
    bot.register_next_step_handler(message, process_city_selection)

def get_city_from_coordinates(latitude, longitude):
    time.sleep(1) 
    try:
        url = f"https://nominatim.openstreetmap.org/reverse?lat={latitude}&lon={longitude}&format=json"
        headers = {
            'User-Agent': 'YourBotName/1.0 (0543398@gmail.com)' # API
        }
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        data = response.json()

        address = data.get('address', {})
        city = address.get('city') or address.get('town') or address.get('village')
        return city
    except Exception as e:
        return None

@text_only_handler
def process_city_selection(message):
    chat_id = message.chat.id
    str_chat_id = str(chat_id)

    if message.text and message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if user_state.get(chat_id) != "choosing_city":
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        return

    city_name = None
    city_code = None

    if message.location:
        latitude = message.location.latitude
        longitude = message.location.longitude
        city_name = get_city_from_coordinates(latitude, longitude)
        if not city_name:
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –≤–∞—à–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
            recent_cities = user_data.get(str_chat_id, {}).get('recent_cities', [])
            if recent_cities:
                markup.add(*[types.KeyboardButton(city.title()) for city in recent_cities])
            markup.add(types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True))
            markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:", reply_markup=markup)
            bot.register_next_step_handler(message, process_city_selection)
            return
        city_name = city_name.lower()
        city_code = get_city_code(city_name)
    else:
        if not message.text:
            bot.send_message(chat_id, "‚õîÔ∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
            recent_cities = user_data.get(str_chat_id, {}).get('recent_cities', [])
            if recent_cities:
                markup.add(*[types.KeyboardButton(city.title()) for city in recent_cities])
            markup.add(types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True))
            markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:", reply_markup=markup)
            bot.register_next_step_handler(message, process_city_selection)
            return

        city_name = message.text.strip().lower()
        city_code = get_city_code(city_name)

    if not city_code:
        bot.send_message(chat_id, f"–ì–æ—Ä–æ–¥ {city_name.capitalize()} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        recent_cities = user_data.get(str_chat_id, {}).get('recent_cities', [])
        if recent_cities:
            markup.add(*[types.KeyboardButton(city.title()) for city in recent_cities])
        markup.add(types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:", reply_markup=markup)
        bot.register_next_step_handler(message, process_city_selection)
        return

    if str_chat_id not in user_data:
        user_data[str_chat_id] = {
            'recent_cities': [],
            'city_code': city_code,
            'site_type': 'default_site_type'
        }
    else:
        user_data[str_chat_id]['city_code'] = city_code
        if 'site_type' not in user_data[str_chat_id]:
            user_data[str_chat_id]['site_type'] = 'default_site_type'

    update_recent_cities(str_chat_id, city_name)
    save_citys_users_data()

    latitude = message.location.latitude if message.location else None
    longitude = message.location.longitude if message.location else None
    save_user_location(chat_id, latitude, longitude, city_code)

    site_type = user_data[str_chat_id]['site_type']
    show_fuel_price_menu(chat_id, city_code, site_type)

def update_recent_cities(chat_id, city_name):
    if chat_id not in user_data:
        user_data[chat_id] = {
            'recent_cities': [],
            'city_code': None,
            'site_type': 'default_site_type'
        }

    recent_cities = user_data[chat_id].get('recent_cities', [])

    if city_name in recent_cities:
        recent_cities.remove(city_name)
    
    recent_cities.append(city_name)

    if len(recent_cities) > 3:
        recent_cities = recent_cities[-3:]

    user_data[chat_id]['recent_cities'] = recent_cities
    save_citys_users_data()

fuel_types = ["–ê–ò-92", "–ê–ò-95", "–ê–ò-98", "–ê–ò-100", "–î–¢", "–ì–∞–∑"]

def show_fuel_price_menu(chat_id, city_code, site_type):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    row1 = [types.KeyboardButton(fuel_type) for fuel_type in fuel_types[:3]]
    row2 = [types.KeyboardButton(fuel_type) for fuel_type in fuel_types[3:]]
    row3 = [types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")]
    row4 = [types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    markup.add(*row1, *row2)
    markup.add(*row3)
    markup.add(*row4)
    sent = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω:", reply_markup=markup)
    bot.register_next_step_handler(sent, lambda msg: process_fuel_price_selection(msg, city_code, site_type))

progress = 0
progress_lock = threading.Lock()
processing_complete = False  

def update_progress(chat_id, message_id, bot, start_time):
    global progress, processing_complete
    while True:
        time.sleep(1)
        elapsed_time = time.time() - start_time
        with progress_lock:
            if processing_complete:
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: 100%\n–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥"
                )
                break
            current_progress = min(progress, 99)  
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è... –û–∂–∏–¥–∞–π—Ç–µ, –Ω–∏–∫—É–¥–∞ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç–µ!\n\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {current_progress:.2f}%\n–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥"
        )

@text_only_handler
def process_fuel_price_selection(message, city_code, site_type):
    global progress, processing_complete
    chat_id = message.chat.id

    if chat_id not in user_data:
        user_data[chat_id] = {'city_code': city_code, 'site_type': site_type}

    if message.text and message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text and message.text == "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥":
        user_state[chat_id] = "choosing_city"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        recent_cities = user_data.get(str(chat_id), {}).get('recent_cities', [])
        city_buttons = [types.KeyboardButton(city.capitalize()) for city in recent_cities]
        if city_buttons:
            markup.row(*city_buttons)
        markup.add(types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:", reply_markup=markup)
        bot.register_next_step_handler(message, process_city_selection)
        return

    if not message.text:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        row1 = [types.KeyboardButton(fuel_type) for fuel_type in fuel_types[:3]]
        row2 = [types.KeyboardButton(fuel_type) for fuel_type in fuel_types[3:]]
        row3 = [types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")]
        row4 = [types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        markup.add(*row1, *row2)
        markup.add(*row3)
        markup.add(*row4)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω:", reply_markup=markup)
        bot.register_next_step_handler(sent, lambda msg: process_fuel_price_selection(msg, city_code, site_type))
        return

    selected_fuel_type = message.text.strip().lower()

    fuel_type_mapping = {
        "–∞–∏-92": ["–ê–ò-92", "–ü—Ä–µ–º–∏—É–º 92"],
        "–∞–∏-95": ["–ê–ò-95", "–ü—Ä–µ–º–∏—É–º 95"],
        "–∞–∏-98": ["–ê–ò-98", "–ü—Ä–µ–º–∏—É–º 98"],
        "–∞–∏-100": ["–ê–ò-100", "–ü—Ä–µ–º–∏—É–º 100"],
        "–¥—Ç": ["–î–¢", "–ü—Ä–µ–º–∏—É–º –î–¢"],
        "–≥–∞–∑": ["–ì–∞–∑", "–ì–∞–∑ –°–ü–ë–¢"],
    }

    if selected_fuel_type not in fuel_type_mapping:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        row1 = [types.KeyboardButton(fuel_type) for fuel_type in fuel_types[:3]]
        row2 = [types.KeyboardButton(fuel_type) for fuel_type in fuel_types[3:]]
        row3 = [types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")]
        row4 = [types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        markup.add(*row1, *row2)
        markup.add(*row3)
        markup.add(*row4)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω:", reply_markup=markup)
        bot.register_next_step_handler(sent, lambda msg: process_fuel_price_selection(msg, city_code, site_type))
        return

    actual_fuel_types = fuel_type_mapping[selected_fuel_type]

    progress_message = bot.send_message(chat_id, "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è... –û–∂–∏–¥–∞–π—Ç–µ, –Ω–∏–∫—É–¥–∞ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç–µ!")
    message_id = progress_message.message_id

    start_time = time.time()
    progress = 0
    processing_complete = False  
    progress_thread = threading.Thread(target=update_progress, args=(chat_id, message_id, bot, start_time))
    progress_thread.start()

    try:
        fuel_prices = []
        total_steps = len(actual_fuel_types) * 2
        current_step = 0

        saved_data = load_saved_data(city_code)
        today = datetime.now().date()

        if saved_data:
            file_modification_time = datetime.fromtimestamp(os.path.getmtime(os.path.join('data', 'user', 'azs', f"{city_code}_table_azs_data.json"))).date()
            if file_modification_time >= today:
                print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")
                fuel_prices = [
                    item for item in saved_data
                    if item[1].lower() in [ft.lower() for ft in actual_fuel_types]
                ]
                with progress_lock:
                    progress = 90  
            else:
                for fuel_type in actual_fuel_types:
                    try:
                        print(f"–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ AZCPRICE –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                        fuel_prices.extend(get_fuel_prices_from_site(city_code, "azcprice"))
                        current_step += 1
                    except ValueError:
                        try:
                            print(f"–°–∞–π—Ç AZCPRICE –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ petrolplus –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                            fuel_prices.extend(get_fuel_prices_from_site(city_code, "petrolplus"))
                            current_step += 1
                        except ValueError:
                            print(f"–û–±–∞ —Å–∞–π—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                            current_step += 1

                    with progress_lock:
                        progress = (current_step / total_steps) * 90  

                save_fuel_data(city_code, fuel_prices)
        else:
            for fuel_type in actual_fuel_types:
                try:
                    print(f"–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ AZCPRICE –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                    fuel_prices.extend(get_fuel_prices_from_site(city_code, "azcprice"))
                    current_step += 1
                except ValueError:
                    try:
                        print(f"–°–∞–π—Ç AZCPRICE –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ petrolplus –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                        fuel_prices.extend(get_fuel_prices_from_site(city_code, "petrolplus"))
                        current_step += 1
                    except ValueError:
                        print(f"–û–±–∞ —Å–∞–π—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                        current_step += 1

                with progress_lock:
                    progress = (current_step / total_steps) * 90  

            save_fuel_data(city_code, fuel_prices)

        if not fuel_prices:
            raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ü–µ–Ω–∞–º!")

        fuel_prices = [
            item for item in fuel_prices
            if item[1].lower() in [ft.lower() for ft in actual_fuel_types]
        ]

        brand_prices = {}
        for brand, fuel_type, price in fuel_prices:
            price = float(price)
            brand_name = brand.split(' ‚Ññ')[0]
            if brand_name not in brand_prices:
                brand_prices[brand_name] = []
            brand_prices[brand_name].append((fuel_type, price))

        normal_prices = {brand: [price for fuel_type, price in prices if '–ü—Ä–µ–º–∏—É–º' not in fuel_type] for brand, prices in brand_prices.items()}
        premium_prices = {brand: [price for fuel_type, price in prices if '–ü—Ä–µ–º–∏—É–º' in fuel_type] for brand, prices in brand_prices.items()}

        normal_prices = {brand: prices for brand, prices in normal_prices.items() if prices}
        premium_prices = {brand: prices for brand, prices in premium_prices.items() if prices}

        averaged_normal_prices = {brand: sum(prices) / len(prices) for brand, prices in normal_prices.items()}
        averaged_premium_prices = {brand: sum(prices) / len(prices) for brand, prices in premium_prices.items()}

        sorted_normal_prices = sorted(averaged_normal_prices.items(), key=lambda x: x[1])
        sorted_premium_prices = sorted(averaged_premium_prices.items(), key=lambda x: x[1])

        readable_fuel_type = selected_fuel_type.upper()

        normal_prices_message = "\n\n".join([f"‚õΩ {i + 1}. {brand} - {avg_price:.2f} —Ä—É–±./–ª." for i, (brand, avg_price) in enumerate(sorted_normal_prices)])
        premium_prices_message = "\n\n".join([f"‚õΩ {i + 1}. {brand} - {avg_price:.2f} —Ä—É–±./–ª." for i, (brand, avg_price) in enumerate(sorted_premium_prices)])

        max_length = 4000
        normal_parts = [normal_prices_message[i:i + max_length] for i in range(0, len(normal_prices_message), max_length)]
        premium_parts = [premium_prices_message[i:i + max_length] for i in range(0, len(premium_prices_message), max_length)]

        with progress_lock:
            progress = 100
            processing_complete = True 

        if normal_parts:
            for i, part in enumerate(normal_parts):
                if i == 0:
                    bot.send_message(chat_id, f"*–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ {readable_fuel_type}:*\n\n{part}", parse_mode="Markdown")
                else:
                    bot.send_message(chat_id, part, parse_mode="Markdown")

        if premium_parts:
            for i, part in enumerate(premium_parts):
                if i == 0:
                    bot.send_message(chat_id, f"*–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ {readable_fuel_type} –ü—Ä–µ–º–∏—É–º:*\n\n{part}", parse_mode="Markdown")
                else:
                    bot.send_message(chat_id, part, parse_mode="Markdown")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        another_fuel_button = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–µ —Ç–æ–ø–ª–∏–≤–æ")
        choose_another_city_button = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")
        main_menu_button = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(another_fuel_button)
        markup.add(choose_another_city_button)
        markup.add(main_menu_button)

        user_state[chat_id] = "next_action"
        sent = bot.send_message(chat_id, "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–µ —Ç–æ–ø–ª–∏–≤–æ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥:", reply_markup=markup)
        bot.register_next_step_handler(sent, process_next_action)

    except Exception as e:
        with progress_lock:
            progress = 100
            processing_complete = True 

        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω!\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏...\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞!")
        show_fuel_price_menu(chat_id, city_code, site_type)
        return
    
def process_next_action(message):
    chat_id = message.chat.id
    text = message.text.strip().lower()

    if text == "–≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥":
        user_state[chat_id] = "choosing_city"

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        recent_cities = user_data.get(str(chat_id), {}).get('recent_cities', [])
        city_buttons = [types.KeyboardButton(city.capitalize()) for city in recent_cities]
        if city_buttons:
            markup.row(*city_buttons)
        markup.add(types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:", reply_markup=markup)
        bot.register_next_step_handler(message, process_city_selection)

    elif text == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–µ —Ç–æ–ø–ª–∏–≤–æ":
        city_code = user_data[str(chat_id)]['city_code']
        site_type = "default_site_type"
        show_fuel_price_menu(chat_id, city_code, site_type)

    elif text == "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)

    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π")
        bot.register_next_step_handler(message, process_next_action)

def process_city_fuel_data(city_code, selected_fuel_type, site_type, actual_fuel_types):
    today = datetime.now().date()
    saved_data = load_saved_data(city_code)

    filepath = os.path.join('data', 'user', 'azs', f"{city_code}_table_azs_data.json")
    if saved_data:
        file_modification_time = datetime.fromtimestamp(os.path.getmtime(filepath)).date()
        if file_modification_time < today:
            all_fuel_prices = []
            for fuel_type in actual_fuel_types:
                try:
                    print(f"–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ AZCPRICE –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                    fuel_prices = get_fuel_prices_from_site(fuel_type, city_code, "azcprice")
                except ValueError:
                    try:
                        print(f"–°–∞–π—Ç AZCPRICE –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ petrolplus –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                        fuel_prices = get_fuel_prices_from_site(fuel_type, city_code, "petrolplus")
                    except ValueError:
                        print(f"–û–±–∞ —Å–∞–π—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                        if saved_data:
                            return [
                                item for item in saved_data
                                if item[1].lower() in [ft.lower() for ft in actual_fuel_types]
                            ]
                        raise ValueError("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω!\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏...\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞!")

                fuel_prices = remove_duplicate_prices(fuel_prices)
                all_fuel_prices.extend(fuel_prices)

            save_fuel_data(city_code, all_fuel_prices)
            saved_data = all_fuel_prices

    if not saved_data:
        all_fuel_prices = []
        for fuel_type in actual_fuel_types:
            try:
                print(f"–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ AZCPRICE –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                fuel_prices = get_fuel_prices_from_site(fuel_type, city_code, "azcprice")
            except ValueError:
                try:
                    print(f"–°–∞–π—Ç AZCPRICE –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ petrolplus –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                    fuel_prices = get_fuel_prices_from_site(fuel_type, city_code, "petrolplus")
                except ValueError:
                    print(f"–û–±–∞ —Å–∞–π—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                    raise ValueError("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω!\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏...\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞!")

            fuel_prices = remove_duplicate_prices(fuel_prices)
            all_fuel_prices.extend(fuel_prices)

        save_fuel_data(city_code, all_fuel_prices)
        saved_data = all_fuel_prices

    filtered_prices = [
        item for item in saved_data
        if item[1].lower() in [ft.lower() for ft in actual_fuel_types]
    ]
    return remove_duplicate_prices(filtered_prices)

def remove_duplicate_prices(fuel_prices):
    unique_prices = {}
    for brand, fuel_type, price in fuel_prices:
        price = float(price)
        key = (brand, fuel_type)
        if key not in unique_prices or price < unique_prices[key]:
            unique_prices[key] = price
    return [(brand, fuel_type, price) for (brand, fuel_type), price in unique_prices.items()]

def renew_tor_circuit():
    try:
        with Controller.from_port(port=9051) as controller:
            controller.authenticate()
            controller.signal(Signal.NEWNYM)
            time.sleep(5)  
            print("–¶–µ–ø–æ—á–∫–∞ Tor —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∏ Tor: {e}")

def get_fuel_prices_from_site(city_code, site_type, proxies=None, retry_count=1):
    headers = {
        'User-Agent': 'FuelPriceBot/1.0 (0543398@gmail.com)' # API
    }
    
    def parse_table(soup, site_type):
        fuel_prices = []
        table = soup.find('table')
        if not table:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏")
        
        if site_type == "azcprice":
            rows = table.find_all('tr')
            for row in rows[1:]:
                columns = row.find_all('td')
                if len(columns) < 5:
                    continue
                brand = columns[1].text.strip()
                fuel_type = columns[2].text.strip()
                today_price = clean_price(columns[3].text.strip())
                if fuel_type == "–ì–∞–∑ –°–ü–ë–¢":
                    fuel_type = "–ì–∞–∑"
                fuel_prices.append((brand, fuel_type, today_price))
        
        elif site_type == "petrolplus":
            for row in table.find_all('tr')[1:]:
                cols = row.find_all('td')
                if len(cols) >= 3:
                    brand = cols[1].text.strip()
                    fuel_types = [ft.strip() for ft in cols[2].stripped_strings]
                    prices = [p.strip().replace(',', '.') for p in cols[3].stripped_strings]
                    for fuel_type, price in zip(fuel_types, prices):
                        if fuel_type == "–ì–∞–∑ –°–ü–ë–¢":
                            fuel_type = "–ì–∞–∑"
                        fuel_prices.append((brand, fuel_type, clean_price(price)))
        
        return fuel_prices

    try:
        if site_type == "azcprice":
            url = f'https://fuelprice.ru/t-{city_code}'
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
            soup = BeautifulSoup(response.text, 'html.parser')
            return parse_table(soup, site_type)
        
        elif site_type == "petrolplus":
            base_url = f'https://www.petrolplus.ru/fuelstations/{city_code}/?PAGEN_='
            page = 1
            all_fuel_prices = []
            while True:
                url = f'{base_url}{page}'
                response = requests.get(url, headers=headers, timeout=10)
                response.raise_for_status()
                soup = BeautifulSoup(response.text, 'html.parser')
                table = soup.find('table')
                if not table:
                    break
                all_fuel_prices.extend(parse_table(soup, site_type))
                page += 1
            return all_fuel_prices

    except (requests.exceptions.RequestException, ValueError) as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å —Ç–µ–∫—É—â–µ–≥–æ IP –¥–ª—è {site_type}: {e}")

        if proxies:
            for proxy in proxies:
                try:
                    proxy_dict = {
                        'http': proxy,
                        'https': proxy,
                        'socks4': proxy,
                        'socks5': proxy
                    }
                    print(f"–ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {proxy}")
                    if site_type == "azcprice":
                        url = f'https://fuelprice.ru/t-{city_code}'
                        response = requests.get(url, headers=headers, proxies=proxy_dict, timeout=10)
                        response.raise_for_status()
                        soup = BeautifulSoup(response.text, 'html.parser')
                        return parse_table(soup, site_type)
                    
                    elif site_type == "petrolplus":
                        base_url = f'https://www.petrolplus.ru/fuelstations/{city_code}/?PAGEN_='
                        page = 1
                        all_fuel_prices = []
                        while True:
                            url = f'{base_url}{page}'
                            response = requests.get(url, headers=headers, proxies=proxy_dict, timeout=10)
                            response.raise_for_status()
                            soup = BeautifulSoup(response.text, 'html.parser')
                            table = soup.find('table')
                            if not table:
                                break
                            all_fuel_prices.extend(parse_table(soup, site_type))
                            page += 1
                        return all_fuel_prices

                except (requests.exceptions.RequestException, ValueError) as proxy_error:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏ {proxy} –¥–ª—è {site_type}: {proxy_error}")
                    continue

        print(f"–ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ Tor –¥–ª—è {site_type}...")
        try:
            renew_tor_circuit()
            if site_type == "azcprice":
                url = f'https://fuelprice.ru/t-{city_code}'
                response = requests.get(url, headers=headers, timeout=10) 
                response.raise_for_status()
                soup = BeautifulSoup(response.text, 'html.parser')
                return parse_table(soup, site_type)
            
            elif site_type == "petrolplus":
                base_url = f'https://www.petrolplus.ru/fuelstations/{city_code}/?PAGEN_='
                page = 1
                all_fuel_prices = []
                while True:
                    url = f'{base_url}{page}'
                    response = requests.get(url, headers=headers, timeout=10)
                    response.raise_for_status()
                    soup = BeautifulSoup(response.text, 'html.parser')
                    table = soup.find('table')
                    if not table:
                        break
                    all_fuel_prices.extend(parse_table(soup, site_type))
                    page += 1
                return all_fuel_prices

        except (requests.exceptions.RequestException, ValueError) as tor_error:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Tor –¥–ª—è {site_type}: {tor_error}")

            if retry_count > 0:
                print(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ({retry_count}) —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                time.sleep(5)
                return get_fuel_prices_from_site(city_code, site_type, proxies, retry_count - 1)
            else:
                raise ValueError("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω!\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏...\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞!")
            
def clean_price(price):
    cleaned_price = ''.join([ch for ch in price if ch.isdigit() or ch == '.'])
    return cleaned_price

def parse_fuel_prices():
    cities_to_parse = os.listdir(os.path.join('data', 'user', 'azs'))
    for city_code in cities_to_parse:
        city_code = city_code.replace('_table_azs_data.json', '')
        saved_data = load_saved_data(city_code)

        today = datetime.now().date()
        if saved_data:
            file_modification_time = datetime.fromtimestamp(os.path.getmtime(os.path.join('data', 'user', 'azs', f"{city_code}_table_azs_data.json"))).date()
            if file_modification_time >= today:
                print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

        all_fuel_prices = []
        for fuel_type in fuel_types:
            try:
                fuel_prices = get_fuel_prices_from_site(fuel_type, city_code, "azcprice")
            except ValueError:
                try:
                    fuel_prices = get_fuel_prices_from_site(fuel_type, city_code, "petrolplus")
                except ValueError:
                    print(f"–û–±–∞ —Å–∞–π—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code}")
                    continue

            fuel_prices = remove_duplicate_prices(fuel_prices)
            all_fuel_prices.extend(fuel_prices)

        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} —Å {len(all_fuel_prices)} –∑–∞–ø–∏—Å—è–º–∏.")
        save_fuel_data(city_code, all_fuel_prices)
        print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

def parse_fuel_prices_scheduled():
    proxies = load_proxies()
    bridges = load_tor_bridges() 
    cities_to_parse = os.listdir(os.path.join('data', 'user', 'azs'))
    
    for i, city_code in enumerate(cities_to_parse):
        city_code = city_code.replace('_table_azs_data.json', '')
        saved_data = load_saved_data(city_code)

        today = datetime.now().date()
        if saved_data:
            file_modification_time = datetime.fromtimestamp(os.path.getmtime(os.path.join('data', 'user', 'azs', f"{city_code}_table_azs_data.json"))).date()
            if file_modification_time >= today:
                print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

        all_fuel_prices = []
        for fuel_type in fuel_types:
            try:
                fuel_prices = get_fuel_prices_from_site(city_code, "azcprice", proxies=proxies)
            except ValueError:
                try:
                    fuel_prices = get_fuel_prices_from_site(city_code, "petrolplus", proxies=proxies)
                except ValueError:
                    print(f"–û–±–∞ —Å–∞–π—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code}")
                    continue

            fuel_prices = remove_duplicate_prices(fuel_prices)
            all_fuel_prices.extend(fuel_prices)

        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} —Å {len(all_fuel_prices)} –∑–∞–ø–∏—Å—è–º–∏.")
        save_fuel_data(city_code, all_fuel_prices)
        print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        
        if i < len(cities_to_parse) - 1: 
            time.sleep(300)  

def schedule_tasks_for_azs():
    schedule.every().day.at("00:00").do(parse_fuel_prices_scheduled)
    while True:
        schedule.run_pending()
        time.sleep(60)

threading.Thread(target=schedule_tasks_for_azs, daemon=True).start()

# --------------------------------------------------- –ö–û–î –†–ï–ì–ò–û–ù–ê ---------------------------------------------------------

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
FILES_DIR = os.path.join(BASE_DIR, "files")
FILES_FOR_REGIONS_DIR = os.path.join(FILES_DIR, "files_for_regions")
REGIONS_FILE_PATH = os.path.join(FILES_DIR, FILES_FOR_REGIONS_DIR, "regions.txt")

os.makedirs(FILES_DIR, exist_ok=True)
os.makedirs(FILES_FOR_REGIONS_DIR, exist_ok=True)

if not os.path.exists(REGIONS_FILE_PATH):
    try:
        with open(REGIONS_FILE_PATH, "w", encoding="utf-8") as f:
            f.write("")
    except Exception as e:
        pass

ALLOWED_LETTERS = "–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•ABEKMHOPCTYX"

def is_valid_car_number(car_number):
    pattern = rf"^[{ALLOWED_LETTERS}]\d{{3}}[{ALLOWED_LETTERS}]{{2}}\d{{2,3}}$"
    return bool(re.match(pattern, car_number))

regions = {}
try:
    with open(REGIONS_FILE_PATH, 'r', encoding='utf-8') as file:
        for line in file:
            parts = line.strip().split(' ‚Äî ')
            if len(parts) == 2:
                code, name = parts
                regions[code.strip()] = name.strip()
except FileNotFoundError:
    pass
except Exception as e:
    pass

@bot.message_handler(func=lambda message: message.text == "–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞")
@check_function_state_decorator('–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞')
@track_usage('–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def regioncode(message, show_description=True):
    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–æ–∏—Å–∫—É –∫–æ–¥–∞ —Ä–µ–≥–∏–æ–Ω–∞ –∏ –≥–æ—Å–Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ*\n\n"
        "üìå *–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞:*\n"
        "–í–≤–æ–¥–∏—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ü–∏—Ñ—Ä *(2-3 —Ü–∏—Ñ—Ä—ã)* - *21* –∏–ª–∏ *121*\n\n"
        "üìå *–ì–æ—Å–Ω–æ–º–µ—Ä:*\n"
        "–í–≤–æ–¥–∏—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –†–§ *(8-9 —Å–∏–º–≤–æ–ª–æ–≤)* - *A121–ê–ê21* –∏–ª–∏ *–ê121–ê–ê121*"
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)

    if show_description:
        bot.send_message(message.chat.id, description, parse_mode="Markdown")

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥—ã —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–ª–∏ –≥–æ—Å–Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:", reply_markup=markup)
    bot.register_next_step_handler(message, process_input)

@text_only_handler
def process_input(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    text = message.text.strip()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)

    inputs = [i.strip() for i in text.split(',')]
    responses = []

    for input_item in inputs:
        if input_item.isdigit() and (2 <= len(input_item) <= 3):
            region_code = input_item
            if region_code in regions:
                region_name = regions[region_code]
                response = f"üîç *–†–µ–≥–∏–æ–Ω –¥–ª—è –∫–æ–¥–∞ {region_code}:*\n{region_name}\n\n"
            else:
                response = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω –¥–ª—è –∫–æ–¥–∞: *{region_code}*\n\n"

        elif 8 <= len(input_item) <= 9 and is_valid_car_number(input_item.upper()):
            car_number = input_item.upper()
            region_code = car_number[-3:] if len(car_number) == 9 else car_number[-2:]

            if region_code in regions:
                region_name = regions[region_code]
                avtocod_url = f"https://avtocod.ru/proverkaavto/{car_number}?rd=GRZ"
                short_url = shorten_url(avtocod_url)

                response = (
                    f"üîç –†–µ–≥–∏–æ–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞ `{car_number}`: {region_name}\n"
                    f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ AvtoCod —Å –ø–æ–∏—Å–∫–æ–º]({short_url})\n\n"
                )
            else:
                response = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞: `{car_number}`\n\n"

        else:
            response = f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è `{input_item}`!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–æ—Å–Ω–æ–º–µ—Ä –∏–ª–∏ –∫–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞\n\n"

        responses.append(response)

    final_response = "".join(responses)
    bot.send_message(message.chat.id, final_response, reply_markup=markup, parse_mode="Markdown")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–¥—ã —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–ª–∏ –≥–æ—Å–Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    bot.register_next_step_handler(message, process_input)

# --------------------------------------------------- –ö–û–î–´ OBD2 ---------------------------------------------------------

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
FILES_DIR = os.path.join(BASE_DIR, "files")
FILES_FOR_OBD2_DIR = os.path.join(FILES_DIR, "files_for_obd2")
os.makedirs(FILES_DIR, exist_ok=True)
os.makedirs(FILES_FOR_OBD2_DIR, exist_ok=True)

def load_error_codes():
    error_codes = {}
    try:
        with open(os.path.join(FILES_FOR_OBD2_DIR, "codes_obd2.txt"), "r", encoding="utf-8") as file:
            for line in file:
                parts = line.strip().split(" ", 1)
                if len(parts) == 2:
                    code, description = parts
                    error_codes[code] = description
    except FileNotFoundError:
        pass
    return error_codes

error_codes = load_error_codes()

@bot.message_handler(func=lambda message: message.text == "–ö–æ–¥—ã OBD2")
@check_function_state_decorator('–ö–æ–¥—ã OBD2')
@track_usage('–ö–æ–¥—ã OBD2')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def obd2_request(message, show_description=True):

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    help_text = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —á—Ç–µ–Ω–∏—é –∫–æ–¥–æ–≤ OBD2*\n\n"
        "üìå *–ü–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è:*\n"
        "*P* - –∫–æ–¥ —Å–≤—è–∑–∞–Ω —Å —Ä–∞–±–æ—Ç–æ–π –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏/–∏–ª–∏ –ê–ö–ü–ü\n"
        "*B* - –∫–æ–¥ —Å–≤—è–∑–∞–Ω —Å —Ä–∞–±–æ—Ç–æ–π \"–∫—É–∑–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º\" (–ø–æ–¥—É—à–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∑–∞–º–æ–∫, —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–µ–∫–ª–æ–ø–æ–¥—ä–µ–º–Ω–∏–∫–∏)\n"
        "*C* - –∫–æ–¥ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ —à–∞—Å—Å–∏ (—Ö–æ–¥–æ–≤–æ–π —á–∞—Å—Ç–∏)\n"
        "*U* - –∫–æ–¥ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º–∏ –±–ª–æ–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫ —à–∏–Ω–µ CAN)\n\n"
        "üìå *–í—Ç–æ—Ä–∞—è –ø–æ–∑–∏—Ü–∏—è:*\n"
        "*0* - –æ–±—â–∏–π –¥–ª—è OBD2 –∫–æ–¥\n"
        "*1 –∏ 2* - –∫–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è\n"
        "*3* - —Ä–µ–∑–µ—Ä–≤\n\n"
        "üìå *–¢—Ä–µ—Ç—å—è –ø–æ–∑–∏—Ü–∏—è* - —Ç–∏–ø –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏:\n"
        "*1* - —Ç–æ–ø–ª–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–ª–∏ –≤–æ–∑–¥—É—Ö–æ–ø–æ–¥–∞—á–∞\n"
        "*2* - —Ç–æ–ø–ª–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–ª–∏ –≤–æ–∑–¥—É—Ö–æ–ø–æ–¥–∞—á–∞\n"
        "*3* - —Å–∏—Å—Ç–µ–º–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è\n"
        "*4* - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å\n"
        "*5* - —Ö–æ–ª–æ—Å—Ç–æ–π —Ö–æ–¥\n"
        "*6* - ECU –∏–ª–∏ –µ–≥–æ —Ü–µ–ø–∏\n"
        "*7* - —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è\n"
        "*8* - —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è\n\n"
        "üìå *–ß–µ—Ç–≤–µ—Ä—Ç–∞—è –∏ –ø—è—Ç–∞—è –ø–æ–∑–∏—Ü–∏–∏* - –ø–æ—Ä—è–¥–∫–æ–≤—ã–π *–Ω–æ–º–µ—Ä* –æ—à–∏–±–∫–∏\n\n"
    )

    if show_description:
        bot.send_message(message.chat.id, help_text, parse_mode="Markdown")

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥—ã –æ—à–∏–±–æ–∫ OBD2 —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_error_codes)

@text_only_handler
def process_error_codes(message):

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    codes = [code.strip().upper() for code in message.text.split(",")]
    response = ""

    code_pattern = re.compile(r'^[PBCU][0-3]\d{3}$')

    valid_codes = []
    invalid_codes = []

    for code in codes:
        if code_pattern.match(code):
            valid_codes.append(code)
        else:
            invalid_codes.append(code)

    for code in valid_codes:
        if code in error_codes:
            response += f"üîß *–ö–æ–¥ –æ—à–∏–±–∫–∏*: `{code}`\nüìã *–û–ø–∏—Å–∞–Ω–∏–µ*: {error_codes[code]}\n\n"
        else:
            response += f"üîß *–ö–æ–¥ –æ—à–∏–±–∫–∏*: `{code}`\n‚ùå *–û–ø–∏—Å–∞–Ω–∏–µ*: –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"

    for code in invalid_codes:
        response += f"üîß *–ö–æ–¥ –æ—à–∏–±–∫–∏*: `{code}`\n‚ùå *–û–ø–∏—Å–∞–Ω–∏–µ*: –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"

    bot.send_message(message.chat.id, response, parse_mode="Markdown")

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–¥—ã –æ—à–∏–±–æ–∫ OBD2 —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_error_codes)

# --------------------------------------------------- –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ---------------------------------------------------------

DB_PATH = 'data/user/reminders/reminders.json'

def load_data():
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    if not os.path.exists(DB_PATH):
        with open(DB_PATH, 'w', encoding='utf-8') as file:
            json.dump({"users": {}}, file, indent=4, ensure_ascii=False)
    with open(DB_PATH, 'r', encoding='utf-8') as file:
        data = json.load(file)
    if 'users' not in data:
        data['users'] = {}
    return data

def save_data(data):
    if 'users' not in data:
        data['users'] = {}
    with open(DB_PATH, 'w', encoding='utf-8') as file:
        json.dump(data, file, indent=4, ensure_ascii=False)

def send_reminders():
    data = load_data()
    blocked_users = load_blocked_users()
    current_time = datetime.now()

    for user_id, user_data in data["users"].items():
        if user_id in blocked_users:
            continue
        reminders = user_data.get("reminders", [])
        for reminder in reminders:
            reminder_type = reminder.get("type")
            reminder_datetime = datetime.strptime(reminder["date"] + " " + reminder["time"], "%d.%m.%Y %H:%M")
            if reminder["status"] == "active":
                try:
                    if reminder_type == "–æ–¥–∏–Ω —Ä–∞–∑":
                        if reminder_datetime <= current_time:
                            bot.send_message(user_id, f"‚è∞ *–£ –≤–∞—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ: {reminder['title'].lower()} \nüìÖ –î–∞—Ç–∞: {reminder['date']} \nüïí –í—Ä–µ–º—è: {reminder['time']} \nüîñ –¢–∏–ø: {reminder['type']}", parse_mode="Markdown")
                            reminder["status"] = "expired"
                    elif reminder_type == "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ":
                        if current_time.date() == reminder_datetime.date() and current_time.time() >= reminder_datetime.time():
                            bot.send_message(user_id, f"‚è∞ *–£ –≤–∞—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ: {reminder['title'].lower()} \nüìÖ –î–∞—Ç–∞: {reminder['date']} \nüïí –í—Ä–µ–º—è: {reminder['time']} \nüîñ –¢–∏–ø: {reminder['type']}", parse_mode="Markdown")
                            reminder["date"] = (reminder_datetime + timedelta(days=1)).strftime("%d.%m.%Y")
                    elif reminder_type == "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ":
                        if current_time.date() == reminder_datetime.date() and current_time.time() >= reminder_datetime.time():
                            bot.send_message(user_id, f"‚è∞ *–£ –≤–∞—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ: {reminder['title'].lower()} \nüìÖ –î–∞—Ç–∞: {reminder['date']} \nüïí –í—Ä–µ–º—è: {reminder['time']} \nüîñ –¢–∏–ø: {reminder['type']}", parse_mode="Markdown")
                            reminder["date"] = (reminder_datetime + timedelta(weeks=1)).strftime("%d.%m.%Y")
                    elif reminder_type == "–µ–∂–µ–º–µ—Å—è—á–Ω–æ":
                        if current_time.date() == reminder_datetime.date() and current_time.time() >= reminder_datetime.time():
                            bot.send_message(user_id, f"‚è∞ *–£ –≤–∞—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ: {reminder['title'].lower()} \nüìÖ –î–∞—Ç–∞: {reminder['date']} \nüïí –í—Ä–µ–º—è: {reminder['time']} \nüîñ –¢–∏–ø: {reminder['type']}", parse_mode="Markdown")
                            next_month = reminder_datetime.month % 12 + 1
                            next_year = reminder_datetime.year + (reminder_datetime.month // 12)
                            reminder["date"] = reminder_datetime.replace(day=reminder_datetime.day, month=next_month, year=next_year).strftime("%d.%m.%Y")
                except ApiTelegramException as e:
                    if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                        if user_id not in blocked_users:
                            blocked_users.append(user_id)
                            save_blocked_users(blocked_users)
                    else:
                        raise e
        save_data(data)

def run_scheduler():
    while True:
        send_reminders()
        time.sleep(15)

threading.Thread(target=run_scheduler, daemon=True).start()

@bot.message_handler(func=lambda message: message.text == "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
@check_function_state_decorator('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
@track_usage('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def reminders_menu(message, show_description=True):
    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*\n\n"
        "üìå *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:*\n"
        "–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —É–∫–∞–∑–∞–≤ - *–Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–∏–ø, –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*\n\n"
        "üìå *–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
        "üìå *–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–º –Ω–µ –Ω—É–∂–Ω—ã"
    )
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', '–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    if show_description:
        bot.send_message(message.chat.id, description, parse_mode="Markdown")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
@check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
@track_usage('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def return_to_reminders_menu(message):
    reminders_menu(message, show_description=False)

# -------------------------------------------- –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø (–¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ) ----------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
@check_function_state_decorator('–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
@track_usage('–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def add_reminder(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_title_step)

@text_only_handler
def process_title_step(message):
    user_id = str(message.from_user.id)
    data = load_data()

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        reminders_menu(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    if user_id not in data["users"]:
        data["users"][user_id] = {"reminders": []}
    reminder = {"title": message.text}
    data["users"][user_id]["current_reminder"] = reminder
    save_data(data)
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–û–¥–∏–Ω —Ä–∞–∑', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ')
    markup.add('–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_type_step)

@text_only_handler
def process_type_step(message):
    user_id = str(message.from_user.id)
    data = load_data()
    reminder = data["users"][user_id]["current_reminder"]

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        reminders_menu(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    reminder_type = message.text.lower()
    if reminder_type in ["–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", "–µ–∂–µ–º–µ—Å—è—á–Ω–æ", "–æ–¥–∏–Ω —Ä–∞–∑"]:
        reminder["type"] = reminder_type
    else:
        msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø!\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        bot.register_next_step_handler(msg, process_type_step)
        return
    save_data(data)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_date_step_for_repairs)

@text_only_handler
def process_date_step_for_repairs(message):
    user_id = str(message.from_user.id)
    data = load_data()
    reminder = data["users"][user_id]["current_reminder"]

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        reminders_menu(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    date_input = message.text
    if re.match(r"^\d{2}\.\d{2}\.\d{4}$", date_input):
        try:
            day, month, year = map(int, date_input.split('.'))
            if 1 <= month <= 12 and 1 <= day <= 31 and 2000 <= year <= 3000:
                reminder_date = datetime.strptime(date_input, "%d.%m.%Y")
                current_date = datetime.now()
                if reminder_date.date() >= current_date.date():
                    reminder["date"] = date_input
                else:
                    raise ValueError("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π")
            else:
                raise ValueError
        except ValueError as e:
            msg = bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}!\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            bot.register_next_step_handler(msg, process_date_step_for_repairs)
            return
    else:
        msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(msg, process_date_step_for_repairs)
        return
    save_data(data)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_time_step)

@text_only_handler
def process_time_step(message):
    user_id = str(message.from_user.id)
    data = load_data()
    reminder = data["users"][user_id]["current_reminder"]

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        reminders_menu(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    time_input = message.text
    if re.match(r"^\d{2}:\d{2}$", time_input):
        try:
            hour, minute = map(int, time_input.split(':'))
            if 0 <= hour <= 23 and 0 <= minute <= 59:
                reminder_time = datetime.strptime(time_input, "%H:%M").time()
                current_time = datetime.now().time()
                reminder_date = datetime.strptime(reminder["date"], "%d.%m.%Y").date()
                current_date = datetime.now().date()
                if reminder_date > current_date or (reminder_date == current_date and reminder_time >= current_time):
                    reminder["time"] = time_input
                    reminder["status"] = "active"
                else:
                    raise ValueError("–í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ")
            else:
                raise ValueError
        except ValueError as e:
            msg = bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}!\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
            bot.register_next_step_handler(msg, process_time_step)
            return
    else:
        msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        bot.register_next_step_handler(msg, process_time_step)
        return
    data["users"][user_id]["reminders"].append(reminder)
    del data["users"][user_id]["current_reminder"]
    save_data(data)
    bot.send_message(message.chat.id, "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    new_message_3 = message
    new_message_3.text = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"  
    reminders_menu(new_message_3, show_description=False)

# -------------------------------------------- –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è) ----------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_reminders(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ê–∫—Ç–∏–≤–Ω—ã–µ', '–ò—Å—Ç–µ–∫—à–∏–µ')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ['–ê–∫—Ç–∏–≤–Ω—ã–µ', '–ò—Å—Ç–µ–∫—à–∏–µ'])
@check_function_state_decorator('–ê–∫—Ç–∏–≤–Ω—ã–µ')
@check_function_state_decorator('–ò—Å—Ç–µ–∫—à–∏–µ')
@track_usage('–ê–∫—Ç–∏–≤–Ω—ã–µ')
@track_usage('–ò—Å—Ç–µ–∫—à–∏–µ')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_reminders_by_status(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–û–¥–∏–Ω —Ä–∞–∑', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ')
    markup.add('–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    status = message.text.lower()
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø {status} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: view_reminders_by_type(msg, status))

def view_reminders_by_type(message, status):
    user_id = str(message.from_user.id)
    data = load_data()
    reminders = data["users"].get(user_id, {}).get("reminders", [])
    current_date = datetime.now()
    reminder_type = message.text.lower()

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        reminders_menu(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    if reminder_type not in ["–æ–¥–∏–Ω —Ä–∞–∑", "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", "–µ–∂–µ–º–µ—Å—è—á–Ω–æ"]:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø!\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        view_reminders(message)
        return
    filtered_reminders = []
    for reminder in reminders:
        reminder_datetime = datetime.strptime(reminder["date"] + ' ' + reminder["time"], "%d.%m.%Y %H:%M")
        if reminder["type"] == reminder_type and reminder["status"] == ("active" if status == "–∞–∫—Ç–∏–≤–Ω—ã–µ" else "expired"):
            if status == "–∞–∫—Ç–∏–≤–Ω—ã–µ":
                if reminder_type == "–æ–¥–∏–Ω —Ä–∞–∑" and reminder_datetime >= current_date:
                    filtered_reminders.append(reminder)
                elif reminder_type == "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ" and reminder_datetime.date() >= current_date.date():
                    filtered_reminders.append(reminder)
                elif reminder_type == "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ" and reminder_datetime.weekday() == current_date.weekday():
                    filtered_reminders.append(reminder)
                elif reminder_type == "–µ–∂–µ–º–µ—Å—è—á–Ω–æ" and reminder_datetime.day == current_date.day:
                    filtered_reminders.append(reminder)
            else:
                filtered_reminders.append(reminder)
    if filtered_reminders:
        response = f"*{status.capitalize()} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({reminder_type}):*\n\n"
        for i, reminder in enumerate(filtered_reminders, 1):
            response += (
                f"\n{'‚≠ê' if status == '–∞–∫—Ç–∏–≤–Ω—ã–µ' else '‚ùå'} ‚Ññ{i} {'‚≠ê' if status == '–∞–∫—Ç–∏–≤–Ω—ã–µ' else '‚ùå'}\n\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {reminder['title'].lower()}\n"
                f"üìÖ –î–∞—Ç–∞: {reminder['date']}\n"
                f"üïí –í—Ä–µ–º—è: {reminder['time']}\n"
                f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–Ω–æ–µ' if status == '–∞–∫—Ç–∏–≤–Ω—ã–µ' else '–∏—Å—Ç–µ–∫–ª–æ'}\n"
                f"üîñ –¢–∏–ø: {reminder['type']}\n\n"
            )
    else:
        response = f"*{status.capitalize()} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({reminder_type}):*\n\n‚ùå –ù–µ—Ç {status} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!"
    bot.send_message(message.chat.id, response, parse_mode="Markdown")
    view_reminders(message)

# -------------------------------------------- –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø (—É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è) ----------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
@track_usage('–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_reminder(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('Del –ê–∫—Ç–∏–≤–Ω—ã–µ', 'Del –ò—Å—Ç–µ–∫—à–∏–µ')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ['Del –ê–∫—Ç–∏–≤–Ω—ã–µ', 'Del –ò—Å—Ç–µ–∫—à–∏–µ'])
@check_function_state_decorator('Del –ê–∫—Ç–∏–≤–Ω—ã–µ')
@check_function_state_decorator('Del –ò—Å—Ç–µ–∫—à–∏–µ')
@track_usage('Del –ê–∫—Ç–∏–≤–Ω—ã–µ')
@track_usage('Del –ò—Å—Ç–µ–∫—à–∏–µ')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_reminders_by_status(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('Del –û–¥–∏–Ω —Ä–∞–∑', 'Del –ï–∂–µ–¥–Ω–µ–≤–Ω–æ')
    markup.add('Del –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ', 'Del –ï–∂–µ–º–µ—Å—è—á–Ω–æ')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    status = message.text.replace('Del ', '').lower()
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø {status} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: delete_reminders_by_type(msg, status))

@bot.message_handler(func=lambda message: message.text in ['Del –û–¥–∏–Ω —Ä–∞–∑', 'Del –ï–∂–µ–¥–Ω–µ–≤–Ω–æ', 'Del –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ', 'Del –ï–∂–µ–º–µ—Å—è—á–Ω–æ'])
@check_function_state_decorator('Del –û–¥–∏–Ω —Ä–∞–∑')
@check_function_state_decorator('Del –ï–∂–µ–¥–Ω–µ–≤–Ω–æ')
@check_function_state_decorator('Del –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ')
@check_function_state_decorator('Del –ï–∂–µ–º–µ—Å—è—á–Ω–æ')
@track_usage('Del –û–¥–∏–Ω —Ä–∞–∑')
@track_usage('Del –ï–∂–µ–¥–Ω–µ–≤–Ω–æ')
@track_usage('Del –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ')
@track_usage('Del –ï–∂–µ–º–µ—Å—è—á–Ω–æ')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_reminders_by_type(message, status):
    user_id = str(message.from_user.id)
    data = load_data()
    reminders = data["users"].get(user_id, {}).get("reminders", [])
    reminder_type = message.text.replace('Del ', '').lower()

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        reminders_menu(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if reminder_type not in ["–æ–¥–∏–Ω —Ä–∞–∑", "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", "–µ–∂–µ–º–µ—Å—è—á–Ω–æ"]:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        delete_reminder(message)
        return

    filtered_reminders = [r for r in reminders if r["status"] == ("active" if status == "–∞–∫—Ç–∏–≤–Ω—ã–µ" else "expired") and r["type"] == reminder_type]

    if not filtered_reminders:
        bot.send_message(message.chat.id, f"*{status.capitalize()} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({reminder_type}) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*\n\n‚ùå –ù–µ—Ç {status} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!", parse_mode="Markdown")
        delete_reminder(message)
        return

    response = f"*{status.capitalize()} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({reminder_type}) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*\n\n"
    for i, reminder in enumerate(filtered_reminders, 1):
        response += (
            f"\n‚ùå ‚Ññ{i}\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {reminder['title']}\n"
            f"üìÖ –î–∞—Ç–∞: {reminder['date']}\n"
            f"üïí –í—Ä–µ–º—è: {reminder['time']}\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–Ω–æ–µ' if status == '–∞–∫—Ç–∏–≤–Ω—ã–µ' else '–∏—Å—Ç–µ–∫–ª–æ'}\n"
            f"üîñ –¢–∏–ø: {reminder['type']}\n\n"
        )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, response, parse_mode="Markdown")
    data["users"][user_id]["current_reminder_type"] = reminder_type
    data["users"][user_id]["current_reminders"] = filtered_reminders
    data["users"][user_id]["current_status"] = status
    save_data(data)

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(msg, confirm_delete_step)

@text_only_handler
def confirm_delete_step(message):
    user_id = str(message.from_user.id)
    data = load_data()
    reminders = data["users"][user_id].get("current_reminders", [])
    reminder_type = data["users"][user_id].get("current_reminder_type")
    status = data["users"][user_id].get("current_status")

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        reminders_menu(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(reminders) and reminders[index]["type"] == reminder_type:
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞!\n–í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, confirm_delete_step)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(user_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        valid_indices.sort(reverse=True)
        user_reminders = data["users"][user_id]["reminders"]
        for index in valid_indices:
            user_reminders.remove(reminders[index])

        save_data(data)
        bot.send_message(user_id, "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã!")
        new_message_3 = message
        new_message_3.text = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"  
        reminders_menu(new_message_3, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞", reply_markup=markup)
        bot.register_next_step_handler(msg, confirm_delete_step)

# ----------------------------------------------------- –ê–ù–¢–ò–†–ê–î–ê–† ----------------------------------------------------

script_dir = os.path.dirname(os.path.abspath(__file__))
files_dir = os.path.join(script_dir, 'files')
files_for_cams_dir = os.path.join(files_dir, 'files_for_cams')
os.makedirs(files_dir, exist_ok=True)
os.makedirs(files_for_cams_dir, exist_ok=True)

file_path = os.path.join(files_for_cams_dir, 'milestones.csv')
os.chdir(script_dir)

camera_data = []
coordinates = []
camera_tree = None

def read_csv_with_encoding(file_path):
    try:
        with open(file_path, mode='r', encoding='utf-8') as file:
            reader = csv.DictReader(file, delimiter=';')
            data = []
            for row in reader:
                try:
                    latitude = float(row['gps_y'])
                    longitude = float(row['gps_x'])
                    data.append({
                        'id': row['camera_id'],
                        'latitude': latitude,
                        'longitude': longitude,
                        'description': row['camera_place'],
                    })
                except ValueError as e:
                    continue
        return data
    except UnicodeDecodeError:
        return []

file_path = os.path.join(script_dir, 'files', 'files_for_cams', 'milestones.csv')
if os.path.exists(file_path):
    try:
        camera_data = read_csv_with_encoding(file_path)
        coordinates = [(cam['latitude'], cam['longitude']) for cam in camera_data]
    except Exception as e:
        pass
else:
    pass

if coordinates and all(len(coord) == 2 for coord in coordinates):
    camera_tree = cKDTree(coordinates)

user_tracking = {}

@bot.message_handler(func=lambda message: message.text == "–ê–Ω—Ç–∏—Ä–∞–¥–∞—Ä")
@check_function_state_decorator('–ê–Ω—Ç–∏—Ä–∞–¥–∞—Ä')
@track_usage('–ê–Ω—Ç–∏—Ä–∞–¥–∞—Ä')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@rate_limit_with_captcha
def start_antiradar(message):
    user_id = message.chat.id
    if not os.path.exists(file_path) or camera_tree is None:
        bot.send_message(user_id, "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
        return
    
    user_tracking[user_id] = {'tracking': True, 'notification_ids': [], 'last_notified_camera': {}, 'location': None, 'started': False, 'database_missing_notified': False}

    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button_geo = telebot.types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)
    button_off_geo = telebot.types.KeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏—Ä–∞–¥–∞—Ä")
    keyboard.add(button_geo)
    keyboard.add(button_off_geo)
    bot.send_message(
        user_id,
        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ *–¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏* –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω—Ç–∏—Ä–∞–¥–∞—Ä–∞!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é...\n\n"
        "_P.S. –§—É–Ω–∫—Ü–∏—è –∞–Ω—Ç–∏—Ä–∞–¥–∞—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–µ—Ç–∞-–≤–µ—Ä—Å–∏–∏! –î–∞–Ω–Ω—ã–µ –∫–∞–º–µ—Ä –Ω–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π telegram! –û–±–Ω–æ–≤–ª—è–π—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –≤—Ä—É—á–Ω—É—é!_",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

    message_text = "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ö–∞–º–µ—Ä—ã –≤–ø–µ—Ä–µ–¥–∏:\n\n"
    sent_message = bot.send_message(user_id, message_text, parse_mode="Markdown")

    bot.pin_chat_message(user_id, sent_message.message_id)
    user_tracking[user_id]['last_camera_message'] = sent_message.message_id

@bot.message_handler(content_types=['location'])
@check_function_state_decorator('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏')
@track_usage('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@check_subscription_chanal
@rate_limit_with_captcha
def handle_antiradar_location(message):
    user_id = message.chat.id

    if not os.path.exists(file_path) or camera_tree is None:
        bot.send_message(user_id, "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
        return

    if message.location:
        latitude = message.location.latitude
        longitude = message.location.longitude
    else:
        bot.send_message(user_id, "‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return

    if user_tracking.get(user_id, {}).get('tracking', False):
        user_tracking[user_id]['location'] = message.location

        if not user_tracking[user_id].get('started', False):
            user_tracking[user_id]['started'] = True
            track_user_location(user_id, message.location)
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é")

@bot.message_handler(func=lambda message: message.text == "–í—ã–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏—Ä–∞–¥–∞—Ä")
@check_function_state_decorator('–í—ã–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏—Ä–∞–¥–∞—Ä')
@track_usage('–í—ã–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏—Ä–∞–¥–∞—Ä')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@rate_limit_with_captcha
def stop_antiradar(message):
    user_id = message.chat.id
    if user_id in user_tracking:
        user_tracking[user_id]['tracking'] = False
        bot.send_message(user_id, "‚ùå –ê–Ω—Ç–∏—Ä–∞–¥–∞—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

        if user_tracking[user_id].get('last_camera_message'):
            bot.unpin_chat_message(user_id, user_tracking[user_id]['last_camera_message'])
            bot.delete_message(user_id, user_tracking[user_id]['last_camera_message'])

        return_to_menu(message)
    else:
        bot.send_message(user_id, "‚ùå –ê–Ω—Ç–∏—Ä–∞–¥–∞—Ä –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω!")

def delete_messages(user_id, message_id):
    time.sleep(6)
    try:
        bot.delete_message(chat_id=user_id, message_id=message_id)
    except:
        pass

MAX_CAMERAS_IN_MESSAGE = 3
ALERT_DISTANCE = 500
EXIT_DISTANCE = 100
IN_ZONE_DISTANCE = 50

def track_user_location(user_id, initial_location):
    def monitor():
        while user_tracking.get(user_id, {}).get('tracking', False):
            if camera_tree is None:
                if not user_tracking[user_id].get('database_missing_notified', False):
                    bot.send_message(user_id, "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
                    user_tracking[user_id]['database_missing_notified'] = True
                time.sleep(3)
                continue

            user_location = user_tracking[user_id]['location']
            user_position = (user_location.latitude, user_location.longitude)
            distances, indices = camera_tree.query(user_position, k=len(camera_data))
            nearest_cameras = []
            unique_addresses = set()

            for i, distance in enumerate(distances[:MAX_CAMERAS_IN_MESSAGE]):
                if distance <= 1000:
                    camera = camera_data[indices[i]]
                    actual_distance = int(geodesic(user_position, (camera['latitude'], camera['longitude'])).meters)
                    camera_address = camera['description']

                    if camera_address not in user_tracking[user_id]['last_notified_camera']:
                        nearest_cameras.append((actual_distance, camera))
                        unique_addresses.add(camera_address)
                        user_tracking[user_id]['last_notified_camera'][camera_address] = {
                            'entered': False,
                            'exited': False,
                            'in_zone': False,
                            'notified_once': {'entered': False, 'in_zone': False, 'exited': False}
                        }

                    if (actual_distance <= ALERT_DISTANCE and 
                        not user_tracking[user_id]['last_notified_camera'][camera_address]['entered'] and
                        not user_tracking[user_id]['last_notified_camera'][camera_address]['notified_once']['entered']):
                        notification_message = (
                            f"‚ö†Ô∏è –í—ã –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç–µ—Å—å –∫ –∫–∞–º–µ—Ä–µ!\n\n"
                            f"üì∑ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ - *{actual_distance} –º.*\n"
                            f"üó∫Ô∏è *{camera_address}*"
                        )
                        try:
                            sent_message = bot.send_message(user_id, notification_message, parse_mode="Markdown")
                            user_tracking[user_id]['notification_ids'].append(sent_message.message_id)
                            user_tracking[user_id]['last_notified_camera'][camera_address]['entered'] = True
                            user_tracking[user_id]['last_notified_camera'][camera_address]['notified_once']['entered'] = True
                        except:
                            pass

                    if (actual_distance <= IN_ZONE_DISTANCE and 
                        not user_tracking[user_id]['last_notified_camera'][camera_address]['in_zone'] and
                        not user_tracking[user_id]['last_notified_camera'][camera_address]['notified_once']['in_zone']):
                        in_zone_message = (
                            f"üìç –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∑–æ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞–º–µ—Ä—ã!\n\n"
                            f"üó∫Ô∏è *{camera_address}*"
                        )
                        try:
                            in_zone_sent = bot.send_message(user_id, in_zone_message, parse_mode="Markdown")
                            user_tracking[user_id]['notification_ids'].append(in_zone_sent.message_id)
                            user_tracking[user_id]['last_notified_camera'][camera_address]['in_zone'] = True
                            user_tracking[user_id]['last_notified_camera'][camera_address]['notified_once']['in_zone'] = True
                        except:
                            pass

                    if (actual_distance > EXIT_DISTANCE and 
                        user_tracking[user_id]['last_notified_camera'][camera_address]['entered'] and
                        not user_tracking[user_id]['last_notified_camera'][camera_address]['notified_once']['exited']):
                        exit_message = (
                            f"üîî –í—ã –≤—ã—à–ª–∏ –∏–∑ –∑–æ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –∫–∞–º–µ—Ä—ã!\n\n"
                            f"üó∫Ô∏è *{camera_address}*"
                        )
                        try:
                            exit_sent_message = bot.send_message(user_id, exit_message, parse_mode="Markdown")
                            user_tracking[user_id]['notification_ids'].append(exit_sent_message.message_id)
                            user_tracking[user_id]['last_notified_camera'][camera_address]['exited'] = True
                            user_tracking[user_id]['last_notified_camera'][camera_address]['notified_once']['exited'] = True
                        except:
                            pass

            message_text = "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ö–∞–º–µ—Ä—ã –≤–ø–µ—Ä–µ–¥–∏:\n\n"
            for distance, camera in nearest_cameras:
                message_text += f"üì∑ –ö–∞–º–µ—Ä–∞ —á–µ—Ä–µ–∑ *{distance} –º.*\nüó∫Ô∏è –ê–¥—Ä–µ—Å: *{camera['description']}*\n\n"

            if nearest_cameras:
                try:
                    if user_tracking[user_id].get('last_camera_message'):
                        bot.edit_message_text(chat_id=user_id, message_id=user_tracking[user_id]['last_camera_message'], text=message_text, parse_mode="Markdown")
                    else:
                        sent_message = bot.send_message(user_id, message_text, parse_mode="Markdown")
                        user_tracking[user_id]['last_camera_message'] = sent_message.message_id
                except:
                    pass

            time.sleep(3)

    threading.Thread(target=monitor, daemon=True).start()

# ----------------------------------------------------- –ü–†–û–ß–ï–ï ----------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—á–µ–µ")
@check_function_state_decorator('–ü—Ä–æ—á–µ–µ')
@track_usage('–ü—Ä–æ—á–µ–µ')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_others(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ù–æ–≤–æ—Å—Ç–∏', '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è') 
    markup.add('–î–ª—è —Ä–µ–∫–ª–∞–º—ã', '–ß–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º') 
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–æ—á–µ–≥–æ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ")
@check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ')
@track_usage('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def return_to_other(message):
    view_others(message)

# ----------------------------------------------------- –ü–†–û–ß–ï–ï (–Ω–æ–≤–æ—Å—Ç–∏) ----------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ù–æ–≤–æ—Å—Ç–∏')
@check_function_state_decorator('–ù–æ–≤–æ—Å—Ç–∏')
@track_usage('–ù–æ–≤–æ—Å—Ç–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_news_menu(message, show_description=True):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('3 –Ω–æ–≤–æ—Å—Ç–∏', '5 –Ω–æ–≤–æ—Å—Ç–µ–π', '7 –Ω–æ–≤–æ—Å—Ç–µ–π')
    markup.add('10 –Ω–æ–≤–æ—Å—Ç–µ–π', '15 –Ω–æ–≤–æ—Å—Ç–µ–π')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π*\n\n"
        "üìå –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å *–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π* –¥–ª—è –ø–æ–∫–∞–∑–∞ *(3, 5, 7, 10, 15)*\n"
        "üìå –û–Ω–∏ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º\n"
        "üìå –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Ç–æ –≤—ã –≤–µ—Ä–Ω–µ—Ç–µ—Å—å –≤ –º–µ–Ω—é –ø—Ä–æ—á–µ–µ\n\n"
        "_P.S. –ù–æ–≤–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫). –ü–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –Ω–æ–≤–æ—Å—Ç–∏ –º–æ–≥—É—Ç –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è!_"
    )

    if show_description:
        bot.send_message(message.chat.id, description, parse_mode="Markdown")

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ['3 –Ω–æ–≤–æ—Å—Ç–∏', '5 –Ω–æ–≤–æ—Å—Ç–µ–π', '7 –Ω–æ–≤–æ—Å—Ç–µ–π', '10 –Ω–æ–≤–æ—Å—Ç–µ–π', '15 –Ω–æ–≤–æ—Å—Ç–µ–π'])
@check_function_state_decorator('3 –Ω–æ–≤–æ—Å—Ç–∏')
@check_function_state_decorator('5 –Ω–æ–≤–æ—Å—Ç–µ–π')
@check_function_state_decorator('7 –Ω–æ–≤–æ—Å—Ç–µ–π')
@check_function_state_decorator('10 –Ω–æ–≤–æ—Å—Ç–µ–π')
@check_function_state_decorator('15 –Ω–æ–≤–æ—Å—Ç–µ–π')
@track_usage('3 –Ω–æ–≤–æ—Å—Ç–∏')
@track_usage('5 –Ω–æ–≤–æ—Å—Ç–µ–π')
@track_usage('7 –Ω–æ–≤–æ—Å—Ç–µ–π')
@track_usage('10 –Ω–æ–≤–æ—Å—Ç–µ–π')
@track_usage('15 –Ω–æ–≤–æ—Å—Ç–µ–π')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_news_selection(message):

    count = int(message.text.split()[0])
    news_list = sorted(news.values(), key=lambda x: x['time'], reverse=True)

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        view_others(message)
        return

    if len(news_list) == 0:
        bot.send_message(message.chat.id, "‚ùå –ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç!")
        view_others(message)
        return

    for i in range(min(count, len(news_list))):
        news_item = news_list[i]
        if 'files' in news_item and news_item['files']:
            media_group = []
            caption = None
            for file in news_item['files']:
                if file.get('caption'):
                    caption = file['caption']
                    break

            if caption and len(caption) > 200:
                caption = caption[:200] + "..."

            first_file = True
            for file in news_item['files']:
                if file['type'] == 'photo':
                    media_group.append(telebot.types.InputMediaPhoto(file['file_id'], caption=caption if first_file else None))
                elif file['type'] == 'video':
                    media_group.append(telebot.types.InputMediaVideo(file['file_id'], caption=caption if first_file else None))
                elif file['type'] == 'document':
                    media_group.append(telebot.types.InputMediaDocument(file['file_id'], caption=caption if first_file else None))
                elif file['type'] == 'animation':
                    media_group.append(telebot.types.InputMediaAnimation(file['file_id'], caption=caption if first_file else None))
                elif file['type'] == 'sticker':
                    bot.send_sticker(message.chat.id, file['file_id'])
                elif file['type'] == 'audio':
                    media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption if first_file else None))
                elif file['type'] == 'voice':
                    media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption if first_file else None))
                elif file['type'] == 'video_note':
                    bot.send_video_note(message.chat.id, file['file_id'])
                first_file = False
            if media_group:
                bot.send_media_group(message.chat.id, media_group)
        if news_item['text']:
            bot.send_message(message.chat.id, news_item['text'])

    if len(news_list) > count:
        markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–ï—â–µ –Ω–æ–≤–æ—Å—Ç–∏')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ –Ω–æ–≤–æ—Å—Ç–∏?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_more_news, count)
    else:
        bot.send_message(message.chat.id, "‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!")
        view_others(message)

@text_only_handler
def handle_more_news(message, start_index):

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        view_others(message)
        return

    if message.text == '–ï—â–µ –Ω–æ–≤–æ—Å—Ç–∏':
        news_list = sorted(news.values(), key=lambda x: x['time'], reverse=True)
        if start_index >= len(news_list):
            bot.send_message(message.chat.id, "‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!")
            view_others(message)
            return

        end_index = min(start_index + 3, len(news_list))
        for i in range(start_index, end_index):
            news_item = news_list[i]
            if 'files' in news_item and news_item['files']:
                media_group = []
                for file in news_item['files']:
                    if file['type'] == 'photo':
                        media_group.append(telebot.types.InputMediaPhoto(file['file_id'], caption=file.get('caption', "")))
                    elif file['type'] == 'video':
                        media_group.append(telebot.types.InputMediaVideo(file['file_id'], caption=file.get('caption', "")))
                    elif file['type'] == 'document':
                        media_group.append(telebot.types.InputMediaDocument(file['file_id'], caption=file.get('caption', "")))
                    elif file['type'] == 'animation':
                        media_group.append(telebot.types.InputMediaAnimation(file['file_id'], caption=file.get('caption', "")))
                    elif file['type'] == 'sticker':
                        bot.send_sticker(message.chat.id, file['file_id'])
                    elif file['type'] == 'audio':
                        media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=file.get('caption', "")))
                    elif file['type'] == 'voice':
                        media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=file.get('caption', "")))
                    elif file['type'] == 'video_note':
                        bot.send_video_note(message.chat.id, file['file_id'])
                if media_group:
                    bot.send_media_group(message.chat.id, media_group)
            if news_item['text']:
                bot.send_message(message.chat.id, news_item['text'])

        if end_index < len(news_list):
            markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            markup.add('–ï—â–µ –Ω–æ–≤–æ—Å—Ç–∏')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ –Ω–æ–≤–æ—Å—Ç–∏?", reply_markup=markup)
            bot.register_next_step_handler(message, handle_more_news, end_index)
        else:
            bot.send_message(message.chat.id, "‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!")
            view_others(message)
    else:
        view_others(message)

# ----------------------------------------------------- –ü–†–û–ß–ï–ï (–∫—É—Ä—Å—ã –≤–∞–ª—é—Ç) ----------------------------------------------------

def fetch_exchange_rates_cbr():
    url = 'https://www.cbr-xml-daily.ru/daily_json.js'
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        rates = data['Valute']
        return {
            'USD': rates['USD']['Value'],
            'EUR': rates['EUR']['Value'],
            'GBP': rates['GBP']['Value'],
            'CHF': rates['CHF']['Value'],
            'JPY': rates['JPY']['Value'] / 100,
            'CNY': rates['CNY']['Value'] / 10,
            'AUD': rates['AUD']['Value'],
            'CAD': rates['CAD']['Value'],
            'BYN': rates['BYN']['Value'],
            'KRW': rates['KRW']['Value'] / 1000,
            'SGD': rates['SGD']['Value'],
            'NZD': rates['NZD']['Value'],
            'RUB': 1
        }
    except Exception:
        return fetch_exchange_rates_moex()

def fetch_exchange_rates_moex():
    url = 'https://iss.moex.com/iss/statistics/engines/futures/markets/indicativerates.json'
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        rates = data['securities']['data']
        exchange_rates = get_default_rates()
        for rate in rates:
            currency_pair = rate[0]
            value = rate[2]
            if currency_pair == 'USD/RUB':
                exchange_rates['USD'] = value
            elif currency_pair == 'EUR/RUB':
                exchange_rates['EUR'] = value
            elif currency_pair == 'GBP/RUB':
                exchange_rates['GBP'] = value
            elif currency_pair == 'CHF/RUB':
                exchange_rates['CHF'] = value
            elif currency_pair == 'JPY/RUB':
                exchange_rates['JPY'] = value / 100
            elif currency_pair == 'CNY/RUB':
                exchange_rates['CNY'] = value / 10
        return exchange_rates
    except Exception:
        return get_default_rates()

def get_default_rates():
    return {
        'USD': 83.6813,
        'EUR': 89.6553,
        'GBP': 104.3210,
        'CHF': 94.1234,
        'JPY': 0.55,
        'CNY': 11.46,
        'AUD': 55.4321,
        'CAD': 60.9876,
        'BYN': 27.34,
        'KRW': 0.05705,
        'SGD': 61.2345,
        'NZD': 50.8765,
        'RUB': 1
    }

CURRENCY_NAMES = {
    'USD': ('–î–æ–ª–ª–∞—Ä –°–®–ê', 'üá∫üá∏'),
    'EUR': ('–ï–≤—Ä–æ', 'üá™üá∫'),
    'GBP': ('–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç', 'üá¨üáß'),
    'CHF': ('–®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫', 'üá®üá≠'),
    'JPY': ('–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞', 'üáØüáµ'),
    'CNY': ('–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å', 'üá®üá≥'),
    'AUD': ('–ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä', 'üá¶üá∫'),
    'CAD': ('–ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä', 'üá®üá¶'),
    'BYN': ('–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å', 'üáßüáæ'),
    'KRW': ('–Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞', 'üá∞üá∑'),
    'SGD': ('–°–∏–Ω–≥–∞–ø—É—Ä—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä', 'üá∏üá¨'),
    'NZD': ('–ù–æ–≤–æ–∑–µ–ª–∞–Ω–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä', 'üá≥üáø'),
    'RUB': ('–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å', 'üá∑üá∫')
}

@bot.message_handler(func=lambda message: message.text == "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
@check_function_state_decorator('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç')
@track_usage('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_exchange_rates(message):

    initialize_user_notifications(message.chat.id)

    exchange_rates = fetch_exchange_rates_cbr()

    current_time = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
    rates_message = f"üìä *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ {current_time}*\n\n"
    for currency, rate in exchange_rates.items():
        if currency in CURRENCY_NAMES:
            name, emoji = CURRENCY_NAMES[currency]
            rates_message += f"{emoji} {name} - {rate:.2f} —Ä—É–±.\n"

    bot.send_message(message.chat.id, rates_message, parse_mode='Markdown')

# --------------------------------------------- –ü–†–û–ß–ï–ï (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ–≥–æ–¥–∞ + —Ü–µ–Ω—ã + –∫—É—Ä—Å—ã)) -----------------------------------------------

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
NOTIFICATIONS_PATH = os.path.join(BASE_DIR, 'data', 'user', 'notifications', 'notifications.json')
PAYMENTS_PATH = os.path.join(BASE_DIR, 'data', 'admin', 'admin_user_payments', 'payments.json')
OPENWEATHERMAP_API_KEY = '2949ae1ef99c838462d16e7b0caf65b5'
WEATHERAPI_API_KEY = 'd4d47e9a095046949fe83849253004'
OPENWEATHERMAP_WEATHER_URL = 'http://api.openweathermap.org/data/2.5/weather'
OPENMETEO_FORECAST_URL = 'https://api.open-meteo.com/v1/forecast'
WEATHERAPI_CURRENT_URL = 'https://api.weatherapi.com/v1/current.json'

def ensure_directory_exists(file_path):
    directory = os.path.dirname(file_path)
    if not os.path.exists(directory):
        os.makedirs(directory)

def has_active_subscription(chat_id):
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(str(chat_id), {})
    if 'plans' not in user_data:
        return False
    for plan in user_data['plans']:
        try:
            end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
            if end_date > datetime.now():
                return True
        except (ValueError, KeyError):
            continue
    return False

def initialize_user_notifications(chat_id):
    ensure_directory_exists(NOTIFICATIONS_PATH)
    try:
        with open(NOTIFICATIONS_PATH, 'r', encoding='utf-8') as f:
            notifications = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        notifications = {}

    str_chat_id = str(chat_id)
    active_subscription = has_active_subscription(chat_id)
    
    default_notifications = {
        "weather": True if active_subscription else False,
        "fuel_prices": True if active_subscription else False,
        "exchange_rates": True if active_subscription else False
    }

    if str_chat_id not in notifications:
        notifications[str_chat_id] = {
            "latitude": None,
            "longitude": None,
            "city_code": None,
            "notifications": default_notifications
        }
    else:
        if "notifications" not in notifications[str_chat_id]:
            notifications[str_chat_id]["notifications"] = default_notifications
        else:
            for key in default_notifications:
                if key not in notifications[str_chat_id]["notifications"]:
                    notifications[str_chat_id]["notifications"][key] = default_notifications[key]

    with open(NOTIFICATIONS_PATH, 'w', encoding='utf-8') as f:
        json.dump(notifications, f, ensure_ascii=False, indent=4)

    return notifications

def save_user_location(chat_id, latitude, longitude, city_code):
    ensure_directory_exists(NOTIFICATIONS_PATH)
    notifications = initialize_user_notifications(chat_id)
    str_chat_id = str(chat_id)

    if latitude is not None:
        notifications[str_chat_id]["latitude"] = float(latitude)
    if longitude is not None:
        notifications[str_chat_id]["longitude"] = float(longitude)
    if city_code is not None:
        notifications[str_chat_id]["city_code"] = city_code

    try:
        with open(NOTIFICATIONS_PATH, 'w', encoding='utf-8') as f:
            json.dump(notifications, f, ensure_ascii=False, indent=4)
    except Exception:
        pass

def load_user_locations():
    ensure_directory_exists(NOTIFICATIONS_PATH)
    try:
        with open(NOTIFICATIONS_PATH, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        with open(NOTIFICATIONS_PATH, 'w', encoding='utf-8') as f:
            json.dump({}, f)
        return {}

def toggle_notification(chat_id, notification_type):
    if not has_active_subscription(chat_id):
        return False
    ensure_directory_exists(NOTIFICATIONS_PATH)
    notifications = initialize_user_notifications(chat_id)
    user_notifications = notifications.get(str(chat_id), {}).get("notifications", {})

    if notification_type in user_notifications:
        user_notifications[notification_type] = not user_notifications[notification_type]
        notifications[str(chat_id)]["notifications"] = user_notifications
        with open(NOTIFICATIONS_PATH, 'w', encoding='utf-8') as f:
            json.dump(notifications, f, ensure_ascii=False, indent=4)
        return user_notifications[notification_type]
    return False

def get_notification_status(chat_id):
    notifications = load_user_locations()
    default_status = {
        "weather": False,
        "fuel_prices": False,
        "exchange_rates": False
    }
    if not has_active_subscription(chat_id):
        return default_status
    return notifications.get(str(chat_id), {}).get("notifications", default_status)

def get_notification_status_message(chat_id):
    status = get_notification_status(chat_id)
    weather_status = "–≤–∫–ª—é—á–µ–Ω—ã" if status.get("weather", False) else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    fuel_status = "–≤–∫–ª—é—á–µ–Ω—ã" if status.get("fuel_prices", False) else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    exchange_status = "–≤–∫–ª—é—á–µ–Ω—ã" if status.get("exchange_rates", False) else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    
    return f"üì¨ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n" \
           f"üå§Ô∏è –ü–æ–≥–æ–¥–∞: {weather_status}\n" \
           f"‚õΩ –¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ: {fuel_status}\n" \
           f"üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç: {exchange_status}\n\n"

@bot.message_handler(func=lambda message: message.text == "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
@check_function_state_decorator('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
@track_usage('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def toggle_notifications_handler(message, show_description=True):
    chat_id = message.chat.id
    initialize_user_notifications(chat_id)
    notification_status = get_notification_status(chat_id)

    weather_button_text = "–í—ã–∫–ª—é—á–∏—Ç—å –ø–æ–≥–æ–¥—É" if notification_status.get("weather") else "–í–∫–ª—é—á–∏—Ç—å –ø–æ–≥–æ–¥—É"
    fuel_button_text = "–í—ã–∫–ª—é—á–∏—Ç—å —Ü–µ–Ω—ã" if notification_status.get("fuel_prices") else "–í–∫–ª—é—á–∏—Ç—å —Ü–µ–Ω—ã"
    exchange_button_text = "–í—ã–∫–ª—é—á–∏—Ç—å –∫—É—Ä—Å—ã" if notification_status.get("exchange_rates") else "–í–∫–ª—é—á–∏—Ç—å –∫—É—Ä—Å—ã"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(types.KeyboardButton(weather_button_text), types.KeyboardButton(fuel_button_text))
    markup.add(types.KeyboardButton(exchange_button_text))
    markup.add(types.KeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ" if any(notification_status.values()) else "–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ"))
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    info_message = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º*\n\n"
        "üìå *–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:*\n"
        "–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ *–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø–æ–≥–æ–¥—ã* –∏ *–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥* —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        "üìå *–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ *–≤–∫–ª—é—á–∞—Ç—å* –∏–ª–∏ *–æ—Ç–∫–ª—é—á–∞—Ç—å* —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "üìå *–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*\n"
        "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ *–∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é* –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è _(7:30, 13:00, 17:00)_\n"
    )

    if show_description:
        bot.send_message(chat_id, info_message, parse_mode="Markdown")

    status_message = get_notification_status_message(chat_id)
    bot.send_message(chat_id, status_message + "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å:", 
                    reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text in [
    "–í–∫–ª—é—á–∏—Ç—å –ø–æ–≥–æ–¥—É", "–í—ã–∫–ª—é—á–∏—Ç—å –ø–æ–≥–æ–¥—É", 
    "–í–∫–ª—é—á–∏—Ç—å —Ü–µ–Ω—ã", "–í—ã–∫–ª—é—á–∏—Ç—å —Ü–µ–Ω—ã", 
    "–í–∫–ª—é—á–∏—Ç—å –∫—É—Ä—Å—ã", "–í—ã–∫–ª—é—á–∏—Ç—å –∫—É—Ä—Å—ã", 
    "–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ", "–í—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ"
])
@check_function_state_decorator('–í–∫–ª—é—á–∏—Ç—å –ø–æ–≥–æ–¥—É')
@check_function_state_decorator('–í—ã–∫–ª—é—á–∏—Ç—å –ø–æ–≥–æ–¥—É')
@check_function_state_decorator('–í–∫–ª—é—á–∏—Ç—å —Ü–µ–Ω—ã')
@check_function_state_decorator('–í—ã–∫–ª—é—á–∏—Ç—å —Ü–µ–Ω—ã')
@check_function_state_decorator('–í–∫–ª—é—á–∏—Ç—å –∫—É—Ä—Å—ã')
@check_function_state_decorator('–í—ã–∫–ª—é—á–∏—Ç—å –∫—É—Ä—Å—ã')
@check_function_state_decorator('–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ')
@check_function_state_decorator('–í—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ')
@track_usage('–í–∫–ª—é—á–∏—Ç—å –ø–æ–≥–æ–¥—É')
@track_usage('–í—ã–∫–ª—é—á–∏—Ç—å –ø–æ–≥–æ–¥—É')
@track_usage('–í–∫–ª—é—á–∏—Ç—å —Ü–µ–Ω—ã')
@track_usage('–í—ã–∫–ª—é—á–∏—Ç—å —Ü–µ–Ω—ã')
@track_usage('–í–∫–ª—é—á–∏—Ç—å –∫—É—Ä—Å—ã')
@track_usage('–í—ã–∫–ª—é—á–∏—Ç—å –∫—É—Ä—Å—ã')
@track_usage('–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ')
@track_usage('–í—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_notification_toggle(message):
    chat_id = message.chat.id

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        view_others(message)
        return

    if not has_active_subscription(chat_id):
        bot.send_message(
            chat_id,
            "‚ùå –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!\nüöÄ –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –æ–±–º–µ–Ω—è–π—Ç–µ –±–∞–ª–ª—ã!", parse_mode="Markdown")
        toggle_notifications_handler(message, show_description=False)
        return

    notification_messages = []
    if message.text == "–í–∫–ª—é—á–∏—Ç—å –ø–æ–≥–æ–¥—É":
        new_status = toggle_notification(chat_id, "weather")
        notification_messages.append(f"üå§Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ {'–≤–∫–ª—é—á–µ–Ω—ã' if new_status else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}!")
    elif message.text == "–í—ã–∫–ª—é—á–∏—Ç—å –ø–æ–≥–æ–¥—É":
        new_status = toggle_notification(chat_id, "weather")
        notification_messages.append(f"üå§Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ {'–≤–∫–ª—é—á–µ–Ω—ã' if new_status else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}!")
    elif message.text == "–í–∫–ª—é—á–∏—Ç—å —Ü–µ–Ω—ã":
        new_status = toggle_notification(chat_id, "fuel_prices")
        notification_messages.append(f"‚õΩ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–Ω–∞—Ö –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ {'–≤–∫–ª—é—á–µ–Ω—ã' if new_status else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}!")
    elif message.text == "–í—ã–∫–ª—é—á–∏—Ç—å —Ü–µ–Ω—ã":
        new_status = toggle_notification(chat_id, "fuel_prices")
        notification_messages.append(f"‚õΩ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–Ω–∞—Ö –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ {'–≤–∫–ª—é—á–µ–Ω—ã' if new_status else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}!")
    elif message.text == "–í–∫–ª—é—á–∏—Ç—å –∫—É—Ä—Å—ã":
        new_status = toggle_notification(chat_id, "exchange_rates")
        notification_messages.append(f"üí± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç {'–≤–∫–ª—é—á–µ–Ω—ã' if new_status else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}!")
    elif message.text == "–í—ã–∫–ª—é—á–∏—Ç—å –∫—É—Ä—Å—ã":
        new_status = toggle_notification(chat_id, "exchange_rates")
        notification_messages.append(f"üí± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç {'–≤–∫–ª—é—á–µ–Ω—ã' if new_status else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}!")
    elif message.text == "–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ":
        notifications = initialize_user_notifications(chat_id)
        user_notifications = notifications[str(chat_id)]["notifications"]
        any_changed = False
        for key in user_notifications:
            if not user_notifications[key]:
                user_notifications[key] = True
                any_changed = True
        if any_changed:
            notifications[str(chat_id)]["notifications"] = user_notifications
            with open(NOTIFICATIONS_PATH, 'w', encoding='utf-8') as f:
                json.dump(notifications, f, ensure_ascii=False, indent=4)
            notification_messages.append("üì¨ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")
        else:
            notification_messages.append("üì¨ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã!")
    elif message.text == "–í—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ":
        notifications = initialize_user_notifications(chat_id)
        user_notifications = notifications[str(chat_id)]["notifications"]
        any_changed = False
        for key in user_notifications:
            if user_notifications[key]:
                user_notifications[key] = False
                any_changed = True
        if any_changed:
            notifications[str(chat_id)]["notifications"] = user_notifications
            with open(NOTIFICATIONS_PATH, 'w', encoding='utf-8') as f:
                json.dump(notifications, f, ensure_ascii=False, indent=4)
            notification_messages.append("üì¨ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã!")
        else:
            notification_messages.append("üì¨ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω—ã!")

    if notification_messages:
        bot.send_message(chat_id, "\n".join(notification_messages), parse_mode="Markdown")

    toggle_notifications_handler(message, show_description=False)

def get_city_name(latitude, longitude):
    try:
        geocode_url = "https://eu1.locationiq.com/v1/reverse.php"
        params = {
            'key': 'pk.fa5c52bb6b9e1b801d72b75d151aea63',
            'lat': latitude,
            'lon': longitude,
            'format': 'json',
            'accept-language': 'ru'
        }
        response = requests.get(geocode_url, params=params, timeout=5)
        response.raise_for_status()
        data = response.json()
        if response.status_code == 200:
            city = data.get("address", {}).get("city", None)
            if city:
                return city
            town = data.get("address", {}).get("town", None)
            village = data.get("address", {}).get("village", None)
            return town or village or f"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ ({latitude}, {longitude})"
        return None
    except (requests.exceptions.RequestException, ValueError):
        pass

    try:
        time.sleep(1)
        url = f"https://nominatim.openstreetmap.org/reverse?lat={latitude}&lon={longitude}&format=json"
        headers = {'User-Agent': 'FuelWeatherBot/1.0 (0543398@gmail.com)'}
        response = requests.get(url, headers=headers, timeout=5)
        response.raise_for_status()
        data = response.json()
        address = data.get('address', {})
        city = address.get('city') or address.get('town') or address.get('village')
        return city or f"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ ({latitude}, {longitude})"
    except (requests.exceptions.RequestException, ValueError):
        return f"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ ({latitude}, {longitude})"

def fetch_weather_data(url_type, params, api_type='openweathermap'):
    try:
        if api_type == 'openweathermap':
            response = requests.get(params['url'], params=params['params'], timeout=10)
            if response.status_code == 200:
                return response.json(), 'openweathermap'
            return None, 'openweathermap'
        elif api_type == 'openmeteo':
            openmeteo_params = {
                'latitude': params['params'].get('lat') or params['params'].get('latitude'),
                'longitude': params['params'].get('lon') or params['params'].get('longitude'),
                'current_weather': 'true' if url_type == 'weather' else 'false',
                'hourly': 'temperature_2m,relativehumidity_2m,pressure_msl,windspeed_10m,weathercode' if url_type == 'forecast' else '',
                'daily': 'temperature_2m_max,temperature_2m_min,weathercode' if url_type == 'forecast' else '',
                'timezone': 'auto'
            }
            response = requests.get(OPENMETEO_FORECAST_URL, params=openmeteo_params, timeout=10)
            if response.status_code == 200:
                return response.json(), 'openmeteo'
            return None, 'openmeteo'
        elif api_type == 'weatherapi':
            weatherapi_params = {
                'key': WEATHERAPI_API_KEY,
                'q': params['params'].get('q', f"{params['params'].get('lat')},{params['params'].get('lon')}"),
                'lang': 'ru'
            }
            if url_type == 'forecast':
                weatherapi_params['days'] = params.get('days', 7)
            url = WEATHERAPI_CURRENT_URL if url_type == 'weather' else WEATHERAPI_FORECAST_URL
            response = requests.get(url, params=weatherapi_params, timeout=10)
            if response.status_code == 200:
                return response.json(), 'weatherapi'
            return None, 'weatherapi'
    except Exception:
        return None, api_type

def normalize_weather_data(data, api_type, url_type):
    if not data:
        return None
    if api_type == 'openweathermap':
        return data
    elif api_type == 'openmeteo':
        if url_type == 'weather':
            weather_code = data['current_weather']['weathercode']
            description = {
                0: 'clear sky', 1: 'few clouds', 2: 'scattered clouds', 3: 'broken clouds',
                45: 'fog', 51: 'light rain', 61: 'rain', 71: 'light snow', 73: 'snow', 75: 'heavy snow',
                95: 'thunderstorm'
            }.get(weather_code, 'unknown')
            return {
                'main': {
                    'temp': data['current_weather']['temperature'],
                    'feels_like': data['current_weather']['temperature'],
                    'humidity': data.get('hourly', {}).get('relativehumidity_2m', [0])[0],
                    'pressure': data.get('hourly', {}).get('pressure_msl', [0])[0]
                },
                'wind': {'speed': data['current_weather']['windspeed']},
                'weather': [{'description': description}]
            }
        elif url_type == 'forecast':
            forecasts = []
            for i, time in enumerate(data['hourly']['time']):
                weather_code = data['hourly']['weathercode'][i]
                description = {
                    0: 'clear sky', 1: 'few clouds', 2: 'scattered clouds', 3: 'broken clouds',
                    45: 'fog', 51: 'light rain', 61: 'rain', 71: 'light snow', 73: 'snow', 75: 'heavy snow',
                    95: 'thunderstorm'
                }.get(weather_code, 'unknown')
                forecasts.append({
                    'dt_txt': time,
                    'main': {
                        'temp': data['hourly']['temperature_2m'][i],
                        'feels_like': data['hourly']['temperature_2m'][i],
                        'humidity': data['hourly']['relativehumidity_2m'][i],
                        'pressure': data['hourly']['pressure_msl'][i]
                    },
                    'wind': {'speed': data['hourly']['windspeed_10m'][i]},
                    'weather': [{'description': description}]
                })
            return {'list': forecasts}
    elif api_type == 'weatherapi':
        if url_type == 'weather':
            return {
                'main': {
                    'temp': data['current']['temp_c'],
                    'feels_like': data['current']['feelslike_c'],
                    'humidity': data['current']['humidity'],
                    'pressure': data['current']['pressure_mb']
                },
                'wind': {'speed': data['current']['wind_kph'] / 3.6},
                'weather': [{'description': data['current']['condition']['text']}]
            }
        elif url_type == 'forecast':
            forecasts = []
            for day in data['forecast']['forecastday']:
                for hour in day['hour']:
                    forecasts.append({
                        'dt_txt': hour['time'],
                        'main': {
                            'temp': hour['temp_c'],
                            'feels_like': hour['feelslike_c'],
                            'humidity': hour['humidity'],
                            'pressure': hour['pressure_mb']
                        },
                        'wind': {'speed': hour['wind_kph'] / 3.6},
                        'weather': [{'description': hour['condition']['text']}]
                    })
            return {'list': forecasts}
    return None

def get_current_weather(coords):
    try:
        city_name = get_city_name(coords['latitude'], coords['longitude'])
        params = {
            'url': OPENWEATHERMAP_WEATHER_URL,
            'params': {
                'lat': coords['latitude'],
                'lon': coords['longitude'],
                'appid': OPENWEATHERMAP_API_KEY,
                'units': 'metric',
                'lang': 'ru'
            }
        }
        for api in ['openweathermap', 'openmeteo', 'weatherapi']:
            data, api_type = fetch_weather_data('weather', params, api)
            if data:
                data = normalize_weather_data(data, api_type, 'weather')
                if data:
                    temperature = round(data['main']['temp'])
                    feels_like = round(data['main']['feels_like'])
                    humidity = data['main']['humidity']
                    pressure = data['main']['pressure']
                    wind_speed = data['wind']['speed']
                    description = translate_weather_description(data['weather'][0]['description'])
                    current_time = datetime.now().strftime("%H:%M")
                    current_date = datetime.now().strftime("%d.%m.%Y")
                    return (
                        f"*–ü–æ–≥–æ–¥–∞ –Ω–∞ {current_date} –≤ {current_time}*:\n"
                        f"*(–≥. {city_name}; {coords['latitude']}, {coords['longitude']})*\n\n"
                        f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temperature}¬∞C\n"
                        f"üå¨Ô∏è *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {feels_like}¬∞C\n"
                        f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {humidity}%\n"
                        f"„ÄΩÔ∏è *–î–∞–≤–ª–µ–Ω–∏–µ:* {pressure} –º–º —Ä—Ç. —Å—Ç.\n"
                        f"üí® *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {wind_speed} –º/—Å\n"
                        f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
                    )
        return None
    except Exception:
        return None

def get_average_fuel_prices(city_code):
    fuel_prices = {}
    file_path = f'data/user/azs/{city_code}_table_azs_data.json'
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            prices_data = json.load(f)
            for entry in prices_data:
                fuel_type = entry[1]
                price = entry[2]
                try:
                    price = float(price)
                except ValueError:
                    continue
                if fuel_type not in fuel_prices:
                    fuel_prices[fuel_type] = []
                fuel_prices[fuel_type].append(price)
    except (FileNotFoundError, json.JSONDecodeError):
        return None
    average_prices = {fuel: sum(prices) / len(prices) for fuel, prices in fuel_prices.items()}
    return average_prices

def get_exchange_rates_message():
    try:
        exchange_rates = fetch_exchange_rates_cbr()
        current_time = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        rates_message = f"*–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ {current_time}:*\n\n"
        
        for currency in CURRENCY_NAMES:
            if currency in exchange_rates:
                name, emoji = CURRENCY_NAMES[currency]
                rates_message += f"{emoji} *{name}:* {exchange_rates[currency]:.2f} —Ä—É–±.\n"
            else:
                name, emoji = CURRENCY_NAMES[currency]
                rates_message += f"{emoji} *{name}:* –ù/–î\n"  
        
        return rates_message
    except Exception as e:
        return f"*–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:* {str(e)}"
    
def load_city_names(file_path):
    city_names = {}
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            for line in file:
                city_data = line.strip().split(' - ')
                if len(city_data) == 2:
                    city_name, city_code = city_data
                    city_names[city_code] = city_name
    except FileNotFoundError:
        pass
    except Exception:
        pass
    return city_names

def send_weather_notifications():
    user_locations = load_user_locations()
    city_names = load_city_names('files/files_for_price_weather/combined_cities.txt')
    blocked_users = load_blocked_users()
    for chat_id, coords in user_locations.items():
        if chat_id in blocked_users or not has_active_subscription(chat_id):
            continue
        notification_status = get_notification_status(chat_id)
        messages = []
        if notification_status.get("weather"):
            weather_message = get_current_weather(coords)
            if weather_message:
                messages.append(weather_message)
        if notification_status.get("fuel_prices"):
            city_code = coords.get('city_code')
            city_name = city_names.get(city_code, city_code)
            average_prices = get_average_fuel_prices(city_code)
            current_time = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
            if average_prices:
                fuel_prices_message = "*–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ (–≥. {}) –Ω–∞ –¥–∞—Ç—É {}:*\n\n".format(city_name, current_time)
                fuel_types_order = [
                    "–ê–∏-92", "–ü—Ä–µ–º–∏—É–º 92", "–ê–∏-95", "–ü—Ä–µ–º–∏—É–º 95", "–ê–∏-98", "–ü—Ä–µ–º–∏—É–º 98",
                    "–ê–∏-100", "–ü—Ä–µ–º–∏—É–º 100", "–î–¢", "–ü—Ä–µ–º–∏—É–º –î–¢", "–ì–∞–∑"
                ]
                for fuel_type in fuel_types_order:
                    if fuel_type in average_prices:
                        fuel_prices_message += f"‚õΩ *{fuel_type}:* {average_prices[fuel_type]:.2f} —Ä—É–±./–ª.\n"
                messages.append(fuel_prices_message)
        if notification_status.get("exchange_rates"):
            exchange_message = get_exchange_rates_message()
            if exchange_message:
                messages.append(exchange_message)
        if messages:
            try:
                final_message = "üîî *–í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!*\n\n" + "\n".join(messages)
                bot.send_message(chat_id, final_message, parse_mode="Markdown")
            except ApiTelegramException as e:
                if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                    if chat_id not in blocked_users:
                        blocked_users.append(chat_id)
                        save_blocked_users(blocked_users)
                else:
                    raise e

schedule.every().day.at("07:30").do(send_weather_notifications)
schedule.every().day.at("13:00").do(send_weather_notifications)
schedule.every().day.at("17:00").do(send_weather_notifications)

def schedule_tasks_together():
    while True:
        now = datetime.now()
        if now.hour == 0 and now.minute == 0:
            parse_fuel_prices()
            time.sleep(60 * 5)
        schedule.run_pending()
        time.sleep(300)

threading.Thread(target=schedule_tasks_together, daemon=True).start()

# --------------------------------------------- –ü–†–û–ß–ï–ï (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)) -----------------------------------------------

DB_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'data', 'admin', 'admin_user_payments', 'users.json')

INACTIVITY_THRESHOLD = 7 * 24 * 60 * 60
CHECK_INTERVAL = 12 * 60 * 60
DELETE_THRESHOLD = 30 * 24 * 60 * 60

BLOCKED_USERS_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'data', 'admin', 'bloked_bot', 'blocked_bot_users.json')

def load_blocked_users():
    if os.path.exists(BLOCKED_USERS_FILE):
        with open(BLOCKED_USERS_FILE, 'r') as file:
            return json.load(file)
    return []

def save_blocked_users(blocked_users):
    with open(BLOCKED_USERS_FILE, 'w') as file:
        json.dump(blocked_users, file, indent=4)

def escape_markdown(text):
    return re.sub(r'([_*\[\]()~`>#+\\|{}.!-])', r'\\\1', text)

def check_and_create_file():
    dir_path = os.path.dirname(DB_PATH)
    os.makedirs(dir_path, exist_ok=True)

    if not os.path.exists(DB_PATH):
        with open(DB_PATH, 'w', encoding='utf-8') as file:
            json.dump({}, file, ensure_ascii=False, indent=4)

def load_users():
    check_and_create_file()
    try:
        with open(DB_PATH, 'r', encoding='utf-8') as file:
            return json.load(file)
    except UnicodeDecodeError as e:
        with open(DB_PATH, 'r', encoding='cp1251') as file:
            content = file.read()
            with open(DB_PATH, 'w', encoding='utf-8') as outfile:
                json.dump(json.loads(content), outfile, ensure_ascii=False, indent=4)
            return json.loads(content)
    except json.JSONDecodeError as e:
        return {}

def save_users(users):
    check_and_create_file()
    try:
        with open(DB_PATH, 'w', encoding='utf-8') as file:
            json.dump(users, file, ensure_ascii=False, indent=4)
    except Exception as e:
        pass

def delete_user_data_from_all_files(user_id, users):
    username = users.get(str(user_id), {}).get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    user_id_str = str(user_id)

    def remove_user_data(obj):
        if isinstance(obj, dict):
            keys_to_delete = [key for key in obj if key == user_id_str]
            for key in keys_to_delete:
                del obj[key]
            for key, value in list(obj.items()):
                remove_user_data(value)
        elif isinstance(obj, list):
            obj[:] = [item for item in obj if item != user_id_str]
            for item in obj:
                remove_user_data(item)

    for root, dirs, files in os.walk(os.path.dirname(os.path.abspath(__file__))):
        for file in files:
            if file.endswith('.json'):
                file_path = os.path.join(root, file)

                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                except (json.JSONDecodeError, UnicodeDecodeError):
                    continue

                if file == 'payments.json' and 'data' in root and 'admin' in root:
                    users_section = data.get("subscriptions", {}).get("users", {})
                    if user_id_str in users_section:
                        user_info = users_section[user_id_str]
                        plans = user_info.get("plans", [])
                        filtered_plans = [plan for plan in plans if plan.get("plan_name") == "free"]
                        user_info["plans"] = filtered_plans
                    with open(file_path, 'w', encoding='utf-8') as f:
                        json.dump(data, f, ensure_ascii=False, indent=4)
                    continue

                remove_user_data(data)

                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=4)

    if user_id_str in users:
        users.pop(user_id_str, None)
        save_users(users)

    try:
        bot.send_message(
            user_id,
            f"‚õî –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑-–∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start",
            parse_mode="Markdown"
        )
    except ApiTelegramException as e:
        if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
            blocked_users = load_blocked_users()
            if user_id not in blocked_users:
                blocked_users.append(user_id)
                save_blocked_users(blocked_users)
        else:
            raise e

def safe_send_message(user_id, text, parse_mode=None):
    try:
        bot.send_message(user_id, text, parse_mode=parse_mode)
    except ApiTelegramException as e:
        if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
            blocked_users = load_blocked_users()
            if user_id not in blocked_users:
                blocked_users.append(user_id)
                save_blocked_users(blocked_users)
        else:
            raise e

def check_inactivity():
    while True:
        users = load_users()
        current_time = datetime.now()

        for user_id, user_data in list(users.items()):
            last_active_str = user_data.get('last_active')
            first_notification_str = user_data.get('first_notification')

            if last_active_str:
                last_active = datetime.strptime(last_active_str, '%d.%m.%Y –≤ %H:%M:%S')

                if current_time - last_active > timedelta(seconds=INACTIVITY_THRESHOLD):
                    if not first_notification_str:
                        users[user_id]['first_notification'] = current_time.strftime('%d.%m.%Y –≤ %H:%M:%S')
                        save_users(users)
                        username = user_data.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                        message = f"‚ö†Ô∏è –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, {escape_markdown(username)}, –æ—Ç –≤–∞—Å –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –∏–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —á–µ—Ä–µ–∑ 1 –º–µ—Å—è—Ü!"
                        safe_send_message(user_id, message, parse_mode="Markdown")
                    else:
                        first_notification = datetime.strptime(first_notification_str, '%d.%m.%Y –≤ %H:%M:%S')
                        if current_time - first_notification > timedelta(seconds=DELETE_THRESHOLD):
                            delete_user_data_from_all_files(user_id, users)

        save_users(users)
        time.sleep(CHECK_INTERVAL)

inactivity_thread = threading.Thread(target=check_inactivity)
inactivity_thread.daemon = True
inactivity_thread.start()

# --------------------------------------------- –ü–†–û–ß–ï–ï (–¥–ª—è —Ä–µ–∫–ª–∞–º—ã) -----------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–î–ª—è —Ä–µ–∫–ª–∞–º—ã")
@check_function_state_decorator('–î–ª—è —Ä–µ–∫–ª–∞–º—ã')
@track_usage('–î–ª—è —Ä–µ–∫–ª–∞–º—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_add_menu(message, show_description=True):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É', '–í–∞—à–∏ –∑–∞—è–≤–∫–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–µ–∫–ª–∞–º–µ*\n\n"
        "üìå *–ó–∞—è–≤–∫–∞:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–∫–ª–∞–º—É –≤ –±–æ—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ, –≥–¥–µ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è\n\n"
        "üìå *–í–∞—à–∏ –∑–∞—è–≤–∫–∏:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–∫–ª–∞–º—É, –∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, —Ç–æ –∏ –æ—Ç–æ–∑–≤–∞—Ç—å\n\n"
        "üìå *–û–ø–ª–∞—Ç–∞ –∏ –≤–æ–ø—Ä–æ—Å—ã:*\n"
        "–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–∫–ª–∞–º—É –∏ –æ–ø–ª–∞—Ç—É –ø—Ä–∏–Ω–∏–º–∞–µ—Ç *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫)* - [@x_evgenyalex_x](https://t.me/x_evgenyalex_x). –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–µ–º—É!\n\n"
    )

    if show_description:
        bot.send_message(message.chat.id, description, parse_mode="Markdown")

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–µ–∫–ª–∞–º–æ–π:", reply_markup=markup)

# --------------------------------------------- –ü–†–û–ß–ï–ï (–∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É) -----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É')
@check_function_state_decorator('–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É')
@track_usage('–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_advertisement_request(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Ä–µ–∫–ª–∞–º—ã –∏ –∫—Ä–∞—Ç–∫–æ –æ —á–µ–º –æ–Ω–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, set_advertisement_theme)

@text_only_handler
def set_advertisement_theme(message):

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()
        view_add_menu(message, show_description=False)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        temp_advertisement.clear()
        view_others(message)
        return

    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()
        return_to_menu(message)
        return

    advertisement_theme = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É:")
    bot.register_next_step_handler(message, set_advertisement_date, advertisement_theme)

@text_only_handler
def set_advertisement_date(message, advertisement_theme):

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()
        view_add_menu(message, show_description=False)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        temp_advertisement.clear()
        view_others(message)
        return

    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()
        return_to_menu(message)
        return

    expected_date = message.text
    if expected_date is None or not validate_date_format(expected_date):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, set_advertisement_date, advertisement_theme)
        return

    if not validate_future_date(expected_date):
        bot.send_message(message.chat.id, "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É")
        bot.register_next_step_handler(message, set_advertisement_date, advertisement_theme)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É:")
    bot.register_next_step_handler(message, set_advertisement_time, advertisement_theme, expected_date)

@text_only_handler
def set_advertisement_time(message, advertisement_theme, expected_date):

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()
        view_add_menu(message, show_description=False)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        temp_advertisement.clear()
        view_others(message)
        return

    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()
        return_to_menu(message)
        return

    expected_time = message.text
    if not validate_time_format(expected_time):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        bot.register_next_step_handler(message, set_advertisement_time, advertisement_theme, expected_date)
        return

    if not validate_future_time(expected_date, expected_time):
        bot.send_message(message.chat.id, "–í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
        bot.register_next_step_handler(message, set_advertisement_time, advertisement_theme, expected_date)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–∫–ª–∞–º—ã:")
    bot.register_next_step_handler(message, set_advertisement_end_date, advertisement_theme, expected_date, expected_time)

@text_only_handler
def set_advertisement_end_date(message, advertisement_theme, expected_date, expected_time):
    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()
        return_to_menu(message)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        temp_advertisement.clear()
        view_others(message)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()
        view_add_menu(message, show_description=False)
        return

    end_date = message.text
    if not validate_date_format(end_date):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, set_advertisement_end_date, advertisement_theme, expected_date, expected_time)
        return

    if not validate_future_date(end_date):
        bot.send_message(message.chat.id, "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É")
        bot.register_next_step_handler(message, set_advertisement_end_date, advertisement_theme, expected_date, expected_time)
        return

    start_datetime = datetime.strptime(f"{expected_date} {expected_time}", "%d.%m.%Y %H:%M")
    end_datetime = datetime.strptime(f"{end_date} 23:59", "%d.%m.%Y %H:%M")  
    if end_datetime.date() < start_datetime.date():
        bot.send_message(message.chat.id, "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É")
        bot.register_next_step_handler(message, set_advertisement_end_date, advertisement_theme, expected_date, expected_time)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–∫–ª–∞–º—ã:")
    bot.register_next_step_handler(message, set_advertisement_end_time, advertisement_theme, expected_date, expected_time, end_date)

@text_only_handler
def set_advertisement_end_time(message, advertisement_theme, expected_date, expected_time, end_date):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()
        view_add_menu(message, show_description=False)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        temp_advertisement.clear()
        view_others(message)
        return

    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()
        return_to_menu(message)
        return

    end_time = message.text
    if not validate_time_format(end_time):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        bot.register_next_step_handler(message, set_advertisement_end_time, advertisement_theme, expected_date, expected_time, end_date)
        return

    start_datetime = datetime.strptime(f"{expected_date} {expected_time}", "%d.%m.%Y %H:%M")
    end_datetime = datetime.strptime(f"{end_date} {end_time}", "%d.%m.%Y %H:%M")
    if end_datetime <= start_datetime:
        bot.send_message(message.chat.id, "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
        bot.register_next_step_handler(message, set_advertisement_end_time, advertisement_theme, expected_date, expected_time, end_date)
        return

    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã:")
    bot.register_next_step_handler(message, collect_advertisement_text, advertisement_theme, expected_date, expected_time, end_date, end_time)

@text_only_handler
def collect_advertisement_text(message, advertisement_theme, expected_date, expected_time, end_date, end_time):

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()
        view_add_menu(message, show_description=False)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        temp_advertisement.clear()
        view_others(message)
        return

    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return_to_menu(message)
        return

    temp_advertisement['text'] = message.text
    temp_advertisement['chat_id'] = message.chat.id

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å):", reply_markup=markup)
    bot.register_next_step_handler(message, collect_advertisement_media, advertisement_theme, expected_date, expected_time, end_date, end_time)

def collect_advertisement_media(message, advertisement_theme, expected_date, expected_time, end_date, end_time):

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()
        view_add_menu(message, show_description=False)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        temp_advertisement.clear()
        view_others(message)
        return

    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()
        return_to_menu(message)
        return

    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã":
        temp_advertisement['files'] = []
        save_advertisement_request(message, advertisement_theme, expected_date, expected_time, end_date, end_time)
        return

    content_type = message.content_type
    file_id = None

    if content_type == 'photo':
        file_id = message.photo[-1].file_id
    elif content_type == 'video':
        file_id = message.video.file_id
    elif content_type == 'document':
        file_id = message.document.file_id
    elif content_type == 'animation':
        file_id = message.animation.file_id
    elif content_type == 'sticker':
        file_id = message.sticker.file_id
    elif content_type == 'audio':
        file_id = message.audio.file_id
    elif content_type == 'voice':
        file_id = message.voice.file_id
    elif content_type == 'video_note':
        file_id = message.video_note.file_id

    if file_id:
        if 'files' not in temp_advertisement:
            temp_advertisement['files'] = []
        temp_advertisement['files'].append({
            'type': content_type,
            'file_id': file_id,
            'caption': temp_advertisement.get('text', '')
        })

        if len(temp_advertisement['files']) >= 10:
            save_advertisement_request(message, advertisement_theme, expected_date, expected_time, end_date, end_time)
            return

        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(message.chat.id, "–ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_advertisement_media_options, advertisement_theme, expected_date, expected_time, end_date, end_time)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª!")
        bot.register_next_step_handler(message, collect_advertisement_media, advertisement_theme, expected_date, expected_time, end_date, end_time)

def handle_advertisement_media_options(message, advertisement_theme, expected_date, expected_time, end_date, end_time):

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()
        view_add_menu(message, show_description=False)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        temp_advertisement.clear()
        view_others(message)
        return

    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()
        return_to_menu(message)
        return

    if message.text == "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ":
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª:", reply_markup=markup)
        bot.register_next_step_handler(message, collect_advertisement_media, advertisement_theme, expected_date, expected_time, end_date, end_time)
    elif message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É":
        save_advertisement_request(message, advertisement_theme, expected_date, expected_time, end_date, end_time)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!")
        bot.register_next_step_handler(message, handle_advertisement_media_options, advertisement_theme, expected_date, expected_time, end_date, end_time)

def save_advertisement_request(message, advertisement_theme, expected_date, expected_time, end_date, end_time):
    user_id = message.chat.id
    username = message.from_user.username
    advertisement_id = str(len(advertisements['advertisements']) + 1)
    advertisements['advertisements'][advertisement_id] = {
        'user_id': user_id,
        'username': username,
        'theme': advertisement_theme,
        'expected_date': expected_date,
        'expected_time': expected_time,
        'end_date': end_date,
        'end_time': end_time,
        'text': temp_advertisement['text'],
        'files': temp_advertisement['files'],
        'status': 'pending',
        'user_ids': [],
        'message_ids': []
    }

    save_advertisements()
    bot.send_message(message.chat.id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")

    try:
        with open('data/admin/admin_user_payments/admin_sessions.json', 'r', encoding='utf-8') as file:
            admin_data = json.load(file)
            admin_ids = admin_data.get('admin_sessions', [])
    except (FileNotFoundError, json.JSONDecodeError):
        admin_ids = []

    for admin_id in admin_ids:
        try:
            bot.send_message(admin_id, f"‚ö†Ô∏è –£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}` –ø–æ —Ç–µ–º–µ *{advertisement_theme.lower()}* –Ω–∞ {expected_date} –≤ {expected_time} –¥–æ {end_date} –≤ {end_time}!", parse_mode="Markdown")
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                if admin_id not in blocked_users:
                    blocked_users.append(admin_id)
                    save_blocked_users(blocked_users)
            else:
                raise e

    temp_advertisement.clear()
    view_others(message)

def schedule_advertisement_deletion(advertisement_id, end_date, end_time):
    try:
        end_datetime = datetime.strptime(f"{end_date} {end_time}", "%d.%m.%Y %H:%M")
        delay = (end_datetime - datetime.now()).total_seconds()
        if delay > 0:
            threading.Timer(delay, delete_advertisement_messages, [advertisement_id]).start()
        else:
            delete_advertisement_messages(advertisement_id)
    except ValueError as e:
        pass

def delete_advertisement_messages(advertisement_id):
    if advertisement_id not in advertisements['advertisements']:
        return

    advertisement = advertisements['advertisements'][advertisement_id]
    user_ids = advertisement['user_ids']
    message_ids = advertisement['message_ids']

    if len(user_ids) != len(message_ids):
        pass
    
    for user_id, message_id in zip(user_ids, message_ids):
        try:
            bot.delete_message(user_id, message_id)
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 400 and 'message to delete not found' in e.result_json['description']:
                pass
            elif e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                if user_id not in blocked_users:
                    blocked_users.append(user_id)
                    save_blocked_users(blocked_users)
            else:
                pass

    del advertisements['advertisements'][advertisement_id]
    save_advertisements()

# --------------------------------------------- –ü–†–û–ß–ï–ï (–≤–∞—à–∏ –∑–∞—è–≤–∫–∏) -----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–í–∞—à–∏ –∑–∞—è–≤–∫–∏')
@check_function_state_decorator('–í–∞—à–∏ –∑–∞—è–≤–∫–∏')
@track_usage('–í–∞—à–∏ –∑–∞—è–≤–∫–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_user_advertisement_requests(message):
    user_id = message.chat.id
    user_advertisements = [adv for adv in advertisements['advertisements'].values() if adv['user_id'] == user_id]

    status_translation = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'accepted': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞',
        'sent': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
    }

    if user_advertisements:
        advertisement_list = [
            f"‚≠ê ‚Ññ{i + 1}\n\n"
            f"üìù *–¢–µ–º–∞*: {adv['theme'].lower()}\n"
            f"üìÖ *–ù–∞—á–∞–ª–æ*: {adv['expected_date']} –≤ {adv['expected_time']}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü*: {adv.get('end_date', 'N/A')} –≤ {adv.get('end_time', 'N/A')}\n"
            f"üìç *–°—Ç–∞—Ç—É—Å*: {status_translation.get(adv['status'], '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
            for i, adv in enumerate(user_advertisements)
        ]
        full_message = "*–í–∞—à–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–∫–ª–∞–º—É*:\n\n" + "\n\n".join(advertisement_list)

        max_length = 4096
        if len(full_message) > max_length:
            parts = [full_message[i:i + max_length] for i in range(0, len(full_message), max_length)]
            for part in parts:
                bot.send_message(message.chat.id, part, parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, full_message, parse_mode="Markdown")

        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, show_user_advertisement_request_details)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–∫–ª–∞–º—É!", parse_mode="Markdown")

@text_only_handler
def show_user_advertisement_request_details(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã":
        view_add_menu(message, show_description=False)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        view_others(message)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    status_translation = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'accepted': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞',
        'sent': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
    }

    try:
        index = int(message.text) - 1
        user_id = message.chat.id
        user_advertisements = [adv for adv in advertisements['advertisements'].values() if adv['user_id'] == user_id]

        if 0 <= index < len(user_advertisements):
            advertisement = user_advertisements[index]
            text = advertisement['text']

            info_message = (
                f"‚≠ê *–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∫–ª–∞–º–µ*:\n\n"
                f"üìù *–¢–µ–º–∞*: {advertisement['theme'].lower()}\n"
                f"üìÖ *–ù–∞—á–∞–ª–æ*: {advertisement['expected_date']} –≤ {advertisement['expected_time']}\n"
                f"‚åõ *–ö–æ–Ω–µ—Ü*: {advertisement.get('end_date', 'N/A')} –≤ {advertisement.get('end_time', 'N/A')}\n"
                f"üìç *–°—Ç–∞—Ç—É—Å*: {status_translation.get(advertisement['status'], '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n\n"
            )

            bot.send_message(message.chat.id, info_message, parse_mode="Markdown")

            if text and text != 'None':
                message_text = f"üìù –¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã üìù\n\n{text}"
            else:
                message_text = ""

            if 'files' in advertisement and advertisement['files']:
                media_group = []
                first_file = True
                for file in advertisement['files']:
                    if first_file:
                        caption = message_text
                    else:
                        caption = None
                    if file['type'] == 'photo':
                        media_group.append(telebot.types.InputMediaPhoto(file['file_id'], caption=caption))
                    elif file['type'] == 'video':
                        media_group.append(telebot.types.InputMediaVideo(file['file_id'], caption=caption))
                    elif file['type'] == 'document':
                        media_group.append(telebot.types.InputMediaDocument(file['file_id'], caption=caption))
                    elif file['type'] == 'animation':
                        media_group.append(telebot.types.InputMediaAnimation(file['file_id'], caption=caption))
                    elif file['type'] == 'sticker':
                        bot.send_sticker(message.chat.id, file['file_id'])
                    elif file['type'] == 'audio':
                        media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
                    elif file['type'] == 'voice':
                        media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
                    elif file['type'] == 'video_note':
                        bot.send_video_note(message.chat.id, file['file_id'])
                    first_file = False

                if media_group:
                    bot.send_media_group(message.chat.id, media_group)
            else:
                if message_text:
                    bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

            markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            if advertisement['status'] == 'pending':
                markup.add('–û—Ç–æ–∑–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
            bot.register_next_step_handler(message, handle_user_advertisement_request_action, index)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            show_user_advertisement_requests(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏!")
        show_user_advertisement_requests(message)

@text_only_handler
def handle_user_advertisement_request_action(message, index):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã":
        view_add_menu(message, show_description=False)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        view_others(message)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    user_id = message.chat.id
    user_advertisements = [adv for adv in advertisements['advertisements'].values() if adv['user_id'] == user_id]
    advertisement_id = list(advertisements['advertisements'].keys())[list(advertisements['advertisements'].values()).index(user_advertisements[index])]
    advertisement = user_advertisements[index]

    if message.text == '–û—Ç–æ–∑–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É':
        if advertisement['status'] != 'pending':
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –†–µ–∫–ª–∞–º–∞ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–æ–∑–≤–∞–Ω–∞!")
            show_user_advertisement_requests(message)
            return

        del advertisements['advertisements'][advertisement_id]
        save_advertisements()
        bot.send_message(message.chat.id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω–∞!")

        with open('data/admin/admin_user_payments/admin_sessions.json', 'r', encoding='utf-8') as file:
            admin_data = json.load(file)
            admin_ids = admin_data.get('admin_sessions', [])

        for admin_id in admin_ids:
            try:
                bot.send_message(admin_id, f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}` –ø–æ —Ç–µ–º–µ *{advertisement['theme'].lower()}* –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞!", parse_mode="Markdown")
            except ApiTelegramException as e:
                if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                    if admin_id not in blocked_users:
                        blocked_users.append(admin_id)
                        save_blocked_users(blocked_users)
                else:
                    raise e

        return_to_menu(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        show_user_advertisement_request_details(message)

# -------------------------------------------------- –ü–†–û–ß–ï–ï (—á–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º) ---------------------------------------------------

ACTIVE_CHATS_PATH = 'data/admin/chats/active_chats.json'
CHAT_HISTORY_PATH = 'data/admin/chats/chat_history.json'
USER_DB_PATH = 'data/admin/admin_user_payments/users.json'

active_chats = {}
user_requests_chat = {}
active_user_chats = {}
active_admin_chats = {}
current_dialogs = {}

def load_active_chats():
    global active_chats, user_requests_chat
    if os.path.exists(ACTIVE_CHATS_PATH):
        with open(ACTIVE_CHATS_PATH, 'r', encoding='utf-8') as file:
            data = json.load(file)
            active_chats = {int(k): v for k, v in data.get("active_chats", {}).items()}
            user_requests_chat_data = data.get("user_requests_chat", {})
            user_requests_chat = {
                int(k): v if isinstance(v, dict) else {}
                for k, v in user_requests_chat_data.items()
            }
    else:
        active_chats = {}
        user_requests_chat = {}

load_active_chats()

def save_active_chats():
    with open(ACTIVE_CHATS_PATH, 'w', encoding='utf-8') as file:
        data = {
            "active_chats": {str(k): v for k, v in active_chats.items()},
            "user_requests_chat": {str(k): v for k, v in user_requests_chat.items()}
        }
        json.dump(data, file, ensure_ascii=False, indent=4)

def load_users():
    check_and_create_file()
    try:
        with open(DB_PATH, 'r', encoding='utf-8') as file:
            return json.load(file)
    except UnicodeDecodeError as e:
        with open(DB_PATH, 'r', encoding='cp1251') as file:
            content = file.read()
            with open(DB_PATH, 'w', encoding='utf-8') as outfile:
                json.dump(json.loads(content), outfile, ensure_ascii=False, indent=4)
            return json.loads(content)
    except json.JSONDecodeError as e:
        return {}

def escape_markdown(text):
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

def ensure_directories_and_file():
    directory = os.path.dirname(ACTIVE_CHATS_PATH)
    if not os.path.exists(directory):
        os.makedirs(directory)
    if not os.path.exists(ACTIVE_CHATS_PATH):
        with open(ACTIVE_CHATS_PATH, 'w', encoding='utf-8') as file:
            json.dump({"active_chats": {}, "user_requests_chat": {}}, file, ensure_ascii=False, indent=4)

def check_user_requests_chat_type(func_name):
    global user_requests_chat
    if not isinstance(user_requests_chat, dict):
        user_requests_chat = {}

def add_user_request(user_id, date, count):
    if user_id not in user_requests_chat:
        user_requests_chat[user_id] = {}

    today = datetime.now().date().isoformat()

    if today not in user_requests_chat[user_id]:
        user_requests_chat[user_id][today] = []

    if len(user_requests_chat[user_id][today]) >= 3:
        return False

    user_requests_chat[user_id][today].append(time.time())
    save_active_chats()
    return True

def load_chat_history():
    if os.path.exists(CHAT_HISTORY_PATH):
        with open(CHAT_HISTORY_PATH, 'r', encoding='utf-8') as file:
            return json.load(file)
    return {}

def save_message_to_history(admin_id, user_id, message_content, message_type, caption=None):
    chat_history = load_chat_history()

    chat_key = f"{admin_id}_{user_id}"
    if chat_key not in chat_history:
        chat_history[chat_key] = []

    timestamp = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")

    if chat_key not in current_dialogs:
        current_dialogs[chat_key] = []

    current_dialogs[chat_key].append({
        "type": message_type,
        "content": message_content,
        "timestamp": timestamp,
        "caption": caption.lower() if caption else None
    })

    with open(CHAT_HISTORY_PATH, 'w', encoding='utf-8') as file:
        json.dump(chat_history, file, ensure_ascii=False, indent=4)

@bot.message_handler(func=lambda message: message.text.lower() in ["–ø—Ä–∏–Ω—è—Ç—å", "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å"] and message.from_user.id in active_chats and active_chats[message.from_user.id]["status"] == "pending")
@restricted
@track_user_activity
@check_chat_state
def handle_chat_response(message):
    user_id = message.from_user.id

    if user_id in active_chats and active_chats[user_id]["status"] == "pending" and active_chats[user_id]["awaiting_response"]:
        admin_id = active_chats[user_id]["admin_id"]
        users_data = load_users()
        username = users_data.get(str(user_id), {}).get('username', 'Unknown')
        escaped_username = escape_markdown(username)

        if admin_id in active_admin_chats:
            bot.send_message(user_id, "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –Ω–∞—á–∞–ª —á–∞—Ç —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...", parse_mode="Markdown")
            start_menu(user_id)
            del active_chats[user_id]
            save_active_chats()
            return

        if message.text.lower() == "–ø—Ä–∏–Ω—è—Ç—å":
            with threading.Lock():
                if admin_id in active_admin_chats:
                    bot.send_message(user_id, "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –Ω–∞—á–∞–ª —á–∞—Ç —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...", parse_mode="Markdown")
                    start_menu(user_id)
                    del active_chats[user_id]
                    save_active_chats()
                    return

                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(types.KeyboardButton('–°—Ç–æ–ø'))
                bot.send_message(user_id, "‚úÖ –í—ã –Ω–∞ —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", parse_mode="Markdown", reply_markup=markup)
                bot.send_message(admin_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {escaped_username} - `{user_id}` –ø—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç!", parse_mode="Markdown", reply_markup=markup)
                active_chats[user_id]["status"] = "active"
                active_chats[user_id]["awaiting_response"] = False
                active_user_chats[user_id] = admin_id
                active_admin_chats[admin_id] = user_id
                save_active_chats()

        else:  
            bot.send_message(user_id, "‚úÖ –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç!", parse_mode="Markdown", reply_markup=types.ReplyKeyboardRemove())
            bot.send_message(admin_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {escaped_username} - `{user_id}` –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç!", parse_mode="Markdown")
            del active_chats[user_id]
            save_active_chats()
            return_to_menu(message)
            return_admin_to_menu(admin_id)
    else:
        return

@bot.message_handler(func=lambda message: message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@check_function_state_decorator('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
@restricted
@track_user_activity
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@rate_limit_with_captcha
def return_to_menu(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    if user_id in active_chats and active_chats[user_id].get("status") == "waiting_for_topic":
        del active_chats[user_id]
        save_active_chats()

    if user_id in temporary_trip_data:
        temporary_trip_data[user_id] = []

    start(message)

def send_message_to_user(user_id, text, reply_markup=None, parse_mode=None):
    blocked_users = load_blocked_users()

    if user_id in blocked_users:
        return

    try:
        bot.send_message(user_id, text, reply_markup=reply_markup, parse_mode=parse_mode)
    except ApiTelegramException as e:
        if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
            if user_id not in blocked_users:
                blocked_users.append(user_id)
                save_blocked_users(blocked_users)
        else:
            raise e

@bot.message_handler(func=lambda message: message.text == '–°—Ç–æ–ø' or message.text == '/stopchat')
@restricted
@track_user_activity
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@rate_limit_with_captcha
def stop_chat(message):
    user_id = message.from_user.id

    if user_id in active_user_chats:
        admin_id = active_user_chats[user_id]
        users_data = load_users()
        username = users_data.get(str(user_id), {}).get('username', 'Unknown')
        escaped_username = escape_markdown(username)

        bot.send_message(admin_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {escaped_username} - `{user_id}` –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç!", parse_mode="Markdown")
        bot.send_message(user_id, "‚úÖ –ß–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω!", parse_mode="Markdown", reply_markup=types.ReplyKeyboardRemove())
        del active_user_chats[user_id]
        del active_admin_chats[admin_id]
        if user_id in active_chats:
            del active_chats[user_id]
        save_active_chats()
        start_menu(user_id)

        chat_key = f"{admin_id}_{user_id}"
        if chat_key in current_dialogs:
            chat_history = load_chat_history()
            chat_history[chat_key].append(current_dialogs[chat_key])
            del current_dialogs[chat_key]
            with open(CHAT_HISTORY_PATH, 'w', encoding='utf-8') as file:
                json.dump(chat_history, file, ensure_ascii=False, indent=4)

        return_admin_to_menu(admin_id)

    elif user_id in active_admin_chats:
        target_user_id = active_admin_chats[user_id]
        bot.send_message(target_user_id, "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç!", parse_mode="Markdown")
        del active_admin_chats[user_id]
        del active_user_chats[target_user_id]
        if target_user_id in active_chats:
            del active_chats[target_user_id]
        save_active_chats()
        start_menu(target_user_id)

        chat_key = f"{user_id}_{target_user_id}"
        if chat_key in current_dialogs:
            chat_history = load_chat_history()
            chat_history[chat_key].append(current_dialogs[chat_key])
            del current_dialogs[chat_key]
            with open(CHAT_HISTORY_PATH, 'w', encoding='utf-8') as file:
                json.dump(chat_history, file, ensure_ascii=False, indent=4)

        return_admin_to_menu(user_id)

    else:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è!")

def start_menu(user_id):
    user_data = load_user_data()
    username = user_data.get(user_id, {}).get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')

    if not username or username == '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π':
        users_data = load_users()
        username = users_data.get(str(user_id), {}).get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    itembuysub = types.KeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞")
    item1 = types.KeyboardButton("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item2 = types.KeyboardButton("–¢—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã")
    item3 = types.KeyboardButton("–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    item4 = types.KeyboardButton("–ü–æ–∏—Å–∫ –º–µ—Å—Ç")
    item5 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞")
    item6 = types.KeyboardButton("–¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ")
    item7 = types.KeyboardButton("–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞")
    item8 = types.KeyboardButton("–ö–æ–¥—ã OBD2")
    item9 = types.KeyboardButton("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    item10 = types.KeyboardButton("–ê–Ω—Ç–∏—Ä–∞–¥–∞—Ä")
    item11 = types.KeyboardButton("–ü—Ä–æ—á–µ–µ")

    markup.add(itembuysub)
    markup.add(item1, item2)
    markup.add(item3, item4)
    markup.add(item5, item6)
    markup.add(item7, item8)
    markup.add(item9, item10)
    markup.add(item11)

    welcome_message = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {escape_markdown(username)}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"
    send_message_to_user(user_id, welcome_message, parse_mode="Markdown", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ß–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º")
@check_function_state_decorator('–ß–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º')
@track_usage('–ß–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def request_chat_with_admin(message, show_description=True):
    global active_chats, user_requests_chat
    check_user_requests_chat_type("request_chat_with_admin")
    if not isinstance(user_requests_chat, dict):
        user_requests_chat = {}
    if active_chats is None:
        active_chats = {}

    user_id = message.from_user.id
    today = datetime.now().date().isoformat()

    if any(chat_data.get("user_id") == user_id and chat_data.get("status") == "pending" for chat_data in active_chats.values()):
        bot.send_message(user_id, "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ...")
        return

    user_requests_chat_today = len(user_requests_chat.get(user_id, {}).get(today, []))
    if user_requests_chat_today >= 3:
        bot.send_message(user_id, "‚ùå –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞...")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ'))
    markup.add(types.KeyboardButton('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))

    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —á–∞—Ç—É*\n\n"
        "üìå *–ß–∞—Ç:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º), —á—Ç–æ–±—ã –ª–∏—á–Ω–æ –æ–±—Å—É–¥–∏—Ç—å *–≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –∫–∞—Å–∞—é—Ç—Å—è –±–æ—Ç–∞* "
        "*(—Ä–µ–∫–ª–∞–º–∞, –±–∞–≥–∏, —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Ç.–¥.)*\n"
        "–ó–∞–ø—Ä–æ—Å –ø–æ–¥–∞–µ—Ç—Å—è *1 —Ä–∞–∑*, –µ—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) –Ω–µ –≤–∏–¥—è—Ç –µ–µ, —Ç.–µ. –æ–Ω–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ \"–æ–∂–∏–¥–∞–Ω–∏–µ\", "
        "–∞ –µ—Å–ª–∏ –∂–µ —á–∞—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ø–æ –∫–∞–∫–æ–π-–ª–∏–±–æ –ø—Ä–∏—á–∏–Ω–µ, —Ç–æ *—É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å* —Å–≤—è–∑–∞—Ç—å—Å—è –µ—â–µ *2 —Ä–∞–∑–∞*, —Ç.–µ. *3 —Ä–∞–∑–∞ –≤ —Å—É—Ç–∫–∏.* "
        "–£—á–∏—Ç—ã–≤–∞–π—Ç–µ, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) –º–æ–∂–µ—Ç *–∑–∞–ø—Ä–µ—Ç–∏—Ç—å –≤–∞–º –æ–±—â–µ–Ω–∏–µ –Ω–∞–≤—Å–µ–≥–¥–∞*, –µ—Å–ª–∏ –æ–Ω–æ –±—É–¥–µ—Ç *–Ω–µ –ø–æ —Ç–µ–º–µ*!\n\n"
        "üìå *–ß–∞—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞):*\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) –º–æ–∂–µ—Ç –∫–∏–Ω—É—Ç—å –≤–∞–º *–∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.* "
        "–í—ã –≤ –ø—Ä–∞–≤–µ *–ø—Ä–∏–Ω—è—Ç—å* –∑–∞–ø—Ä–æ—Å –∏–ª–∏ *–æ—Ç–∫–ª–æ–Ω–∏—Ç—å*!",
    )

    if show_description:
        bot.send_message(user_id, description, parse_mode="Markdown")

    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:", reply_markup=markup)
    active_chats[user_id] = {"user_id": user_id, "status": "waiting_for_topic", "awaiting_response": False}
    save_active_chats()

@bot.message_handler(func=lambda message: message.from_user.id in active_chats and active_chats[message.from_user.id].get("status") == "waiting_for_topic" and str(message.from_user.id) not in admin_sessions)
def handle_chat_topic(message):
    user_id = message.from_user.id
    topic = message.text
    today = datetime.now().date().isoformat()

    if user_id in active_chats and active_chats[user_id].get("status") == "waiting_for_topic":
        if add_user_request(user_id, today, 1):
            active_chats[user_id] = {
                "user_id": user_id,
                "status": "pending",
                "topic": topic,
                "awaiting_response": False
            }
            save_active_chats()
            bot.send_message(user_id, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞...")
            return_to_menu(message)
        else:
            bot.send_message(user_id, "‚ùå –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞...")
            del active_chats[user_id]
            save_active_chats()
            return_to_menu(message)
    else:
        bot.send_message(user_id, "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ...")

def check_chat_activity():
    while True:
        current_time = time.time()
        for user_id, chat_data in list(active_chats.items()):
            if chat_data["status"] == "active":
                last_activity_time = chat_data.get("last_activity_time", current_time)
                if current_time - last_activity_time > 180:  
                    admin_id = chat_data.get("admin_id")
                    users_data = load_users()
                    username = users_data.get(str(user_id), {}).get('username', 'Unknown')
                    escaped_username = escape_markdown(username)

                    if admin_id:
                        bot.send_message(admin_id, f"‚úÖ –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {escaped_username} - `{user_id}` –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!", parse_mode="Markdown")
                        return_admin_to_menu(admin_id)

                    bot.send_message(user_id, "‚úÖ –ß–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!", parse_mode="Markdown")
                    start_menu(user_id)

                    chat_key = f"{admin_id}_{user_id}"
                    if chat_key in current_dialogs:
                        chat_history = load_chat_history()
                        chat_history[chat_key].append(current_dialogs[chat_key])
                        del current_dialogs[chat_key]
                        with open(CHAT_HISTORY_PATH, 'w', encoding='utf-8') as file:
                            json.dump(chat_history, file, ensure_ascii=False, indent=4)

                    del active_chats[user_id]
                    save_active_chats()
        time.sleep(15)

threading.Thread(target=check_chat_activity, daemon=True).start()

@bot.message_handler(content_types=['text', 'photo', 'video', 'document', 'animation', 'sticker', 'audio', 'contact', 'voice', 'video_note', 'gif'], func=lambda message: (message.from_user.id in active_user_chats or message.from_user.id in active_admin_chats) and str(message.from_user.id) not in admin_sessions)
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
def handle_chat_messages(message):
    user_id = message.from_user.id

    if message.text and (message.text.startswith('/') or message.text == '–°—Ç–æ–ø'):
        return

    if user_id in active_chats:
        active_chats[user_id]["last_activity_time"] = time.time()
        save_active_chats()

    if user_id in active_admin_chats:
        target_user_id = active_admin_chats[user_id]
        try:
            if message.content_type == 'text':
                bot.send_message(target_user_id, f"{message.text}")
                save_message_to_history(user_id, target_user_id, message.text, 'admin')
            elif message.content_type == 'photo':
                media_group = []
                media_group.append(types.InputMediaPhoto(message.photo[-1].file_id, caption=message.caption))
                bot.send_media_group(target_user_id, media_group)
                save_message_to_history(user_id, target_user_id, f"photo: {message.photo[-1].file_id}", 'admin', caption=message.caption)
            elif message.content_type == 'video':
                media_group = []
                media_group.append(types.InputMediaVideo(message.video.file_id, caption=message.caption))
                bot.send_media_group(target_user_id, media_group)
                save_message_to_history(user_id, target_user_id, f"video: {message.video.file_id}", 'admin', caption=message.caption)
            elif message.content_type == 'document':
                media_group = []
                media_group.append(types.InputMediaDocument(message.document.file_id, caption=message.caption))
                bot.send_media_group(target_user_id, media_group)
                save_message_to_history(user_id, target_user_id, f"document: {message.document.file_id}", 'admin', caption=message.caption)
            elif message.content_type == 'animation':
                bot.send_animation(target_user_id, message.animation.file_id, caption=message.caption)
                save_message_to_history(user_id, target_user_id, f"animation: {message.animation.file_id}", 'admin', caption=message.caption)
            elif message.content_type == 'sticker':
                bot.send_sticker(target_user_id, message.sticker.file_id)
                save_message_to_history(user_id, target_user_id, f"sticker: {message.sticker.file_id}", 'admin')
            elif message.content_type == 'audio':
                bot.send_audio(target_user_id, message.audio.file_id, caption=message.caption)
                save_message_to_history(user_id, target_user_id, f"audio: {message.audio.file_id}", 'admin', caption=message.caption)
            elif message.content_type == 'contact':
                bot.send_contact(target_user_id, message.contact.phone_number, message.contact.first_name)
                save_message_to_history(user_id, target_user_id, f"contact: {message.contact.phone_number}", 'admin')
            elif message.content_type == 'voice':
                bot.send_voice(target_user_id, message.voice.file_id, caption=message.caption)
                save_message_to_history(user_id, target_user_id, f"voice: {message.voice.file_id}", 'admin', caption=message.caption)
            elif message.content_type == 'video_note':
                bot.send_video_note(target_user_id, message.video_note.file_id)
                save_message_to_history(user_id, target_user_id, f"video_note: {message.video_note.file_id}", 'admin')
            elif message.content_type == 'gif':
                bot.send_document(target_user_id, message.document.file_id, caption=message.caption)
                save_message_to_history(user_id, target_user_id, f"gif: {message.document.file_id}", 'admin', caption=message.caption)
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                blocked_users = load_blocked_users()
                if target_user_id not in blocked_users:
                    blocked_users.append(target_user_id)
                    save_blocked_users(blocked_users)
            else:
                raise e

    elif user_id in active_user_chats:
        target_admin_id = active_user_chats[user_id]
        try:
            if message.content_type == 'text':
                bot.send_message(target_admin_id, f"{message.text}")
                save_message_to_history(target_admin_id, user_id, message.text, 'user')
            elif message.content_type == 'photo':
                media_group = []
                media_group.append(types.InputMediaPhoto(message.photo[-1].file_id, caption=message.caption))
                bot.send_media_group(target_admin_id, media_group)
                save_message_to_history(target_admin_id, user_id, f"photo: {message.photo[-1].file_id}", 'user', caption=message.caption)
            elif message.content_type == 'video':
                media_group = []
                media_group.append(types.InputMediaVideo(message.video.file_id, caption=message.caption))
                bot.send_media_group(target_admin_id, media_group)
                save_message_to_history(target_admin_id, user_id, f"video: {message.video.file_id}", 'user', caption=message.caption)
            elif message.content_type == 'document':
                media_group = []
                media_group.append(types.InputMediaDocument(message.document.file_id, caption=message.caption))
                bot.send_media_group(target_admin_id, media_group)
                save_message_to_history(target_admin_id, user_id, f"document: {message.document.file_id}", 'user', caption=message.caption)
            elif message.content_type == 'animation':
                bot.send_animation(target_admin_id, message.animation.file_id, caption=message.caption)
                save_message_to_history(target_admin_id, user_id, f"animation: {message.animation.file_id}", 'user', caption=message.caption)
            elif message.content_type == 'sticker':
                bot.send_sticker(target_admin_id, message.sticker.file_id)
                save_message_to_history(target_admin_id, user_id, f"sticker: {message.sticker.file_id}", 'user')
            elif message.content_type == 'audio':
                bot.send_audio(target_admin_id, message.audio.file_id, caption=message.caption)
                save_message_to_history(target_admin_id, user_id, f"audio: {message.audio.file_id}", 'user', caption=message.caption)
            elif message.content_type == 'contact':
                bot.send_contact(target_admin_id, message.contact.phone_number, message.contact.first_name)
                save_message_to_history(target_admin_id, user_id, f"contact: {message.contact.phone_number}", 'user')
            elif message.content_type == 'voice':
                bot.send_voice(target_admin_id, message.voice.file_id, caption=message.caption)
                save_message_to_history(target_admin_id, user_id, f"voice: {message.voice.file_id}", 'user', caption=message.caption)
            elif message.content_type == 'video_note':
                bot.send_video_note(target_admin_id, message.video_note.file_id)
                save_message_to_history(target_admin_id, user_id, f"video_note: {message.video_note.file_id}", 'user')
            elif message.content_type == 'gif':
                bot.send_document(target_admin_id, message.document.file_id, caption=message.caption)
                save_message_to_history(target_admin_id, user_id, f"gif: {message.document.file_id}", 'user', caption=message.caption)
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                blocked_users = load_blocked_users()
                if user_id not in blocked_users:
                    blocked_users.append(user_id)
                    save_blocked_users(blocked_users)
            else:
                raise e

@bot.message_handler(func=lambda message: message.from_user.id in active_chats and active_chats[message.from_user.id].get("status") == "waiting_for_topic" and str(message.from_user.id) not in admin_sessions)
def handle_chat_topic(message):
    user_id = message.from_user.id
    topic = message.text
    today = datetime.now().date().isoformat()

    if user_id in active_chats and active_chats[user_id].get("status") == "waiting_for_topic":
        if add_user_request(user_id, today, 1):
            active_chats[user_id] = {
                "user_id": user_id,
                "status": "pending",
                "topic": topic,
                "awaiting_response": False
            }
            save_active_chats()
            bot.send_message(user_id, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞...")
            return_to_menu(message)
        else:
            bot.send_message(user_id, "‚ùå –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞...")
            del active_chats[user_id]
            save_active_chats()
            return_to_menu(message)
    else:
        bot.send_message(user_id, "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ...")





# ----------------------------------------------------- –ö–û–î –î–õ–Ø "–ê–î–ú–ò–ù–ê" ------------------------------------------------------





# ------------------------------------------------------ –í–•–û–î –í –ê–î–ú–ò–ù–ö–£ ------------------------------------------------------

ADMIN_USERNAME = "EvgenyAlex21"
ADMIN_PASSWORD = "HH1515az!"
ADMIN_SESSIONS_PATH = 'data/admin/admin_user_payments/admin_sessions.json'
credentials_changed = False
admin_sessions = set()
admin_logout_times = {}

def load_admin_data():
    if os.path.exists(ADMIN_SESSIONS_PATH):
        with open(ADMIN_SESSIONS_PATH, 'r', encoding='utf-8') as file:
            data = json.load(file)
            return {
                "admin_sessions": set(data.get("admin_sessions", [])),
                "admins_data": data.get("admins_data", {}),
                "removed_admins": {k: v for k, v in data.get("removed_admins", {}).items()},
                "login_password_hash": data.get("login_password_hash", "")
            }
    return {
        "admin_sessions": set(),
        "admins_data": {},
        "removed_admins": {},
        "login_password_hash": ""
    }

def save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins=None):
    with open(ADMIN_SESSIONS_PATH, 'w', encoding='utf-8') as file:
        json.dump({
            "admin_sessions": list(admin_sessions),
            "admins_data": admins_data,
            "removed_admins": removed_admins or {},
            "login_password_hash": login_password_hash
        }, file, ensure_ascii=False, indent=4)

admin_sessions = set()

data = load_admin_data()
admin_sessions = data["admin_sessions"]
admins_data = data["admins_data"]
removed_admins = data["removed_admins"]

login_password_hash = data["login_password_hash"]
login_password_hash = hashlib.sha256(f"{ADMIN_USERNAME}:{ADMIN_PASSWORD}".encode()).hexdigest()

# -------------------------------------------------- –í–•–û–î –í –ê–î–ú–ò–ù–ö–£ (—Ñ—É–Ω–∫—Ü–∏–∏) ---------------------------------------------------

def get_login_password_hash():
    return hashlib.sha256(f"{ADMIN_USERNAME}:{ADMIN_PASSWORD}".encode()).hexdigest()

def check_permission(admin_id, permission):
    return permission in admins_data.get(str(admin_id), {}).get("permissions", [])  

def get_user_data(message):
    user = message.from_user
    return {
        "user_id": user.id,
        "first_name": user.first_name if user.first_name else " ",
        "last_name": user.last_name if user.last_name else " ",
        "username": f"@{user.username}" if user.username else " ",
        "phone": user.phone_number if hasattr(user, 'phone_number') else " "
    }

def is_new_admin(admin_id):
    return admins_data.get(admin_id, {}).get("is_new", False)

def process_login_choice(message):
    global credentials_changed
    user_id = str(message.chat.id)

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥":
        if user_id in admin_sessions and not credentials_changed:
            if is_new_admin(user_id):
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add('–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞')
                bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞:", reply_markup=markup)
                bot.register_next_step_handler(message, handle_change_credentials)
            else:
                session_data = admins_data.get(user_id, {})
                bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {session_data.get('username', '–∞–¥–º–∏–Ω')}!")
                show_admin_panel(message)
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ...")
            handle_admin_login(message)
    elif message.text == "–í–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item_main)
        msg = bot.send_message(message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:", reply_markup=markup)
        bot.register_next_step_handler(msg, verify_username)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        handle_admin_login(message)

def verify_username(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    username = message.text
    is_valid, error_message = is_valid_username(username)
    if not is_valid:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {error_message}! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(message, verify_username)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_main)
    msg = bot.send_message(message.chat.id, "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=markup)
    bot.register_next_step_handler(msg, verify_password, username)
    bot.delete_message(message.chat.id, message.message_id)  

def verify_password(message, username):
    global credentials_changed

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    password = message.text
    admin_id = str(message.chat.id)

    if admin_id in removed_admins:
        bot.send_message(message.chat.id, "üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return

    if username == ADMIN_USERNAME and password == ADMIN_PASSWORD:
        if admin_id not in admin_sessions:
            admin_sessions.append(admin_id)
        save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins)

        user_data = get_user_data(message)
        update_admin_data(user_data)

        session_data = admins_data.get(admin_id, {})
        bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {session_data.get('username', '–∞–¥–º–∏–Ω')}!")
        show_admin_panel(message)

        credentials_changed = False
        bot.delete_message(message.chat.id, message.message_id)   
        return

    admin_hash = admins_data.get(admin_id, {}).get("login_password_hash_for_user_id", "")
    if generate_login_password_hash(username, password) == admin_hash:
        if admin_id not in admin_sessions:
            admin_sessions.append(admin_id)
        save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins)

        user_data = get_user_data(message)
        update_admin_data(user_data)

        session_data = admins_data.get(admin_id, {})
        bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {session_data.get('username', '–∞–¥–º–∏–Ω')}!")
        show_admin_panel(message)

        credentials_changed = False
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞...")
        handle_admin_login(message)

    bot.delete_message(message.chat.id, message.message_id) 

def update_admin_data(user_data):
    admin_id = str(user_data["user_id"])

    if admin_id in removed_admins:
        return

    if admin_id in admins_data:
        existing_data = admins_data[admin_id]
        if (existing_data.get("first_name") != user_data["first_name"] or
            existing_data.get("last_name") != user_data["last_name"] or
            existing_data.get("username") != user_data["username"] or
            existing_data.get("phone") != user_data["phone"]):
            admins_data[admin_id].update(user_data)
            save_admin_data(admin_sessions, admins_data, login_password_hash)
    else:
        admins_data[admin_id] = user_data
        save_admin_data(admin_sessions, admins_data, login_password_hash)

def update_login_password(chat_id, new_username=None, new_password=None):
    global admins_data, login_password_hash

    admin_id = str(chat_id)

    if admin_id not in admins_data:
        return f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å id {admin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!"

    admin_data = admins_data[admin_id]
    current_username = admin_data["admins_username"]
    current_password_hash = admin_data["login_password_hash_for_user_id"]

    if new_username:
        old_username = current_username
        admin_data["admins_username"] = new_username
        if old_username != new_username:
            admin_data["login_password_hash_for_user_id"] = hashlib.sha256(f"{new_username}:{new_password or current_password_hash}".encode()).hexdigest()

    if new_password:
        new_hash = hashlib.sha256(f"{new_username or current_username}:{new_password}".encode()).hexdigest()
        admin_data["login_password_hash_for_user_id"] = new_hash
    else:
        admin_data["login_password_hash_for_user_id"] = current_password_hash

    login_password_hash = hashlib.sha256(f"{new_username or current_username}:{new_password or current_password_hash}".encode()).hexdigest()

    admins_data[admin_id] = admin_data

    save_admin_data(admin_sessions, admins_data, login_password_hash)

    if new_username and new_password:
        return f"–õ–æ–≥–∏–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {new_username}, –ø–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!"
    elif new_username:
        return f"–õ–æ–≥–∏–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {new_username}. –ü–∞—Ä–æ–ª—å –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º!"
    elif new_password:
        return "–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!"
    else:
        return "–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ..."

def verify_login_password_hash():
    global login_password_hash
    current_hash = hashlib.sha256(f"{ADMIN_USERNAME}:{ADMIN_PASSWORD}".encode()).hexdigest()

    if current_hash != login_password_hash:
        login_password_hash = current_hash
        save_admin_data(admin_sessions, admins_data, login_password_hash)

verify_login_password_hash()

def change_admin_credentials(new_username=None, new_password=None):
    global ADMIN_USERNAME, ADMIN_PASSWORD, login_password_hash

    current_username = ADMIN_USERNAME
    current_password = ADMIN_PASSWORD

    if new_username:
        ADMIN_USERNAME = new_username
        current_username = new_username
    if new_password:
        ADMIN_PASSWORD = new_password
        current_password = new_password

    login_password_hash = hashlib.sha256(f"{current_username}:{current_password}".encode()).hexdigest()

    save_admin_data(admin_sessions, admins_data, login_password_hash)

# -------------------------------------------------- –í–•–û–î –í –ê–î–ú–ò–ù–ö–£ (–æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /admin) ------------------------------------------------

@bot.message_handler(commands=['admin'])
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_admin_login(message):
    global credentials_changed
    user_data = get_user_data(message)
    admin_id = str(user_data["user_id"])

    if admin_id in blocked_users:
        bot.send_message(admin_id, "‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    current_time = time.time()
    last_logout_time = admin_logout_times.get(admin_id)

    admin_sessions[:] = [
        session_id for session_id in admin_sessions
        if (current_time - admin_logout_times.get(session_id, 0)) <= 300
    ]

    if last_logout_time and (current_time - last_logout_time) <= 300:
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        if not credentials_changed:
            markup.add('–ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥')
        if credentials_changed:
            markup.add('–í–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(
            user_data["user_id"],
            "üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞:",
            reply_markup=markup
        )
        bot.register_next_step_handler(message, process_login_choice)
    else:
        if admin_id not in admin_sessions:
            if is_new_admin(admin_id):
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add('–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞')
                bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞:", reply_markup=markup)
                bot.register_next_step_handler(message, handle_change_credentials)
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                markup.add(item_main)
                msg = bot.send_message(message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:", reply_markup=markup)
                bot.register_next_step_handler(msg, verify_username)
        else:
            admin_logout_times[admin_id] = time.time()
            bot.send_message(message.chat.id, "‚úÖ –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É... –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!")
            show_admin_panel(message)

def show_admin_panel(message):
    admin_id = str(message.chat.id)
    if is_new_admin(admin_id):
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞')
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, handle_change_credentials)
    else:
        markup = types.ReplyKeyboardMarkup(row_width=3)
        markup.add('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
        markup.add('–ê–¥–º–∏–Ω', '–ë–∞–Ω', '–§—É–Ω–∫—Ü–∏–∏')
        markup.add('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–§–∞–π–ª—ã', '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è')
        markup.add('–û–±—â–µ–Ω–∏–µ', '–†–µ–∫–ª–∞–º–∞', '–†–µ–¥–∞–∫—Ü–∏—è')
        markup.add('–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞')
        markup.add('–í—ã—Ö–æ–¥')
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_return_to_admin_panel(message):
    show_admin_panel(message)

# -------------------------------------------------- –í–•–û–î –í –ê–î–ú–ò–ù–ö–£ (–≤—ã—Ö–æ–¥) ------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–í—ã—Ö–æ–¥' and str(message.chat.id) in admin_sessions)
@restricted
@track_user_activity
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def admin_logout(message):
    admin_id = str(message.chat.id)

    if admin_id in blocked_users:
        bot.send_message(admin_id, "‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return

    admin_logout_times[admin_id] = time.time()
    bot.send_message(message.chat.id, "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!\nüîê –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç...")
    return_to_menu(message)

# -------------------------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def manage_system(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º')
    markup.add('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞–º–∏')
    markup.add('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏')
    markup.add('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def return_to_subs(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return
    manage_system(message)

# ------------------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def manage_subscriptions(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏', '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–ø–∏—Å–æ–∫', '–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:", reply_markup=markup)

def split_message(message, max_length=4096):
    parts = []
    while len(message) > max_length:
        part = message[:max_length]
        last_space = part.rfind(' ')
        if last_space != -1:
            parts.append(part[:last_space])
            message = message[last_space:]
        else:
            parts.append(part)
            message = message[max_length:]
    parts.append(message)
    return parts

# --------------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def add_subscription(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    list_users_for_payments_pay(message)

@text_only_handler
def list_users_for_payments_pay(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏":
        manage_subscriptions(message)
        return
		
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return
    
    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏'))
    markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π'))
    markup.add(types.KeyboardButton('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'))
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, process_add_subscription)

@text_only_handler
def process_add_subscription(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏":
        manage_subscriptions(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    user_id = None

    users_data = load_users()
    if user_input.isdigit():
        if len(user_input) >= 5:
            user_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(users_data):
                user_id = list(users_data.keys())[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:]  
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@') 
            if db_username.lower() == username.lower():  
                user_id = uid
                break

    if not user_id or user_id not in users_data:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_add_subscription)
        return

    subscription_plans = load_subscriptions_and_store()[0]
    if not subscription_plans:
        bot.send_message(message.chat.id, "‚ùå –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        manage_system(message)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    plan_labels = [plan['label'] for plan in subscription_plans.values()]

    for i in range(0, len(plan_labels), 3):
        row = plan_labels[i:i+3]
        markup.row(*row)
    
    markup.row('–°–≤–æ–π –ø–ª–∞–Ω')
    markup.row('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏')
    markup.row('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.row('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, process_add_subscription_plan, user_id)

@text_only_handler
def process_add_subscription_plan(message, user_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏":
        manage_subscriptions(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    plan_name = message.text.strip().lower()
    subscription_plans = load_subscriptions_and_store()[0]  
    valid_plans = {v['label'].lower(): k for k, v in subscription_plans.items()}
    valid_plans['—Å–≤–æ–π –ø–ª–∞–Ω'] = 'custom'

    if plan_name not in valid_plans:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_add_subscription_plan, user_id)
        return

    if plan_name == '—Å–≤–æ–π –ø–ª–∞–Ω':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í –º–∏–Ω—É—Ç–∞—Ö', '–í —á–∞—Å–∞—Ö', '–í –¥–Ω—è—Ö')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, process_custom_plan_unit, user_id)
        return

    data = load_payment_data()
    user_data = data['subscriptions']['users'].setdefault(str(user_id), {'plans': []})

    latest_end_date = datetime.now()
    for plan in user_data['plans']:
        plan_end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
        if plan_end_date > latest_end_date:
            latest_end_date = plan_end_date

    plan_key = valid_plans[plan_name]
    plan_details = subscription_plans[plan_key]
    duration = plan_details['duration']
    plan_name_rus = plan_details['label']
    new_end_date = latest_end_date + timedelta(days=duration)
    plan_name_eng = plan_key.replace('_subscription_', '_')

    new_plan = {
        "plan_name": plan_name_eng,
        "start_date": latest_end_date.strftime("%d.%m.%Y –≤ %H:%M"),
        "end_date": new_end_date.strftime("%d.%m.%Y –≤ %H:%M"),
        "price": 0,
        "source": "admin"
    }
    user_data['plans'].append(new_plan)
    data['subscriptions']['users'][str(user_id)] = user_data
    save_payments_data(data)

    users_data = load_users()
    username = escape_markdown(users_data.get(str(user_id), {}).get('username', f"@{user_id}"))

    admin_message = (
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} - `{user_id}` –Ω–∞–∑–Ω–∞—á–µ–Ω:\n\n"
        f"üíº *–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:* {plan_name_rus}\n"
        f"üïí *–ù–∞—á–∞–ª–æ:* {latest_end_date.strftime('%d.%m.%Y –≤ %H:%M')}\n"
        f"‚åõ *–ö–æ–Ω–µ—Ü:* {new_end_date.strftime('%d.%m.%Y –≤ %H:%M')}"
    )
    user_message = (
        f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞–º:\n\n"
        f"üíº *–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:* {plan_name_rus}\n"
        f"üïí *–ù–∞—á–∞–ª–æ:* {latest_end_date.strftime('%d.%m.%Y –≤ %H:%M')}\n"
        f"‚åõ *–ö–æ–Ω–µ—Ü:* {new_end_date.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
    )

    bot.send_message(message.chat.id, admin_message, parse_mode="Markdown")
    bot.send_message(user_id, user_message, parse_mode="Markdown")

    manage_system(message)

@text_only_handler
def process_custom_plan_unit(message, user_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏":
        manage_subscriptions(message)
        return
		
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    unit = message.text.strip().lower()
    if unit not in ['–≤ –º–∏–Ω—É—Ç–∞—Ö', '–≤ —á–∞—Å–∞—Ö', '–≤ –¥–Ω—è—Ö']:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_custom_plan_unit, user_id)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    if unit == '–≤ –º–∏–Ω—É—Ç–∞—Ö':
        prompt = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:"
    elif unit == '–≤ —á–∞—Å–∞—Ö':
        prompt = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:"
    else:  
        prompt = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:"

    bot.send_message(message.chat.id, prompt, reply_markup=markup)
    bot.register_next_step_handler(message, process_custom_plan_duration, user_id, unit)

@text_only_handler
def process_custom_plan_duration(message, user_id, unit):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏":
        manage_subscriptions(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        input_text = message.text.strip().replace(',', '.')
        duration = float(input_text)
        if duration <= 0:
            raise ValueError("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
        
        duration_display = f"{int(duration)}" if duration.is_integer() else f"{duration:.2f}"
        duration_int = int(duration)

        data = load_payment_data()
        user_data = data['subscriptions']['users'].setdefault(str(user_id), {'plans': []})

        latest_end_date = datetime.now()
        for plan in user_data['plans']:
            plan_end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
            if plan_end_date > latest_end_date:
                latest_end_date = plan_end_date

        unit_mapping = {
            '–≤ –º–∏–Ω—É—Ç–∞—Ö': '–º–∏–Ω—É—Ç—ã',
            '–≤ —á–∞—Å–∞—Ö': '—á–∞—Å—ã',
            '–≤ –¥–Ω—è—Ö': '–¥–Ω–∏'
        }
        unit_display = {
            '–º–∏–Ω—É—Ç—ã': '–º–∏–Ω.',
            '—á–∞—Å—ã': '—á.',
            '–¥–Ω–∏': '–¥–Ω.'
        }
        duration_unit = unit_mapping.get(unit.lower(), '–¥–Ω–∏')

        if unit.lower() == '–≤ –º–∏–Ω—É—Ç–∞—Ö':
            new_end_date = latest_end_date + timedelta(minutes=duration)
            duration_str = f"{duration_display} –º–∏–Ω."
        elif unit.lower() == '–≤ —á–∞—Å–∞—Ö':
            new_end_date = latest_end_date + timedelta(hours=duration)
            duration_str = f"{duration_display} —á."
        else:
            new_end_date = latest_end_date + timedelta(days=duration)
            duration_str = f"{duration_display} –¥–Ω."

        new_plan = {
            "plan_name": "custom",
            "start_date": latest_end_date.strftime("%d.%m.%Y –≤ %H:%M"),
            "end_date": new_end_date.strftime("%d.%m.%Y –≤ %H:%M"),
            "price": 0,
            "source": "admin",
            "duration_unit": duration_unit,
            "duration_value": duration_int
        }
        user_data['plans'].append(new_plan)
        data['subscriptions']['users'][str(user_id)] = user_data
        save_payments_data(data)

        users_data = load_users()
        username = escape_markdown(users_data.get(str(user_id), {}).get('username', f"@{user_id}"))

        admin_message = (
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} - `{user_id}` –Ω–∞–∑–Ω–∞—á–µ–Ω:\n\n"
            f"üíº *–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:* –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π ({duration_str})\n"
            f"üïí *–ù–∞—á–∞–ª–æ:* {latest_end_date.strftime('%d.%m.%Y –≤ %H:%M')}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {new_end_date.strftime('%d.%m.%Y –≤ %H:%M')}"
        )
        user_message = (
            f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞–º:\n\n"
            f"üíº *–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:* –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π ({duration_str})\n"
            f"üïí *–ù–∞—á–∞–ª–æ:* {latest_end_date.strftime('%d.%m.%Y –≤ %H:%M')}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {new_end_date.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
        )

        bot.send_message(message.chat.id, admin_message, parse_mode="Markdown")
        bot.send_message(user_id, user_message, parse_mode="Markdown")

        manage_system(message)
    except ValueError as e:
        bot.send_message(message.chat.id, f"‚ùå {str(e)}!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        bot.register_next_step_handler(message, process_custom_plan_duration, user_id, unit)

# --------------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò (–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–ø–∏—Å–æ–∫) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–ø–∏—Å–æ–∫' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_subscriptions(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–ø–∏—Å–æ–∫'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return
    
    list_users_for_payments_view(message)

@text_only_handler
def list_users_for_payments_view(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏":
        manage_subscriptions(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏'))
    markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π'))
    markup.add(types.KeyboardButton('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'))
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫:", reply_markup=markup)
    bot.register_next_step_handler(message, process_view_subscriptions)

@text_only_handler
def process_view_subscriptions(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏":
        manage_subscriptions(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    user_id = None

    users_data = load_users()
    if user_input.isdigit():
        if len(user_input) >= 5:
            user_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(users_data):
                user_id = list(users_data.keys())[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:] 
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@') 
            if db_username.lower() == username.lower():  
                user_id = uid
                break

    if not user_id or user_id not in users_data:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_view_subscriptions)
        return

    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(str(user_id), {})
    if 'plans' not in user_data or not user_data['plans']:
        bot.send_message(message.chat.id, "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫!", parse_mode="Markdown")
        manage_system(message)
        return

    plans_summary = "üíé *–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫:*\n\n"
    total_days_left = 0
    total_cost_active = 0
    active_plans = []
    now = datetime.now()

    unit_display = {
        '–º–∏–Ω—É—Ç—ã': '–º–∏–Ω.',
        '—á–∞—Å—ã': '—á.',
        '–¥–Ω–∏': '–¥–Ω.'
    }

    for idx, plan in enumerate(user_data['plans'], start=1):
        end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
        is_active = end_date >= now

        if is_active:
            remaining_time = end_date - now
            days_left = remaining_time.days
            hours_left, remainder = divmod(remaining_time.seconds, 3600)
            minutes_left = remainder // 60
            time_status = f"üìÖ *–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å:* {days_left} –¥–Ω–µ–π –∏ {hours_left:02d}:{minutes_left:02d} —á–∞—Å–æ–≤"
            total_days_left += days_left
            total_cost_active += plan['price']
            active_plans.append(plan)
        else:
            elapsed_time = now - end_date
            days_elapsed = elapsed_time.days
            hours_elapsed, remainder = divmod(elapsed_time.seconds, 3600)
            minutes_elapsed = remainder // 60
            time_status = f"üìÖ *–ó–∞–≤–µ—Ä—à–µ–Ω–æ:* {days_elapsed} –¥–Ω–µ–π –∏ {hours_elapsed:02d}:{minutes_elapsed:02d} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"

        plan_name_lower = plan['plan_name'].lower()
        source = plan.get('source', '')

        if plan_name_lower in {"free", "referral_bonus", "ad_bonus", "activity", "points_bonus", "referral", "monthly_leader_bonus", "leaderboard"}:
            period_type = f"üéÅ *‚Ññ{idx}. {'(–ó–∞–≤–µ—Ä—à—ë–Ω)' if not is_active else ''} –ë–æ–Ω—É—Å–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            subscription_type = translate_plan_name(plan_name_lower)

        elif plan_name_lower in {"gift_time", "custom", "exchangetime"}:
            period_type = f"‚ú® *‚Ññ{idx}. {'(–ó–∞–≤–µ—Ä—à—ë–Ω)' if not is_active else ''} –ü–æ–¥–∞—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            if plan_name_lower == "custom":
                duration_value = int(plan.get('duration_value', 1))
                duration_unit = plan.get('duration_unit', '–¥–Ω–∏')
                subscription_type = f"–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π ({duration_value} {unit_display.get(duration_unit, '–¥–Ω.')})"
            else:
                subscription_type = translate_plan_name(plan_name_lower)
        else:
            if source in {"user", "promo_100_percent", "store"}:
                period_type = f"üí≥ *‚Ññ{idx}. {'(–ó–∞–≤–µ—Ä—à—ë–Ω)' if not is_active else ''} –ü–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            else:  
                period_type = f"üì¶ *‚Ññ{idx}. {'(–ó–∞–≤–µ—Ä—à—ë–Ω)' if not is_active else ''} –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            subscription_type = translate_plan_name(plan_name_lower)

        price_formatted = f"{plan['price']:.2f}"
        plans_summary += (
            f"{period_type}\n\n"
            f"üíº *–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:* {subscription_type}\n"
            f"{time_status}\n"
            f"üïí *–ù–∞—á–∞–ª–æ:* {plan['start_date']}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {plan['end_date']}\n"
            f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:* {price_formatted} —Ä—É–±.\n\n"
        )

    message_parts = split_message(plans_summary)
    for part in message_parts:
        bot.send_message(message.chat.id, part, parse_mode="Markdown")

    total_amount = user_data.get('total_amount', 0)
    total_cost_active_formatted = f"{total_cost_active:.2f}"
    total_amount_formatted = f"{total_amount:.2f}"

    if active_plans:
        subscription_types = []
        for p in active_plans:
            plan_name_lower = p['plan_name'].lower()
            if plan_name_lower == 'custom':
                duration_value = int(p.get('duration_value', 1))
                duration_unit = p.get('duration_unit', '–¥–Ω–∏')
                subscription_types.append(f"–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π ({duration_value} {unit_display.get(duration_unit, '–¥–Ω.')})")
            else:
                subscription_types.append(translate_plan_name(p['plan_name']))

        total_amount_message = (
            "üíé *–ò—Ç–æ–≥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:*\n\n"
            f"üíº *–¢–∏–ø—ã –ø–æ–¥–ø–∏—Å–æ–∫:* {', '.join(subscription_types)}\n"
            f"üìÖ *–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å:* {total_days_left} –¥–Ω–µ–π –∏ {hours_left:02d}:{minutes_left:02d} —á–∞—Å–æ–≤\n"
            f"üïí *–ù–∞—á–∞–ª–æ:* {min(datetime.strptime(p['start_date'], '%d.%m.%Y –≤ %H:%M') for p in active_plans).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {max(datetime.strptime(p['end_date'], '%d.%m.%Y –≤ %H:%M') for p in active_plans).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            f"üí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:* {total_cost_active_formatted} —Ä—É–±.\n"
            f"üí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫:* {total_amount_formatted} —Ä—É–±."
        )
    else:
        total_amount_message = (
            "üíé *–ò—Ç–æ–≥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:*\n\n"
            "üìÖ *–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç!*\n"
            f"üí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫:* {total_amount_formatted} —Ä—É–±."
        )

    bot.send_message(message.chat.id, total_amount_message, parse_mode="Markdown")
    manage_system(message)

# --------------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò (—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_subscription(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return
    
    list_users_for_payments_del(message)

@text_only_handler
def list_users_for_payments_del(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏":
        manage_subscriptions(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏'))
    markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π'))
    markup.add(types.KeyboardButton('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'))
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, process_delete_subscription)

@text_only_handler
def process_delete_subscription(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏":
        manage_subscriptions(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    user_id = None

    users_data = load_users()
    if user_input.isdigit():
        if len(user_input) >= 5:
            user_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(users_data):
                user_id = list(users_data.keys())[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:]  
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@')  
            if db_username.lower() == username.lower():  
                user_id = uid
                break

    if not user_id or user_id not in users_data:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_delete_subscription)
        return

    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(str(user_id), {})
    if 'plans' not in user_data or not user_data['plans']:
        bot.send_message(message.chat.id, "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", parse_mode="Markdown")
        manage_system(message)
        return

    now = datetime.now()
    active_plans = [p for p in user_data['plans'] if datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") > now and p['plan_name'].lower() != 'free']
    if not active_plans:
        bot.send_message(message.chat.id, "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", parse_mode="Markdown")
        manage_system(message)
        return

    plans_summary = "üíé *–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:*\n\n"

    unit_display = {
        '–º–∏–Ω—É—Ç—ã': '–º–∏–Ω.',
        '—á–∞—Å—ã': '—á.',
        '–¥–Ω–∏': '–¥–Ω.'
    }

    for idx, plan in enumerate(active_plans, start=1):
        end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
        remaining_time = end_date - now
        days_left = remaining_time.days
        hours_left, remainder = divmod(remaining_time.seconds, 3600)
        minutes_left = remainder // 60

        plan_name_lower = plan['plan_name'].lower()
        source = plan.get('source', '')

        if plan_name_lower in {"referral_bonus", "ad_bonus", "activity", "points_bonus", "referral", "monthly_leader_bonus", "leaderboard"}:
            period_type = f"üéÅ *‚Ññ{idx}. –ë–æ–Ω—É—Å–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            subscription_type = translate_plan_name(plan_name_lower)

        elif plan_name_lower in {"gift_time", "custom", "exchangetime"}:
            period_type = f"‚ú® *‚Ññ{idx}. –ü–æ–¥–∞—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            if plan_name_lower == "custom":
                duration_value = int(plan.get('duration_value', 1))
                duration_unit = plan.get('duration_unit', '–¥–Ω–∏')
                subscription_type = f"–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π ({duration_value} {unit_display.get(duration_unit, '–¥–Ω.')})"
            else:
                subscription_type = translate_plan_name(plan_name_lower)

        else:
            if source in {"user", "promo_100_percent", "store"}:
                period_type = f"üí≥ *‚Ññ{idx}. –ü–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            else:  
                period_type = f"üì¶ *‚Ññ{idx}. –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            subscription_type = translate_plan_name(plan_name_lower)

        price_formatted = f"{plan['price']:.2f}"
        plans_summary += (
            f"{period_type}\n\n"
            f"üíº *–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:* {subscription_type}\n"
            f"üìÖ *–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å:* {days_left} –¥–Ω–µ–π –∏ {hours_left:02d}:{minutes_left:02d} —á–∞—Å–æ–≤\n"
            f"üïí *–ù–∞—á–∞–ª–æ:* {plan['start_date']}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {plan['end_date']}\n"
            f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:* {price_formatted} —Ä—É–±.\n\n"
        )

    message_parts = split_message(plans_summary)
    for part in message_parts:
        bot.send_message(message.chat.id, part, parse_mode="Markdown")

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, process_delete_subscription_plan, user_id, active_plans)

@text_only_handler
def process_delete_subscription_plan(message, user_id, plans):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏":
        manage_subscriptions(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        plan_numbers_input = [num.strip() for num in message.text.strip().split(',')]
        plan_numbers = []
        invalid_numbers = []

        for num in plan_numbers_input:
            try:
                num_int = int(num)
                if 1 <= num_int <= len(plans):
                    plan_numbers.append(num_int)
                else:
                    invalid_numbers.append(num)
            except ValueError:
                invalid_numbers.append(num)

        if not plan_numbers:
            bot.send_message(message.chat.id, "–ù–∏ –æ–¥–∏–Ω –∏–∑ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
            bot.register_next_step_handler(message, process_delete_subscription_plan, user_id, plans)
            return

        data = load_payment_data()
        user_data = data['subscriptions']['users'][str(user_id)]

        users_data = load_users()
        username = escape_markdown(users_data.get(str(user_id), {}).get('username', f"@{user_id}"))

        unit_display = {
            '–º–∏–Ω—É—Ç—ã': '–º–∏–Ω.',
            '—á–∞—Å—ã': '—á.',
            '–¥–Ω–∏': '–¥–Ω.'
        }

        for plan_number in sorted(set(plan_numbers), reverse=True): 
            plan = plans[plan_number - 1]

            plan_name_lower = plan['plan_name'].lower()
            subscription_type = translate_plan_name(plan_name_lower)
            if plan_name_lower == 'custom':
                duration_value = int(plan.get('duration_value', 1))
                duration_unit = plan.get('duration_unit', '–¥–Ω–∏')
                subscription_type = f"–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π ({duration_value} {unit_display.get(duration_unit, '–¥–Ω.')})"

            admin_message = (
                f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} - `{user_id}` –æ—Ç–º–µ–Ω—ë–Ω:\n\n"
                f"üíº *–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:* {subscription_type}\n"
                f"üïí *–ù–∞—á–∞–ª–æ:* {plan['start_date']}\n"
                f"‚åõ *–ö–æ–Ω–µ—Ü:* {plan['end_date']}"
            )
            user_message = (
                f"üö´ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–º–µ–Ω–∏–ª –≤–∞–º:\n\n"
                f"üíº *–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:* {subscription_type}\n"
                f"üïí *–ù–∞—á–∞–ª–æ:* {plan['start_date']}\n"
                f"‚åõ *–ö–æ–Ω–µ—Ü:* {plan['end_date']}"
            )

            user_data['plans'].remove(plan)
            bot.send_message(message.chat.id, admin_message, parse_mode="Markdown")
            bot.send_message(user_id, user_message, parse_mode="Markdown")

        user_data['total_amount'] = sum(p['price'] for p in user_data.get('plans', []))

        save_payments_data(data)

        if invalid_numbers:
            invalid_numbers_str = ", ".join(invalid_numbers)
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–æ–º–µ—Ä–∞ `{invalid_numbers_str}` –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã!", parse_mode="Markdown")

        manage_system(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–æ–≤!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_delete_subscription_plan, user_id, plans)

# --------------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã) -------------------------------------

def format_number(num):
    if isinstance(num, int):
        return f"{num}"
    elif isinstance(num, float):
        return f"{num:.2f}" if num != int(num) else f"{int(num)}"
    return str(num)

@bot.message_handler(func=lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_referrals_and_stats(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    data = load_payment_data()
    users_data = load_users()
    now = datetime.strptime("01.01.2025 –≤ 00:00", "%d.%m.%Y –≤ %H:%M")

    referral_summary = "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:*\n\n"
    referral_stats = data.get('referrals', {}).get('stats', {})
    total_referrals = 0
    active_referral_subscriptions = 0
    total_referral_points = 0
    referral_users = 0
    if referral_stats:
        referral_summary += "*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ:*\n\n"
        for idx, (user_id, referrals) in enumerate(referral_stats.items(), 1):
            username = users_data.get(user_id, {}).get('username', user_id)
            if not username.startswith('@'):
                username = f"@{username}"
            referral_summary += (
                f"üéÅ *‚Ññ{idx}.* {escape_markdown(username)} (`{escape_markdown(user_id)}`): "
                f"{len(referrals)} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
            )
            total_referrals += len(referrals)
            for referral_id in referrals:
                user_plans = data.get('subscriptions', {}).get('users', {}).get(referral_id, {}).get('plans', [])
                for plan in user_plans:
                    end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
                    if end_date >= now:
                        active_referral_subscriptions += 1
                        break
        referral_summary += (
            f"\n\n*–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
            f"üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals}\n"
            f"üìà –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: {active_referral_subscriptions}\n"
        )
    else:
        referral_summary += "‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!\n\n"

    for user_id, user_data in data.get('subscriptions', {}).get('users', {}).items():
        points = user_data.get('referral_points', 0)
        total_referral_points += points
        if points > 0:
            referral_users += 1
    avg_referral_points = total_referral_points / referral_users if referral_users > 0 else 0
    referral_summary += (
        f"\n\nüéØ –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤: {total_referral_points:.2f}\n"
        f"üìä –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {avg_referral_points:.2f}\n"
    )

    subscription_summary = "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ø–ª–∞—Ç–µ–∂–µ–π:*\n\n"
    subscription_users = data.get('subscriptions', {}).get('users', {})
    total_amount = data.get('all_users_total_amount', 0)
    transaction_count = 0
    paying_users = 0
    active_subscriptions = 0
    store_purchase_count = 0
    store_purchase_amount = 0
    if subscription_users:
        subscription_summary += "*–û–±—â–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:*\n\n"
        for idx, (user_id, user_data) in enumerate(subscription_users.items(), 1):
            user_total_amount = user_data.get('total_amount', 0)
            username = user_data.get('username', users_data.get(user_id, {}).get('username', user_id))
            if not username.startswith('@'):
                username = f"@{username}"
            subscription_summary += (
                f"üë§ *‚Ññ{idx}.* {escape_markdown(username)} (`{escape_markdown(user_id)}`): "
                f"{user_total_amount:.2f} —Ä—É–±.\n"
            )
            if user_total_amount > 0:
                paying_users += 1
            for plan in user_data.get('plans', []):
                end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
                if end_date >= now:
                    active_subscriptions += 1
                    break
            for purchase in user_data.get('store_purchases', []):
                store_purchase_count += 1
                store_purchase_amount += purchase.get('price', 0)
                if purchase.get('price', 0) > 0:
                    transaction_count += 1
            for plan in user_data.get('plans', []):
                if plan.get('price', 0) > 0 and plan.get('source') != 'store':
                    transaction_count += 1
        avg_payment = total_amount / paying_users if paying_users > 0 else 0
        subscription_summary += (
            f"\n\n*–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
            f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π: {total_amount:.2f} —Ä—É–±.\n"
            f"üë• –ü–ª–∞—Ç—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {paying_users}\n"
            f"üìä –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_payment:.2f} —Ä—É–±.\n"
            f"üìù –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {transaction_count}\n"
            f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subscriptions}\n"
            f"üõí –ü–æ–∫—É–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: {store_purchase_count}\n"
            f"üí∏ –°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: {store_purchase_amount:.2f} —Ä—É–±.\n"
        )
    else:
        subscription_summary += "‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!\n"

    promo_summary = "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:*\n\n"
    promo_codes = data.get('promo_codes', {})
    total_promo_codes = len(promo_codes)
    active_promo_codes = 0
    used_promo_codes = 0
    total_discount_amount = 0
    total_promo_uses = 0
    if promo_codes:
        for code, details in promo_codes.items():
            used = details.get('used', False)
            active = details.get('active', not used)
            if active and not used:
                active_promo_codes += 1
            elif used or not active:
                used_promo_codes += 1
            uses = len(details.get('used_by', []))
            total_promo_uses += uses
            for user_id, user_data in subscription_users.items():
                for promo in user_data.get('promo_usage_history', []):
                    if promo['promo_code'] == code:
                        discount = promo['discount']
                        for purchase in user_data.get('store_purchases', []):
                            if purchase.get('purchase_date') == promo['used_at']:
                                price = purchase.get('price', 0)
                                total_discount_amount += (discount / 100) * price
        promo_summary += (
            f"üìù –í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {total_promo_codes}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {active_promo_codes}\n"
            f"üõí –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {used_promo_codes}\n"
            f"üéü –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {total_promo_uses}\n"
            f"üí∏ –û–±—â–∞—è —Å—É–º–º–∞ —Å–∫–∏–¥–æ–∫: {total_discount_amount:.2f} —Ä—É–±.\n"
        )
    else:
        promo_summary += "‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!\n"

    exchange_summary = "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–º–µ–Ω–æ–≤:*\n\n"
    total_exchanges = 0
    subscription_exchanges = 0
    discount_exchanges = 0
    feature_exchanges = 0
    total_points_spent = 0
    total_subscription_days = 0
    total_subscription_hours = 0

    if subscription_users:
        for user_id, user_data in subscription_users.items():
            for history in user_data.get('points_history', []):
                if history.get('action') == 'spent' and ('–û–±–º–µ–Ω –Ω–∞' in history.get('reason', '') or '–æ–±–º–µ–Ω –Ω–∞' in history.get('reason', '').lower()):
                    total_exchanges += 1
                    points = history.get('points', 0)
                    total_points_spent += points
                    reason = history.get('reason', '').lower()
                    if any(unit in reason for unit in ['–¥–Ω.', '—á.', '–º–∏–Ω.']) and '—Ñ—É–Ω–∫—Ü–∏' not in reason:
                        subscription_exchanges += 1
                        time_match = re.search(r'(\d+\.?\d*)\s*–¥–Ω\.?\s*(\d+\.?\d*)\s*—á\.?', reason)
                        if time_match:
                            days = float(time_match.group(1))
                            hours = float(time_match.group(2))
                            total_subscription_days += days
                            total_subscription_hours += hours
                        else:
                            hours_match = re.search(r'(\d+\.?\d*)\s*—á\.?', reason)
                            if hours_match:
                                hours = float(hours_match.group(1))
                                total_subscription_hours += hours
                            minutes_match = re.search(r'(\d+\.?\d*)\s*–º–∏–Ω\.?', reason)
                            if minutes_match:
                                minutes = float(minutes_match.group(1))
                                total_subscription_hours += minutes / 60
                    elif '—Å–∫–∏–¥–∫–∏' in reason:
                        discount_exchanges += 1
                    elif '—Ñ—É–Ω–∫—Ü–∏' in reason:
                        feature_exchanges += 1

        total_subscription_days += total_subscription_hours // 24
        total_subscription_hours = total_subscription_hours % 24
        avg_points_per_exchange = total_points_spent / total_exchanges if total_exchanges > 0 else 0
        exchange_summary += (
            f"üîÑ –í—Å–µ–≥–æ –æ–±–º–µ–Ω–æ–≤: {total_exchanges}\n"
            f"‚è∞ –û–±–º–µ–Ω–æ–≤ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É: {subscription_exchanges}\n"
            f"üéü –û–±–º–µ–Ω–æ–≤ –Ω–∞ —Å–∫–∏–¥–∫–∏: {discount_exchanges}\n"
            f"‚öôÔ∏è –û–±–º–µ–Ω–æ–≤ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏: {feature_exchanges}\n"
            f"üéØ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –±–∞–ª–ª–æ–≤: {total_points_spent:.2f}\n"
            f"üìä –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –æ–±–º–µ–Ω: {avg_points_per_exchange:.2f}\n"
            f"‚è≥ –û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏: {format_number(total_subscription_days)} –¥–Ω. {format_number(total_subscription_hours)} —á.\n"
        )
    else:
        exchange_summary += "‚ùå –î–∞–Ω–Ω—ã–µ –æ–± –æ–±–º–µ–Ω–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!\n"

    summaries = [referral_summary, subscription_summary, promo_summary, exchange_summary]
    for summary in summaries:
        message_parts = split_message(summary)
        for part in message_parts:
            bot.send_message(message.chat.id, part, parse_mode="Markdown")

    manage_system(message)

# --------------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def manage_store(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏', '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∫—É–ø–æ–∫', '–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º:", reply_markup=markup)

# --------------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–ì–ê–ó–ò–ù–û–ú (–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def add_store_purchase(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, process_add_store_purchase)

@text_only_handler
def process_add_store_purchase(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º":
        manage_store(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    user_id = None

    users_data = load_users()
    if user_input.isdigit():
        if len(user_input) >= 5:
            user_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(users_data):
                user_id = list(users_data.keys())[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:]
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@')  
            if db_username.lower() == username.lower():  
                user_id = uid
                break

    if not user_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_add_store_purchase)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ë–∞–ª–ª—ã', '–î–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_add_store_purchase_type, user_id)

@text_only_handler
def process_add_store_purchase_type(message, user_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º":
        manage_store(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    purchase_type = message.text.strip()
    if purchase_type not in ['–ë–∞–ª–ª—ã', '–î–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏']:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_add_store_purchase_type, user_id)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if purchase_type == '–ë–∞–ª–ª—ã':
        prompt = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:"
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, prompt, reply_markup=markup)
        bot.register_next_step_handler(message, process_add_store_purchase_amount, user_id, purchase_type, 'days')
    else:
        markup.add('–í –º–∏–Ω—É—Ç–∞—Ö', '–í —á–∞—Å–∞—Ö', '–í –¥–Ω—è—Ö')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, process_add_store_purchase_unit, user_id)

@text_only_handler
def process_add_store_purchase_unit(message, user_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º":
        manage_store(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    unit = message.text.strip()
    if unit not in ['–í –º–∏–Ω—É—Ç–∞—Ö', '–í —á–∞—Å–∞—Ö', '–í –¥–Ω—è—Ö']:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_add_store_purchase_unit, user_id)
        return

    unit_map = {
        '–í –º–∏–Ω—É—Ç–∞—Ö': 'minutes',
        '–í —á–∞—Å–∞—Ö': 'hours',
        '–í –¥–Ω—è—Ö': 'days'
    }
    unit_key = unit_map[unit]
    prompt = f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {unit.lower()} –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, prompt, reply_markup=markup)
    bot.register_next_step_handler(message, process_add_store_purchase_amount, user_id, '–î–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏', unit_key)

@text_only_handler
def process_add_store_purchase_amount(message, user_id, purchase_type, unit='days'):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º":
        manage_store(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        input_text = message.text.strip().replace(',', '.')
        input_amount = float(input_text)
        if input_amount <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")

        display_amount = f"{int(input_amount)}" if input_amount.is_integer() else f"{input_amount:.2f}"

        amount = input_amount
        if purchase_type == '–î–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏':
            if unit == 'minutes':
                amount = input_amount / (24 * 60)  
            elif unit == 'hours':
                amount = input_amount / 24  

        unit_display = {
            'minutes': '–º–∏–Ω—É—Ç',
            'hours': '—á–∞—Å–æ–≤',
            'days': '–¥–Ω–µ–π'
        }.get(unit, '–¥–Ω–µ–π')

        data = load_payment_data()
        user_data = data['subscriptions']['users'].setdefault(str(user_id), {
            'plans': [], 'total_amount': 0, 'referral_points': 0, 'store_purchases': []
        })

        if 'store_purchases' not in user_data:
            user_data['store_purchases'] = []

        users_data = load_users()
        username = escape_markdown(users_data.get(str(user_id), {}).get('username', f"@{user_id}"))
        purchase_date = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        monthly_key = datetime.now().strftime("%m.%Y")

        monthly_points = sum(p['points'] for p in user_data['store_purchases'] if p['purchase_date'].startswith(monthly_key))
        monthly_days = sum(p['duration'] for p in user_data['store_purchases'] if p['purchase_date'].startswith(monthly_key))

        if purchase_type == '–ë–∞–ª–ª—ã':
            if monthly_points + amount > 3000:
                bot.send_message(message.chat.id, (
                    "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–≤—ã—Å–∏—Ç –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ–∫—É–ø–∫–∏ –±–∞–ª–ª–æ–≤ –≤ —Ä–∞–∑–º–µ—Ä–µ 3000!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ..."
                ), parse_mode="Markdown")
                bot.register_next_step_handler(message, process_add_store_purchase_amount, user_id, purchase_type, unit)
                return

            user_data['referral_points'] += amount
            user_data.setdefault('points_history', []).append({
                'action': 'earned',
                'points': amount,
                'reason': '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                'date': purchase_date,
                'source': 'admin_purchase'
            })

            user_data['store_purchases'].append({
                "item_key": "admin_points",
                "label": f"{display_amount} –±–∞–ª–ª–æ–≤",
                "points": amount,
                "duration": 0,
                "price": 0,
                "purchase_date": purchase_date,
                "telegram_payment_charge_id": None,
                "provider_payment_charge_id": None,
                "source": "admin",
                "user_discount": 0,
                "fictitious_discount": 0
            })

            admin_message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} - `{user_id}` –Ω–∞—á–∏—Å–ª–µ–Ω–æ *{display_amount} –±–∞–ª–ª–æ–≤* –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞!"
            user_message = f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º *{display_amount} –±–∞–ª–ª–æ–≤* –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞!"

        else:
            if monthly_days + amount > 365:
                bot.send_message(message.chat.id, (
                    "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–≤—ã—Å–∏—Ç –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ–∫—É–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ 365 –¥–Ω–µ–π!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ..."
                ), parse_mode="Markdown")
                bot.register_next_step_handler(message, process_add_store_purchase_amount, user_id, purchase_type, unit)
                return

            latest_end = max([datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") for p in user_data['plans']] or [datetime.now()])
            new_end = latest_end + timedelta(days=amount)

            plan_name_rus = "–ø–æ–¥–ø–∏—Å–∫–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞"

            user_data['plans'].append({
                'plan_name': 'store_time',
                'start_date': latest_end.strftime("%d.%m.%Y –≤ %H:%M"),
                'end_date': new_end.strftime("%d.%m.%Y –≤ %H:%M"),
                'price': 0,
                'telegram_payment_charge_id': None,
                'provider_payment_charge_id': None,
                'source': 'admin',
                'user_discount': 0,
                'fictitious_discount': 0
            })

            user_data['store_purchases'].append({
                "item_key": "admin_time",
                "label": f"{display_amount} {unit_display} –ø–æ–¥–ø–∏—Å–∫–∏",
                "points": 0,
                "duration": amount,
                "price": 0,
                "purchase_date": purchase_date,
                "telegram_payment_charge_id": None,
                "provider_payment_charge_id": None,
                "source": "admin",
                "user_discount": 0,
                "fictitious_discount": 0
            })

            admin_message = (
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} - `{user_id}` –Ω–∞–∑–Ω–∞—á–µ–Ω–æ:\n\n"
                f"üíº *–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:* {plan_name_rus}\n"
                f"üïí *–ù–∞—á–∞–ª–æ:* {latest_end.strftime('%d.%m.%Y –≤ %H:%M')}\n"
                f"‚åõ *–ö–æ–Ω–µ—Ü:* {new_end.strftime('%d.%m.%Y –≤ %H:%M')}"
            )
            user_message = (
                f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞–º:\n\n"
                f"üíº *–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:* {plan_name_rus}\n"
                f"üïí *–ù–∞—á–∞–ª–æ:* {latest_end.strftime('%d.%m.%Y –≤ %H:%M')}\n"
                f"‚åõ *–ö–æ–Ω–µ—Ü:* {new_end.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
            )

        save_payments_data(data)
        bot.send_message(message.chat.id, admin_message, parse_mode="Markdown")
        bot.send_message(user_id, user_message, parse_mode="Markdown")
        manage_store(message)

    except ValueError as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_add_store_purchase_amount, user_id, purchase_type, unit)
    except Exception as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", parse_mode="Markdown")
        manage_store(message)

# --------------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–ì–ê–ó–ò–ù–û–ú (–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∫—É–ø–æ–∫) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∫—É–ø–æ–∫' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_store_purchases(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∫—É–ø–æ–∫'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∫—É–ø–æ–∫:", reply_markup=markup)
    bot.register_next_step_handler(message, process_view_store_purchases)

@text_only_handler
def process_view_store_purchases(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º":
        manage_store(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    user_id = None

    users_data = load_users()
    if user_input.isdigit():
        if len(user_input) >= 5:
            user_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(users_data):
                user_id = list(users_data.keys())[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:] 
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@') 
            if db_username.lower() == username.lower():  
                user_id = uid
                break

    if not user_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_view_store_purchases)
        return

    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(str(user_id), {})
    store_purchases = user_data.get('store_purchases', [])
    plans = user_data.get('plans', [])

    if not store_purchases:
        bot.send_message(message.chat.id, "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!", parse_mode="Markdown")
        manage_store(message)
        return

    purchases_summary = "üíé *–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ:*\n\n"
    for idx, purchase in enumerate(store_purchases, start=1):
        points = purchase.get('points', 0)
        days = purchase.get('duration', 0)
        price = purchase.get('price', 0)
        purchase_date = purchase.get('purchase_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        label = purchase.get('label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        source = purchase.get('source', 'user')

        purchase_type = "–±–∞–ª–ª–æ–≤" if points > 0 else "–≤—Ä–µ–º–µ–Ω–∏"
        time_unit = "–¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"
        display_duration = f"{days:.2f}"
        if "–º–∏–Ω—É—Ç" in label.lower():
            time_unit = "–º–∏–Ω—É—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
            display_duration = f"{days * 24 * 60:.2f}"
        elif "—á–∞—Å–æ–≤" in label.lower():
            time_unit = "—á–∞—Å–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏"
            display_duration = f"{days * 24:.2f}"
        else:
            time_unit = "–¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"
            display_duration = f"{days:.2f}"

        if points > 0:
            if isinstance(points, int):
                points_display = f"{points}"
            else:
                points_display = f"{int(points)}" if points.is_integer() else f"{points:.2f}"
        if days > 0:
            duration_value = float(display_duration)
            if duration_value.is_integer():
                display_duration = f"{int(duration_value)}"
            else:
                display_duration = f"{duration_value:.2f}"

        purchase_entry = f"üìÖ *‚Ññ{idx}. –ü–æ–∫—É–ø–∫–∞ {purchase_type}:*\n\n"
        purchase_entry += f"üïí *–î–∞—Ç–∞:* {purchase_date}\n"
        if points > 0:
            purchase_entry += f"üí∞ *–ë–∞–ª–ª—ã:* {points_display}\n"
        if days > 0:
            purchase_entry += f"üìÜ *{time_unit.capitalize()}:* {display_duration}\n"
        purchase_entry += f"üí∏ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {price:.2f} —Ä—É–±.\n"
        purchase_entry += f"üîó *–ò—Å—Ç–æ—á–Ω–∏–∫:* {'–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if source == 'admin' else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n"

        purchases_summary += purchase_entry

    message_parts = split_message(purchases_summary)
    for part in message_parts:
        bot.send_message(message.chat.id, part, parse_mode="Markdown")

    current_time = datetime.now()
    active_plans = [p for p in plans if datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") > current_time]
    
    purchase_types = [purchase['label'] for purchase in store_purchases]
    types_str = ", ".join(purchase_types) if purchase_types else "–ù–µ—Ç –ø–æ–∫—É–ø–æ–∫"

    total_points = sum(purchase['points'] for purchase in store_purchases)
    total_points_display = f"{int(total_points)}" if float(total_points).is_integer() else f"{total_points:.2f}"

    if active_plans:
        latest_end = max(datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") for p in active_plans)
        time_left = latest_end - current_time
        days_left = time_left.days
        hours_left = time_left.seconds // 3600
        minutes_left = (time_left.seconds % 3600) // 60
        time_left_str = f"{days_left} –¥–Ω–µ–π –∏ {hours_left:02d}:{minutes_left:02d} —á–∞—Å–æ–≤" if days_left >= 0 else "0 –¥–Ω–µ–π –∏ 00:00 —á–∞—Å–æ–≤"
    else:
        time_left_str = "0 –¥–Ω–µ–π –∏ 00:00 —á–∞—Å–æ–≤"

    start_date = min((datetime.strptime(p['start_date'], "%d.%m.%Y –≤ %H:%M") for p in active_plans), default=current_time) if active_plans else current_time
    end_date = latest_end if active_plans else current_time
    start_date_str = start_date.strftime("%d.%m.%Y –≤ %H:%M")
    end_date_str = end_date.strftime("%d.%m.%Y –≤ %H:%M")

    active_purchase_dates = {p['start_date'] for p in active_plans}.union({p['end_date'] for p in active_plans})
    active_cost = sum(purchase['price'] for purchase in store_purchases if purchase['purchase_date'] in active_purchase_dates or purchase['source'] == 'admin')
    total_cost = sum(purchase['price'] for purchase in store_purchases)
    active_cost_display = f"{int(active_cost)}" if float(active_cost).is_integer() else f"{active_cost:.2f}"
    total_cost_display = f"{int(total_cost)}" if float(total_cost).is_integer() else f"{total_cost:.2f}"

    summary = (
        f"üíé *–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–∫—É–ø–æ–∫:*\n\n"
        f"üíº *–¢–∏–ø—ã –ø–æ–∫—É–ø–æ–∫:* {types_str}\n"
        f"üí∞ *–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤:* {total_points_display}\n"
        f"üìÖ *–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å:* {time_left_str}\n"
        f"üïí *–ù–∞—á–∞–ª–æ:* {start_date_str}\n"
        f"‚åõ *–ö–æ–Ω–µ—Ü:* {end_date_str}\n"
        f"üí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫:* {active_cost_display} —Ä—É–±.\n"
        f"üí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫:* {total_cost_display} —Ä—É–±.\n"
    )

    bot.send_message(message.chat.id, summary, parse_mode="Markdown")

    manage_store(message)

# --------------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–ì–ê–ó–ò–ù–û–ú (—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_store_purchase(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, process_delete_store_purchase)

@text_only_handler
def process_delete_store_purchase(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º":
        manage_store(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    user_id = None

    users_data = load_users()
    if user_input.isdigit():
        if len(user_input) >= 5:
            user_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(users_data):
                user_id = list(users_data.keys())[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:]  
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@')  
            if db_username.lower() == username.lower(): 
                user_id = uid
                break

    if not user_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_delete_store_purchase)
        return

    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(str(user_id), {})
    store_purchases = user_data.get('store_purchases', [])
    plans = user_data.get('plans', [])

    if not store_purchases:
        bot.send_message(message.chat.id, "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", parse_mode="Markdown")
        manage_store(message)
        return

    purchases_summary = "üíé *–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ:*\n\n"
    for idx, purchase in enumerate(store_purchases, start=1):
        points = purchase.get('points', 0)
        days = purchase.get('duration', 0)
        price = purchase.get('price', 0)
        purchase_date = purchase.get('purchase_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        label = purchase.get('label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        source = purchase.get('source', 'user')

        purchase_type = "–±–∞–ª–ª–æ–≤" if points > 0 else "–≤—Ä–µ–º–µ–Ω–∏"
        time_unit = "–¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"
        display_duration = f"{days:.2f}"
        if "–º–∏–Ω—É—Ç" in label.lower():
            time_unit = "–º–∏–Ω—É—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
            display_duration = f"{days * 24 * 60:.2f}"
        elif "—á–∞—Å–æ–≤" in label.lower():
            time_unit = "—á–∞—Å–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏"
            display_duration = f"{days * 24:.2f}"
        else:
            time_unit = "–¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"
            display_duration = f"{days:.2f}"

        if points > 0:
            if isinstance(points, int):
                points_display = f"{points}"
            else:
                points_display = f"{int(points)}" if points.is_integer() else f"{points:.2f}"
        if days > 0:
            duration_value = float(display_duration)
            if duration_value.is_integer():
                display_duration = f"{int(duration_value)}"
            else:
                display_duration = f"{duration_value:.2f}"

        purchase_entry = f"üìÖ *‚Ññ{idx}. –ü–æ–∫—É–ø–∫–∞ {purchase_type}:*\n\n"
        purchase_entry += f"üïí *–î–∞—Ç–∞:* {purchase_date}\n"
        if points > 0:
            purchase_entry += f"üí∞ *–ë–∞–ª–ª—ã:* {points_display}\n"
        if days > 0:
            purchase_entry += f"üìÜ *{time_unit.capitalize()}:* {display_duration}\n"
        purchase_entry += f"üí∏ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {price:.2f} —Ä—É–±.\n"
        purchase_entry += f"üîó *–ò—Å—Ç–æ—á–Ω–∏–∫:* {'–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if source == 'admin' else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n"

        purchases_summary += purchase_entry

    message_parts = split_message(purchases_summary)
    for part in message_parts:
        bot.send_message(message.chat.id, part, parse_mode="Markdown")

    current_time = datetime.now()
    active_plans = [p for p in plans if datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") > current_time]
    
    purchase_types = [purchase['label'] for purchase in store_purchases]
    types_str = ", ".join(purchase_types) if purchase_types else "–ù–µ—Ç –ø–æ–∫—É–ø–æ–∫"

    total_points = sum(purchase['points'] for purchase in store_purchases)
    total_points_display = f"{int(total_points)}" if float(total_points).is_integer() else f"{total_points:.2f}"

    if active_plans:
        latest_end = max(datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") for p in active_plans)
        time_left = latest_end - current_time
        days_left = time_left.days
        hours_left = time_left.seconds // 3600
        minutes_left = (time_left.seconds % 3600) // 60
        time_left_str = f"{days_left} –¥–Ω–µ–π –∏ {hours_left:02d}:{minutes_left:02d} —á–∞—Å–æ–≤" if days_left >= 0 else "0 –¥–Ω–µ–π –∏ 00:00 —á–∞—Å–æ–≤"
    else:
        time_left_str = "0 –¥–Ω–µ–π –∏ 00:00 —á–∞—Å–æ–≤"

    start_date = min((datetime.strptime(p['start_date'], "%d.%m.%Y –≤ %H:%M") for p in active_plans), default=current_time) if active_plans else current_time
    end_date = latest_end if active_plans else current_time
    start_date_str = start_date.strftime("%d.%m.%Y –≤ %H:%M")
    end_date_str = end_date.strftime("%d.%m.%Y –≤ %H:%M")

    active_purchase_dates = {p['start_date'] for p in active_plans}.union({p['end_date'] for p in active_plans})
    active_cost = sum(purchase['price'] for purchase in store_purchases if purchase['purchase_date'] in active_purchase_dates or purchase['source'] == 'admin')
    total_cost = sum(purchase['price'] for purchase in store_purchases)
    active_cost_display = f"{int(active_cost)}" if float(active_cost).is_integer() else f"{active_cost:.2f}"
    total_cost_display = f"{int(total_cost)}" if float(total_cost).is_integer() else f"{total_cost:.2f}"

    summary = (
        f"üíé *–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–∫—É–ø–æ–∫:*\n\n"
        f"üíº *–¢–∏–ø—ã –ø–æ–∫—É–ø–æ–∫:* {types_str}\n"
        f"üí∞ *–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤:* {total_points_display}\n"
        f"üìÖ *–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å:* {time_left_str}\n"
        f"üïí *–ù–∞—á–∞–ª–æ:* {start_date_str}\n"
        f"‚åõ *–ö–æ–Ω–µ—Ü:* {end_date_str}\n"
        f"üí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫:* {active_cost_display} —Ä—É–±.\n"
        f"üí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫:* {total_cost_display} —Ä—É–±.\n"
    )

    bot.send_message(message.chat.id, summary, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_delete_store_purchase_select, user_id)

@text_only_handler
def process_delete_store_purchase_select(message, user_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º":
        manage_store(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        purchase_numbers = [num.strip() for num in message.text.split(',')]
        valid_numbers = []
        invalid_numbers = []

        data = load_payment_data()
        user_data = data['subscriptions']['users'].get(str(user_id), {})
        store_purchases = user_data.get('store_purchases', [])
        for num in purchase_numbers:
            try:
                purchase_number = int(num)
                if 1 <= purchase_number <= len(store_purchases):
                    valid_numbers.append(purchase_number)
                else:
                    invalid_numbers.append(num)
            except ValueError:
                invalid_numbers.append(num)

        if not valid_numbers:
            bot.send_message(message.chat.id, "‚ùå –í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
            bot.register_next_step_handler(message, process_delete_store_purchase_select, user_id)
            return

        if invalid_numbers:
            invalid_str = ", ".join(invalid_numbers)
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")

        valid_numbers.sort(reverse=True)
        users_data = load_users()
        username = escape_markdown(users_data.get(str(user_id), {}).get('username', f"@{user_id}"))

        for purchase_number in valid_numbers:
            purchase = store_purchases[purchase_number - 1]
            points = purchase.get('points', 0)
            days = purchase.get('duration', 0)
            price = purchase.get('price', 0)
            purchase_date = purchase.get('purchase_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            label = purchase.get('label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            source = purchase.get('source', 'user')

            purchase_type = "–±–∞–ª–ª—ã" if points > 0 else "–≤—Ä–µ–º—è"
            time_unit = "–¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"
            display_duration = f"{days:.2f}"
            if "–º–∏–Ω—É—Ç" in label.lower():
                time_unit = "–º–∏–Ω—É—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
                display_duration = f"{days * 24 * 60:.2f}"
            elif "—á–∞—Å–æ–≤" in label.lower():
                time_unit = "—á–∞—Å–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏"
                display_duration = f"{days * 24:.2f}"
            else:
                time_unit = "–¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"
                display_duration = f"{days:.2f}"

            if points > 0:
                if isinstance(points, int):
                    points_display = f"{points}"
                else:
                    points_display = f"{int(points)}" if points.is_integer() else f"{points:.2f}"
            if days > 0:
                duration_value = float(display_duration)
                if duration_value.is_integer():
                    display_duration = f"{int(duration_value)}"
                else:
                    display_duration = f"{duration_value:.2f}"

            if points > 0:
                user_data['referral_points'] = max(0, user_data.get('referral_points', 0) - points)
                user_data.setdefault('points_history', []).append({
                    'action': 'spent',
                    'points': points,
                    'reason': '—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
                    'date': datetime.now().strftime("%d.%m.%Y –≤ %H:%M"),
                    'source': 'admin_delete'
                })

            if days > 0:
                for plan in user_data['plans'][:]:
                    if plan.get('source') == source and plan.get('plan_name') == 'store_time':
                        if source == 'admin' and plan.get('start_date') == purchase_date:
                            user_data['plans'].remove(plan)
                            break
                        elif source != 'admin' and plan.get('telegram_payment_charge_id') == purchase.get('telegram_payment_charge_id'):
                            user_data['plans'].remove(plan)
                            break

            user_data['total_amount'] = max(0, user_data.get('total_amount', 0) - price)
            data['all_users_total_amount'] = max(0, data.get('all_users_total_amount', 0) - price)

            store_purchases.pop(purchase_number - 1)

            admin_message = f"üö´ –£–¥–∞–ª–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} - `{user_id}`:\n\n"
            admin_message += f"üí≥ *–¢–∏–ø –ø–æ–∫—É–ø–∫–∏:* {purchase_type}\n"
            admin_message += f"üìÖ *–í—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏:* {purchase_date}\n"
            if points > 0:
                admin_message += f"üí∞ *–ë–∞–ª–ª—ã:* {points_display}\n"
            if days > 0:
                admin_message += f"üìÜ *{time_unit.capitalize()}:* {display_duration}\n"
            admin_message += f"üí∏ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {price:.2f} —Ä—É–±.\n"

            user_message = "üö´ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –≤–∞—à—É –ø–æ–∫—É–ø–∫—É:\n\n"
            user_message += f"üí≥ *–¢–∏–ø –ø–æ–∫—É–ø–∫–∏:* {purchase_type}\n"
            user_message += f"üìÖ *–í—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏:* {purchase_date}\n"
            if points > 0:
                user_message += f"üí∞ *–ë–∞–ª–ª—ã:* {points_display}\n"
            if days > 0:
                user_message += f"üìÜ *{time_unit.capitalize()}:* {display_duration}\n"
            user_message += f"üí∏ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {price:.2f} —Ä—É–±.\n"

            bot.send_message(message.chat.id, admin_message, parse_mode="Markdown")
            bot.send_message(user_id, user_message, parse_mode="Markdown")

        user_data['store_purchases'] = store_purchases
        save_payments_data(data)
        manage_store(message)

    except Exception as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", parse_mode="Markdown")
        manage_store(message)
        
# --------------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô (—É–ø—Ä–∞–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def manage_points(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤', '–°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤')
    markup.add('–ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–ª–æ–≤', '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–ª–æ–≤')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–∞–º–∏:", reply_markup=markup)

# --------------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–õ–ê–ú–ò (–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def add_points(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, process_add_points)

@text_only_handler
def process_add_points(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏":
        manage_points(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    user_id = None

    users_data = load_users()
    if user_input.isdigit():
        if len(user_input) >= 5:
            user_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(users_data):
                user_id = list(users_data.keys())[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:]  
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@')  
            if db_username.lower() == username.lower(): 
                user_id = uid
                break

    if not user_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_add_points)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_add_points_amount, user_id)

@text_only_handler
def process_add_points_amount(message, user_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏":
        manage_points(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        input_text = message.text.strip().replace(',', '.')
        points = float(input_text)
        if points <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")

        points_display = f"{int(points)}" if points.is_integer() else f"{points:.2f}"

        data = load_payment_data()
        user_data = data['subscriptions']['users'].setdefault(str(user_id), {
            'plans': [], 'total_amount': 0, 'referral_points': 0
        })
        users_data = load_users()
        username = escape_markdown(users_data.get(str(user_id), {}).get('username', f"@{user_id}"))

        user_data['referral_points'] = user_data.get('referral_points', 0) + points
        user_data.setdefault('points_history', []).append({
            'action': 'earned',
            'points': points,
            'reason': '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
            'date': datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })

        save_payments_data(data)
        admin_message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} - `{user_id}` –Ω–∞—á–∏—Å–ª–µ–Ω–æ *{points_display} –±–∞–ª–ª–æ–≤*!"
        user_message = f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º *{points_display} –±–∞–ª–ª–æ–≤*!"
        bot.send_message(message.chat.id, admin_message, parse_mode="Markdown")
        bot.send_message(user_id, user_message, parse_mode="Markdown")
        manage_points(message)
    except ValueError as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_add_points_amount, user_id)

# --------------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–õ–ê–ú–ò (–ø—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–ª–æ–≤) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–ª–æ–≤' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_points(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–ª–æ–≤'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–ª–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, process_view_points)

@text_only_handler
def process_view_points(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏":
        manage_points(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    user_id = None

    users_data = load_users()
    if user_input.isdigit():
        if len(user_input) >= 5:
            user_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(users_data):
                user_id = list(users_data.keys())[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:]  
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@') 
            if db_username.lower() == username.lower():  
                user_id = uid
                break

    if not user_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_view_points)
        return

    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(str(user_id), {})
    points = user_data.get('referral_points', 0)
    username = users_data.get(str(user_id), {}).get('username', f"@{user_id}")

    history = user_data.get('points_history', [])
    total_earned = sum(entry['points'] for entry in history if entry['action'] == 'earned')
    total_spent = sum(entry['points'] for entry in history if entry['action'] == 'spent')

    earned_daily = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'] == '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥')
    earned_admin = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'].startswith('–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'))
    earned_gifts = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'].startswith('–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç'))
    earned_first_purchase = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'].startswith('–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏'))
    earned_points_purchase = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'].startswith('–ü–æ–∫—É–ø–∫–∞') and '–±–∞–ª–ª–æ–≤' in entry['reason'])
    earned_referrals = sum(entry['points'] for entry in history if entry['action'] == 'earned' and '–†–µ—Ñ–µ—Ä–∞–ª' in entry['reason'])
    earned_top_referrals = sum(entry['points'] for entry in history if entry['action'] == 'earned' and '–¢–æ–ø-10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤' in entry['reason'])
    earned_purchases = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'].startswith('–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏'))

    spent_gifts = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'].lower().startswith('–ø–æ–¥–∞—Ä–æ–∫'))
    spent_time = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'].startswith('–û–±–º–µ–Ω –Ω–∞') and any(unit in entry['reason'] for unit in ['–¥–Ω.', '—á.', '–º–∏–Ω.']))
    spent_discounts = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'].startswith('–û–±–º–µ–Ω –Ω–∞') and '%' in entry['reason'])
    spent_features = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'].startswith('–û–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é'))
    spent_admin_delete = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'] == '—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
    spent_admin = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'].lower() == '—Å–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')

    gifted_time_minutes = 0
    received_time_minutes = 0
    for entry in history:
        time_str = None
        if entry['reason'].startswith('–û–±–º–µ–Ω –Ω–∞') and any(unit in entry['reason'] for unit in ['–¥–Ω.', '—á.', '–º–∏–Ω.']):
            time_str = entry['reason'].split('–û–±–º–µ–Ω –Ω–∞ ')[1]
        elif entry['reason'].lower().startswith('–ø–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏') and any(unit in entry['reason'] for unit in ['–¥–Ω.', '—á.', '–º–∏–Ω.', '–º–∏–Ω—É—Ç']):
            time_str = entry['reason'].split(': ')[1]
        
        if time_str:
            days = hours = minutes = 0
            if '–¥–Ω.' in time_str:
                days_match = re.search(r'(\d+\.?\d*)\s*–¥–Ω\.', time_str)
                if days_match:
                    days = float(days_match.group(1))
            if '—á.' in time_str:
                hours_match = re.search(r'(\d+\.?\d*)\s*—á\.', time_str)
                if hours_match:
                    hours = float(hours_match.group(1))
            if '–º–∏–Ω.' in time_str or '–º–∏–Ω—É—Ç' in time_str:
                minutes_match = re.search(r'(\d+\.?\d*)\s*(–º–∏–Ω\.|–º–∏–Ω—É—Ç)', time_str)
                if minutes_match:
                    minutes = float(minutes_match.group(1))
            total_minutes = days * 24 * 60 + hours * 60 + minutes
            if entry['action'] == 'spent':
                gifted_time_minutes += total_minutes
            elif entry['action'] == 'earned':
                received_time_minutes += total_minutes

    points_summary = (
        f"üí∞ *–ë–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* {username} - `{str(user_id)}`:\n\n"
        f"üéÅ *–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã:* {format_number(points)}\n\n"
        f"üî• *–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* {format_number(total_earned)}\n"
        f"  ‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥: {format_number(earned_daily)}\n"
        f"  ‚Ä¢ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {format_number(earned_admin)}\n"
        f"  ‚Ä¢ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –¥—Ä—É–≥–∏—Ö: {format_number(earned_gifts)}\n"
        f"  ‚Ä¢ –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {format_number(earned_first_purchase)}\n"
        f"  ‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –±–∞–ª–ª–æ–≤: {format_number(earned_points_purchase)}\n"
        f"  ‚Ä¢ –ó–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {format_number(earned_referrals)}\n"
        f"  ‚Ä¢ –ó–∞ —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {format_number(earned_top_referrals)}\n"
        f"  ‚Ä¢ –ó–∞ –ø–æ–∫—É–ø–∫–∏: {format_number(earned_purchases)}\n\n"
        f"üí∏ *–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:* {format_number(total_spent)}\n"
        f"  ‚Ä¢ –ü–æ–¥–∞—Ä–æ–∫ –¥—Ä—É–≥–∏–º: {format_number(spent_gifts)}\n"
        f"  ‚Ä¢ –û–±–º–µ–Ω –Ω–∞ –≤—Ä–µ–º—è: {format_number(spent_time)}\n"
        f"  ‚Ä¢ –û–±–º–µ–Ω –Ω–∞ —Å–∫–∏–¥–∫–∏: {format_number(spent_discounts)}\n"
        f"  ‚Ä¢ –û–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏: {format_number(spent_features)}\n"
        f"  ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {format_number(spent_admin_delete)}\n"
        f"  ‚Ä¢ –°–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {format_number(spent_admin)}\n\n"
        f"‚è≥ *–ü–æ–¥–∞—Ä–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:* {format_time(gifted_time_minutes)}\n"
        f"‚è≥ *–ü–æ–ª—É—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:* {format_time(received_time_minutes)}"
    )

    message_parts = split_message(points_summary)
    for part in message_parts:
        bot.send_message(message.chat.id, part, parse_mode="Markdown")

    manage_points(message)

# --------------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–õ–ê–ú–ò (—Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def remove_points(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, process_remove_points)

@text_only_handler
def process_remove_points(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏":
        manage_points(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    user_id = None

    users_data = load_users()
    if user_input.isdigit():
        if len(user_input) >= 5:
            user_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(users_data):
                user_id = list(users_data.keys())[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:]  
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@')  
            if db_username.lower() == username.lower():  
                user_id = uid
                break

    if not user_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_remove_points)
        return

    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(str(user_id), {})
    points = user_data.get('referral_points', 0)
    if points == 0:
        bot.send_message(message.chat.id, "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è!", parse_mode="Markdown")
        manage_points(message)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_remove_points_amount, user_id)

@text_only_handler
def process_remove_points_amount(message, user_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏":
        manage_points(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        input_text = message.text.strip().replace(',', '.')
        points = float(input_text)
        if points <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")

        points_display = f"{int(points)}" if points.is_integer() else f"{points:.2f}"

        data = load_payment_data()
        user_data = data['subscriptions']['users'].get(str(user_id), {})
        current_points = user_data.get('referral_points', 0)
        if points > current_points:
            raise ValueError("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è!")

        users_data = load_users()
        username = users_data.get(str(user_id), {}).get('username', f"@{user_id}")
        if not username.startswith('@'):
            username = f"@{username}"

        user_data['referral_points'] = max(0, current_points - points)
        user_data.setdefault('points_history', []).append({
            'action': 'spent',
            'points': points,
            'reason': '—Å–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
            'date': datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })

        save_payments_data(data)
        admin_message = f"üö´ –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} - `{user_id}` —Å–ø–∏—Å–∞–Ω–æ *{points_display} –±–∞–ª–ª–æ–≤*!"
        user_message = f"üö´ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∞–ª *{points_display} –±–∞–ª–ª–æ–≤*!"
        bot.send_message(message.chat.id, admin_message, parse_mode="Markdown")
        bot.send_message(user_id, user_message, parse_mode="Markdown")
        manage_points(message)
    except ValueError as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_remove_points_amount, user_id)

# ------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–õ–ê–ú–ò (–ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–ª–æ–≤) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–ª–æ–≤' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_points_history(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–ª–æ–≤'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–ª–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, process_view_points_history)

@text_only_handler
def process_view_points_history(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏":
        manage_points(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    user_id = None

    users_data = load_users()
    if user_input.isdigit():
        if len(user_input) >= 5:
            user_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(users_data):
                user_id = list(users_data.keys())[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:] 
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@')  
            if db_username.lower() == username.lower():  
                user_id = uid
                break

    if not user_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_view_points_history)
        return

    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(str(user_id), {})
    history = user_data.get('points_history', [])
    if not history:
        bot.send_message(message.chat.id, "‚ùå –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–ª–∞–º–∏ –ø—É—Å—Ç–∞!", parse_mode="Markdown")
        manage_points(message)
        return

    username = users_data.get(str(user_id), {}).get('username', f"@{user_id}")
    if not username.startswith('@'):
        username = f"@{username}"

    def format_date(date_str):
        return re.sub(r'(\d{2}\.\d{2}\.\d{4} –≤ \d{2}:\d{2}):\d{2}', r'\1', date_str)

    history_summary = f"*–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* {escape_markdown(username)} - `{user_id}`:\n\n"
    for idx, entry in enumerate(history, 1):
        action = "–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ" if entry['action'] == 'earned' else "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ"
        points = format_number(entry['points'])
        date = format_date(entry['date'])
        reason = escape_markdown(entry['reason'].lower())
        history_summary += (
            f"üìù *‚Ññ{idx}. {action}:*\n\n"
            f"üí∞ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {points} –±–∞–ª–ª–æ–≤\n"
            f"üìÖ *–î–∞—Ç–∞:* {date}\n"
            f"üìã *–ü—Ä–∏—á–∏–Ω–∞:* {reason}\n\n"
        )

    message_parts = split_message(history_summary)
    for part in message_parts:
        bot.send_message(message.chat.id, part, parse_mode="Markdown")

    manage_points(message)
    
# ------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞–º–∏) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞–º–∏' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def manage_exchanges(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞–º–∏'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–º–µ–Ω', '–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±–º–µ–Ω–æ–≤')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–º–µ–Ω–∞–º–∏:", reply_markup=markup)

# ------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–ú–ï–ù–ê–ú–ò (–≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–º–µ–Ω) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–º–µ–Ω' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def perform_exchange(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–º–µ–Ω'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–º–µ–Ω–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, process_perform_exchange)

@text_only_handler
def process_perform_exchange(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞–º–∏":
        manage_exchanges(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    user_id = None

    users_data = load_users()
    if user_input.isdigit():
        if len(user_input) >= 5:
            user_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(users_data):
                user_id = list(users_data.keys())[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:]
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@')
            if db_username.lower() == username.lower():
                user_id = uid
                break

    if not user_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_perform_exchange)
        return

    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(str(user_id), {})
    points = user_data.get('referral_points', 0)
    if points < 2:
        bot.send_message(message.chat.id, "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞!", parse_mode="Markdown")
        manage_exchanges(message)
        return

    exchange_rate = 1.0 / 5.0

    username = users_data.get(str(user_id), {}).get('username', f"@{user_id}")
    if not username.startswith('@'):
        username = f"@{username}"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–û–±–º–µ–Ω –Ω–∞ –≤—Ä–µ–º—è', '–û–±–º–µ–Ω –Ω–∞ —Å–∫–∏–¥–∫—É', '–û–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, (
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±–º–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {escape_markdown(username)} - `{user_id}`:\n\n"
        f"üéÅ *–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã:* {format_number(points)}\n\n"
        f"üîÑ *–í–æ–∑–º–æ–∂–Ω—ã–µ –æ–±–º–µ–Ω—ã:*\n"
        f"‚è≥ - *–í—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏:* _5 –±–∞–ª–ª–æ–≤ = 1 —á–∞—Å_\n"
        f"üîì - *–î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º:* _2 –±–∞–ª–ª–∞ = 15 –º–∏–Ω—É—Ç_\n"
        f"üè∑Ô∏è - *–°–∫–∏–¥–∫–∞:* _10 –±–∞–ª–ª–æ–≤ = 5% (–º–∞–∫—Å. 35%)_\n"
    ), reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_perform_exchange_type, user_id, exchange_rate)

@text_only_handler
def process_perform_exchange_type(message, user_id, exchange_rate):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞–º–∏":
        manage_exchanges(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    exchange_type = message.text.strip()
    if exchange_type not in ['–û–±–º–µ–Ω –Ω–∞ –≤—Ä–µ–º—è', '–û–±–º–µ–Ω –Ω–∞ —Å–∫–∏–¥–∫—É', '–û–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é']:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ–±–º–µ–Ω–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_perform_exchange_type, user_id, exchange_rate)
        return

    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(str(user_id), {})
    points = user_data.get('referral_points', 0)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    if exchange_type == '–û–±–º–µ–Ω –Ω–∞ –≤—Ä–µ–º—è':
        bot.send_message(message.chat.id, (
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞ –≤—Ä–µ–º—è:\n_P.S. 5 –±–∞–ª–ª–æ–≤ = 1 —á–∞—Å_"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_perform_exchange_time, user_id, exchange_rate)
    elif exchange_type == '–û–±–º–µ–Ω –Ω–∞ —Å–∫–∏–¥–∫—É':
        bot.send_message(message.chat.id, (
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞ —Å–∫–∏–¥–∫—É:\n_P.S. 10 –±–∞–ª–ª–æ–≤ = 5%, –º–∞–∫—Å. 35%_"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_perform_exchange_discount, user_id)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in range(0, len(PAID_FEATURES), 2):
            if i + 1 < len(PAID_FEATURES):
                markup.add(PAID_FEATURES[i], PAID_FEATURES[i + 1])
            else:
                markup.add(PAID_FEATURES[i])
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞–º–∏')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, (
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–º–µ–Ω–∞:\n_P.S. 2 –±–∞–ª–ª–∞ = 15 –º–∏–Ω—É—Ç_"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_perform_exchange_feature, user_id)

@text_only_handler
def process_perform_exchange_time(message, user_id, exchange_rate):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞–º–∏":
        manage_exchanges(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        points_needed = float(message.text.replace(',', '.'))
        if points_needed < 5:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ ‚Äî 5!")
        if points_needed % 5 != 0:
            raise ValueError("–ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã 5!")
        if points_needed > 6000:
            raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±–º–µ–Ω ‚Äî 6000 –±–∞–ª–ª–æ–≤ (50 –¥–Ω–µ–π)!")

        data = load_payment_data()
        user_data = data['subscriptions']['users'].get(str(user_id), {})
        points = user_data.get('referral_points', 0)
        if points < points_needed:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞!")

        users_data = load_users()
        username = users_data.get(str(user_id), {}).get('username', f"@{user_id}")
        if not username.startswith('@'):
            username = f"@{username}"

        total_hours = points_needed * exchange_rate
        days = int(total_hours // 24)
        remaining_hours = total_hours % 24

        latest_end = max([datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M")
                         for p in user_data.get('plans', [])] or [datetime.now()])
        new_end = latest_end + timedelta(days=days, hours=remaining_hours)

        start_date = latest_end.strftime("%d.%m.%Y –≤ %H:%M")
        end_date_str = new_end.strftime("%d.%m.%Y –≤ %H:%M")

        duration_str = ""
        if days > 0 and remaining_hours > 0:
            duration_str = f"{days} –¥–Ω. {format_number(remaining_hours)} —á."
        elif days > 0:
            duration_str = f"{days} –¥–Ω."
        else:
            duration_str = f"{format_number(remaining_hours)} —á."

        user_data['referral_points'] -= points_needed
        user_data.setdefault('points_history', []).append({
            'action': 'spent',
            'points': points_needed,
            'exchange_type': 'subscription',
            'reason': f"–æ–±–º–µ–Ω –Ω–∞ {duration_str}",
            'date': datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })

        user_data.setdefault('plans', []).append({
            'plan_name': 'exchange_time',
            'start_date': start_date,
            'end_date': end_date_str,
            'price': 0,
            'source': 'admin_exchange'
        })

        save_payments_data(data)

        admin_message = (
            f"‚úÖ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} - `{user_id}` –≤—ã–ø–æ–ª–Ω–µ–Ω –æ–±–º–µ–Ω:\n\n"
            f"üí∞ *–ë–∞–ª–ª—ã:* {format_number(points_needed)} –±–∞–ª–ª–æ–≤\n"
            f"üîÑ *–¢–∏–ø –æ–±–º–µ–Ω–∞:* –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            f"üîÑ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–º–µ–Ω–∞:* {duration_str}\n"
            f"üïí *–ù–∞—á–∞–ª–æ:* {start_date}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {end_date_str}"
        )
        user_message = (
            f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±–º–µ–Ω—è–ª *{format_number(points_needed)} –≤–∞—à–∏—Ö –±–∞–ª–ª–æ–≤*:\n\n"
            f"üí∞ *–ë–∞–ª–ª—ã:* {format_number(points_needed)} –±–∞–ª–ª–æ–≤\n"
            f"üîÑ *–¢–∏–ø –æ–±–º–µ–Ω–∞:* –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            f"üîÑ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–º–µ–Ω–∞:* {duration_str}\n"
            f"üïí *–ù–∞—á–∞–ª–æ:* {start_date}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {end_date_str}"
        )

        bot.send_message(message.chat.id, admin_message, parse_mode="Markdown")
        bot.send_message(user_id, user_message, parse_mode="Markdown")

        manage_exchanges(message)
    except ValueError as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_perform_exchange_time, user_id, exchange_rate)

@text_only_handler
def process_perform_exchange_discount(message, user_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞–º–∏":
        manage_exchanges(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        points_needed = float(message.text.replace(',', '.'))
        if points_needed < 10:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ ‚Äî 10!")
        if points_needed % 10 != 0:
            raise ValueError("–ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã 10!")

        data = load_payment_data()
        user_data = data['subscriptions']['users'].get(str(user_id), {})
        points = user_data.get('referral_points', 0)
        if points < points_needed:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞!")

        users_data = load_users()
        username = users_data.get(str(user_id), {}).get('username', f"@{user_id}")
        if not username.startswith('@'):
            username = f"@{username}"

        discount = (points_needed // 10) * 5
        current_discount = users_data.get(str(user_id), {}).get('discount', 0)
        if current_discount + discount > 35:
            raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ ‚Äî 35%!")

        user_data['referral_points'] -= points_needed
        user_data.setdefault('points_history', []).append({
            'action': 'spent',
            'points': points_needed,
            'exchange_type': 'discount',
            'reason': f"–û–±–º–µ–Ω –Ω–∞ {discount}% —Å–∫–∏–¥–∫–∏",
            'date': datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })

        users_data.setdefault(str(user_id), {})
        users_data[str(user_id)]['discount'] = current_discount + discount
        users_data[str(user_id)]['discount_type'] = "points"

        promo_code = f"DISC{uuid.uuid4().hex[:8].upper()}"
        data.setdefault('promo_codes', {})[promo_code] = {
            'discount': discount,
            'used': False,
            'user_id': str(user_id),
            'created_at': datetime.now().strftime("%d.%m.%Y –≤ %H:%M"),
            'source': 'admin_exchange'
        }

        save_payments_data(data)
        save_users_data(users_data)

        admin_message = (
            f"‚úÖ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} - `{user_id}` –≤—ã–ø–æ–ª–Ω–µ–Ω –æ–±–º–µ–Ω:\n\n"
            f"üí∞ *–ë–∞–ª–ª—ã:* {format_number(points_needed)} –±–∞–ª–ª–æ–≤\n"
            f"üîÑ *–¢–∏–ø –æ–±–º–µ–Ω–∞:* —Å–∫–∏–¥–∫–∞\n"
            f"üîÑ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–º–µ–Ω–∞:* {format_number(discount)}%\n"
            f"üìå *–ü—Ä–æ–º–æ–∫–æ–¥:* `{promo_code}`"
        )
        user_message = (
            f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±–º–µ–Ω—è–ª *{format_number(points_needed)} –≤–∞—à–∏—Ö –±–∞–ª–ª–æ–≤*:\n\n"
            f"üí∞ *–ë–∞–ª–ª—ã:* {format_number(points_needed)} –±–∞–ª–ª–æ–≤\n"
            f"üîÑ *–¢–∏–ø –æ–±–º–µ–Ω–∞:* —Å–∫–∏–¥–∫–∞\n"
            f"üîÑ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–º–µ–Ω–∞:* {format_number(discount)}%\n"
            f"üìå *–ü—Ä–æ–º–æ–∫–æ–¥:* `{promo_code}`"
        )

        bot.send_message(message.chat.id, admin_message, parse_mode="Markdown")
        bot.send_message(user_id, user_message, parse_mode="Markdown")

        manage_exchanges(message)
    except ValueError as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_perform_exchange_discount, user_id)

@text_only_handler
def process_perform_exchange_feature(message, user_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞–º–∏":
        manage_exchanges(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    feature = message.text.strip()
    if feature not in PAID_FEATURES:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in range(0, len(PAID_FEATURES), 2):
            if i + 1 < len(PAID_FEATURES):
                markup.add(PAID_FEATURES[i], PAID_FEATURES[i + 1])
            else:
                markup.add(PAID_FEATURES[i])
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞–º–∏')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_perform_exchange_feature, user_id)
        return

    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(str(user_id), {})
    points = user_data.get('referral_points', 0)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, (
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é *{feature.lower()}:*\n"
        f"_P.S. 2 –±–∞–ª–ª–∞ = 15 –º–∏–Ω—É—Ç_"
    ), reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_perform_exchange_feature_amount, user_id, feature)

@text_only_handler
def process_perform_exchange_feature_amount(message, user_id, feature):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞–º–∏":
        manage_exchanges(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        points_needed = float(message.text.replace(',', '.'))
        if points_needed < 2:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ ‚Äî 2!")
        if points_needed % 2 != 0:
            raise ValueError("–ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã 2!")

        data = load_payment_data()
        user_data = data['subscriptions']['users'].get(str(user_id), {})
        points = user_data.get('referral_points', 0)
        if points < points_needed:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞!")

        users_data = load_users()
        username = users_data.get(str(user_id), {}).get('username', f"@{user_id}")
        if not username.startswith('@'):
            username = f"@{username}"

        total_minutes = points_needed * (15.0 / 2.0)
        days = int(total_minutes // (24 * 60))
        remaining_minutes = total_minutes % (24 * 60)
        remaining_hours = remaining_minutes // 60
        remaining_minutes = remaining_minutes % 60

        feature_access = user_data.get('feature_access', {})
        current_end = datetime.strptime(feature_access.get(feature, "01.01.2025 –≤ 00:00"), "%d.%m.%Y –≤ %H:%M")
        latest_end = max(current_end, datetime.now())
        new_end = latest_end + timedelta(days=days, hours=remaining_hours, minutes=remaining_minutes)

        start_date = latest_end.strftime("%d.%m.%Y –≤ %H:%M")
        end_date_str = new_end.strftime("%d.%m.%Y –≤ %H:%M")

        duration_str = ""
        if days > 0:
            duration_str = f"{days} –¥–Ω. {remaining_hours} —á. {format_number(remaining_minutes)} –º–∏–Ω."
        elif remaining_hours > 0:
            duration_str = f"{remaining_hours} —á. {format_number(remaining_minutes)} –º–∏–Ω."
        else:
            duration_str = f"{format_number(remaining_minutes)} –º–∏–Ω."

        user_data['referral_points'] -= points_needed
        user_data.setdefault('points_history', []).append({
            'action': 'spent',
            'points': points_needed,
            'exchange_type': 'feature',
            'reason': f"–æ–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é '{feature}' ({duration_str})",
            'feature_name': feature,
            'date': datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })

        user_data.setdefault('feature_access', {})
        user_data['feature_access'][feature] = end_date_str

        save_payments_data(data)

        admin_message = (
            f"‚úÖ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} - `{user_id}` –≤—ã–ø–æ–ª–Ω–µ–Ω –æ–±–º–µ–Ω:\n\n"
            f"üí∞ *–ë–∞–ª–ª—ã:* {format_number(points_needed)} –±–∞–ª–ª–æ–≤\n"
            f"üîÑ *–¢–∏–ø –æ–±–º–µ–Ω–∞:* –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏ *{feature.lower()}*\n"
            f"üîÑ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–º–µ–Ω–∞:* {duration_str}\n"
            f"üïí *–ù–∞—á–∞–ª–æ:* {start_date}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {end_date_str}"
        )
        user_message = (
            f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±–º–µ–Ω—è–ª *{format_number(points_needed)} –≤–∞—à–∏—Ö –±–∞–ª–ª–æ–≤*:\n\n"
            f"üí∞ *–ë–∞–ª–ª—ã:* {format_number(points_needed)} –±–∞–ª–ª–æ–≤\n"
            f"üîÑ *–¢–∏–ø –æ–±–º–µ–Ω–∞:* –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏ *{feature.lower()}*\n"
            f"üîÑ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–º–µ–Ω–∞:* {duration_str}\n"
            f"üïí *–ù–∞—á–∞–ª–æ:* {start_date}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {end_date_str}"
        )

        bot.send_message(message.chat.id, admin_message, parse_mode="Markdown")
        bot.send_message(user_id, user_message, parse_mode="Markdown")

        manage_exchanges(message)
    except ValueError as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_perform_exchange_feature_amount, user_id, feature)

# ------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–ú–ï–ù–ê–ú–ò (–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±–º–µ–Ω–æ–≤) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±–º–µ–Ω–æ–≤' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_exchanges(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±–º–µ–Ω–æ–≤'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–º–µ–Ω–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, process_view_exchanges)

@text_only_handler
def process_view_exchanges(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞–º–∏":
        manage_exchanges(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    user_id = None

    users_data = load_users()
    if user_input.isdigit():
        if len(user_input) >= 5:
            user_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(users_data):
                user_id = list(users_data.keys())[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:]  
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@') 
            if db_username.lower() == username.lower():  
                user_id = uid
                break

    if not user_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_view_exchanges)
        return

    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(str(user_id), {})
    history = user_data.get('points_history', [])
    exchanges = [entry for entry in history if entry['action'] == 'spent' and '–û–±–º–µ–Ω' in entry['reason']]
    if not exchanges:
        bot.send_message(message.chat.id, "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –æ–±–º–µ–Ω–æ–≤!", parse_mode="Markdown")
        manage_exchanges(message)
        return

    username = users_data.get(str(user_id), {}).get('username', f"@{user_id}")
    if not username.startswith('@'):
        username = f"@{username}"

    def format_reason(reason):
        if "–û–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é" in reason:
            parts = reason.split(" (")
            function_name = parts[0].split("'")[1].lower()
            duration = parts[1].strip(")")
            if "–¥–Ω." in duration:
                components = duration.replace(" –¥–Ω.", "").replace(" —á.", "").replace(" –º–∏–Ω.", "").split()
                days, hours, minutes = map(float, components) if len(components) == 3 else (0, 0, float(components[0]))
            else:
                minutes = float(duration.replace(" –º–∏–Ω.", ""))
                days, hours = 0, 0
            duration_str = ""
            if days > 0:
                duration_str = f"{int(days)} –¥–Ω. {format_number(hours)} —á. {format_number(minutes)} –º–∏–Ω."
            elif hours > 0:
                duration_str = f"{format_number(hours)} —á. {format_number(minutes)} –º–∏–Ω."
            else:
                duration_str = f"{format_number(minutes)} –º–∏–Ω."
            return f"–æ–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é *{function_name}* ({duration_str})"
        elif "–û–±–º–µ–Ω –Ω–∞" in reason and "—Å–∫–∏–¥–∫–∏" in reason:
            discount = float(reason.split(" ")[2].replace("%", ""))
            return f"–æ–±–º–µ–Ω –Ω–∞ {format_number(discount)}% —Å–∫–∏–¥–∫–∏"
        elif "–æ–±–º–µ–Ω –Ω–∞" in reason.lower():
            parts = reason.split("–æ–±–º–µ–Ω –Ω–∞ ")[1]
            components = parts.replace(" –¥–Ω.", "").replace(" —á.", "").split()
            days, hours = map(float, components) if len(components) == 2 else (0, float(components[0]))
            duration_str = ""
            if days > 0 and hours > 0:
                duration_str = f"{int(days)} –¥–Ω. {format_number(hours)} —á."
            elif days > 0:
                duration_str = f"{int(days)} –¥–Ω."
            else:
                duration_str = f"{format_number(hours)} —á."
            return f"–æ–±–º–µ–Ω –Ω–∞ {duration_str}"
        return reason

    exchanges_summary = f"*–ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* {username} - `{user_id}`:\n\n"
    for idx, entry in enumerate(exchanges, 1):
        formatted_reason = format_reason(entry['reason'])
        exchanges_summary += (
            f"üìù *‚Ññ{idx}. –ü–æ—Ç—Ä–∞—á–µ–Ω–æ:*\n\n"
            f"üí∞ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {format_number(entry['points'])} –±–∞–ª–ª–æ–≤\n"
            f"üìÖ *–î–∞—Ç–∞:* {entry['date']}\n"
            f"üìã *–ü—Ä–∏—á–∏–Ω–∞:* {formatted_reason}\n\n"
        )

    message_parts = split_message(exchanges_summary)
    for part in message_parts:
        bot.send_message(message.chat.id, part, parse_mode="Markdown")

    manage_exchanges(message)

# ------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def manage_discounts(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥','–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–∫–∏–¥–∫—É') 
    markup.add('–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', '–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∏–¥–∫–∞–º–∏:", reply_markup=markup)

# ------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ö–ò–î–ö–ê–ú–ò (—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def create_promo_code(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, process_create_promo_code_discount)

@text_only_handler
def process_create_promo_code_discount(message):
    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏":
            manage_discounts(message)
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
            manage_system(message)
        else:
            show_admin_panel(message)
        return

    try:
        discount = float(message.text.replace(',', '.').strip())
        if discount <= 0 or discount > 100:
            raise ValueError("–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100!")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=markup)
        bot.register_next_step_handler(message, process_create_promo_code_uses, discount)
    except ValueError as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_create_promo_code_discount)

@text_only_handler
def process_create_promo_code_uses(message, discount):
    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏":
            manage_discounts(message)
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
            manage_system(message)
        else:
            show_admin_panel(message)
        return

    try:
        uses = int(message.text.strip())
        if uses < 1:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >1!")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í—Å–µ —Ç–æ–≤–∞—Ä—ã', '–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏', '–í–µ—Å—å –º–∞–≥–∞–∑–∏–Ω')
        markup.add('–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, 
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫ —á–µ–º—É –ø—Ä–∏–º–µ–Ω–∏–º –ø—Ä–æ–º–æ–∫–æ–¥:\n\n"
            "üí≥ - –í—Å–µ —Ç–æ–≤–∞—Ä—ã: –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –º–∞–≥–∞–∑–∏–Ω\n"
            "üéÅ - –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏: —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∫–∏\n"
            "üõí - –í–µ—Å—å –º–∞–≥–∞–∑–∏–Ω: —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞\n"
            "üè∑Ô∏è - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã: –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã/–ø–æ–¥–ø–∏—Å–∫–∏", 
            reply_markup=markup)
        bot.register_next_step_handler(message, process_create_promo_code_category, discount, uses)
    except ValueError as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_create_promo_code_uses, discount)

@text_only_handler
def process_create_promo_code_category(message, discount, uses):
    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏":
            manage_discounts(message)
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
            manage_system(message)
        else:
            show_admin_panel(message)
        return

    applicable_category = None
    applicable_items = []

    if message.text == "–í—Å–µ —Ç–æ–≤–∞—Ä—ã":
        applicable_category = None
    elif message.text == "–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏":
        applicable_category = "subscriptions"
    elif message.text == "–í–µ—Å—å –º–∞–≥–∞–∑–∏–Ω":
        applicable_category = "store"
    elif message.text == "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã":
        available_items = list(SUBSCRIPTION_PLANS.keys()) + list(STORE_ITEMS.keys())
        items_display_lines = []
        
        for idx, item in enumerate(available_items, 1):
            label = SUBSCRIPTION_PLANS.get(item, STORE_ITEMS.get(item, {'label': item}))['label']
            emoji = "üí≥" if item in SUBSCRIPTION_PLANS else "üõí"
            items_display_lines.append(f"{emoji} ‚Ññ{idx}. {label}")

        items_display = "üíé –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Ç–æ–≤–∞—Ä–æ–≤:\n\n" + "\n".join(items_display_lines) + "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–æ–∫:"
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        
        bot.send_message(message.chat.id, items_display, reply_markup=markup)
        bot.register_next_step_handler(message, process_create_promo_code_items, discount, uses)
        return
    else:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_create_promo_code_category, discount, uses)
        return

    data = load_payment_data()
    promo_code = f"PROMO{uuid.uuid4().hex[:8].upper()}"
    data.setdefault('promo_codes', {})[promo_code] = {
        'discount': discount,
        'uses': uses,
        'used': False,
        'active': True,
        'user_id': None,
        'used_by': [],
        'created_at': datetime.now().strftime("%d.%m.%Y –≤ %H:%M"),
        'source': 'admin',
        'applicable_category': applicable_category,
        'applicable_items': applicable_items
    }

    save_payments_data(data)
    discount_str = f"{int(discount)}%" if isinstance(discount, int) or discount.is_integer() else f"{discount:.2f}%".replace(".00%", "%")
    applicability_str = ("–≤—Å–µ —Ç–æ–≤–∞—Ä—ã" if applicable_category is None else 
                        "–≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏" if applicable_category == "subscriptions" else 
                        "–≤–µ—Å—å –º–∞–≥–∞–∑–∏–Ω")
    bot.send_message(message.chat.id, 
        f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥:\n\n"
        f"üéÅ *–ü—Ä–æ–º–æ–∫–æ–¥:* `{promo_code}`\n"
        f"üè∑Ô∏è *–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:* {discount_str}\n"
        f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* {uses}\n"
        f"üõí *–ü—Ä–∏–º–µ–Ω–∏–º –∫:* {applicability_str}", 
        parse_mode="Markdown")
    manage_discounts(message)

@text_only_handler
def process_create_promo_code_items(message, discount, uses):
    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏":
            manage_discounts(message)
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
            manage_system(message)
        else:
            show_admin_panel(message)
        return

    available_items = [
        "trial_subscription_3", "weekly_subscription_7", "monthly_subscription_30",
        "quarterly_subscription_90", "semiannual_subscription_180", "yearly_subscription_365",
        "points_5", "points_10", "points_15", "points_25", "points_30", "points_50",
        "points_75", "points_100", "points_150", "points_200", "points_250", "points_350",
        "points_500", "points_750", "points_1000",
        "time_1day", "time_2days", "time_4days", "time_5days", "time_8days", "time_10days",
        "time_14days", "time_15days", "time_21days", "time_45days", "time_60days", "time_120days"
    ]    
    applicable_items = []

    try:
        indices = [int(idx.strip()) - 1 for idx in message.text.split(',')]
        for idx in indices:
            if 0 <= idx < len(available_items):
                applicable_items.append(available_items[idx])
            else:
                raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {idx + 1}")
    except ValueError as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_create_promo_code_items, discount, uses)
        return

    data = load_payment_data()
    promo_code = f"PROMO{uuid.uuid4().hex[:8].upper()}"
    data.setdefault('promo_codes', {})[promo_code] = {
        'discount': discount,
        'uses': uses,
        'used': False,
        'active': True,
        'user_id': None,
        'used_by': [],
        'created_at': datetime.now().strftime("%d.%m.%Y –≤ %H:%M"),
        'source': 'admin',
        'applicable_category': None,
        'applicable_items': applicable_items
    }

    save_payments_data(data)
    discount_str = f"{int(discount)}%" if isinstance(discount, int) or discount.is_integer() else f"{discount:.2f}%".replace(".00%", "%")
    items_str = ", ".join([SUBSCRIPTION_PLANS.get(item, STORE_ITEMS.get(item, {'label': item}))['label'] + (" –≤ –º–∞–≥–∞–∑–∏–Ω–µ" if item.startswith("points_") or item.startswith("time_") else "") for item in applicable_items])
    bot.send_message(message.chat.id, 
        f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥:\n\n"
        f"üéÅ *–ü—Ä–æ–º–æ–∫–æ–¥:* `{promo_code}`\n"
        f"üè∑Ô∏è *–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:* {discount_str}\n"
        f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* {uses}\n"
        f"üõí *–ü—Ä–∏–º–µ–Ω–∏–º –∫:* {items_str}", 
        parse_mode="Markdown")
    manage_discounts(message)

# ------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ö–ò–î–ö–ê–ú–ò (–Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–∫–∏–¥–∫—É) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–∫–∏–¥–∫—É' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def assign_discount(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–∫–∏–¥–∫—É'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, process_assign_discount)

@text_only_handler
def process_assign_discount(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏":
        manage_discounts(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    user_id = None

    users_data = load_users()
    if user_input.isdigit():
        if len(user_input) >= 5:
            user_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(users_data):
                user_id = list(users_data.keys())[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:] 
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@')  
            if db_username.lower() == username.lower():  
                user_id = uid
                break

    if not user_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_assign_discount)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, process_assign_discount_amount, user_id)

@text_only_handler
def process_assign_discount_amount(message, user_id):
    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏":
            manage_discounts(message)
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
            manage_system(message)
        else:
            show_admin_panel(message)
        return

    try:
        discount = float(message.text.replace(',', '.').strip())
        if discount <= 0 or discount > 100:
            raise ValueError("–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100!")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í—Å–µ —Ç–æ–≤–∞—Ä—ã', '–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏', '–í–µ—Å—å –º–∞–≥–∞–∑–∏–Ω')
        markup.add('–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, 
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫ —á–µ–º—É –ø—Ä–∏–º–µ–Ω–∏–º–∞ —Å–∫–∏–¥–∫–∞:\n\n"
            "üí≥ - –í—Å–µ —Ç–æ–≤–∞—Ä—ã: –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –º–∞–≥–∞–∑–∏–Ω\n"
            "üéÅ - –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏: —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∫–∏\n"
            "üõí - –í–µ—Å—å –º–∞–≥–∞–∑–∏–Ω: —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞\n"
            "üè∑Ô∏è - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã: –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã/–ø–æ–¥–ø–∏—Å–∫–∏", 
            reply_markup=markup)
        bot.register_next_step_handler(message, process_assign_discount_category, user_id, discount)
    except ValueError as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_assign_discount_amount, user_id)

@text_only_handler
def process_assign_discount_category(message, user_id, discount):
    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏":
            manage_discounts(message)
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
            manage_system(message)
        else:
            show_admin_panel(message)
        return

    applicable_category = None
    applicable_items = []

    if message.text == "–í—Å–µ —Ç–æ–≤–∞—Ä—ã":
        applicable_category = None
    elif message.text == "–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏":
        applicable_category = "subscriptions"
    elif message.text == "–í–µ—Å—å –º–∞–≥–∞–∑–∏–Ω":
        applicable_category = "store"
    elif message.text == "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã":
        available_items = list(SUBSCRIPTION_PLANS.keys()) + list(STORE_ITEMS.keys())
        items_display_lines = []
        for idx, item in enumerate(available_items, 1):
            label = SUBSCRIPTION_PLANS.get(item, STORE_ITEMS.get(item, {'label': item}))['label']
            if item in SUBSCRIPTION_PLANS:
                emoji = "üí≥"  
            else:
                emoji = "üõí"  
            items_display_lines.append(f"{emoji} ‚Ññ{idx}. {label}")
        
        items_display = "üíé –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Ç–æ–≤–∞—Ä–æ–≤:\n\n" + "\n".join(items_display_lines) + "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–æ–∫:"
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, items_display, reply_markup=markup)
        bot.register_next_step_handler(message, process_assign_discount_items, user_id, discount)
        return
    else:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π.", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_assign_discount_category, user_id, discount)
        return

    data = load_payment_data()
    users_data = load_users()
    username = escape_markdown(users_data.get(str(user_id), {}).get('username', f"@{user_id}"))
    if not username.startswith('@'):
        username = f"@{username}"

    now = datetime.now()
    for code, promo in list(data.get('promo_codes', {}).items()):
        created_at_str = promo.get('created_at', now.strftime("%d.%m.%Y –≤ %H:%M"))
        created_at = datetime.strptime(created_at_str, "%d.%m.%Y –≤ %H:%M")
        if (now - created_at).days > 30 and not promo.get('used', False):
            promo['used'] = True
            promo['active'] = False
            promo['deactivated_at'] = now.strftime("%d.%m.%Y –≤ %H:%M")
            promo['deactivation_reason'] = "–∏—Å—Ç—ë–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è"

    promo_code = f"DISC{uuid.uuid4().hex[:8].upper()}"
    data.setdefault('promo_codes', {})[promo_code] = {
        'discount': discount,
        'uses': 1,
        'used': False,
        'active': True,
        'user_id': str(user_id),
        'used_by': [],
        'created_at': now.strftime("%d.%m.%Y –≤ %H:%M"),
        'source': 'admin',
        'applicable_category': applicable_category,
        'applicable_items': applicable_items
    }

    save_payments_data(data)
    discount_str = f"{int(discount)}%" if isinstance(discount, int) or discount.is_integer() else f"{discount:.2f}%".replace(".00%", "%")
    applicability_str = ("–≤—Å–µ —Ç–æ–≤–∞—Ä—ã" if applicable_category is None else 
                        "–≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏" if applicable_category == "subscriptions" else 
                        "–≤–µ—Å—å –º–∞–≥–∞–∑–∏–Ω")
    admin_message = (
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} - `{user_id}` –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å–∫–∏–¥–∫–∞:\n\n"
        f"üéÅ *–ü—Ä–æ–º–æ–∫–æ–¥:* `{promo_code}`\n"
        f"üè∑Ô∏è *–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:* {discount_str}\n"
        f"üõí *–ü—Ä–∏–º–µ–Ω–∏–º –∫:* {applicability_str}\n"
        f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π"
    )
    user_message = (
        f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞–º —Å–∫–∏–¥–∫—É:\n\n"
        f"üéÅ *–ü—Ä–æ–º–æ–∫–æ–¥:* `{promo_code}`\n"
        f"üè∑Ô∏è *–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:* {discount_str}\n"
        f"üõí *–ü—Ä–∏–º–µ–Ω–∏–º –∫:* {applicability_str}\n"
        f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π\n\n"
        f"_P.S. —Å–∫–∏–¥–∫–∞ —Å–≥–æ—Ä–∏—Ç, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ!_"
    )
    bot.send_message(message.chat.id, admin_message, parse_mode="Markdown")
    bot.send_message(user_id, user_message, parse_mode="Markdown")

    manage_discounts(message)

@text_only_handler
def process_assign_discount_items(message, user_id, discount):
    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏":
            manage_discounts(message)
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
            manage_system(message)
        else:
            show_admin_panel(message)
        return

    available_items = [
        "trial_subscription_3", "weekly_subscription_7", "monthly_subscription_30",
        "quarterly_subscription_90", "semiannual_subscription_180", "yearly_subscription_365",
        "points_5", "points_10", "points_15", "points_25", "points_30", "points_50",
        "points_75", "points_100", "points_150", "points_200", "points_250", "points_350",
        "points_500", "points_750", "points_1000",
        "time_1day", "time_2days", "time_4days", "time_5days", "time_8days", "time_10days",
        "time_14days", "time_15days", "time_21days", "time_45days", "time_60days", "time_120days"
    ]  
    applicable_items = []

    try:
        indices = [int(idx.strip()) - 1 for idx in message.text.split(',')]
        for idx in indices:
            if 0 <= idx < len(available_items):
                applicable_items.append(available_items[idx])
            else:
                raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {idx + 1}")
    except ValueError as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_assign_discount_items, user_id, discount)
        return

    data = load_payment_data()
    users_data = load_users()
    username = escape_markdown(users_data.get(str(user_id), {}).get('username', f"@{user_id}"))
    if not username.startswith('@'):
        username = f"@{username}"

    now = datetime.now()
    for code, promo in list(data.get('promo_codes', {}).items()):
        created_at_str = promo.get('created_at', now.strftime("%d.%m.%Y –≤ %H:%M"))
        created_at = datetime.strptime(created_at_str, "%d.%m.%Y –≤ %H:%M")
        if (now - created_at).days > 30 and not promo.get('used', False):
            promo['used'] = True
            promo['active'] = False
            promo['deactivated_at'] = now.strftime("%d.%m.%Y –≤ %H:%M")
            promo['deactivation_reason'] = "–∏—Å—Ç—ë–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è"

    promo_code = f"DISC{uuid.uuid4().hex[:8].upper()}"
    data.setdefault('promo_codes', {})[promo_code] = {
        'discount': discount,
        'uses': 1,
        'used': False,
        'active': True,
        'user_id': str(user_id),
        'used_by': [],
        'created_at': now.strftime("%d.%m.%Y –≤ %H:%M"),
        'source': 'admin',
        'applicable_category': None,
        'applicable_items': applicable_items
    }

    save_payments_data(data)
    discount_str = f"{int(discount)}%" if isinstance(discount, int) or discount.is_integer() else f"{discount:.2f}%".replace(".00%", "%")
    items_str = ", ".join([SUBSCRIPTION_PLANS.get(item, STORE_ITEMS.get(item, {'label': item}))['label'] + (" –≤ –º–∞–≥–∞–∑–∏–Ω–µ" if item.startswith("points_") or item.startswith("time_") else "") for item in applicable_items])
    admin_message = (
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} - `{user_id}` –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å–∫–∏–¥–∫–∞:\n\n"
        f"üéÅ *–ü—Ä–æ–º–æ–∫–æ–¥:* `{promo_code}`\n"
        f"üè∑Ô∏è *–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:* {discount_str}\n"
        f"üõí *–ü—Ä–∏–º–µ–Ω–∏–º –∫:* {items_str}\n"
        f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π"
    )
    user_message = (
        f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞–º —Å–∫–∏–¥–∫—É:\n\n"
        f"üéÅ *–ü—Ä–æ–º–æ–∫–æ–¥:* `{promo_code}`\n"
        f"üè∑Ô∏è *–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:* {discount_str}\n"
        f"üõí *–ü—Ä–∏–º–µ–Ω–∏–º –∫:* {items_str}\n"
        f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π\n\n"
        f"_P.S. —Å–∫–∏–¥–∫–∞ —Å–≥–æ—Ä–∏—Ç, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ!_"
    )
    bot.send_message(message.chat.id, admin_message, parse_mode="Markdown")
    bot.send_message(user_id, user_message, parse_mode="Markdown")

    manage_discounts(message)

# ------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ö–ò–î–ö–ê–ú–ò (–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_promo_codes(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    data = load_payment_data()
    promo_codes = data.get('promo_codes', {})
    if not promo_codes:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!", parse_mode="Markdown")
        manage_discounts(message)
        return

    now = datetime.now()
    promo_summary = "*–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:*\n\n"
    for idx, (code, details) in enumerate(promo_codes.items(), 1):
        used = details.get('used', False)
        active = details.get('active', not used)
        status = "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω" if used or not active else "–∞–∫—Ç–∏–≤–µ–Ω"
        if not used and active:
            created_at_str = details.get('created_at', now.strftime("%d.%m.%Y –≤ %H:%M"))
            created_at = datetime.strptime(created_at_str, "%d.%m.%Y –≤ %H:%M")
            if (now - created_at).days > 30:
                status = "–∏—Å—Ç—ë–∫"
                details['used'] = True
                details['active'] = False
                details['deactivated_at'] = now.strftime("%d.%m.%Y –≤ %H:%M")
                details['deactivation_reason'] = "–∏—Å—Ç—ë–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (30 –¥–Ω–µ–π)"

        source = details.get('source', 'system')
        user_id = details.get('user_id')
        if user_id:
            user_display = f"`{escape_markdown(str(user_id))}`"
        elif source == 'admin':
            user_display = "–∞–¥–º–∏–Ω—Å–∫–∏–π"
        else:
            user_display = "–æ–±—â–∏–π"

        created_at_display = details.get('created_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        uses = details.get('uses', '–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ')
        discount = details['discount']
        if isinstance(discount, int):
            discount_str = f"{discount}%"
        else:
            discount_str = f"{int(discount)}%" if discount.is_integer() else f"{discount:.2f}%".replace(".00%", "%")

        applicable_category = details.get('applicable_category')
        applicable_items = details.get('applicable_items', [])
        applicability_str = ("–≤—Å–µ —Ç–æ–≤–∞—Ä—ã" if applicable_category is None and not applicable_items else 
                            "–≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏" if applicable_category == "subscriptions" else 
                            "–≤–µ—Å—å –º–∞–≥–∞–∑–∏–Ω" if applicable_category == "store" else 
                            ", ".join([SUBSCRIPTION_PLANS.get(item, STORE_ITEMS.get(item, {'label': item}))['label'] + (" –≤ –º–∞–≥–∞–∑–∏–Ω–µ" if item.startswith("points_") or item.startswith("time_") else "") for item in applicable_items]))

        promo_summary += (
            f"üéÅ *‚Ññ{idx}.* `{escape_markdown(code)}`\n"
            f"üè∑Ô∏è *–°–∫–∏–¥–∫–∞:* {discount_str}\n"
            f"üìÖ *–°–æ–∑–¥–∞–Ω:* {created_at_display}\n"
            f"üë• *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:* {uses}\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_display}\n"
            f"üõí *–ü—Ä–∏–º–µ–Ω–∏–º –∫:* {applicability_str}\n"
            f"üìã *–°—Ç–∞—Ç—É—Å:* {status}\n"
        )
        if details.get('deactivated_at'):
            promo_summary += f"‚è≥ *–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:* {details['deactivated_at']} ({details['deactivation_reason'].lower()})\n"
        if details.get('used_by'):
            for used_entry in details['used_by']:
                username = escape_markdown(used_entry['username'])
                if not username.startswith('@'):
                    username = f"@{username}"
                promo_summary += f"üë§ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω:* {username} (`{escape_markdown(str(used_entry['user_id']))}`) –≤ {used_entry['used_at']}\n"
        promo_summary += "\n"

    message_parts = split_message(promo_summary)
    for part in message_parts:
        bot.send_message(message.chat.id, part, parse_mode="Markdown")

    save_payments_data(data)
    manage_discounts(message)

# ------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ö–ò–î–ö–ê–ú–ò (—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_promo_code(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    data = load_payment_data()
    promo_codes = data.get('promo_codes', {})
    if not promo_codes:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!", parse_mode="Markdown")
        manage_discounts(message)
        return

    now = datetime.now()
    promo_summary = "*–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*\n\n"
    promo_list = []
    idx = 0
    for code, details in promo_codes.items():
        source = details.get('source', 'system')
        if source not in ('admin', 'admin_exchange'):
            continue

        idx += 1
        used = details.get('used', False)
        active = details.get('active', not used)
        status = "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω" if used or not active else "–∞–∫—Ç–∏–≤–µ–Ω"
        if not used and active:
            created_at_str = details.get('created_at', now.strftime("%d.%m.%Y –≤ %H:%M"))
            created_at = datetime.strptime(created_at_str, "%d.%m.%Y –≤ %H:%M")
            if (now - created_at).days > 30:
                status = "–∏—Å—Ç—ë–∫"
                details['used'] = True
                details['active'] = False
                details['deactivated_at'] = now.strftime("%d.%m.%Y –≤ %H:%M")
                details['deactivation_reason'] = "–∏—Å—Ç—ë–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è"

        user_id = details.get('user_id')
        if user_id:
            user_display = f"`{escape_markdown(str(user_id))}`"
        elif source == 'admin':
            user_display = "–∞–¥–º–∏–Ω—Å–∫–∏–π"
        else:
            user_display = "–æ–±—â–∏–π"

        created_at_display = details.get('created_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        uses = details.get('uses', '–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ')
        discount = details['discount']
        discount_str = f"{int(discount)}%" if isinstance(discount, int) or discount.is_integer() else f"{discount:.2f}%".replace(".00%", "%")
        applicable_category = details.get('applicable_category')
        applicable_items = details.get('applicable_items', [])
        applicability_str = ("–≤—Å–µ —Ç–æ–≤–∞—Ä—ã" if applicable_category is None and not applicable_items else 
                            "–≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏" if applicable_category == "subscriptions" else 
                            "–≤–µ—Å—å –º–∞–≥–∞–∑–∏–Ω" if applicable_category == "store" else 
                            ", ".join([SUBSCRIPTION_PLANS.get(item, STORE_ITEMS.get(item, {'label': item}))['label'] + (" –≤ –º–∞–≥–∞–∑–∏–Ω–µ" if item.startswith("points_") or item.startswith("time_") else "") for item in applicable_items]))

        promo_summary += (
            f"üéÅ *‚Ññ{idx}.* `{escape_markdown(code)}`\n"
            f"üè∑Ô∏è *–°–∫–∏–¥–∫–∞:* {discount_str}\n"
            f"üìÖ *–°–æ–∑–¥–∞–Ω:* {created_at_display}\n"
            f"üë• *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:* {uses}\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_display}\n"
            f"üõí *–ü—Ä–∏–º–µ–Ω–∏–º –∫:* {applicability_str}\n"
            f"üìã *–°—Ç–∞—Ç—É—Å:* {status}\n"
        )
        if details.get('deactivated_at'):
            promo_summary += f"‚è≥ *–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:* {details['deactivated_at']} ({details['deactivation_reason']})\n"
        if details.get('used_by'):
            for used_entry in details['used_by']:
                username = escape_markdown(used_entry['username'])
                if not username.startswith('@'):
                    username = f"@{username}"
                promo_summary += f"üë§ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω:* {username} (`{escape_markdown(str(used_entry['user_id']))}`) –≤ {used_entry['used_at']}\n"
        promo_summary += "\n"
        promo_list.append(code)

    if not promo_list:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", parse_mode="Markdown")
        manage_discounts(message)
        return

    message_parts = split_message(promo_summary)
    for part in message_parts:
        bot.send_message(message.chat.id, part, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_delete_promo_code, promo_list)

@text_only_handler
def process_delete_promo_code(message, promo_list):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏":
        manage_discounts(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        indices = message.text.strip().split(',')
        valid_indices = []
        invalid_indices = []
        deleted_codes = []

        for idx in indices:
            idx = idx.strip()
            try:
                index = int(idx) - 1
                if 0 <= index < len(promo_list):
                    valid_indices.append(index)
                else:
                    invalid_indices.append(idx)
            except ValueError:
                invalid_indices.append(idx)

        if invalid_indices:
            invalid_str = ", ".join(invalid_indices)
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")

        if valid_indices:
            data = load_payment_data()
            for index in valid_indices:
                promo_code = promo_list[index]
                if promo_code in data['promo_codes']:
                    del data['promo_codes'][promo_code]
                    deleted_codes.append(promo_code)
            save_payments_data(data)

            if deleted_codes:
                deleted_str = ", ".join([f"`{escape_markdown(code)}`" for code in deleted_codes])
                bot.send_message(message.chat.id, f"üö´ –ü—Ä–æ–º–æ–∫–æ–¥—ã: {deleted_str} —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")
            else:
                bot.send_message(message.chat.id, "‚ùå –ù–∏ –æ–¥–∏–Ω –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω!", parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤!", parse_mode="Markdown")

        manage_discounts(message)
    except Exception as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_delete_promo_code, promo_list)

# ------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def manage_gifts(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫', '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∞—Ä–∫–æ–≤')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞–º–∏:", reply_markup=markup)

# ------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ê–†–ö–ê–ú–ò (–Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def assign_gift(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç *–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º* –ø–æ–¥–∞—Ä–∫–∞:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_gift_sender)

@text_only_handler
def process_gift_sender(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏":
        manage_gifts(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    sender_id = None

    users_data = load_users()
    if user_input.isdigit():
        if len(user_input) >= 5:
            sender_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(users_data):
                sender_id = list(users_data.keys())[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:]
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@')
            if db_username.lower() == username.lower():
                sender_id = uid
                break

    if not sender_id or sender_id not in users_data:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_gift_sender)
        return

    user_list = []
    for user_id, data in users_data.items():
        if user_id == sender_id:
            continue
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç *–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º* –ø–æ–¥–∞—Ä–∫–∞:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_gift_recipient, sender_id)

@text_only_handler
def process_gift_recipient(message, sender_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏":
        manage_gifts(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    recipient_id = None

    users_data = load_users()
    user_list = []
    filtered_users = []
    for user_id, data in users_data.items():
        if user_id == sender_id:
            continue
        filtered_users.append(user_id)
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
        return

    if user_input.isdigit():
        if len(user_input) >= 5:
            recipient_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(filtered_users):
                recipient_id = filtered_users[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:]
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@')
            if db_username.lower() == username.lower():
                recipient_id = uid
                break

    if not recipient_id or recipient_id not in users_data:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_gift_recipient, sender_id)
        return

    if recipient_id == sender_id:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ª—å–∑—è –ø–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ —Å–∞–º–æ–º—É —Å–µ–±–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_gift_recipient, sender_id)
        return

    sender_username = escape_markdown(users_data.get(sender_id, {}).get('username', f"@{sender_id}"))
    recipient_username = escape_markdown(users_data.get(recipient_id, {}).get('username', f"@{recipient_id}"))

    data = load_payment_data()
    sender_data = data['subscriptions']['users'].get(sender_id, {})
    sender_points = sender_data.get('referral_points', 0)

    paid_plans = [
        plan for plan in sender_data.get('plans', [])
        if plan['plan_name'] in ['trial', 'weekly', 'monthly', 'quarterly', 'semiannual', 'yearly']
        and plan['source'] == 'user'
        and datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M") > datetime.now()
    ]
    total_remaining_minutes = 0
    now = datetime.now()
    for plan in paid_plans:
        end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
        if end_date > now:
            total_remaining_minutes += int((end_date - now).total_seconds() // 60)

    days = total_remaining_minutes // 1440
    hours = (total_remaining_minutes % 1440) // 60
    minutes = total_remaining_minutes % 60
    time_description = f"{days} –¥–Ω. {hours} —á. {minutes} –º–∏–Ω."

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ü–æ–¥–∞—Ä–æ–∫ –±–∞–ª–ª–æ–≤', '–ü–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, (
        f"üéÅ *–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞*\n\n"
        f"üì§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {sender_username} (`{sender_id}`)\n"
        f"üì• *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {recipient_username} (`{recipient_id}`)\n\n"
        f"üí∞ *–î–æ—Å—Ç—É–ø–Ω–æ –±–∞–ª–ª–æ–≤ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:* {format_number(sender_points)}\n"
        f"‚è≥ *–î–æ—Å—Ç—É–ø–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:* {time_description}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–∞—Ä–∫–∞:"
    ), reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_gift_type, sender_id, recipient_id)

@text_only_handler
def process_gift_type(message, sender_id, recipient_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏":
        manage_gifts(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    gift_type = message.text.strip()
    if gift_type not in ['–ü–æ–¥–∞—Ä–æ–∫ –±–∞–ª–ª–æ–≤', '–ü–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏']:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–∞—Ä–∫–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_gift_type, sender_id, recipient_id)
        return

    users_data = load_users()
    data = load_payment_data()
    sender_data = data['subscriptions']['users'].get(sender_id, {})
    sender_username = escape_markdown(users_data.get(sender_id, {}).get('username', f"@{sender_id}"))
    recipient_username = escape_markdown(users_data.get(recipient_id, {}).get('username', f"@{recipient_id}"))

    sender_points = sender_data.get('referral_points', 0)

    allowed_plan_names = ['trial', 'weekly', 'monthly', 'quarterly', 'semiannual', 'yearly', 'points_bonus', 'gift_time', 'store_time', 'custom']
    paid_plans = [
        plan for plan in sender_data.get('plans', [])
        if plan['plan_name'] in allowed_plan_names
        and datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M") > datetime.now()
    ]
    total_remaining_minutes = 0
    now = datetime.now()
    for plan in paid_plans:
        end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
        if end_date > now:
            total_remaining_minutes += int((end_date - now).total_seconds() // 60)

    days = total_remaining_minutes // 1440
    hours = (total_remaining_minutes % 1440) // 60
    minutes = total_remaining_minutes % 60
    time_description = f"{days} –¥–Ω. {hours} —á. {minutes} –º–∏–Ω."

    if gift_type == '–ü–æ–¥–∞—Ä–æ–∫ –±–∞–ª–ª–æ–≤' and sender_points < 0.5:
        bot.send_message(message.chat.id, (
            f"‚ùå –£ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞!\n\n"
            f"üí∞ *–î–æ—Å—Ç—É–ø–Ω–æ –±–∞–ª–ª–æ–≤ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:* {format_number(sender_points)}\n"
            f"üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø –ø–æ–¥–∞—Ä–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"
        ), parse_mode="Markdown")
        bot.register_next_step_handler(message, process_gift_type, sender_id, recipient_id)
        return
    if gift_type == '–ü–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏' and total_remaining_minutes == 0:
        bot.send_message(message.chat.id, (
            f"‚ùå –£ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞!\n\n"
            f"‚è≥ *–î–æ—Å—Ç—É–ø–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:* {time_description}\n"
            f"üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø –ø–æ–¥–∞—Ä–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"
        ), parse_mode="Markdown")
        bot.register_next_step_handler(message, process_gift_type, sender_id, recipient_id)
        return

    if gift_type == '–ü–æ–¥–∞—Ä–æ–∫ –±–∞–ª–ª–æ–≤':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, (
            f"üéÅ *–ü–æ–¥–∞—Ä–æ–∫ –±–∞–ª–ª–æ–≤*\n\n"
            f"üì§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {sender_username} (`{sender_id}`)\n"
            f"üì• *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {recipient_username} (`{recipient_id}`)\n\n"
            f"üí∞ *–î–æ—Å—Ç—É–ø–Ω–æ –±–∞–ª–ª–æ–≤ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:* {format_number(sender_points)}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_gift_points_amount, sender_id, recipient_id)
    else:  
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–ú–∏–Ω—É—Ç—ã', '–ß–∞—Å—ã', '–î–Ω–∏')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, (
            f"üéÅ *–ü–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏*\n\n"
            f"üì§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {sender_username} (`{sender_id}`)\n"
            f"üì• *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {recipient_username} (`{recipient_id}`)\n\n"
            f"‚è≥ *–î–æ—Å—Ç—É–ø–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:* {time_description}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_gift_time_unit, sender_id, recipient_id)

@text_only_handler
def process_gift_points_amount(message, sender_id, recipient_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏":
        manage_gifts(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        gift_points = float(message.text.replace(',', '.'))
        if gift_points < 0.5:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ ‚Äî 0.5!")
        if gift_points % 0.5 != 0:
            raise ValueError("–ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã 0.5!")

        data = load_payment_data()
        users_data = load_users()

        raw_sender_username = users_data.get(sender_id, {}).get('username', f"@{sender_id}")
        raw_recipient_username = users_data.get(recipient_id, {}).get('username', f"@{recipient_id}")

        sender_data = data['subscriptions']['users'].setdefault(sender_id, {
            "plans": [], "total_amount": 0, "username": raw_sender_username, "referral_points": 0,
            "free_feature_trials": {}, "promo_usage_history": [], "referral_milestones": {}, "points_history": []
        })
        available_points = sender_data.get('referral_points', 0)
        if gift_points > available_points:
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤! –î–æ—Å—Ç—É–ø–Ω–æ: {format_number(available_points)}")

        sender_data['referral_points'] = max(0, sender_data.get('referral_points', 0) - gift_points)
        sender_data['points_history'].append({
            "action": "spent",
            "points": gift_points,
            "reason": f"–ø–æ–¥–∞—Ä–æ–∫ {raw_recipient_username} (–æ—Ç –∞–¥–º–∏–Ω–∞)",  
            "date": datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })

        recipient_data = data['subscriptions']['users'].setdefault(recipient_id, {
            "plans": [], "total_amount": 0, "username": raw_recipient_username, "referral_points": 0,
            "free_feature_trials": {}, "promo_usage_history": [], "referral_milestones": [], "points_history": []
        })
        recipient_data['referral_points'] += gift_points
        recipient_data['points_history'].append({
            "action": "earned",
            "points": gift_points,
            "reason": f"–ø–æ–¥–∞—Ä–æ–∫ –æ—Ç {raw_sender_username} (–æ—Ç –∞–¥–º–∏–Ω–∞)", 
            "date": datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })

        save_payments_data(data)

        admin_message = (
            f"‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω:\n\n"
            f"üì§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {escape_markdown(raw_sender_username)} (`{sender_id}`)\n"
            f"üì• *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {escape_markdown(raw_recipient_username)} (`{recipient_id}`)\n\n"
            f"üéÅ *–ü–æ–¥–∞—Ä–æ–∫:* {format_number(gift_points)} –±–∞–ª–ª–æ–≤"
        )
        sender_message = (
            f"‚úÖ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–¥–∞—Ä–∏–ª {raw_recipient_username} {format_number(gift_points)} –±–∞–ª–ª–æ–≤!*\n"
        )
        recipient_message = (
            f"‚úÖ *{raw_sender_username} –ø–æ–¥–∞—Ä–∏–ª –≤–∞–º {format_number(gift_points)} –±–∞–ª–ª–æ–≤!*\n"
            f"üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –≤ —Å–∏—Å—Ç–µ–º–µ –±–∞–ª–ª–æ–≤ –∏–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!"
        )

        bot.send_message(message.chat.id, admin_message, parse_mode="Markdown")
        bot.send_message(sender_id, sender_message, parse_mode="Markdown")
        bot.send_message(recipient_id, recipient_message, parse_mode="Markdown")

        manage_gifts(message)
    except ValueError as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_gift_points_amount, sender_id, recipient_id)

@text_only_handler
def process_gift_time_unit(message, sender_id, recipient_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏":
        manage_gifts(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    unit = message.text.strip().lower()
    if unit not in ['–º–∏–Ω—É—Ç—ã', '—á–∞—Å—ã', '–¥–Ω–∏']:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_gift_time_unit, sender_id, recipient_id)
        return

    users_data = load_users()
    data = load_payment_data()
    sender_data = data['subscriptions']['users'].get(sender_id, {})
    sender_username = escape_markdown(users_data.get(sender_id, {}).get('username', f"@{sender_id}"))
    recipient_username = escape_markdown(users_data.get(recipient_id, {}).get('username', f"@{recipient_id}"))

    allowed_plan_names = ['trial', 'weekly', 'monthly', 'quarterly', 'semiannual', 'yearly', 'points_bonus', 'gift_time', 'store_time', 'custom']
    paid_plans = [
        plan for plan in sender_data.get('plans', [])
        if plan['plan_name'] in allowed_plan_names
        and datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M") > datetime.now()
    ]
    total_remaining_minutes = 0
    now = datetime.now()
    for plan in paid_plans:
        end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
        if end_date > now:
            total_remaining_minutes += int((end_date - now).total_seconds() // 60)

    days = total_remaining_minutes // 1440
    hours = (total_remaining_minutes % 1440) // 60
    minutes = total_remaining_minutes % 60
    time_description = f"{days} –¥–Ω. {hours} —á. {minutes} –º–∏–Ω."

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    prompt = f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {unit} –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:"
    bot.send_message(message.chat.id, (
        f"üéÅ *–ü–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏*\n\n"
        f"üì§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {sender_username} (`{sender_id}`)\n"
        f"üì• *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {recipient_username} (`{recipient_id}`)\n\n"
        f"‚è≥ *–î–æ—Å—Ç—É–ø–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:* {time_description}\n\n"
        f"{prompt}"
    ), reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_gift_time_amount, sender_id, recipient_id, unit)

@text_only_handler
def process_gift_time_amount(message, sender_id, recipient_id, unit):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏":
        manage_gifts(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")

        if unit == '–º–∏–Ω—É—Ç—ã':
            gift_minutes = amount
        elif unit == '—á–∞—Å—ã':
            gift_minutes = amount * 60
        else:  
            gift_minutes = amount * 1440

        data = load_payment_data()
        users_data = load_users()

        raw_sender_username = users_data.get(sender_id, {}).get('username', f"@{sender_id}")
        raw_recipient_username = users_data.get(recipient_id, {}).get('username', f"@{recipient_id}")

        sender_data = data['subscriptions']['users'].setdefault(sender_id, {
            "plans": [], "total_amount": 0, "username": raw_sender_username, "referral_points": 0,
            "free_feature_trials": {}, "promo_usage_history": [], "referral_milestones": {}, "points_history": []
        })
        allowed_plan_names = ['trial', 'weekly', 'monthly', 'quarterly', 'semiannual', 'yearly', 'points_bonus', 'gift_time', 'store_time', 'custom']
        paid_plans = [
            plan for plan in sender_data.get('plans', [])
            if plan['plan_name'] in allowed_plan_names
            and datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M") > datetime.now()
        ]
        total_remaining_minutes = 0
        now = datetime.now()
        for plan in paid_plans:
            end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
            if end_date > now:
                total_remaining_minutes += int((end_date - now).total_seconds() // 60)
        
        days = total_remaining_minutes // 1440
        hours = (total_remaining_minutes % 1440) // 60
        minutes = total_remaining_minutes % 60
        time_description = f"{days} –¥–Ω. {hours} —á. {minutes} –º–∏–Ω."

        if gift_minutes > total_remaining_minutes:
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏! –î–æ—Å—Ç—É–ø–Ω–æ: {time_description}")

        gift_duration = timedelta(minutes=gift_minutes)
        remaining_minutes = gift_minutes
        user_plans = sender_data.get('plans', [])
        for plan in sorted(
            [p for p in user_plans if datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") > datetime.now() and p['plan_name'] in allowed_plan_names],
            key=lambda x: datetime.strptime(x['end_date'], "%d.%m.%Y –≤ %H:%M")
        ):
            if remaining_minutes <= 0:
                break
            end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
            available_minutes = int((end_date - datetime.now()).total_seconds() // 60)
            minutes_to_deduct = min(remaining_minutes, available_minutes)
            new_end_date = end_date - timedelta(minutes=minutes_to_deduct)
            plan['end_date'] = new_end_date.strftime("%d.%m.%Y –≤ %H:%M")
            remaining_minutes -= minutes_to_deduct

        sender_data['plans'] = [p for p in user_plans if datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") > datetime.now()]

        recipient_data = data['subscriptions']['users'].setdefault(recipient_id, {
            "plans": [], "total_amount": 0, "username": raw_recipient_username, "referral_points": 0,
            "free_feature_trials": {}, "promo_usage_history": [], "referral_milestones": [], "points_history": []
        })
        latest_end = max(
            [datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") for p in recipient_data['plans']] or [datetime.now()]
        )
        new_end = latest_end + gift_duration

        recipient_data['plans'].append({
            "plan_name": "gift_time",
            "start_date": latest_end.strftime("%d.%m.%Y –≤ %H:%M"),
            "end_date": new_end.strftime("%d.%m.%Y –≤ %H:%M"),
            "price": 0,
            "source": f"gift_from_{sender_id}_admin"
        })

        days = int(gift_minutes // 1440)
        hours = int((gift_minutes % 1440) // 60)
        minutes = int(gift_minutes % 60)
        gift_description = ""
        if days > 0:
            gift_description += f"{days} –¥–Ω. "
        if hours > 0:
            gift_description += f"{hours} —á. "
        if minutes > 0:
            gift_description += f"{minutes} –º–∏–Ω."

        sender_data['points_history'].append({
            "action": "spent",
            "points": 0,
            "reason": f"–ø–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ {raw_recipient_username}: {gift_description} (–æ—Ç –∞–¥–º–∏–Ω–∞)",  
            "date": datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })
        recipient_data['points_history'].append({
            "action": "earned",
            "points": 0,
            "reason": f"–ø–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç {raw_sender_username}: {gift_description} (–æ—Ç –∞–¥–º–∏–Ω–∞)", 
            "date": datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })

        active_plans = [p for p in sender_data['plans'] if datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") > datetime.now()]
        if active_plans:
            earliest_start = min(datetime.strptime(p['start_date'], "%d.%m.%Y –≤ %H:%M") for p in active_plans)
            latest_end = max(datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") for p in active_plans)
            start_date = earliest_start.strftime("%d.%m.%Y –≤ %H:%M")
            end_date = latest_end.strftime("%d.%m.%Y –≤ %H:%M")
        else:
            now = datetime.now()
            start_date = now.strftime("%d.%m.%Y –≤ %H:%M")
            end_date = now.strftime("%d.%m.%Y –≤ %H:%M")

        save_payments_data(data)

        admin_message = (
            f"‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω:\n\n"
            f"üì§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {escape_markdown(raw_sender_username)} (`{sender_id}`)\n"
            f"üì• *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {escape_markdown(raw_recipient_username)} (`{recipient_id}`)\n\n"
            f"üéÅ *–ü–æ–¥–∞—Ä–æ–∫:* {gift_description}\n\n"
            f"üïí *–ù–∞—á–∞–ª–æ:* {latest_end.strftime('%d.%m.%Y –≤ %H:%M')}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {new_end.strftime('%d.%m.%Y –≤ %H:%M')}"
        )
        sender_message = (
            f"‚úÖ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–¥–∞—Ä–∏–ª {raw_recipient_username} {gift_description}!*\n\n"
            f"üïí *–ù–∞—á–∞–ª–æ:* {start_date}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {end_date}"
        )
        recipient_message = (
            f"‚úÖ *{raw_sender_username} –ø–æ–¥–∞—Ä–∏–ª –≤–∞–º {gift_description}!*\n\n"
            f"üïí *–ù–∞—á–∞–ª–æ:* {latest_end.strftime('%d.%m.%Y –≤ %H:%M')}\n"
            f"‚è≥ *–ö–æ–Ω–µ—Ü:* {new_end.strftime('%d.%m.%Y –≤ %H:%M')}"
        )

        bot.send_message(message.chat.id, admin_message, parse_mode="Markdown")
        bot.send_message(sender_id, sender_message, parse_mode="Markdown")
        bot.send_message(recipient_id, recipient_message, parse_mode="Markdown")

        manage_gifts(message)
    except ValueError as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_gift_time_amount, sender_id, recipient_id, unit)

# ------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ê–†–ö–ê–ú–ò (–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∞—Ä–∫–æ–≤) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∞—Ä–∫–æ–≤' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_gifts(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∞—Ä–∫–æ–≤'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, process_view_gifts)

def clean_escaped_text(text):
    return re.sub(r'\\([_*[\]()~`>#+\-=|{}.!])', r'\1', text)

def pluralize_points(points):
    if isinstance(points, str):
        try:
            points = float(points)
        except ValueError:
            return "–±–∞–ª–ª–æ–≤"
    points = int(points)
    if points % 10 == 1 and points % 100 != 11:
        return "–±–∞–ª–ª"
    elif 2 <= points % 10 <= 4 and (points % 100 < 10 or points % 100 >= 20):
        return "–±–∞–ª–ª–∞"
    else:
        return "–±–∞–ª–ª–æ–≤"

@text_only_handler
def process_view_gifts(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏":
        manage_gifts(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    user_id = None

    users_data = load_users()
    if user_input.isdigit():
        if len(user_input) >= 5:
            user_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(users_data):
                user_id = list(users_data.keys())[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:]
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@')
            if db_username.lower() == username.lower():
                user_id = uid
                break

    if not user_id or user_id not in users_data:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_view_gifts)
        return

    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(str(user_id), {})
    history = user_data.get('points_history', [])
    gift_entries = [entry for entry in history if "–ü–æ–¥–∞—Ä–æ–∫" in entry['reason']]

    if not gift_entries:
        bot.send_message(message.chat.id, "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤!", parse_mode="Markdown")
        manage_gifts(message)
        return

    username = escape_markdown(users_data.get(str(user_id), {}).get('username', f"@{user_id}"))

    def format_time(time_str):
        time_str = clean_escaped_text(time_str)
        try:
            num_str = time_str.split()[0].replace(',', '.')
            minutes = float(num_str)
            if "–º–∏–Ω—É—Ç" in time_str.lower():
                pass
            elif "—á" in time_str.lower():
                minutes *= 60
            elif "–¥–Ω" in time_str.lower():
                minutes *= 1440
            days = int(minutes // 1440)
            hours = int((minutes % 1440) // 60)
            minutes = int(minutes % 60)
            time_description = ""
            if days > 0:
                time_description += f"{days} –¥–Ω. "
            if hours > 0:
                time_description += f"{hours} —á. "
            if minutes > 0:
                time_description += f"{minutes} –º–∏–Ω."
            return time_description.strip() or "0 –º–∏–Ω."
        except (ValueError, IndexError):
            return time_str

    history_summary = f"*–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* {username} - `{user_id}`:\n\n"
    for idx, entry in enumerate(gift_entries, 1):
        action = "–ø–æ–¥–∞—Ä–µ–Ω–æ" if entry['action'] == "spent" else "–ø–æ–ª—É—á–µ–Ω–æ"
        gift_type = []
        if entry['points'] > 0:
            gift_type.append(f"{format_number(entry['points'])} {pluralize_points(entry['points'])}")
        if "–≤—Ä–µ–º–µ–Ω–∏" in entry['reason']:
            reason_parts = clean_escaped_text(entry['reason']).split(': ')
            if len(reason_parts) > 1:
                time_part = reason_parts[-1].split(' (–æ—Ç –∞–¥–º–∏–Ω–∞)')[0]
                gift_type.append(format_time(time_part))
            else:
                gift_type.append("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
        gift_type = " –∏ ".join(gift_type) if gift_type else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫"
        reason = escape_markdown(clean_escaped_text(entry['reason']))
        history_summary += (
            f"üéÅ *‚Ññ{idx}. {action}:*\n\n"
            f"üí∞ *–ü–æ–¥–∞—Ä–æ–∫:* {gift_type}\n"
            f"üìÖ *–î–∞—Ç–∞:* {entry['date']}\n\n"
        )

    message_parts = split_message(history_summary)
    for part in message_parts:
        bot.send_message(message.chat.id, part, parse_mode="Markdown")

    manage_gifts(message)

# -------------------------------------------------- –ê–î–ú–ò–ù ---------------------------------------------------

def escape_markdown(text):
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

def get_root_admin_id():
    if admins_data:
        return next(iter(admins_data))
    return None

def is_root_admin(admin_id):
    return admin_id == get_root_admin_id()

def check_permission(admin_id, permission):
    if is_root_admin(admin_id):
        return True
    return permission in admins_data.get(str(admin_id), {}).get("permissions", [])

def generate_login_password_hash(username, password):
    return hashlib.sha256(f"{username}:{password}".encode()).hexdigest()

users_db_path = os.path.join('data', 'admin', 'admin_user_payments', 'users.json')

def ensure_directory_exists(path):
    os.makedirs(os.path.dirname(path), exist_ok=True)

def load_users_data():
    ensure_directory_exists(users_db_path)

    if not os.path.exists(users_db_path):
        with open(users_db_path, 'w', encoding='utf-8') as file:
            json.dump({}, file)
        return {}

    with open(users_db_path, 'r', encoding='utf-8') as file:
        content = file.read().strip()
        if not content:
            return {}
        return json.loads(content)

users_data = load_users_data()

@bot.message_handler(func=lambda message: message.text == '–ê–¥–º–∏–Ω' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_settings_menu(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ê–¥–º–∏–Ω'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞')
    markup.add('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', '–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞', '–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=markup)

# -------------------------------------------------- –ê–î–ú–ò–ù (—Å–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞) ---------------------------------------------------

def is_valid_username(username):
    if len(username) < 3:
        return False, "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤"
    if not re.search(r'[A-Z]', username):
        return False, "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É"
    if not re.search(r'[a-z]', username):
        return False, "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É"
    if not re.search(r'[0-9]', username):
        return False, "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É"
    return True, ""

def is_valid_password(password):
    if len(password) < 8:
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤"
    if not re.search(r'[A-Z]', password):
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É"
    if not re.search(r'[a-z]', password):
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É"
    if not re.search(r'[0-9]', password):
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É"
    if not re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª"
    return True, ""

@bot.message_handler(func=lambda message: message.text == '–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_change_credentials(message):
    global credentials_changed
    admin_id = str(message.chat.id)
    admin_data = admins_data.get(admin_id, {})

    if not check_permission(admin_id, '–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    has_credentials = admin_data.get("admins_username") and admin_data.get("login_password_hash_for_user_id")

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    if has_credentials:
        markup.add('–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å')
    markup.add('–°–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=markup)

# -------------------------------------------------- –ê–î–ú–ò–ù (—Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_change_password(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    password_requirements = (
        "üîí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å\n\n"
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:\n"
        "- üî¢ –ù–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "- üî° –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞\n"
        "- üî† –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞\n"
        "- üî¢ –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞\n"
        "- üî£ –•–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, !@#$%^&*(),.?\":{}|<>)"
    )
    msg = bot.send_message(message.chat.id, password_requirements, reply_markup=markup)
    bot.register_next_step_handler(msg, process_new_password)

@text_only_handler
def process_new_password(message):

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    new_password = message.text
    is_valid, error_message = is_valid_password(new_password)
    if not is_valid:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {error_message}! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(message, process_new_password)
        return

    if not is_password_unique(new_password):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π...")
        bot.register_next_step_handler(message, process_new_password)
        return

    update_admin_login_credentials(message, message.chat.id, new_password=new_password)
    bot.delete_message(message.chat.id, message.message_id)   

# -------------------------------------------------- –ê–î–ú–ò–ù (—Å–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–°–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_change_login_and_password(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–°–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    login_requirements = (
        "üîí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω\n\n"
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ª–æ–≥–∏–Ω—É:\n"
        "- üî¢ –ù–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "- üî° –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞\n"
        "- üî† –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞\n"
        "- üî¢ –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞"
    )
    msg = bot.send_message(message.chat.id, login_requirements, reply_markup=markup)
    bot.register_next_step_handler(msg, process_new_login_and_password_step1)

@text_only_handler
def process_new_login_and_password_step1(message):

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return
    new_login = message.text
    is_valid, error_message = is_valid_username(new_login)
    if not is_valid:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {error_message}! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(message, process_new_login_and_password_step1)
        return
    if any(admin.get("admins_username") == new_login for admin in admins_data.values()):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π...")
        bot.register_next_step_handler(message, process_new_login_and_password_step1)
        return
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    password_requirements = (
        "üîí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å\n\n"
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:\n"
        "- üî¢ –ù–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "- üî° –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞\n"
        "- üî† –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞\n"
        "- üî¢ –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞\n"
        "- üî£ –•–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, !@#$%^&*(),.?\":{}|<>)"
    )
    msg = bot.send_message(message.chat.id, password_requirements, reply_markup=markup)
    bot.register_next_step_handler(msg, process_new_login_and_password_step2, new_login)
    bot.delete_message(message.chat.id, message.message_id)  

@text_only_handler
def process_new_login_and_password_step2(message, new_login):

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    new_password = message.text
    is_valid, error_message = is_valid_password(new_password)
    if not is_valid:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {error_message}! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(message, process_new_login_and_password_step2, new_login)
        return

    if not is_password_unique(new_password):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π...")
        bot.register_next_step_handler(message, process_new_login_and_password_step2, new_login)
        return

    update_admin_login_credentials(message, message.chat.id, new_username=new_login, new_password=new_password)
    bot.delete_message(message.chat.id, message.message_id)   

# -------------------------------------------------- –ê–î–ú–ò–ù (—Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å) ---------------------------------------------------

def is_password_unique(new_password):
    for admin_data in admins_data.values():
        current_password_hash = admin_data.get("login_password_hash_for_user_id", "")
        current_username = admin_data.get("admins_username", "")
        if generate_login_password_hash(current_username, new_password) == current_password_hash:
            return False
    return True

def update_admin_login_credentials(message, admin_id, new_username=None, new_password=None):
    global credentials_changed
    admin_id = str(admin_id)
    if admin_id not in admins_data:
        bot.send_message(admin_id, "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    current_username = admins_data[admin_id].get("admins_username", "")
    current_password_hash = admins_data[admin_id].get("login_password_hash_for_user_id", "")

    if new_username:
        current_username = new_username

    if new_password:
        current_password_hash = generate_login_password_hash(current_username, new_password)

    admins_data[admin_id]["admins_username"] = current_username
    admins_data[admin_id]["login_password_hash_for_user_id"] = current_password_hash
    admins_data[admin_id]["is_new"] = False
    save_admin_data(admin_sessions, admins_data, login_password_hash)
    bot.send_message(admin_id, "–î–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

    credentials_changed = True

    bot.send_message(admin_id, "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω—ã!\n\nüîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /admin")
    return_to_menu(message)

# -------------------------------------------------- –ê–î–ú–ò–ù (–¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_add_admin(message):
    root_admin_id = get_root_admin_id()
    if str(message.chat.id) != root_admin_id:
        bot.send_message(message.chat.id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! –¢–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    users_data = load_users_data()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`")

    if user_list:
        response_message = "üìã –°–ø–∏—Å–æ–∫ *–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*:\n\n" + "\n\n".join(user_list)
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    if removed_admins:
        removed_admin_list = []
        for admin_id, data in removed_admins.items():
            username = escape_markdown(data['username'])
            removed_admin_list.append(f"‚Ññ{len(removed_admin_list) + 1}. {username} - `{admin_id}`")

        response_message = "üìã –°–ø–∏—Å–æ–∫ *—É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤*:\n\n" + "\n".join(removed_admin_list)
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä–∞*, *id* –∏–ª–∏ *username* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=markup, parse_mode="Markdown"
    )
    bot.register_next_step_handler(message, process_add_admin, root_admin_id, message.chat.id)

def list_removed_admins(message):
    removed_admin_list = []
    for admin_id, data in removed_admins.items():
        username = escape_markdown(data['username'])
        removed_admin_list.append(f"‚Ññ{len(removed_admin_list) + 1}. {username} - `{admin_id}`")

    if removed_admin_list:
        response_message = "üìã –°–ø–∏—Å–æ–∫ *—É–¥–∞–ª—ë–Ω–Ω—ã—Ö* –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n" + "\n\n".join(removed_admin_list)
        if len(response_message) > 4096:
            bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
        else:
            bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä–∞*, *id* –∏–ª–∏ *username* –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)

def process_add_admin(message, root_admin_id, initiator_chat_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω":
        show_settings_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    input_data = message.text.strip()
    admin_ids = []

    parts = input_data.split(',')
    for part in parts:
        part = part.strip()
        if part.isdigit():
            if len(part) < 5:
                index = int(part) - 1
                if 0 <= index < len(users_data):
                    user_id = list(users_data.keys())[index]
                    admin_ids.append(user_id)
                else:
                    bot.send_message(message.chat.id, f"‚ùå –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å *–Ω–æ–º–µ—Ä–æ–º* `{part}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", parse_mode="Markdown")
                    bot.register_next_step_handler(message, process_add_admin, root_admin_id, initiator_chat_id)
                    return
            else:
                user_id = part
                if user_id not in users_data and user_id not in removed_admins:
                    bot.send_message(message.chat.id, f"‚ùå –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å *id* `{user_id}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", parse_mode="Markdown")
                    bot.register_next_step_handler(message, process_add_admin, root_admin_id, initiator_chat_id)
                    return
                admin_ids.append(user_id)
        else:
            username = part
            user_id = next(
                (user_id for user_id, data in users_data.items() if data.get("username") == username),
                None
            )
            if not user_id:
                bot.send_message(message.chat.id, f"‚ùå –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å *username* {escape_markdown(username)} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", parse_mode="Markdown")
                bot.register_next_step_handler(message, process_add_admin, root_admin_id, initiator_chat_id)
                return
            admin_ids.append(user_id)

    for admin_id in admin_ids:
        if admin_id in admins_data:
            username = users_data.get(admin_id, {}).get("username", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            bot.send_message(message.chat.id, f"‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å {escape_markdown(username)} - `{admin_id}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", parse_mode="Markdown")
            continue
        username = users_data[admin_id]["username"]
        add_admin(admin_id, username, permissions=["–ê–¥–º–∏–Ω", "–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞", "–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", "–°–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π", "–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫", "–í–µ—Ä—Å–∏—è –∏ –∞–ø—Ç–∞–π–º"], initiator_chat_id=initiator_chat_id)
        if admin_id in removed_admins:
            del removed_admins[admin_id]

    save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins)
    show_settings_menu(message)

def add_admin(admin_id, username, permissions=None, initiator_chat_id=None):
    admin_id = str(admin_id)
    if permissions is None:
        permissions = ["–ê–¥–º–∏–Ω", "–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞", "–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", "–°–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π", "–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫", "–í–µ—Ä—Å–∏—è –∏ –∞–ø—Ç–∞–π–º"]
    user_data = {
        "user_id": admin_id,
        "first_name": " ",
        "last_name": " ",
        "username": username,
        "phone": " ",
        "permissions": permissions,
        "is_new": True
    }
    admins_data[admin_id] = user_data
    admin_sessions.append(admin_id)
    save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins)

    try:
        bot.send_message(admin_id, "‚úÖ –í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –ø–æ –∫–æ–º–∞–Ω–¥–µ /admin –¥–æ—Å—Ç—É–ø–µ–Ω...")
        if initiator_chat_id:
            bot.send_message(initiator_chat_id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {escape_markdown(username)} - `{admin_id}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode="Markdown")
    except ApiTelegramException as e:
        if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
            if admin_id not in blocked_users:
                blocked_users.append(admin_id)
                save_blocked_users(blocked_users)
        else:
            raise e

# -------------------------------------------------- –ê–î–ú–ò–ù (—É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_remove_admin(message):
    root_admin_id = get_root_admin_id()
    if str(message.chat.id) != root_admin_id:
        bot.send_message(message.chat.id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! –¢–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    list_admins_for_removal(message)
    bot.register_next_step_handler(message, process_remove_admin, root_admin_id, message.chat.id)

def list_admins_for_removal(message):
    admin_list = []
    for admin_id, data in admins_data.items():
        username = escape_markdown(data['username'])
        admin_list.append(f"‚Ññ{len(admin_list) + 1}. {username} - `{admin_id}`")

    if admin_list:
        response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n" + "\n\n".join(admin_list)
        if len(response_message) > 4096:
            bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
        else:
            bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä–∞*, *id* –∏–ª–∏ *username* –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup, parse_mode="Markdown")

admin_sessions_db_path = os.path.join('data', 'admin', 'admin_user_payments', 'admin_sessions.json')

def ensure_directory_exists(path):
    os.makedirs(os.path.dirname(path), exist_ok=True)

def load_admin_sessions_data():
    ensure_directory_exists(admin_sessions_db_path)

    if not os.path.exists(admin_sessions_db_path):
        with open(admin_sessions_db_path, 'w', encoding='utf-8') as file:
            json.dump({}, file) 

    with open(admin_sessions_db_path, 'r', encoding='utf-8') as file:
        return json.load(file)

admin_sessions_data = load_admin_sessions_data()

def process_remove_admin(message, root_admin_id, initiator_chat_id):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω":
        show_settings_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    input_data = message.text.strip()
    admin_ids = []

    parts = input_data.split(',')
    for part in parts:
        part = part.strip()
        if part.isdigit() and len(part) < 5:
            index = int(part) - 1
            if 0 <= index < len(admins_data):
                admin_id = list(admins_data.keys())[index]
                admin_ids.append(admin_id)
            else:
                bot.send_message(message.chat.id, f"‚ùå –¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å *–Ω–æ–º–µ—Ä–æ–º* `{part}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", parse_mode="Markdown")
                bot.register_next_step_handler(message, process_remove_admin, root_admin_id, initiator_chat_id)
                return
        elif part.isdigit():
            admin_id = part
            if admin_id not in admins_data:
                bot.send_message(message.chat.id, f"‚ùå –¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å *id* `{admin_id}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", parse_mode="Markdown")
                bot.register_next_step_handler(message, process_remove_admin, root_admin_id, initiator_chat_id)
                return
            admin_ids.append(admin_id)
        else:
            username = part
            admin_id = next(
                (user_id for user_id, data in admins_data.items() if data.get("username") == username),
                None
            )
            if not admin_id:
                bot.send_message(message.chat.id, f"‚ùå –¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å *username* {escape_markdown(username)} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", parse_mode="Markdown")
                bot.register_next_step_handler(message, process_remove_admin, root_admin_id, initiator_chat_id)
                return
            admin_ids.append(admin_id)

    for admin_id in admin_ids:
        if str(message.chat.id) == admin_id:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
            continue
        if admin_id == root_admin_id:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            continue
        remove_admin(admin_id, initiator_chat_id)

    show_settings_menu(message)

def remove_admin(admin_id, initiator_chat_id):
    admin_id = str(admin_id)
    if admin_id in admins_data:
        admin_username = admins_data[admin_id]["username"]
        removed_admins[admin_id] = {"username": admin_username}

        del admins_data[admin_id]
        if admin_id in admin_sessions:
            admin_sessions.remove(admin_id)

        save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins)

        try:
            bot.send_message(admin_id, "üö´ –í–∞—Å —É–¥–∞–ª–∏–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            bot.send_message(initiator_chat_id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {escape_markdown(admin_username)} - `{admin_id}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", parse_mode="Markdown")
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                if admin_id not in blocked_users:
                    blocked_users.append(admin_id)
                    save_blocked_users(blocked_users)
            else:
                raise e
    else:
        bot.send_message(initiator_chat_id, f"‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å *id* `{admin_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")

# -------------------------------------------------- –ê–î–ú–ò–ù (–ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞) ---------------------------------------------------

def check_permission(admin_id, permission):
    if is_root_admin(admin_id):
        return True

    current_permissions = admins_data.get(str(admin_id), {}).get("permissions", [])

    for perm in current_permissions:
        if perm.split(':')[-1].strip() == permission.split(':')[-1].strip():
            return True
    return False

def escape_markdown(text):
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

def format_permissions(permissions):
    formatted_permissions = []
    counter = 1

    for perm in permissions:
        formatted_permissions.append(f"‚öôÔ∏è ‚Ññ{counter}. {perm}")
        counter += 1

    return "\n".join(formatted_permissions)

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞' and str(message.chat.id) in admin_sessions)
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_permissions(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    list_admins(message)

def list_admins(message):
    admin_list = []
    for admin_id, data in admins_data.items():
        username = data['username']
        escaped_username = escape_markdown(username)
        admin_list.append(f"‚Ññ{len(admin_list) + 1}. {escaped_username} - `{admin_id}`")

    if admin_list:
        response_message = "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n" + "\n\n".join(admin_list)
        try:
            bot.send_message(message.chat.id, response_message, parse_mode="Markdown")
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                pass
                if message.chat.id not in blocked_users:
                    blocked_users.append(message.chat.id)
                    save_blocked_users(blocked_users)
            else:
                raise e

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    try:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä*, *id* –∏–ª–∏ *username* –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ –ø—Ä–∞–≤:", reply_markup=markup, parse_mode="Markdown")
    except ApiTelegramException as e:
        if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
            pass
            if message.chat.id not in blocked_users:
                blocked_users.append(message.chat.id)
                save_blocked_users(blocked_users)
        else:
            raise e
    bot.register_next_step_handler(message, process_admin_selection)

@text_only_handler
def process_admin_selection(message):
    if message.chat.id in blocked_users:
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω":
        show_settings_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    input_data = message.text.strip()

    try:
        if input_data.isdigit() and len(input_data) < 5:
            admin_number = int(input_data)
            if admin_number < 1 or admin_number > len(admins_data):
                raise ValueError
            admin_id = list(admins_data.keys())[admin_number - 1]
        elif input_data.isdigit():
            admin_id = input_data
            if admin_id not in admins_data:
                bot.send_message(message.chat.id, f"‚ùå –¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID `{admin_id}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
                bot.register_next_step_handler(message, process_admin_selection)
                return
        else:
            admin_id = next((key for key, data in admins_data.items() if data.get('username') == input_data), None)
            if not admin_id:
                bot.send_message(message.chat.id, f"‚ùå –¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{input_data}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
                bot.register_next_step_handler(message, process_admin_selection)
                return

        admin_data = admins_data[admin_id]
        permissions = admin_data.get("permissions", [])

        if is_root_admin(admin_id):
            bot.send_message(message.chat.id, "‚ö†Ô∏è *–ö–æ—Ä–Ω–µ–≤–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±–ª–∞–¥–∞–µ—Ç –≤—Å–µ–º–∏ –ø—Ä–∞–≤–∞–º–∏!*", parse_mode="Markdown")
            show_settings_menu(message)
            return

        escaped_username = escape_markdown(admin_data['username'])
        permissions_list = format_permissions_with_headers(permissions)
        bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {escaped_username} - `{admin_id}`:\n\n{permissions_list}", parse_mode="Markdown")

        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞', '–£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∞')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–∞–≤:", reply_markup=markup)
        bot.register_next_step_handler(message, process_permission_action, admin_id)

    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä*, *id* –∏–ª–∏ *username* –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_admin_selection)

def get_available_permissions(admin_id):
    current_permissions = admins_data.get(admin_id, {}).get("permissions", [])
    unique_permissions = set(perm.split(':')[-1].strip() for perm in current_permissions)
    available_permissions = [perm for perm in ALL_PERMISSIONS if perm.split(':')[-1].strip() not in unique_permissions]
    return available_permissions

def format_permissions_with_headers(permissions):
    formatted_permissions = []
    counter = 1

    formatted_permissions.append("*–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∞:*")
    for main_func in MAIN_FUNCTIONS:
        if any(perm.split(':')[-1].strip() == main_func for perm in permissions):
            formatted_permissions.append(f"‚öôÔ∏è ‚Ññ{counter}. {main_func}")
            counter += 1
    formatted_permissions.append("")

    for main_func in MAIN_FUNCTIONS:
        sub_permissions = [perm.split(':')[-1].strip() for perm in permissions if perm.startswith(main_func) and perm.split(':')[-1].strip() != main_func]
        if sub_permissions:
            formatted_permissions.append(f"*–ü—Ä–∞–≤–∞ –≤ \"{main_func}\":*")
            for perm in sub_permissions:
                formatted_permissions.append(f"‚öôÔ∏è ‚Ññ{counter}. {perm}")
                counter += 1
            formatted_permissions.append("")

    other_permissions = [perm.split(':')[-1].strip() for perm in permissions if not any(perm.startswith(main_func) for main_func in MAIN_FUNCTIONS)]
    if other_permissions:
        formatted_permissions.append("*–î—Ä—É–≥–∏–µ –ø—Ä–∞–≤–∞:*")
        for perm in other_permissions:
            formatted_permissions.append(f"‚öôÔ∏è ‚Ññ{counter}. {perm}")
            counter += 1

    return "\n".join(formatted_permissions)

def format_permissions_as_list(permissions):
    formatted_permissions = []
    counter = 1

    for perm in permissions:
        formatted_permissions.append(f"‚öôÔ∏è ‚Ññ{counter}. {perm}")
        counter += 1

    return "\n".join(formatted_permissions)

def process_permission_action(message, admin_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω":
        show_settings_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if message.text == '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞':
        if not check_permission(str(message.chat.id), '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞'):
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
            return

        available_permissions = get_available_permissions(admin_id)
        permissions_list = format_permissions_with_headers(available_permissions)
        bot.send_message(message.chat.id, f"*–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è*:\n\n{permissions_list}", parse_mode="Markdown")

        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è *–¥–æ–±–∞–≤–ª–µ–Ω–∏—è*:", parse_mode="Markdown", reply_markup=markup)
        bot.register_next_step_handler(message, process_add_permissions, admin_id, available_permissions)

    elif message.text == '–£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∞':
        if not check_permission(str(message.chat.id), '–£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∞'):
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
            return

        current_permissions = admins_data[admin_id].get("permissions", [])
        permissions_list = format_permissions_as_list(current_permissions)
        bot.send_message(message.chat.id, f"*–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{permissions_list}", parse_mode="Markdown")

        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è *—É–¥–∞–ª–µ–Ω–∏—è*:", parse_mode="Markdown", reply_markup=markup)
        bot.register_next_step_handler(message, process_remove_permissions, admin_id, current_permissions)

def format_permissions_with_main_functions(permissions):
    formatted_permissions = []
    counter = 1

    formatted_permissions.append("*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*")
    for main_func in MAIN_FUNCTIONS:
        formatted_permissions.append(f"‚öôÔ∏è ‚Ññ{counter}. {main_func}")
        counter += 1
    formatted_permissions.append("")

    for main_func in MAIN_FUNCTIONS:
        sub_permissions = [perm for perm in permissions if perm.startswith(main_func) and perm != main_func]
        if sub_permissions:
            formatted_permissions.append(f"*{main_func}:*")
            for perm in sub_permissions:
                formatted_permissions.append(f"‚öôÔ∏è ‚Ññ{counter}. {perm.split(': ')[1]}")
                counter += 1
            formatted_permissions.append("")

    return "\n".join(formatted_permissions)

@text_only_handler
def process_add_permissions(message, admin_id, available_permissions):
    if message.chat.id in blocked_users:
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω":
        show_settings_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        permission_numbers = [int(num.strip()) - 1 for num in message.text.split(',')]
        permissions_to_add = []
        invalid_permissions = []

        for num in permission_numbers:
            if 0 <= num < len(available_permissions):
                permission = available_permissions[num].split(':')[-1].strip()
                if permission in admins_data[admin_id].get("permissions", []):
                    bot.send_message(message.chat.id, f"‚ùå –ü—Ä–∞–≤–æ *{escape_markdown(permission)}* —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
                    bot.register_next_step_handler(message, process_add_permissions, admin_id, available_permissions)
                    return
                permissions_to_add.append(permission)
            else:
                invalid_permissions.append(str(num + 1))

        if invalid_permissions:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∞: *{', '.join(invalid_permissions)}*! –≠—Ç–∏ –ø—Ä–∞–≤–∞ –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")

        if permissions_to_add:
            admins_data[admin_id].setdefault("permissions", []).extend(permissions_to_add)
            save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins)

            admin_data = admins_data[admin_id]
            escaped_username = escape_markdown(admin_data['username'])
            escaped_permissions_to_add = [escape_markdown(permission.lower()) for permission in permissions_to_add]

            bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–∞–≤–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ {escaped_username} - `{admin_id}` –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", parse_mode="Markdown")
            try:
                bot.send_message(admin_id, f"‚ö†Ô∏è –í–∞—à–∏ –ø—Ä–∞–≤–∞ –±—ã–ª–∏ *–∏–∑–º–µ–Ω–µ–Ω—ã*!\n\n‚úÖ *–î–æ–±–∞–≤–ª–µ–Ω—ã* –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∞: _{', '.join(escaped_permissions_to_add)}_", parse_mode="Markdown")
            except ApiTelegramException as e:
                if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                    pass
                    if admin_id not in blocked_users:
                        blocked_users.append(admin_id)
                        save_blocked_users(blocked_users)
                else:
                    raise e
            show_settings_menu(message)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, process_add_permissions, admin_id, available_permissions)

    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(message, process_add_permissions, admin_id, available_permissions)

@text_only_handler
def process_remove_permissions(message, admin_id, current_permissions):
    if message.chat.id in blocked_users:
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω":
        show_settings_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        permission_numbers = [int(num.strip()) - 1 for num in message.text.split(',')]
        permissions_to_remove = []
        invalid_permissions = []

        for num in permission_numbers:
            if 0 <= num < len(current_permissions):
                permissions_to_remove.append(current_permissions[num])
            else:
                invalid_permissions.append(str(num + 1))

        if invalid_permissions:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∞: *{', '.join(invalid_permissions)}*! –≠—Ç–∏ –ø—Ä–∞–≤–∞ –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")

        if permissions_to_remove:
            updated_permissions = [perm for perm in current_permissions if perm not in permissions_to_remove]
            admins_data[admin_id]["permissions"] = updated_permissions
            save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins)

            escaped_username = escape_markdown(admins_data[admin_id]['username'])
            escaped_removed = ', '.join(escape_markdown(perm.lower()) for perm in permissions_to_remove)

            bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–∞–≤–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {escaped_username} - `{admin_id}` –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", parse_mode="Markdown")
            try:
                bot.send_message(admin_id, f"‚ö†Ô∏è –í–∞—à–∏ –ø—Ä–∞–≤–∞ –±—ã–ª–∏ *–∏–∑–º–µ–Ω–µ–Ω—ã*!\n\n‚ùå *–£–¥–∞–ª–µ–Ω—ã* –ø—Ä–∞–≤–∞: _{escaped_removed}_", parse_mode="Markdown")
            except ApiTelegramException as e:
                if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                    pass
                    if admin_id not in blocked_users:
                        blocked_users.append(admin_id)
                        save_blocked_users(blocked_users)
                else:
                    raise e

            show_settings_menu(message)
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!", parse_mode="Markdown")
            bot.register_next_step_handler(message, process_remove_permissions, admin_id, current_permissions)

    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_remove_permissions, admin_id, current_permissions)
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# -------------------------------------------------- –ë–ê–ù ---------------------------------------------------

TELEGRAM_MESSAGE_LIMIT = 4096
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
BACKUP_DIR = os.path.join(BASE_DIR, 'backups')
FILES_PATH = os.path.join(BASE_DIR, 'data')
ADDITIONAL_FILES_PATH = os.path.join(BASE_DIR, 'files')
ADMIN_SESSIONS_FILE = os.path.join(BASE_DIR, 'data', 'admin', 'admin_user_payments', 'admin_sessions.json')
USER_DATA_PATH = os.path.join(BASE_DIR, 'data', 'admin', 'admin_user_payments', 'users.json')

def load_admin_sessions():
    with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
        data = json.load(file)
    return data['admin_sessions']

def check_admin_access(message):
    admin_sessions = load_admin_sessions()
    if str(message.chat.id) in admin_sessions:
        return True
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç *–ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!", parse_mode="Markdown")
        return False

def save_user_data(user_data):
    with open(USER_DATA_PATH, 'w', encoding='utf-8') as file:
        json.dump(user_data, file, ensure_ascii=False, indent=4)

def load_user_data():
    if os.path.exists(USER_DATA_PATH):
        with open(USER_DATA_PATH, 'r', encoding='utf-8') as file:
            return json.load(file)
    return {}

def is_user_blocked(user_id):
    users_data = load_user_data()
    return users_data.get(str(user_id), {}).get('blocked', False)

def block_user(user_id):
    users_data = load_user_data()
    root_admin_id = get_root_admin()
    if str(user_id) == root_admin_id:
        return None, None, False  
    if str(user_id) in users_data:
        if users_data[str(user_id)].get('blocked'):
            return None, None, True  
        users_data[str(user_id)]['blocked'] = True
        save_user_data(users_data)
        return users_data[str(user_id)]['username'], user_id, False
    return None, None, False

def unblock_user(user_id):
    users_data = load_user_data()
    root_admin_id = get_root_admin()
    if str(user_id) == root_admin_id:
        return None, None, False  
    if str(user_id) in users_data:
        if not users_data[str(user_id)].get('blocked'):
            return None, None, True  
        users_data[str(user_id)]['blocked'] = False
        save_user_data(users_data)
        return users_data[str(user_id)]['username'], user_id, False
    return None, None, False

def get_user_id_by_username(username):
    users_data = load_users_data()
    username_to_check = username.lstrip('@')
    for user_id, data in users_data.items():
        if 'username' in data and data['username'].lstrip('@') == username_to_check:
            return int(user_id)
    return None

def escape_markdown(text):
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

def get_root_admin():
    with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
        data = json.load(file)
    root_admin_id = data['admin_sessions'][0]
    return root_admin_id

@bot.message_handler(func=lambda message: message.text == '–ë–∞–Ω' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def ban_user_prompt(message):
    if message.chat.id in blocked_users:
        return

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ë–∞–Ω'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    list_users_for_ban(message)

def list_users_for_ban(message):
    users_data = load_user_data()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
    markup.add("–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    markup.add("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
    bot.register_next_step_handler(message, choose_ban_action)

@check_user_blocked
@log_user_actions
def choose_ban_action(message):
    if message.text == "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å":
        admin_id = str(message.chat.id)
        if not check_permission(admin_id, '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'):
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
            return

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω")
        markup.add("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä*, *id* –∏–ª–∏ *username* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è *–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏* —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_block_user)

    elif message.text == "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å":
        admin_id = str(message.chat.id)
        if not check_permission(admin_id, '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'):
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
            return

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω")
        markup.add("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä*, *id* –∏–ª–∏ *username* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏* —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_unblock_user)

    elif message.text == "–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        admin_id = str(message.chat.id)
        if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'):
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
            return
        delete_user_data(message)

    elif message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)

# -------------------------------------------------- –ë–ê–ù (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å) ---------------------------------------------------

def process_block_user(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω":
        ban_user_prompt(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_inputs = message.text.strip().split(',')
    users_data = load_user_data()
    admin_id = str(message.chat.id)
    root_admin_id = get_root_admin()

    for user_input in user_inputs:
        user_input = user_input.strip()
        user_id = None

        if user_input.isdigit():
            if int(user_input) <= len(users_data):
                user_id = list(users_data.keys())[int(user_input) - 1]
            else:
                user_id = int(user_input)
        elif user_input.startswith('@'):
            user_id = get_user_id_by_username(user_input[1:])
        else:
            for uid, data in users_data.items():
                if data['username'] == f"@{user_input}":
                    user_id = uid
                    break

        if user_id and str(user_id) in users_data:
            if str(user_id) == root_admin_id:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–ª—å–∑—è *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å* –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", parse_mode="Markdown")
                continue
            if str(user_id) == admin_id:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–ª—å–∑—è *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å* —Å–∞–º–æ–≥–æ —Å–µ–±—è!", parse_mode="Markdown")
                continue

            username = users_data[str(user_id)]['username']
            _, _, already_blocked = block_user(user_id)
            if already_blocked:
                bot.send_message(message.chat.id, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {escape_markdown(username)} - `{user_id}` —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", parse_mode="Markdown")
            else:
                bot.send_message(message.chat.id, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {escape_markdown(username)} - `{user_id}` –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", parse_mode="Markdown")
                bot.send_message(user_id, "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{escape_markdown(user_input)}* –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")

    ban_user_prompt(message)

# -------------------------------------------------- –ë–ê–ù (—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å) ---------------------------------------------------

def process_unblock_user(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω":
        ban_user_prompt(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_inputs = message.text.strip().split(',')
    users_data = load_user_data()
    admin_id = str(message.chat.id)
    root_admin_id = get_root_admin()

    for user_input in user_inputs:
        user_input = user_input.strip()
        user_id = None

        if user_input.isdigit():
            if int(user_input) <= len(users_data):
                user_id = list(users_data.keys())[int(user_input) - 1]
            else:
                user_id = int(user_input)
        elif user_input.startswith('@'):
            user_id = get_user_id_by_username(user_input[1:])
        else:
            for uid, data in users_data.items():
                if data['username'] == f"@{user_input}":
                    user_id = uid
                    break

        if user_id and str(user_id) in users_data:
            if str(user_id) == root_admin_id:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–ª—å–∑—è *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å* –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", parse_mode="Markdown")
                continue
            if str(user_id) == admin_id:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–ª—å–∑—è *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å* —Å–∞–º–æ–≥–æ —Å–µ–±—è!", parse_mode="Markdown")
                continue

            username = users_data[str(user_id)]['username']
            _, _, already_unblocked = unblock_user(user_id)
            if already_unblocked:
                bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {escape_markdown(username)} - `{user_id}` —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", parse_mode="Markdown")
            else:
                bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {escape_markdown(username)} - `{user_id}` —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", parse_mode="Markdown")
                bot.send_message(user_id, "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{escape_markdown(user_input)}* –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")

    ban_user_prompt(message)

# -------------------------------------------------- –ë–ê–ù (—É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ) ---------------------------------------------------

def delete_user_data(message):
    if message.chat.id in blocked_users:
        return
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω")
    markup.add("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä*, *username* –∏–ª–∏ *id* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_delete_user_data)

def process_delete_user_data(message):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω":
        ban_user_prompt(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_inputs = message.text.strip().split(',')
    users_data = load_user_data()
    admin_id = str(message.chat.id)
    root_admin_id = get_root_admin()

    for user_input in user_inputs:
        user_input = user_input.strip()
        user_id = None

        if user_input.isdigit():
            if int(user_input) <= len(users_data):
                user_id = list(users_data.keys())[int(user_input) - 1]
            else:
                user_id = int(user_input)
        elif user_input.startswith('@'):
            user_id = get_user_id_by_username(user_input[1:])
        else:
            for uid, data in users_data.items():
                if data['username'] == f"@{user_input}":
                    user_id = uid
                    break

        if user_id is None:
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º *username* –∏–ª–∏ *id* –Ω–µ –Ω–∞–π–¥–µ–Ω: {user_input}!", parse_mode="Markdown")
            continue

        if str(user_id) == root_admin_id:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {escape_markdown(user_input)} - `{user_id}`!", parse_mode="Markdown")
            continue

        if str(user_id) == admin_id:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∞–º–æ–≥–æ —Å–µ–±—è {escape_markdown(user_input)} - `{user_id}`!", parse_mode="Markdown")
            continue

        delete_user_data_recursively(user_id, BASE_DIR)
        username = users_data[str(user_id)]['username']
        users_data.pop(str(user_id), None)
        save_user_data(users_data)

        bot.send_message(message.chat.id, f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {escape_markdown(username)} - `{user_id}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")

    ban_user_prompt(message)

def delete_user_data_recursively(user_id, current_dir):
    for root, dirs, files in os.walk(current_dir):
        for file in files:
            if file.endswith('.json'):
                file_path = os.path.join(root, file)
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                except (json.JSONDecodeError, UnicodeDecodeError):
                    try:
                        with open(file_path, 'r', encoding='windows-1251') as f:
                            data = json.load(f)
                    except Exception:
                        continue

                def remove_user_data(obj):
                    if isinstance(obj, dict):
                        keys_to_delete = [key for key in obj if key == str(user_id)]
                        for key in keys_to_delete:
                            del obj[key]
                        for value in obj.values():
                            remove_user_data(value)
                    elif isinstance(obj, list):
                        obj[:] = [item for item in obj if item != str(user_id)]
                        for item in obj:
                            remove_user_data(item)

                remove_user_data(data)

                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=4)

def delete_user_from_users_db(message, user_id=None, username=None):
    if not os.path.exists(USER_DATA_PATH):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return

    try:
        with open(USER_DATA_PATH, 'r', encoding='utf-8') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        bot.send_message(message.chat.id, f"–§–∞–π–ª {USER_DATA_PATH} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        return
    except UnicodeDecodeError:
        try:
            with open(USER_DATA_PATH, 'r', encoding='windows-1251') as file:
                users_data = json.load(file)
        except json.JSONDecodeError:
            bot.send_message(message.chat.id, f"–§–∞–π–ª {USER_DATA_PATH} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
            return
        except UnicodeDecodeError:
            bot.send_message(message.chat.id, f"–§–∞–π–ª {USER_DATA_PATH} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É!")
            return

    if user_id:
        if str(user_id) not in users_data:
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å *id* `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
            return
        users_data.pop(str(user_id), None)
    elif username:
        username = username.lstrip('@')
        found = False
        for user_id, data in users_data.items():
            if data.get('username') == f"@{username}":
                users_data.pop(user_id, None)
                found = True
                break
        if not found:
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å *username* @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
            return

    with open(USER_DATA_PATH, 'w', encoding='utf-8') as file:
        json.dump(users_data, file, ensure_ascii=False, indent=4)

def delete_user_data_by_id(message, user_id):
    if not os.path.exists(USER_DATA_PATH):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return

    users_data = load_user_data()
    if str(user_id) not in users_data:
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å *id* `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
        return

    root_admin_id = get_root_admin()
    admin_id = str(message.chat.id)

    if str(user_id) == root_admin_id:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å *id* `{user_id}` - –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", parse_mode="Markdown")
        return

    if str(user_id) == admin_id:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å *id* `{user_id}` - –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∞–º–æ–≥–æ —Å–µ–±—è!", parse_mode="Markdown")
        return

    for root, dirs, files in os.walk(BASE_DIR):
        for file in files:
            if file.endswith('.json'):
                file_path = os.path.join(root, file)

                if str(user_id) in file:
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            data = json.load(f)
                    except json.JSONDecodeError:
                        continue
                    except UnicodeDecodeError:
                        try:
                            with open(file_path, 'r', encoding='windows-1251') as f:
                                data = json.load(f)
                        except json.JSONDecodeError:
                            continue
                        except UnicodeDecodeError:
                            continue

                    if isinstance(data, list):
                        updated_data = [item for item in data if item != str(user_id)]
                        if len(updated_data) < len(data):
                            data = updated_data
                    elif isinstance(data, dict):
                        if 'admin_sessions' in data and str(user_id) in data['admin_sessions']:
                            data['admin_sessions'].remove(str(user_id))
                        if 'admins_data' in data and str(user_id) in data['admins_data']:
                            data['admins_data'].pop(str(user_id))
                    else:
                        continue

                else:
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            data = json.load(f)
                    except json.JSONDecodeError:
                        continue
                    except UnicodeDecodeError:
                        try:
                            with open(file_path, 'r', encoding='windows-1251') as f:
                                data = json.load(f)
                        except json.JSONDecodeError:
                            continue
                        except UnicodeDecodeError:
                            continue

                    if isinstance(data, dict):
                        if str(user_id) in data:
                            data.pop(str(user_id), None)
                        else:
                            continue
                    elif isinstance(data, list):
                        updated_data = []
                        for item in data:
                            if isinstance(item, dict) and item.get('user_id') == user_id:
                                continue
                            else:
                                updated_data.append(item)
                        data = updated_data
                    else:
                        continue

                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=4)

    users_data.pop(str(user_id), None)
    save_user_data(users_data)

# -------------------------------------------------- –§–£–ù–ö–¶–ò–ò ---------------------------------------------------

ADMIN_SESSIONS_FILE = 'data/admin/admin_user_payments/admin_sessions.json'
FUNCTIONS_STATE_PATH = 'data/admin/functions/functions_state.json'

def check_admin_access(message):
    admin_sessions = load_admin_sessions()
    if str(message.chat.id) in admin_sessions:
        return True
    else:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return False

def load_admin_sessions():
    try:
        with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
            data = json.load(file)
        return data['admin_sessions']
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def load_function_states():
    if os.path.exists(FUNCTIONS_STATE_PATH):
        try:
            with open(FUNCTIONS_STATE_PATH, 'r', encoding='utf-8') as file:
                data = json.load(file)
                if data:
                    return data
        except json.JSONDecodeError:
            pass
    save_function_states({})
    return {}

def save_function_states(states):
    os.makedirs(os.path.dirname(FUNCTIONS_STATE_PATH), exist_ok=True)
    with open(FUNCTIONS_STATE_PATH, 'w', encoding='utf-8') as file:
        json.dump(states, file, ensure_ascii=False, indent=4)

function_states = load_function_states()

def load_functions_and_permissions():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    json_dir = os.path.join(script_dir, 'files', 'files_for_bot')
    json_path = os.path.join(json_dir, 'functions_and_permissions.json')
    
    os.makedirs(json_dir, exist_ok=True)
    
    if not os.path.exists(json_path):
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump({"new_functions": {}, "all_permissions": [], "main_functions": []}, f, ensure_ascii=False, indent=4)
    
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get('new_functions', {}), data.get('all_permissions', []), data.get('main_functions', [])
    except json.JSONDecodeError:
        return {}, [], []
    
NEW_FUNCTIONS, ALL_PERMISSIONS, MAIN_FUNCTIONS = load_functions_and_permissions()

def update_function_states():
    global function_states
    updated = False
    for category, functions in NEW_FUNCTIONS.items():
        for function_name in functions:
            if function_name not in function_states:
                function_states[function_name] = {"state": True, "deactivation_time": None}
                updated = True
    if updated:
        save_function_states(function_states)

update_function_states()

def activate_function(function_name):
    return set_function_state(function_name, True)

def activate_function_later(function_name, delay):
    threading.Timer(delay.total_seconds(), lambda: notify_admin_and_activate(function_name)).start()

def deactivate_function(function_name, deactivation_time):
    return set_function_state(function_name, False, deactivation_time)

def set_function_state(function_name, state, deactivation_time=None):
    if function_name in function_states:
        function_states[function_name]['state'] = state
        function_states[function_name]['deactivation_time'] = deactivation_time
        save_function_states(function_states)
        return f"‚úÖ –§—É–Ω–∫—Ü–∏—è *{function_name}* —É—Å–ø–µ—à–Ω–æ {'–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' if state else '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'}!"
    else:
        return "‚ùå –§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"

@bot.message_handler(func=lambda message: message.text == '–§—É–Ω–∫—Ü–∏–∏' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def toggle_functions(message):
    admin_id = str(message.chat.id)
    blocked_users = load_blocked_users()

    if admin_id in blocked_users:
        return

    if not check_permission(admin_id, '–§—É–Ω–∫—Ü–∏–∏'):
        try:
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                pass
                if admin_id not in blocked_users:
                    blocked_users.append(admin_id)
                    save_blocked_users(blocked_users)
            else:
                raise e
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton('–í–∫–ª—é—á–µ–Ω–∏–µ'), types.KeyboardButton('–í—ã–∫–ª—é—á–µ–Ω–∏–µ'))
    markup.add(types.KeyboardButton('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'))
    try:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π:", reply_markup=markup)
    except ApiTelegramException as e:
        if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
            pass
            if admin_id not in blocked_users:
                blocked_users.append(admin_id)
                save_blocked_users(blocked_users)
        else:
            raise e

# -------------------------------------------------- –§–£–ù–ö–¶–ò–ò (–≤–∫–ª—é—á–µ–Ω–∏–µ) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–í–∫–ª—é—á–µ–Ω–∏–µ' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def enable_function(message):
    admin_id = str(message.chat.id)
    blocked_users = load_blocked_users()

    if admin_id in blocked_users:
        return

    if not check_permission(admin_id, '–í–∫–ª—é—á–µ–Ω–∏–µ'):
        try:
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                pass
                if admin_id not in blocked_users:
                    blocked_users.append(admin_id)
                    save_blocked_users(blocked_users)
            else:
                raise e
        return

    disabled_functions = [(name, data['deactivation_time']) for name, data in function_states.items() if not data['state']]
    if disabled_functions:
        response = "*–í—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n\n"
        index = 1
        function_index_map = {}
        messages_to_send = []
        current_message = response

        for category, functions in NEW_FUNCTIONS.items():
            for function in functions:
                if function in [name for name, _ in disabled_functions]:
                    deactivation_time = next((data for name, data in disabled_functions if name == function), None)
                    if deactivation_time:
                        date_part, time_part = deactivation_time.split('; ')
                        line = f"‚ùå {index}. {function} (–¥–æ {date_part} –≤ {time_part})\n"
                    else:
                        line = f"‚ùå {index}. {function}\n"
                    if len(current_message) + len(line) > 4000:
                        messages_to_send.append(current_message)
                        current_message = ""
                    current_message += line
                    function_index_map[index] = function
                    index += 1

        if current_message:
            messages_to_send.append(current_message)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏'))
        markup.add(types.KeyboardButton('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'))

        for msg in messages_to_send:
            try:
                bot.send_message(message.chat.id, msg, parse_mode="Markdown", reply_markup=markup if msg == messages_to_send[-1] else None)
            except ApiTelegramException as e:
                if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                    pass
                    if admin_id not in blocked_users:
                        blocked_users.append(admin_id)
                        save_blocked_users(blocked_users)
                else:
                    raise e

        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, process_enable_function_step, function_index_map)
    else:
        try:
            bot.send_message(message.chat.id, "‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ *–≤–∫–ª—é—á–µ–Ω—ã*!", parse_mode="Markdown")
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                pass
                if admin_id not in blocked_users:
                    blocked_users.append(admin_id)
                    save_blocked_users(blocked_users)
            else:
                raise e
        toggle_functions(message)

@text_only_handler
def process_enable_function_step(message, function_index_map):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏":
        toggle_functions(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        function_indices = [int(index.strip()) for index in message.text.split(',')]
        function_names = []
        invalid_numbers = []

        for i in function_indices:
            if i in function_index_map:
                function_names.append(function_index_map[i])
            else:
                invalid_numbers.append(i)

        if invalid_numbers:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π: *{', '.join(map(str, invalid_numbers))}*! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")

        if function_names:
            for function_name in function_names:
                activate_function(function_name)
            bot.send_message(message.chat.id, f"‚úÖ –§—É–Ω–∫—Ü–∏–∏ *{', '.join(function_names).lower()}* —É—Å–ø–µ—à–Ω–æ *–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã*!", parse_mode="Markdown")
            toggle_functions(message)
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π!")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")

def notify_admin_and_activate(function_name):
    deactivation_time = function_states[function_name]['deactivation_time']
    if deactivation_time is None:
        date_part = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        time_part = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    else:
        date_part, time_part = deactivation_time.split('; ')

    admin_sessions = load_admin_sessions()
    blocked_users = load_blocked_users()

    activated_functions = [fn for fn, data in function_states.items() if not data['state']]

    for admin_id in admin_sessions:
        if admin_id in blocked_users:
            continue

        try:
            if len(activated_functions) == 1:
                bot.send_message(admin_id, f"‚úÖ –§—É–Ω–∫—Ü–∏—è *{function_name.lower()}* –±—ã–ª–∞ *–≤–∫–ª—é—á–µ–Ω–∞* –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ (–¥–æ {date_part} –≤ {time_part})!", parse_mode="Markdown")
            else:
                bot.send_message(admin_id, f"‚úÖ –§—É–Ω–∫—Ü–∏–∏ *{', '.join(activated_functions).lower()}* –±—ã–ª–∏ *–≤–∫–ª—é—á–µ–Ω—ã* –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ (–¥–æ {date_part} –≤ {time_part})!", parse_mode="Markdown")
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                pass
                if admin_id not in blocked_users:
                    blocked_users.append(admin_id)
                    save_blocked_users(blocked_users)
            else:
                raise e

    activate_function(function_name)

# -------------------------------------------------- –§–£–ù–ö–¶–ò–ò (–≤—ã–∫–ª—é—á–µ–Ω–∏–µ) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–í—ã–∫–ª—é—á–µ–Ω–∏–µ' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def disable_function(message):
    admin_id = str(message.chat.id)
    blocked_users = load_blocked_users()

    if admin_id in blocked_users:
        return

    if not check_permission(admin_id, '–í—ã–∫–ª—é—á–µ–Ω–∏–µ'):
        try:
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                pass
                if admin_id not in blocked_users:
                    blocked_users.append(admin_id)
                    save_blocked_users(blocked_users)
            else:
                raise e
        return

    enabled_functions = [name for name, data in function_states.items() if data['state']]
    if enabled_functions:
        response = "*–í–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n\n"
        index = 1
        function_index_map = {}
        messages_to_send = []
        current_message = response

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
        for category, functions in NEW_FUNCTIONS.items():
            for function in functions:
                if function in enabled_functions:
                    line = f"‚úÖ {index}. {function}\n"
                    if len(current_message) + len(line) > 4000: 
                        messages_to_send.append(current_message)
                        current_message = ""  
                    current_message += line
                    function_index_map[index] = function
                    index += 1

        if current_message:
            messages_to_send.append(current_message)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏'))
        markup.add(types.KeyboardButton('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'))

        for msg in messages_to_send:
            try:
                bot.send_message(message.chat.id, msg, parse_mode="Markdown", reply_markup=markup if msg == messages_to_send[-1] else None)
            except ApiTelegramException as e:
                if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                    pass
                    if admin_id not in blocked_users:
                        blocked_users.append(admin_id)
                        save_blocked_users(blocked_users)
                else:
                    raise e

        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, process_disable_function_step, function_index_map)
    else:
        try:
            bot.send_message(message.chat.id, "‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ *–≤—ã–∫–ª—é—á–µ–Ω—ã*!", parse_mode="Markdown")
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                pass
                if admin_id not in blocked_users:
                    blocked_users.append(admin_id)
                    save_blocked_users(blocked_users)
            else:
                raise e
        toggle_functions(message)

@text_only_handler
def process_disable_function_step(message, function_index_map):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏":
        toggle_functions(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        function_indices = [int(index.strip()) for index in message.text.split(',')]
        function_names = []
        invalid_numbers = []

        for i in function_indices:
            if i in function_index_map:
                function_names.append(function_index_map[i])
            else:
                invalid_numbers.append(i)

        if invalid_numbers:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π: *{', '.join(map(str, invalid_numbers))}*! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")

        if function_names:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏'))
            markup.add(types.KeyboardButton('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'))
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=markup)
            bot.register_next_step_handler(message, process_disable_function_date_step, function_names)
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π!")
            bot.register_next_step_handler(message, process_disable_function_step, function_index_map)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        bot.register_next_step_handler(message, process_disable_function_step, function_index_map)

@text_only_handler
def process_disable_function_date_step(message, function_names):
    admin_id = str(message.chat.id)
    blocked_users = load_blocked_users()

    if admin_id in blocked_users:
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏":
        toggle_functions(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    date_str = message.text
    if is_valid_date_time(date_str, "00:00"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏'))
        markup.add(types.KeyboardButton('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'))
        try:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=markup)
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                if admin_id not in blocked_users:
                    blocked_users.append(admin_id)
                    save_blocked_users(blocked_users)
            else:
                raise e
        bot.register_next_step_handler(message, process_disable_function_time_step, function_names, date_str, message)
    else:
        try:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                if admin_id not in blocked_users:
                    blocked_users.append(admin_id)
                    save_blocked_users(blocked_users)
            else:
                raise e
        bot.register_next_step_handler(message, process_disable_function_date_step, function_names)

def is_valid_date_time(date_str, time_str):
    try:
        date = datetime.strptime(date_str, "%d.%m.%Y")
        time = datetime.strptime(time_str, "%H:%M")
        if 2000 <= date.year <= 3000 and 1 <= date.month <= 12 and 1 <= date.day <= 31:
            if 0 <= time.hour <= 23 and 0 <= time.minute <= 59:
                return True
        return False
    except ValueError:
        return False

@text_only_handler
def process_disable_function_time_step(message, function_names, date_str, original_message):
    admin_id = str(message.chat.id)
    blocked_users = load_blocked_users()

    if admin_id in blocked_users:
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏":
        toggle_functions(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    time_str = message.text
    if is_valid_date_time(date_str, time_str):
        time_spec = f"{date_str}; {time_str}"
        handle_time_deactivation(time_spec, function_names, original_message)
    else:
        try:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                if admin_id not in blocked_users:
                    blocked_users.append(admin_id)
                    save_blocked_users(blocked_users)
            else:
                raise e
        bot.register_next_step_handler(message, process_disable_function_time_step, function_names, date_str, original_message)

def handle_time_deactivation(time_spec, function_names, message):
    try:
        end_time = datetime.strptime(time_spec, "%d.%m.%Y; %H:%M")
        now = datetime.now()

        if end_time > now:
            for function_name in function_names:
                deactivate_function(function_name, time_spec)
                delay = end_time - now
                activate_function_later(function_name, delay)
            date_part, time_part = time_spec.split('; ')

            blocked_users = load_blocked_users()

            if message.chat.id in blocked_users:
                return

            try:
                if len(function_names) == 1:
                    bot.send_message(message.chat.id, f"‚úÖ –§—É–Ω–∫—Ü–∏—è *{', '.join(function_names).lower()}* *–æ—Ç–∫–ª—é—á–µ–Ω–∞* –¥–æ {date_part} –≤ {time_part}!", parse_mode="Markdown")
                else:
                    bot.send_message(message.chat.id, f"‚úÖ –§—É–Ω–∫—Ü–∏–∏ *{', '.join(function_names).lower()}* *–æ—Ç–∫–ª—é—á–µ–Ω—ã* –¥–æ {date_part} –≤ {time_part}!", parse_mode="Markdown")
            except ApiTelegramException as e:
                if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                    pass
                    if message.chat.id not in blocked_users:
                        blocked_users.append(message.chat.id)
                        save_blocked_users(blocked_users)
                else:
                    raise e

            toggle_functions(message)
        else:
            bot.send_message(message.chat.id, "–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, process_disable_function_date_step, function_names)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(message, process_disable_function_date_step, function_names)

# -------------------------------------------------- –°–¢–ê–¢–ò–°–¢–ò–ö–ê ---------------------------------------------------

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
ADMIN_SESSIONS_FILE = os.path.join(BASE_DIR, 'data', 'admin', 'admin_user_payments', 'admin_sessions.json')
USER_DATA_FILE = os.path.join(BASE_DIR, 'data', 'admin', 'admin_user_payments', 'users.json')
STATS_FILE = os.path.join(BASE_DIR, 'data', 'admin', 'statistics', 'stats.json')
ERRORS_LOG_FILE = os.path.join(BASE_DIR, 'data', 'admin', 'log', 'errors_log.json')

active_users = {}
total_users = set()

def load_admin_sessions():
    try:
        with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
            data = json.load(file)
        return data.get('admin_sessions', [])
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def load_user_data():
    try:
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_user_data(data):
    os.makedirs(os.path.dirname(USER_DATA_FILE), exist_ok=True)
    with open(USER_DATA_FILE, 'w', encoding='utf-8') as file:
        json.dump(data, file, indent=4, ensure_ascii=False)

def load_statistics():
    try:
        with open(STATS_FILE, 'r', encoding='utf-8') as file:
            data = json.load(file)
            return {date: {'users': set(data[date]['users']), 'functions': data[date].get('functions', {})} for date in data}
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_statistics(data):
    os.makedirs(os.path.dirname(STATS_FILE), exist_ok=True)
    with open(STATS_FILE, 'w', encoding='utf-8') as file:
        json.dump({date: {'users': list(data[date]['users']), 'functions': data[date]['functions']} for date in data}, file, indent=4, ensure_ascii=False)

def check_admin_access(message):
    admin_sessions = load_admin_sessions()
    if str(message.chat.id) in admin_sessions:
        return True
    else:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return False

def escape_markdown(text):
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

@bot.message_handler(func=lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_statistics(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if not check_admin_access(message):
        return

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=create_submenu_buttons())

def create_submenu_buttons():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        types.KeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
        types.KeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π"),
        types.KeyboardButton("–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫"),
        types.KeyboardButton("–í–µ—Ä—Å–∏—è –∏ –∞–ø—Ç–∞–π–º"),
        types.KeyboardButton("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    ]
    markup.row(buttons[0], buttons[1])
    markup.row(buttons[2], buttons[3])
    markup.row(buttons[4])
    return markup

# -------------------------------------------------- –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏) ---------------------------------------------------

def is_user_active(last_active):
    try:
        last_active_time = datetime.strptime(last_active, '%d.%m.%Y –≤ %H:%M:%S')
    except ValueError:
        return False
    return (datetime.now() - last_active_time).total_seconds() < 1 * 60

def get_aggregated_statistics(period='all'):
    statistics = load_statistics()
    today = datetime.now()
    user_result = defaultdict(int)
    function_result = defaultdict(int)

    for date_str, usage in statistics.items():
        record_date = datetime.strptime(date_str, '%d.%m.%Y')

        if period == 'day' and record_date.date() == today.date():
            user_result['users'] += len(usage['users'])
            if 'functions' in usage:
                for func_name, count in usage['functions'].items():
                    function_result[func_name] += count
        elif period == 'week' and today - timedelta(days=today.weekday()) <= record_date <= today:
            user_result['users'] += len(usage['users'])
            if 'functions' in usage:
                for func_name, count in usage['functions'].items():
                    function_result[func_name] += count
        elif period == 'month' and record_date.year == today.year and record_date.month == today.month:
            user_result['users'] += len(usage['users'])
            if 'functions' in usage:
                for func_name, count in usage['functions'].items():
                    function_result[func_name] += count
        elif period == 'year' and record_date.year == today.year:
            user_result['users'] += len(usage['users'])
            if 'functions' in usage:
                for func_name, count in usage['functions'].items():
                    function_result[func_name] += count
        elif period == 'all':
            user_result['users'] += len(usage['users'])
            if 'functions' in usage:
                for func_name, count in usage['functions'].items():
                    function_result[func_name] += count

    return dict(user_result), dict(function_result)

def get_statistics():
    users_data = load_user_data()
    online_users = len([user for user in users_data.values() if is_user_active(user["last_active"]) and not user['blocked']])
    total_users = len(users_data)

    statistics = load_statistics()
    today = datetime.now().strftime('%d.%m.%Y')
    week_start = (datetime.now() - timedelta(days=datetime.now().weekday())).strftime('%d.%m.%Y')
    month_start = datetime.now().replace(day=1).strftime('%d.%m.%Y')
    year_start = datetime.now().replace(month=1, day=1).strftime('%d.%m.%Y')

    users_today = len(statistics.get(today, {}).get('users', set()))
    users_week = len(set().union(*[data.get('users', set()) for date, data in statistics.items() if week_start <= date <= today]))
    users_month = len(set().union(*[data.get('users', set()) for date, data in statistics.items() if month_start <= date <= today]))
    users_year = len(set().union(*[data.get('users', set()) for date, data in statistics.items() if year_start <= date <= today]))

    return online_users, total_users, users_today, users_week, users_month, users_year

def list_active_users():
    users_data = load_user_data()
    active_users = [
        f"{index + 1}) `{user_id}`: {escape_markdown(user.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))}"
        for index, (user_id, user) in enumerate(users_data.items())
        if is_user_active(user["last_active"]) and not user['blocked']
    ]
    return "\n".join(active_users) if active_users else None

def get_top_users(top_n=10):
    users_data = load_user_data()
    user_activity = {user_id: user['last_active'] for user_id, user in users_data.items() if not user['blocked']}
    sorted_users = sorted(user_activity.items(), key=lambda x: x[1], reverse=True)
    top_users = sorted_users[:top_n]
    return [f"{index + 1}) {user_id}: {escape_markdown(users_data[user_id].get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))}" for index, (user_id, _) in enumerate(top_users)]

def get_recent_actions(limit=10):
    users_data = load_user_data()
    recent_actions = sorted(users_data.items(), key=lambda x: x[1]['last_active'], reverse=True)
    return [f"{user_id}: {escape_markdown(user['username'])} - {user['last_active']}" for user_id, user in recent_actions[:limit]]

def get_peak_usage_time():
    statistics = load_statistics()
    usage_times = defaultdict(int)

    for date_str, usage in statistics.items():
        record_date = datetime.strptime(date_str, '%d.%m.%Y')
        for func_name, count in usage.items():
            usage_times[record_date.hour] += count

    peak_hour = max(usage_times, key=usage_times.get)
    return peak_hour, usage_times[peak_hour]

# -------------------------------------------------- –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–≤–µ—Ä—Å–∏—è –∏ –∞–ø—Ç–∞–π–º) ---------------------------------------------------

def get_bot_version():
    return "1.0"

def get_uptime():
    start_time = datetime(2025, 1, 1)
    uptime = datetime.now() - start_time
    days, seconds = uptime.days, uptime.seconds
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    return f"{days} –¥–Ω–µ–π, {hours}:{minutes} —á–∞—Å–æ–≤"

def get_development_start_time():
    start_time = datetime(2023, 11, 6)
    uptime = datetime.now() - start_time
    days, seconds = uptime.days, uptime.seconds
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    return f"{days} –¥–Ω–µ–π, {hours}:{minutes} —á–∞—Å–æ–≤"

def get_last_update_time():
    last_update = datetime(2025, 5, 7)
    uptime = datetime.now() - last_update
    days, seconds = uptime.days, uptime.seconds
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    return f"{days} –¥–Ω–µ–π, {hours}:{minutes} —á–∞—Å–æ–≤"

# -------------------------------------------------- –°–¢–ê–¢–ò–°–¢–ò–ö–ê (—Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫) ---------------------------------------------------

def load_errors():
    with open(ERRORS_LOG_FILE, 'r', encoding='utf-8') as file:
        return json.load(file)

def get_error_list():
    errors = load_errors()
    error_list = []
    for index, error in enumerate(errors, start=1):
        error_details = error.get('error_details', '')
        error_details_more = "\n".join(error.get('error_details_more', []))
        error_list.append(f"{error_details}\n\n{error_details_more}")
    return error_list

def get_user_last_active():
    users_data = load_user_data()
    user_last_active = [
        f"üìå {index + 1}) `{user_id}`: {escape_markdown(user.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))} - {user['last_active'][:-3]}"
        for index, (user_id, user) in enumerate(users_data.items())
        if 'blocked' not in user or not user['blocked'] 
    ]
    return "\n".join(user_last_active) if user_last_active else None

# ------------------------------------------------------- –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è) ----------------------------------------------

@bot.message_handler(func=lambda message: message.text in ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–í–µ—Ä—Å–∏—è –∏ –∞–ø—Ç–∞–π–º", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π", "–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫", "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"])
@restricted
@track_user_activity
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_submenu_buttons(message):
    if not check_admin_access(message):
        return

    if message.text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        admin_id = str(message.chat.id)
        if not check_permission(admin_id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'):
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
            return

        online_count, total_count, users_today, users_week, users_month, users_year = get_statistics()
        active_user_list = list_active_users()
        user_last_active_list = get_user_last_active()
        response_message = (
            f"*üåê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω:* {online_count}\n"
            f"*üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {total_count}\n\n"
            f"*üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –¥–µ–Ω—å:* {users_today}\n"
            f"*üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:* {users_week}\n"
            f"*üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –º–µ—Å—è—Ü:* {users_month}\n"
            f"*üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –≥–æ–¥:* {users_year}\n\n"
        )
        if active_user_list:
            response_message += "*üåê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω:*\n\n"
            for user in active_user_list.split('\n'):
                response_message += f"üë§ {user}\n"
        else:
            response_message += "*üåê –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"

        if user_last_active_list:
            response_message += "*\nüïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
            response_message += user_last_active_list
        else:
            response_message += "*\nüïí –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*"

        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")
    elif message.text == "–í–µ—Ä—Å–∏—è –∏ –∞–ø—Ç–∞–π–º":
        admin_id = str(message.chat.id)
        if not check_permission(admin_id, '–í–µ—Ä—Å–∏—è –∏ –∞–ø—Ç–∞–π–º'):
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
            return

        bot_version = get_bot_version()
        uptime = get_uptime()
        development_start = get_development_start_time()
        last_update = get_last_update_time()
        bot.send_message(message.chat.id, (
            f"*ü§ñ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞:* {bot_version}\n\n"
            f"*‚ö° –ó–∞–ø—É—Å–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:* {development_start} (06.11.2023)\n\n"
            f"*‚è≥ –ê–ø—Ç–∞–π–º –±–æ—Ç–∞:* {uptime} (01.01.2025)\n\n"
            f"*üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:* {last_update} (18.03.2025)"
        ), parse_mode="Markdown")
    elif message.text == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π":
        admin_id = str(message.chat.id)
        if not check_permission(admin_id, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π'):
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
            return

        stats_day_users, stats_day_functions = get_aggregated_statistics('day')
        stats_week_users, stats_week_functions = get_aggregated_statistics('week')
        stats_month_users, stats_month_functions = get_aggregated_statistics('month')
        stats_year_users, stats_year_functions = get_aggregated_statistics('year')
        stats_all_users, stats_all_functions = get_aggregated_statistics('all')

        file_path = os.path.join(BASE_DIR, 'data', 'admin', 'statistics', 'function_usage.xlsx')
        wb = Workbook()

        sheets = {
            "–ó–∞ –¥–µ–Ω—å": stats_day_functions,
            "–ó–∞ –Ω–µ–¥–µ–ª—é": stats_week_functions,
            "–ó–∞ –º–µ—Å—è—Ü": stats_month_functions,
            "–ó–∞ –≥–æ–¥": stats_year_functions,
            "–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è": stats_all_functions
        }

        for sheet_name, functions in sheets.items():
            ws = wb.create_sheet(title=sheet_name)

            headers = ["–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
            ws.append(headers)
            bold_font = Font(bold=True)
            for col_num, column_title in enumerate(headers, 1):
                col_letter = get_column_letter(col_num)
                ws[col_letter + '1'].font = bold_font

            for func_name, count in functions.items():
                ws.append([func_name, count])

            for col in ws.columns:
                max_length = 0
                column = col[0].column_letter 
                for cell in col:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(cell.value)
                    except:
                        pass
                adjusted_width = (max_length + 2)
                ws.column_dimensions[column].width = adjusted_width

            for row in ws.iter_rows():
                for cell in row:
                    cell.alignment = Alignment(wrapText=True)
                    ws.row_dimensions[cell.row].height = max(len(str(cell.value).split('\n')) * 15, 20)  

        del wb['Sheet']
        wb.save(file_path)

        with open(file_path, 'rb') as file:
            bot.send_document(message.chat.id, file, caption="üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π")
    elif message.text == "–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫":
        admin_id = str(message.chat.id)
        if not check_permission(admin_id, '–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫'):
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å <b>–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞</b> –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="HTML")
            return

        error_list = get_error_list()
        if not error_list:
            bot.send_message(message.chat.id, "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!", parse_mode="HTML")
        else:
            escaped_error_list = [
                f"üõë <b>–û–®–ò–ë–ö–ê ‚Ññ{index}</b> üõë\n\n{error}"
                for index, error in enumerate(error_list, start=1)
            ]
            full_message = "\n".join(escaped_error_list)
            if len(full_message) > 4096:
                parts = [full_message[i:i + 4096] for i in range(0, len(full_message), 4096)]
                for part in parts:
                    bot.send_message(message.chat.id, part, parse_mode="HTML")
            else:
                bot.send_message(message.chat.id, full_message, parse_mode="HTML")
    elif message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=create_submenu_buttons())

# ------------------------------------------------------- –§–ê–ô–õ–´ ----------------------------------------------

TELEGRAM_MESSAGE_LIMIT = 4096
EXECUTABLE_FILE = os.path.abspath(__file__)
BASE_DIR = os.path.dirname(EXECUTABLE_FILE)
BACKUP_DIR = os.path.join(BASE_DIR, 'backups')
FILES_PATH = os.path.join(BASE_DIR, 'data')
ADDITIONAL_FILES_PATH = os.path.join(BASE_DIR, 'files')
ADMIN_SESSIONS_FILE = os.path.join(BASE_DIR, 'data', 'admin', 'admin_user_payments', 'admin_sessions.json')
USER_DATA_PATH = 'data/admin/admin_user_payments/users.json'
bot_data = {}
temp_replace_files = {}
temp_add_files = {}

def escape_markdown(text):
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

def load_user_data():
    with open(USER_DATA_PATH, 'r', encoding='utf-8') as file:
        return json.load(file)

def load_admin_sessions():
    with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
        data = json.load(file)
    return data['admin_sessions']

def check_admin_access(message):
    admin_sessions = load_admin_sessions()
    if str(message.chat.id) in admin_sessions:
        return True
    else:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return False

@bot.message_handler(func=lambda message: message.text == '–§–∞–π–ª—ã' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_files_menu(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–§–∞–π–ª—ã'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('–ü–æ–∏—Å–∫ –ø–æ EXT', '–ü–æ–∏—Å–∫ –ø–æ DIR', '–ü–æ–∏—Å–∫ –ø–æ ID')
    markup.add('–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã', '–ó–∞–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤', '–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–∞–π–ª–∞–º–∏:", reply_markup=markup)

# ------------------------------------------------------- –§–ê–ô–õ–´ (–ø–æ–∏—Å–∫ –ø–æ ext) ----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ü–æ–∏—Å–∫ –ø–æ EXT' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_files(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü–æ–∏—Å–∫ –ø–æ EXT'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    files_list = []
    extensions = set()

    for root, dirs, files in os.walk(BASE_DIR):
        dirs[:] = [d for d in dirs if not d.startswith('.')]
        for file_name in files:
            if not file_name.startswith('.'): 
                file_path = os.path.join(root, file_name)
                files_list.append(file_path)
                extension = os.path.splitext(file_name)[1]
                extensions.add(extension)

    if not files_list:
        bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    sorted_extensions = sorted(extensions)
    response = "*–°–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤:*\n\n"
    response += "üìÅ 1. *–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤*\n"
    response += "\n".join([f"üìÑ {i + 2}. *{ext[1:]}*" for i, ext in enumerate(sorted_extensions)])

    bot_data[message.chat.id] = {
        "files_list": files_list,
        "extensions": sorted_extensions
    }

    for start in range(0, len(response), TELEGRAM_MESSAGE_LIMIT):
        bot.send_message(message.chat.id, response[start:start + TELEGRAM_MESSAGE_LIMIT], parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é —Ñ–∞–π–ª—ã')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_extension_selection)

@text_only_handler
def process_extension_selection(message):
    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    try:
        selection = int(message.text.strip())
        if selection == 1:
            files_list = bot_data[message.chat.id]["files_list"]
            selected_extension = None
        else:
            extensions = bot_data[message.chat.id]["extensions"]
            if 1 < selection <= len(extensions) + 1:
                selected_extension = extensions[selection - 2]
                files_list = [file for file in bot_data[message.chat.id]["files_list"] if file.endswith(selected_extension)]
            else:
                bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!")
                bot.register_next_step_handler(message, process_extension_selection)
                return

        if files_list:
            if selected_extension:
                response = f"–ü–æ–∫–∞–∑–∞–Ω—ã —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º {selected_extension[1:]}:\n\n"
            else:
                response = "–ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ —Ñ–∞–π–ª—ã:\n\n"

            response += "\n".join([f"üìÑ {i + 1}. {os.path.basename(file_path)}" for i, file_path in enumerate(files_list)])
            for start in range(0, len(response), TELEGRAM_MESSAGE_LIMIT):
                bot.send_message(message.chat.id, response[start:start + TELEGRAM_MESSAGE_LIMIT])
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
            bot.register_next_step_handler(message, process_file_selection, files_list)
        else:
            bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä!")
        bot.register_next_step_handler(message, process_extension_selection)

@text_only_handler
def process_file_selection(message, matched_files):
    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    try:
        file_numbers = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_files = [matched_files[num] for num in file_numbers if 0 <= num < len(matched_files)]

        if valid_files:
            for file_path in valid_files:
                with open(file_path, 'rb') as file:
                    bot.send_document(message.chat.id, file)
            show_files_menu(message)
        else:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤!")
            bot.register_next_step_handler(message, process_file_selection, matched_files)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!")
        bot.register_next_step_handler(message, process_file_selection, matched_files)

# ------------------------------------------------------- –§–ê–ô–õ–´ (–ø–æ–∏—Å–∫ –ø–æ dir) ----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ü–æ–∏—Å–∫ –ø–æ DIR' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def search_files_in_directory(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü–æ–∏—Å–∫ –ø–æ DIR'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å <b>–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞</b> –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="HTML")
        return

    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    directories = [BASE_DIR, FILES_PATH, ADDITIONAL_FILES_PATH, BACKUP_DIR]
    response = "<b>–°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:</b>\n\n"
    response += "\n\n".join([f"üìÅ {i + 1}. {html.escape(os.path.normpath(dir))}" for i, dir in enumerate(directories)])
    bot.send_message(message.chat.id, response, parse_mode="HTML")

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é —Ñ–∞–π–ª—ã')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:", reply_markup=markup, parse_mode="HTML")
    bot.register_next_step_handler(message, process_directory_selection_for_search)

@text_only_handler
def process_directory_selection_for_search(message):
    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    try:
        selection = int(message.text.strip())
        directories = [BASE_DIR, FILES_PATH, ADDITIONAL_FILES_PATH, BACKUP_DIR]
        if 1 <= selection <= len(directories):
            selected_directory = directories[selection - 1]
            bot_data[message.chat.id] = {"directory_history": [selected_directory]}
            display_directory_contents(message, selected_directory)
        else:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!", parse_mode="HTML")
            bot.register_next_step_handler(message, process_directory_selection_for_search)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä!", parse_mode="HTML")
        bot.register_next_step_handler(message, process_directory_selection_for_search)

def display_directory_contents(message, current_directory):
    files_list = []
    folders_list = []

    for item in os.listdir(current_directory):
        item_path = os.path.join(current_directory, item)
        if not item.startswith('.'):  
            if os.path.isfile(item_path):
                files_list.append(item_path)
            elif os.path.isdir(item_path):
                folders_list.append(item_path)

    if not files_list and not folders_list:
        bot.send_message(message.chat.id, "‚ùå –í —ç—Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –ø–∞–ø–æ–∫!", parse_mode="HTML")
        show_files_menu(message)
        return

    response = f"<b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ <code>{html.escape(os.path.normpath(current_directory))}</code>:</b>\n\n"
    response += "‚Ü©Ô∏è 0. –ù–∞–∑–∞–¥\n\n"
    combined_list = folders_list + files_list
    for i, item_path in enumerate(combined_list):
        item_name = os.path.basename(item_path)
        if item_path in folders_list:
            response += f"üìÅ {i + 1}. {html.escape(item_name)}\n"
        else:
            response += f"üìÑ {i + 1}. {html.escape(item_name)}\n"

    bot_data[message.chat.id]["current_directory"] = current_directory
    bot_data[message.chat.id]["combined_list"] = combined_list
    bot_data[message.chat.id]["folders_list"] = folders_list
    bot_data[message.chat.id]["files_list"] = files_list

    for start in range(0, len(response), TELEGRAM_MESSAGE_LIMIT):
        bot.send_message(message.chat.id, response[start:start + TELEGRAM_MESSAGE_LIMIT], parse_mode="HTML")

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é —Ñ–∞–π–ª—ã')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup, parse_mode="HTML")
    bot.register_next_step_handler(message, process_item_selection)

@text_only_handler
def process_item_selection(message):
    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    try:
        input_text = message.text.strip()
        if input_text == '0':
            directory_history = bot_data[message.chat.id].get("directory_history", [])
            if len(directory_history) > 1:
                directory_history.pop()
                previous_directory = directory_history[-1]
                bot_data[message.chat.id]["directory_history"] = directory_history
                display_directory_contents(message, previous_directory)
            else:
                search_files_in_directory(message)
            return

        if ',' in input_text:
            file_numbers = [int(num.strip()) - 1 for num in input_text.split(',')]
            combined_list = bot_data[message.chat.id]["combined_list"]
            files_list = bot_data[message.chat.id]["files_list"]
            valid_files = [combined_list[num] for num in file_numbers if 0 <= num < len(combined_list) and combined_list[num] in files_list]

            if valid_files:
                for file_path in valid_files:
                    with open(file_path, 'rb') as file:
                        bot.send_document(message.chat.id, file)
                bot.send_message(message.chat.id, "‚úÖ –§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!", parse_mode="HTML")
                show_files_menu(message) 
            else:
                bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤!", parse_mode="HTML")
                bot.register_next_step_handler(message, process_item_selection)
        else:
            selection = int(input_text) - 1
            combined_list = bot_data[message.chat.id]["combined_list"]
            folders_list = bot_data[message.chat.id]["folders_list"]

            if 0 <= selection < len(combined_list):
                selected_item = combined_list[selection]
                if selected_item in folders_list:
                    bot_data[message.chat.id]["directory_history"].append(selected_item)
                    display_directory_contents(message, selected_item)
                else:
                    with open(selected_item, 'rb') as file:
                        bot.send_document(message.chat.id, file)
                    bot.send_message(message.chat.id, "‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", parse_mode="HTML")
                    show_files_menu(message)  
            else:
                bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!", parse_mode="HTML")
                bot.register_next_step_handler(message, process_item_selection)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤!", parse_mode="HTML")
        bot.register_next_step_handler(message, process_item_selection)

# ------------------------------------------------------- –§–ê–ô–õ–´ (–ø–æ–∏—Å–∫ –ø–æ id) ----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ü–æ–∏—Å–∫ –ø–æ ID' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def search_files_by_id(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü–æ–∏—Å–∫ –ø–æ ID'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é —Ñ–∞–π–ª—ã')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    list_users_for_files(message)

def list_users_for_files(message):
    users_data = load_user_data()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é —Ñ–∞–π–ª—ã')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, *username* –∏–ª–∏ *id* –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_user_input_for_file_search)

@text_only_handler
def process_user_input_for_file_search(message):
    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    user_input = message.text.strip()
    users_data = load_user_data()

    user_id = None
    username = None

    if user_input.isdigit():
        if len(user_input) < 4:
            user_index = int(user_input) - 1
            if 0 <= user_index < len(users_data):
                user_id = list(users_data.keys())[user_index]
                username = users_data[user_id]['username']
            else:
                bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                bot.register_next_step_handler(message, process_user_input_for_file_search)
                return
        else:
            if user_input in users_data:
                user_id = user_input
                username = users_data[user_id]['username']
            else:
                bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º *id* –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
                bot.register_next_step_handler(message, process_user_input_for_file_search)
                return
    elif user_input.startswith('@'):
        username = user_input
        user_id = next((user_id for user_id, data in users_data.items() if data['username'].lower() == username.lower()), None)
        if not user_id:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º *username* –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
            bot.register_next_step_handler(message, process_user_input_for_file_search)
            return
    else:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, username –∏–ª–∏ id")
        bot.register_next_step_handler(message, process_user_input_for_file_search)
        return

    bot.send_message(message.chat.id, f"–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {escape_markdown(username)} - `{user_id}` ...", parse_mode="Markdown")
    process_file_search(message, user_id)

def search_id_in_json(data, user_id):
    if isinstance(data, dict):
        for key, value in data.items():
            if key == user_id or (isinstance(value, str) and user_id in value):
                return True
            if search_id_in_json(value, user_id):
                return True
    elif isinstance(data, list):
        for item in data:
            if search_id_in_json(item, user_id):
                return True
    return False

def process_file_search(message, user_id):
    matched_files = []

    search_paths = [BASE_DIR, BACKUP_DIR, FILES_PATH, ADDITIONAL_FILES_PATH]

    for search_path in search_paths:
        for root, dirs, files in os.walk(search_path):
            dirs[:] = [d for d in dirs if not d.startswith('.')]
            for file_name in files:
                if not file_name.startswith('.'):
                    file_path = os.path.join(root, file_name)
                    if user_id in file_name:
                        matched_files.append(file_path)
                    else:
                        if file_name.endswith('.json'):
                            try:
                                with open(file_path, 'r', encoding='utf-8') as f:
                                    content = json.load(f)
                                    if search_id_in_json(content, user_id):
                                        matched_files.append(file_path)
                            except (json.JSONDecodeError, UnicodeDecodeError):
                                pass
                        elif file_name.endswith(('.txt', '.log', '.csv')):
                            try:
                                with open(file_path, 'r', encoding='utf-8') as f:
                                    content = f.read()
                                    if re.search(rf'\b{user_id}\b', content):
                                        matched_files.append(file_path)
                            except UnicodeDecodeError:
                                pass

    if matched_files:
        response = "\n".join([f"üìÑ {i + 1}. {os.path.basename(path)}" for i, path in enumerate(matched_files)])
        for start in range(0, len(response), TELEGRAM_MESSAGE_LIMIT):
            bot.send_message(message.chat.id, response[start:start + TELEGRAM_MESSAGE_LIMIT])
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
        bot.register_next_step_handler(message, process_file_selection, matched_files)
    else:
        bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º id –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

# ------------------------------------------------------- –§–ê–ô–õ–´ (–∑–∞–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤) ----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ó–∞–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_file_replacement(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ó–∞–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    temp_replace_files[message.chat.id] = []
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é —Ñ–∞–π–ª—ã')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–º–µ–Ω—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, process_file_replacement)

def process_file_replacement(message):
    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    if message.document:
        file_name = message.document.file_name
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        temp_replace_files[message.chat.id].append((file_name, downloaded_file))
        bot.send_message(message.chat.id, "–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)  
        markup.add('–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª', '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–º–µ–Ω—É —Ñ–∞–π–ª–æ–≤')  
        markup.add('–í –º–µ–Ω—é —Ñ–∞–π–ª—ã')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∑–∞–º–µ–Ω—ã —Ñ–∞–π–ª–æ–≤:", reply_markup=markup)
        bot.register_next_step_handler(message, process_file_replacement_action)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        bot.register_next_step_handler(message, process_file_replacement)

def process_file_replacement_action(message):
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª':
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–í –º–µ–Ω—é —Ñ–∞–π–ª—ã')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–º–µ–Ω—ã:", reply_markup=markup)
        bot.register_next_step_handler(message, process_file_replacement)
    elif message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–º–µ–Ω—É —Ñ–∞–π–ª–æ–≤':
        search_paths = [BASE_DIR, FILES_PATH, ADDITIONAL_FILES_PATH, BACKUP_DIR]
        replaced_files = []
        not_found_files = []

        for file_name, file_content in temp_replace_files[message.chat.id]:
            file_path = None
            for search_path in search_paths:
                for root, dirs, files in os.walk(search_path):
                    dirs[:] = [d for d in dirs if not d.startswith('.')]
                    if file_name in files and not file_name.startswith('.'): 
                        file_path = os.path.join(root, file_name)
                        break
                if file_path:
                    break

            if file_path:
                with open(file_path, 'wb') as new_file:
                    new_file.write(file_content)
                replaced_files.append(file_name)
            else:
                not_found_files.append(file_name)

        if replaced_files:
            bot.send_message(message.chat.id, f"‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω—ã: {', '.join(replaced_files)}")
        if not_found_files:
            bot.send_message(message.chat.id, f"‚ùå –§–∞–π–ª—ã –¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {', '.join(not_found_files)}")

        show_files_menu(message)
    elif message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
    elif message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        bot.register_next_step_handler(message, process_file_replacement_action)

# ------------------------------------------------------- –§–ê–ô–õ–´ (–¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã) ----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def add_files(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    directories = [BASE_DIR, FILES_PATH, ADDITIONAL_FILES_PATH, BACKUP_DIR]
    response = "*–°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:*\n\n"
    response += "\n\n".join([f"üìÅ {i + 1}. {escape_markdown(dir)}" for i, dir in enumerate(directories)])
    bot.send_message(message.chat.id, response, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é —Ñ–∞–π–ª—ã')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, process_add_file_directory_selection)

@text_only_handler
def process_add_file_directory_selection(message):
    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    try:
        selection = int(message.text.strip())
        directories = [BASE_DIR, FILES_PATH, ADDITIONAL_FILES_PATH, BACKUP_DIR]
        if 1 <= selection <= len(directories):
            selected_directory = directories[selection - 1]
            bot_data[message.chat.id] = {
                "directory_history": [selected_directory]
            }
            navigate_and_select_folder(message, selected_directory)
        else:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!")
            bot.register_next_step_handler(message, process_add_file_directory_selection)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä!")
        bot.register_next_step_handler(message, process_add_file_directory_selection)

def navigate_and_select_folder(message, current_directory):
    folders_list = []
    for item in os.listdir(current_directory):
        item_path = os.path.join(current_directory, item)
        if not item.startswith('.') and os.path.isdir(item_path):
            folders_list.append(item_path)

    bot_data[message.chat.id]["current_directory"] = current_directory
    bot_data[message.chat.id]["folders_list"] = folders_list

    response = f"*–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:* `{escape_markdown(current_directory)}`\n\n"
    response += "‚Ü©Ô∏è 0. –ù–∞–∑–∞–¥\n\n"
    for i, folder in enumerate(folders_list):
        response += f"üìÅ {i + 1}. {escape_markdown(os.path.basename(folder))}\n"

    for start in range(0, len(response), TELEGRAM_MESSAGE_LIMIT):
        bot.send_message(message.chat.id, response[start:start + TELEGRAM_MESSAGE_LIMIT], parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('üì• –í—ã–±—Ä–∞—Ç—å —ç—Ç—É –ø–∞–ø–∫—É')
    markup.add('–í –º–µ–Ω—é —Ñ–∞–π–ª—ã')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_folder_selection)

@text_only_handler
def process_folder_selection(message):
    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    if message.text == 'üì• –í—ã–±—Ä–∞—Ç—å —ç—Ç—É –ø–∞–ø–∫—É':
        current_directory = bot_data[message.chat.id]["current_directory"]
        bot_data[message.chat.id]["selected_directory"] = current_directory
        temp_add_files[message.chat.id] = []

        hide_markup = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, f"üìÇ *–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é:*\n`{escape_markdown(current_directory)}`", parse_mode="Markdown", reply_markup=hide_markup)
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–í –º–µ–Ω—é —Ñ–∞–π–ª—ã')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, process_add_file)
        return

    try:
        input_text = message.text.strip()
        if input_text == '0':
            history = bot_data[message.chat.id].get("directory_history", [])
            if len(history) > 1:
                history.pop()
                previous_dir = history[-1]
                bot_data[message.chat.id]["directory_history"] = history
                navigate_and_select_folder(message, previous_dir)
            else:
                add_files(message)
            return

        selection = int(input_text) - 1
        folders_list = bot_data[message.chat.id]["folders_list"]
        if 0 <= selection < len(folders_list):
            selected_folder = folders_list[selection]
            bot_data[message.chat.id]["directory_history"].append(selected_folder)
            navigate_and_select_folder(message, selected_folder)
        else:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!")
            bot.register_next_step_handler(message, process_folder_selection)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â—É—é!")
        bot.register_next_step_handler(message, process_folder_selection)

def process_add_file(message):
    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    if message.document:
        file_name = message.document.file_name
        selected_directory = bot_data[message.chat.id]["selected_directory"]
        file_path = os.path.join(selected_directory, file_name)

        if os.path.exists(file_path):
            bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –¥—Ä—É–≥–∏–º –∏–º–µ–Ω–µ–º")
            bot.register_next_step_handler(message, process_add_file)
        else:
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            temp_add_files[message.chat.id].append((file_name, downloaded_file))
            bot.send_message(message.chat.id, "–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

            markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True) 
            markup.add('–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª', '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤')  
            markup.add('–í –º–µ–Ω—é —Ñ–∞–π–ª—ã')
            markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:", reply_markup=markup)
            bot.register_next_step_handler(message, process_add_file_action)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        bot.register_next_step_handler(message, process_add_file)

def process_add_file_action(message):
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª':
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–í –º–µ–Ω—é —Ñ–∞–π–ª—ã')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, process_add_file)
    elif message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤':
        selected_directory = bot_data[message.chat.id]["selected_directory"]
        for file_name, file_content in temp_add_files[message.chat.id]:
            file_path = os.path.join(selected_directory, file_name)
            with open(file_path, 'wb') as new_file:
                new_file.write(file_content)
        bot.send_message(message.chat.id, "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        show_files_menu(message)
    elif message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
    elif message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        bot.register_next_step_handler(message, process_add_file_action)

# ------------------------------------------------------- –§–ê–ô–õ–´ (—É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã) ----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_files(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    directories = [BASE_DIR, FILES_PATH, ADDITIONAL_FILES_PATH, BACKUP_DIR]
    response = "*–°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:*\n\n"
    response += "\n\n".join([f"üìÅ {i + 1}. {escape_markdown(dir)}" for i, dir in enumerate(directories)])
    bot.send_message(message.chat.id, response, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é —Ñ–∞–π–ª—ã')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, process_delete_file_directory_selection)

@text_only_handler
def process_delete_file_directory_selection(message):
    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    try:
        selection = int(message.text.strip())
        if 1 <= selection <= 4:
            selected_directory = [BASE_DIR, FILES_PATH, ADDITIONAL_FILES_PATH, BACKUP_DIR][selection - 1]
            files_list = []
            for root, dirs, files in os.walk(selected_directory):
                dirs[:] = [d for d in dirs if not d.startswith('.')]
                for file_name in files:
                    if not file_name.startswith('.'): 
                        file_path = os.path.join(root, file_name)
                        files_list.append(file_path)

            if not files_list:
                bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                return

            response = "\n\n".join([f"üìÑ {i + 1}. {os.path.basename(file_path)}" for i, file_path in enumerate(files_list)])
            bot_data[message.chat.id] = {"files_list": files_list}

            for start in range(0, len(response), TELEGRAM_MESSAGE_LIMIT):
                bot.send_message(message.chat.id, response[start:start + TELEGRAM_MESSAGE_LIMIT])

            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            bot.register_next_step_handler(message, process_delete_file_selection)
        else:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!")
            bot.register_next_step_handler(message, process_delete_file_directory_selection)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä!")
        bot.register_next_step_handler(message, process_delete_file_directory_selection)

@text_only_handler
def process_delete_file_selection(message):
    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    try:
        file_numbers = [int(num.strip()) - 1 for num in message.text.split(',')]
        files_list = bot_data[message.chat.id]["files_list"]
        valid_files = [files_list[num] for num in file_numbers if 0 <= num < len(files_list)]

        if valid_files:
            for file_path in valid_files:
                os.remove(file_path)
            bot.send_message(message.chat.id, "‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
            show_files_menu(message)
        else:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤!")
            bot.register_next_step_handler(message, process_delete_file_selection)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!")
        bot.register_next_step_handler(message, process_delete_file_selection)

# ------------------------------------------------------- –†–ï–ó–ï–†–í–ù–ê–Ø –ö–û–ü–ò–Ø ----------------------------------------------

BACKUP_DIR = 'backups'
SOURCE_DIR = '.'
EXECUTABLE_FILE = os.path.basename(sys.argv[0])  
ADMIN_SESSIONS_FILE = 'data/admin/admin_user_payments/admin_sessions.json'

def normalize_name(name):
    return re.sub(r'[<>:"/\\|?*]', '_', name)

def load_admin_sessions():
    with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
        data = json.load(file)
    return data['admin_sessions']

def check_admin_access(message):
    admin_sessions = load_admin_sessions()
    if str(message.chat.id) in admin_sessions:
        return True
    else:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return False

@bot.message_handler(func=lambda message: message.text == '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_backup_menu(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é', '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π:", reply_markup=markup)

# -------------------------------------------------- –†–ï–ó–ï–†–í–ù–ê–Ø –ö–û–ü–ò–Ø (—Å–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é) ----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_create_backup(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    backup_path = create_full_backup()
    if backup_path:
        backup_message = f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n\n‚û°Ô∏è –ü—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:\n{backup_path}"
    else:
        backup_message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!"
    bot.send_message(message.chat.id, backup_message)
    show_admin_panel(message)

def create_full_backup():
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_file = os.path.join(BACKUP_DIR, f'full_backup_{timestamp}.zip')

    os.makedirs(BACKUP_DIR, exist_ok=True)

    try:
        with zipfile.ZipFile(backup_file, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(SOURCE_DIR):
                dirs[:] = [d for d in dirs if not d.startswith('.')]
                if 'backups' in dirs:
                    dirs.remove('backups')

                for file in files:
                    if file.startswith('.'): 
                        continue

                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, SOURCE_DIR)

                    if os.path.basename(file_path) == EXECUTABLE_FILE:
                        continue

                    if len(file_path) > 260:
                        continue

                    try:
                        zipf.write(file_path, arcname)
                    except Exception as e:
                        pass

        if not check_backup_integrity(backup_file):
            return None

        return backup_file
    except Exception as e:
        return None

# -------------------------------------------------- –†–ï–ó–ï–†–í–ù–ê–Ø –ö–û–ü–ò–Ø (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ) ----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_restore_backup(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    success = restore_latest_backup()
    if success:
        bot.send_message(message.chat.id, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!")
    else:
        bot.send_message(message.chat.id, "‚ùå –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    show_admin_panel(message)

def restore_latest_backup():
    os.makedirs(BACKUP_DIR, exist_ok=True)

    backups = sorted(os.listdir(BACKUP_DIR), reverse=True)
    if not backups:
        return False

    latest_backup = os.path.join(BACKUP_DIR, backups[0])

    if not os.path.exists(latest_backup):
        return False

    with zipfile.ZipFile(latest_backup, 'r') as zipf:
        zipf.extractall(SOURCE_DIR)

    return True

# -------------------------------------------------- –†–ï–ó–ï–†–í–ù–ê–Ø –ö–û–ü–ò–Ø (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏) ----------------------------------------------

def create_incremental_backup(last_backup_time):
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_file = os.path.join(BACKUP_DIR, f'incremental_backup_{timestamp}.zip')

    os.makedirs(BACKUP_DIR, exist_ok=True)

    try:
        with zipfile.ZipFile(backup_file, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(SOURCE_DIR):
                dirs[:] = [d for d in dirs if not d.startswith('.')]
                if 'backups' in dirs:
                    dirs.remove('backups')

                for file in files:
                    if file.startswith('.'): 
                        continue

                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, SOURCE_DIR)

                    if os.path.basename(file_path) == EXECUTABLE_FILE:
                        continue

                    if len(file_path) > 260:
                        continue

                    if os.path.getmtime(file_path) > last_backup_time:
                        try:
                            zipf.write(file_path, arcname)
                        except Exception as e:
                            pass

        if not check_backup_integrity(backup_file):
            return None

        return backup_file
    except Exception as e:
        return None

def check_backup_integrity(backup_file):
    try:
        with zipfile.ZipFile(backup_file, 'r') as zipf:
            if zipf.testzip() is not None:
                return False
        return True
    except Exception as e:
        return False

def cleanup_old_backups():
    os.makedirs(BACKUP_DIR, exist_ok=True)

    now = datetime.now()
    for filename in os.listdir(BACKUP_DIR):
        file_path = os.path.join(BACKUP_DIR, filename)
        file_time = datetime.fromtimestamp(os.path.getctime(file_path))

        if "full_backup" in filename and (now - file_time) > timedelta(days=30):
            os.remove(file_path)
        elif "incremental_backup" in filename and (now - file_time) > timedelta(days=7):
            os.remove(file_path)

def monitor_disk_usage():
    total, used, free = shutil.disk_usage(SOURCE_DIR)
    print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {used / total:.2%}")

    if (used / total) > 0.9:
        print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞!")
        notify_admin("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞!")

def scheduled_backup():
    os.makedirs(BACKUP_DIR, exist_ok=True)

    today = datetime.now().weekday()
    last_backup_time = get_last_backup_time()

    if today == 0:  
        backup_path = create_full_backup()
    else:
        backup_path = create_incremental_backup(last_backup_time)

    if backup_path:
        notify_admin(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n\n‚û°Ô∏è –ü—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:\n{backup_path}")
    else:
        notify_admin("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!")

    cleanup_old_backups()
    monitor_disk_usage()

def get_last_backup_time():
    os.makedirs(BACKUP_DIR, exist_ok=True)

    backups = sorted(os.listdir(BACKUP_DIR), reverse=True)
    if not backups:
        return 0

    latest_backup = os.path.join(BACKUP_DIR, backups[0])
    return os.path.getmtime(latest_backup)

def notify_admin(message):
    admin_sessions = load_admin_sessions()
    current_time = datetime.now().strftime('%d.%m.%Y –≤ %H:%M')
    blocked_users = load_blocked_users()
    user_ids = []

    for admin_id in admin_sessions:
        if admin_id in blocked_users:
            continue
        try:
            bot.send_message(admin_id, f"{message}\n\n–í—Ä–µ–º—è: {current_time}", parse_mode="Markdown")
            user_ids.append(admin_id)
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                pass
                if admin_id not in blocked_users:
                    blocked_users.append(admin_id)
                    save_blocked_users(blocked_users)
            else:
                pass
            
schedule.every().day.at("00:00").do(scheduled_backup)

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–û–±—â–µ–Ω–∏–µ' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_communication_menu(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û–±—â–µ–Ω–∏–µ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–ß–∞—Ç', '–ó–∞–ø—Ä–æ—Å—ã')
    markup.add('–û–ø–æ–≤–µ—â–µ–Ω–∏—è', '–î–∏–∞–ª–æ–≥–∏')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –æ–±—â–µ–Ω–∏—è:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def return_to_communication(message):
    show_communication_menu(message)

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–ß–ê–¢ ---------------------------------------------------

ADMIN_SESSIONS_FILE = 'data/admin/admin_user_payments/admin_sessions.json'
USER_DB_PATH = 'data/admin/admin_user_payments/users.json'
ADMIN_DB_PATH = 'data/admin/admin_user_payments/admin_sessions.json'
ACTIVE_CHATS_PATH = 'data/admin/chats/active_chats.json'
CHAT_HISTORY_PATH = 'data/admin/chats/chat_history.json'

active_chats = {}
user_requests_chat = {}
active_user_chats = {}
active_admin_chats = {}

def check_admin_access(message):
    admin_sessions = load_admin_sessions()
    if str(message.chat.id) in admin_sessions:
        return True
    else:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return False

def load_admin_sessions():
    with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
        data = json.load(file)
    return data['admin_sessions']

def load_active_chats():
    global active_chats, user_requests_chat
    if os.path.exists(ACTIVE_CHATS_PATH):
        with open(ACTIVE_CHATS_PATH, 'r', encoding='utf-8') as file:
            data = json.load(file)
            active_chats = {int(k): v for k, v in data.get("active_chats", {}).items()}
            user_requests_chat_data = data.get("user_requests_chat", {})
            user_requests_chat = {
                int(k): v if isinstance(v, dict) else {}
                for k, v in user_requests_chat_data.items()
            }
    else:
        active_chats = {}
        user_requests_chat = {}

load_active_chats()

def save_active_chats():
    with open(ACTIVE_CHATS_PATH, 'w', encoding='utf-8') as file:
        data = {
            "active_chats": {str(k): v for k, v in active_chats.items()},
            "user_requests_chat": {str(k): v for k, v in user_requests_chat.items()}
        }
        json.dump(data, file, ensure_ascii=False, indent=4)

def load_users():
    check_and_create_file()
    try:
        with open(DB_PATH, 'r', encoding='utf-8') as file:
            return json.load(file)
    except UnicodeDecodeError as e:
        with open(DB_PATH, 'r', encoding='cp1251') as file:
            content = file.read()
            with open(DB_PATH, 'w', encoding='utf-8') as outfile:
                json.dump(json.loads(content), outfile, ensure_ascii=False, indent=4)
            return json.loads(content)
    except json.JSONDecodeError as e:
        return {}

def load_admins():
    if os.path.exists(ADMIN_DB_PATH):
        with open(ADMIN_DB_PATH, 'r', encoding='utf-8') as file:
            return json.load(file)
    return []

def is_admin(user_id):
    admins = load_admins()
    return user_id in admins

def escape_markdown(text):
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

@bot.message_handler(func=lambda message: message.text == '–ß–∞—Ç' and check_admin_access(message))
@bot.message_handler(commands=['chat'])
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def initiate_chat(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ß–∞—Ç'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if not check_admin_access(message):
        return

    if admin_id in active_admin_chats:
        existing_user_id = active_admin_chats[admin_id]
        bot.send_message(admin_id, f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{existing_user_id}`!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        return_to_communication(message)
        return

    command_parts = message.text.split()
    if len(command_parts) == 2:
        user_input = command_parts[1]
        users_data = load_users()
        blocked_users = load_blocked_users()

        if len(user_input) <= 5 and user_input.isdigit():
            try:
                user_number = int(user_input)
                if user_number < 1 or user_number > len(users_data):
                    bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä `{user_number}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", parse_mode="Markdown")
                    return
                user_id = list(users_data.keys())[user_number - 1]
                username = users_data[user_id]['username']
                if user_id in blocked_users:
                    bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º `{user_number}` –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", parse_mode="Markdown")
                    return
            except ValueError:
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                return
        elif user_input.isdigit():
            user_id = int(user_input)
            if str(user_id) not in users_data:
                bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id - `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
                return
            if user_id in blocked_users:
                bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id - `{user_id}` –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", parse_mode="Markdown")
                return
            username = users_data[str(user_id)]['username']
        elif user_input.startswith('@'):
            username = user_input
            user_id = None
            for uid, data in users_data.items():
                if data.get('username') == username:
                    user_id = int(uid)
                    break
            if user_id is None:
                bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username - {escape_markdown(username)} –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
                return
            if user_id in blocked_users:
                bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username - {escape_markdown(username)} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", parse_mode="Markdown")
                return
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞!")
            return

        if str(user_id) == admin_id:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!", parse_mode="Markdown")
            return

        if user_id in active_chats:
            if active_chats[user_id].get("admin_id") is None:
                active_chats[user_id]["admin_id"] = message.chat.id
                save_active_chats()
            else:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ —Å –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
                return

        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('–ü—Ä–∏–Ω—è—Ç—å', '–û—Ç–∫–ª–æ–Ω–∏—Ç—å')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(user_id, "üö® –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏!\n\n–í—ã–±–µ—Ä–∏—Ç–µ *–ü–†–ò–ù–Ø–¢–¨* –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ *–û–¢–ö–õ–û–ù–ò–¢–¨* –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è!", parse_mode="Markdown", reply_markup=markup)
        bot.send_message(message.chat.id, f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {escape_markdown(username)} - `{user_id}`! –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞...", parse_mode="Markdown")

        active_chats[user_id] = {"admin_id": message.chat.id, "status": "pending", "awaiting_response": True}
        save_active_chats()

        def check_response_timeout(user_id):
            time.sleep(30)
            if user_id in active_chats and active_chats[user_id].get("status") == "pending":
                admin_id = active_chats[user_id]["admin_id"]
                bot.send_message(admin_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {escape_markdown(username)} - `{user_id}` –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∑–∞–ø—Ä–æ—Å! –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω...", parse_mode="Markdown")
                bot.send_message(user_id, "‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —á–∞—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ, –æ–Ω –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω!")
                del active_chats[user_id]
                save_active_chats()
                start_menu(user_id)  

        timer = threading.Timer(30.0, check_response_timeout, [user_id])
        timer.start()

    else:
        list_users_for_chat(message)

def list_users_for_chat(message):
    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ'))
    markup.add(types.KeyboardButton('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'))

    bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞:\n\n"
        "1. –ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `/chat 0`\n"
        "2. Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `/chat id`\n"
        "3. Username –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `/chat @username`\n",
        parse_mode="Markdown",
        reply_markup=markup
    )

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–ó–ê–ü–†–û–°–´ ---------------------------------------------------

admin_request_selection = {}

@bot.message_handler(func=lambda message: message.text == '–ó–∞–ø—Ä–æ—Å—ã' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def list_chat_requests(message):
    admin_id = message.from_user.id

    requests = [(user_id, data.get("topic", "–ë–µ–∑ —Ç–µ–º—ã")) for user_id, data in active_chats.items() if data["status"] == "pending"]

    if not requests:
        bot.send_message(admin_id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —á–∞—Ç!", parse_mode="Markdown")
        return

    users_data = load_users()
    request_list = []
    for i, (user_id, topic) in enumerate(requests):
        username = users_data.get(str(user_id), {}).get('username', 'Unknown')
        escaped_username = escape_markdown(username)
        request_list.append(f"üîπ *‚Ññ{i + 1}.* –ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\nüë§ {escaped_username} - `{user_id}`\nüì® *–¢–µ–º–∞*: {topic.lower()}")

    request_list_message = "*–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —á–∞—Ç:*\n\n" + "\n\n".join(request_list) + "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞:\n\n_P.S. –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –≤—ã–±–∏—Ä–∞—Ç—å –∑–∞–ø—Ä–æ—Å, —Ç–æ –æ–±—ä—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤!_"

    parts = [request_list_message[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(request_list_message), MAX_MESSAGE_LENGTH)]

    for part in parts:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤'))
        markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ'))
        markup.add(types.KeyboardButton('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'))

        bot.send_message(admin_id, part, parse_mode="Markdown", reply_markup=markup)

    admin_request_selection[admin_id] = True

@bot.message_handler(func=lambda message: admin_request_selection.get(message.from_user.id, False))
def handle_request_selection(message):
    admin_id = message.from_user.id

    if message.text.lower() == '–≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤':
        del admin_request_selection[admin_id]
        bot.send_message(admin_id, "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤!")
        return_to_communication(message)
        return

    if not message.text.isdigit() or int(message.text) <= 0:
        bot.send_message(admin_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞!")
        return

    requests = [(user_id, data.get("topic", "–ë–µ–∑ —Ç–µ–º—ã")) for user_id, data in active_chats.items() if data["status"] == "pending"]

    if not requests:
        bot.send_message(admin_id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞!")
        return

    try:
        selected_index = int(message.text) - 1

        if selected_index < 0 or selected_index >= len(requests):
            bot.send_message(admin_id, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞")
            return

        selected_user_id, topic = requests[selected_index]
        users_data = load_users()
        username = users_data.get(str(selected_user_id), {}).get('username', 'Unknown')

        if selected_user_id in active_chats:
            if active_chats[selected_user_id].get("admin_id") is None:
                active_chats[selected_user_id]["admin_id"] = admin_id
                save_active_chats()
            else:
                admin_id_in_chat = active_chats[selected_user_id]["admin_id"]
                bot.send_message(admin_id, f"‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º `{admin_id_in_chat}`!", parse_mode="Markdown")
                show_communication_menu(message)
                return

        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('–ü—Ä–∏–Ω—è—Ç—å', '–û—Ç–∫–ª–æ–Ω–∏—Ç—å')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

        bot.send_message(selected_user_id, "üö® –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏!\n\n–í—ã–±–µ—Ä–∏—Ç–µ *–ü–†–ò–ù–Ø–¢–¨* –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ *–û–¢–ö–õ–û–ù–ò–¢–¨* –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è!", parse_mode="Markdown", reply_markup=markup)
        bot.send_message(admin_id, f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {escape_markdown(username)} - `{selected_user_id}`! –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞...", parse_mode="Markdown")

        active_chats[selected_user_id] = {"admin_id": admin_id, "status": "pending", "awaiting_response": True}
        save_active_chats()

        def check_response_timeout(user_id):
            time.sleep(30)
            if user_id in active_chats and active_chats[user_id].get("status") == "pending":
                admin_id = active_chats[user_id]["admin_id"]
                bot.send_message(admin_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {escape_markdown(username)} - `{user_id}` –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∑–∞–ø—Ä–æ—Å! –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω...", parse_mode="Markdown")
                bot.send_message(user_id, "‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —á–∞—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ, –æ–Ω –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω!")
                del active_chats[user_id]
                save_active_chats()
                start_menu(user_id)

        timer = threading.Timer(30.0, check_response_timeout, [selected_user_id])
        timer.start()

        del admin_request_selection[admin_id]

    except ValueError:
        pass

def return_admin_to_menu(admin_id):
    bot.send_message(admin_id, "‚úÖ –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω!", parse_mode="Markdown")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–ê–¥–º–∏–Ω', '–ë–∞–Ω', '–§—É–Ω–∫—Ü–∏–∏')
    markup.add('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–§–∞–π–ª—ã', '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è')
    markup.add('–û–±—â–µ–Ω–∏–µ', '–†–µ–∫–ª–∞–º–∞', '–†–µ–¥–∞–∫—Ü–∏—è')
    markup.add('–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞')
    markup.add('–í—ã—Ö–æ–¥')
    bot.send_message(admin_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:", reply_markup=markup)

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–û–ü–û–í–ï–©–ï–ù–ò–Ø ---------------------------------------------------

DATABASE_PATH = 'data/admin/chats/alerts.json'
ADMIN_SESSIONS_FILE = 'data/admin/admin_user_payments/admin_sessions.json'
USER_DATA_PATH = 'data/admin/admin_user_payments/users.json'
alerts = {"sent_messages": {}, "notifications": {}}
admin_sessions = []

def load_admin_sessions():
    if os.path.exists(ADMIN_SESSIONS_FILE):
        with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
            data = json.load(file)
        return data.get('admin_sessions', [])
    return []

admin_sessions = load_admin_sessions()

def check_admin_access(message):
    if str(message.chat.id) in admin_sessions:
        return True
    else:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return False

def load_users():
    check_and_create_file()
    try:
        with open(DB_PATH, 'r', encoding='utf-8') as file:
            return json.load(file)
    except UnicodeDecodeError as e:
        with open(DB_PATH, 'r', encoding='cp1251') as file:
            content = file.read()
            with open(DB_PATH, 'w', encoding='utf-8') as outfile:
                json.dump(json.loads(content), outfile, ensure_ascii=False, indent=4)
            return json.loads(content)
    except json.JSONDecodeError as e:
        return {}

def save_database():
    for key, value in alerts['notifications'].items():
        if 'time' in value and isinstance(value['time'], datetime):
            value['time'] = value['time'].strftime("%d.%m.%Y –≤ %H:%M")
    for key, value in alerts['sent_messages'].items():
        if 'time' in value and isinstance(value['time'], datetime):
            value['time'] = value['time'].strftime("%d.%m.%Y –≤ %H:%M")

    os.makedirs(os.path.dirname(DATABASE_PATH), exist_ok=True)

    try:
        with open(DATABASE_PATH, 'w', encoding='utf-8') as file:
            json.dump(alerts, file, ensure_ascii=False, indent=4)
    except Exception as e:
        pass

    for key, value in alerts['notifications'].items():
        if 'time' in value and isinstance(value['time'], str):
            value['time'] = datetime.strptime(value['time'], "%d.%m.%Y –≤ %H:%M")
    for key, value in alerts['sent_messages'].items():
        if 'time' in value and isinstance(value['time'], str):
            value['time'] = datetime.strptime(value['time'], "%d.%m.%Y –≤ %H:%M")

def load_database():
    if os.path.exists(DATABASE_PATH):
        try:
            with open(DATABASE_PATH, 'r', encoding='utf-8') as file:
                data = json.load(file)

            for key, value in data['notifications'].items():
                if 'time' in value and value['time']:
                    value['time'] = datetime.strptime(value['time'], "%d.%m.%Y –≤ %H:%M")

            if isinstance(data['sent_messages'], list):
                sent_messages_dict = {}
                for i, msg in enumerate(data['sent_messages']):
                    msg_id = str(i + 1)
                    sent_messages_dict[msg_id] = msg
                    if 'time' in msg and msg['time']:
                        msg['time'] = datetime.strptime(msg['time'], "%d.%m.%Y –≤ %H:%M")
                data['sent_messages'] = sent_messages_dict
            else:
                for key, value in data['sent_messages'].items():
                    if 'time' in value and value['time']:
                        value['time'] = datetime.strptime(value['time'], "%d.%m.%Y –≤ %H:%M")

            return data
        except Exception:
            pass

    return {"sent_messages": {}, "notifications": {}}

alerts = load_database()

def check_notifications():
    while True:
        now = datetime.now()
        for key, n in alerts['notifications'].items():
            if n['status'] == 'active' and 'time' in n and n['time'] <= now:
                user_id = n.get('user_id')
                if user_id:
                    user_ids = [user_id]
                else:
                    user_ids = load_users().keys()

                for user_id in user_ids:
                    if user_id in blocked_users:
                        continue

                    if n.get('text'):
                        try:
                            bot.send_message(user_id, n['text'])
                        except ApiTelegramException as e:
                            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                                pass
                                if user_id not in blocked_users:
                                    blocked_users.append(user_id)
                                    save_blocked_users(blocked_users)  
                            else:
                                raise e
                    else:
                        for file in n.get('files', []):
                            try:
                                if file['type'] == 'photo':
                                    bot.send_photo(user_id, file['file_id'], caption=file.get('caption'))
                                elif file['type'] == 'video':
                                    bot.send_video(user_id, file['file_id'], caption=file.get('caption'))
                                elif file['type'] == 'document':
                                    bot.send_document(user_id, file['file_id'], caption=file.get('caption'))
                                elif file['type'] == 'animation':
                                    bot.send_animation(user_id, file['file_id'], caption=file.get('caption'))
                                elif file['type'] == 'sticker':
                                    bot.send_sticker(user_id, file['file_id'])
                                elif file['type'] == 'audio':
                                    bot.send_audio(user_id, file['file_id'], caption=file.get('caption'))
                                elif file['type'] == 'voice':
                                    bot.send_voice(user_id, file['file_id'], caption=file.get('caption'))
                                elif file['type'] == 'video_note':
                                    bot.send_video_note(user_id, file['file_id'])
                            except ApiTelegramException as e:
                                if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                                    pass
                                    if user_id not in blocked_users:
                                        blocked_users.append(user_id)
                                        save_blocked_users(blocked_users)  
                                else:
                                    raise e
                n['status'] = 'sent'
        save_database()
        time.sleep(60)

threading.Thread(target=check_notifications, daemon=True).start()

@bot.message_handler(func=lambda message: message.text == '–û–ø–æ–≤–µ—â–µ–Ω–∏—è' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_notifications_menu(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û–ø–æ–≤–µ—â–µ–Ω–∏—è'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('–í—Å–µ–º', '–ü–æ –≤—Ä–µ–º–µ–Ω–∏', '–û—Ç–¥–µ–ª—å–Ω–æ')
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def return_to_notifications_menu(message):
    show_notifications_menu(message)

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–û–ü–û–í–ï–©–ï–ù–ò–Ø (–ø–æ –≤—Ä–µ–º–µ–Ω–∏) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ü–æ –≤—Ä–µ–º–µ–Ω–∏' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_time_notifications(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü–æ –≤—Ä–µ–º–µ–Ω–∏'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏')
    markup.add('–ü—Ä–æ—Å–º–æ—Ç—Ä (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)', '–£–¥–∞–ª–∏—Ç—å (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)')
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:", reply_markup=markup)

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–û–ü–û–í–ï–©–ï–ù–ò–Ø (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏) -----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def schedule_notification(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ')
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, choose_send_action)

@text_only_handler
def choose_send_action(message):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return

    if message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º':
        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, set_theme_for_notification)
    elif message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ':
        list_users_for_time_notification(message)

@text_only_handler
def set_theme_for_notification(message):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    notification_theme = message.text
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª:", reply_markup=markup)
    bot.register_next_step_handler(message, set_time_for_notification, notification_theme)

def set_time_for_notification(message, notification_theme):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    notification_text = message.text or message.caption
    content_type = message.content_type
    file_id = None
    caption = message.caption

    if content_type == 'photo':
        file_id = message.photo[-1].file_id
    elif content_type == 'video':
        file_id = message.video.file_id
    elif content_type == 'document':
        file_id = message.document.file_id
    elif content_type == 'animation':
        file_id = message.animation.file_id
    elif content_type == 'sticker':
        file_id = message.sticker.file_id
    elif content_type == 'audio':
        file_id = message.audio.file_id
    elif content_type == 'voice':
        file_id = message.voice.file_id
    elif content_type == 'video_note':
        file_id = message.video_note.file_id

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=markup)
    bot.register_next_step_handler(message, process_notification_date, notification_theme, notification_text, content_type, file_id, caption)

@text_only_handler
def process_notification_date(message, notification_theme, notification_text, content_type, file_id, caption):

    date_str = message.text

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if not validate_date_format(date_str):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, process_notification_date, notification_theme, notification_text, content_type, file_id, caption)
        return

    try:
        notification_date = datetime.strptime(date_str, "%d.%m.%Y")
        if notification_date.date() < datetime.now().date():
            bot.send_message(message.chat.id, "–í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É")
            bot.register_next_step_handler(message, process_notification_date, notification_theme, notification_text, content_type, file_id, caption)
            return
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, process_notification_date, notification_theme, notification_text, content_type, file_id, caption)
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:", reply_markup=markup)
    bot.register_next_step_handler(message, process_notification_time, notification_theme, notification_text, date_str, content_type, file_id, caption)

def validate_date_format(date_str):
    try:
        datetime.strptime(date_str, "%d.%m.%Y")
        return True
    except ValueError:
        return False

@text_only_handler
def process_notification_time(message, notification_theme, notification_text, date_str, content_type, file_id, caption):

    time_str = message.text

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if not validate_time_format(time_str):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        bot.register_next_step_handler(message, process_notification_time, notification_theme, notification_text, date_str, content_type, file_id, caption)
        return

    try:
        notification_time = datetime.strptime(f"{date_str}, {time_str}", "%d.%m.%Y, %H:%M")
        if notification_time < datetime.now():
            bot.send_message(message.chat.id, "–í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
            bot.register_next_step_handler(message, process_notification_time, notification_theme, notification_text, date_str, content_type, file_id, caption)
            return
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        bot.register_next_step_handler(message, process_notification_time, notification_theme, notification_text, date_str, content_type, file_id, caption)
        return

    notification_id = str(len(alerts['notifications']) + 1)
    alerts['notifications'][notification_id] = {
        'theme': notification_theme,
        'text': notification_text if content_type == 'text' else None,
        'time': notification_time,
        'status': 'active',
        'category': 'time',
        'user_id': None,
        'files': [
            {
                'type': content_type,
                'file_id': file_id,
                'caption': caption if content_type != 'text' else None
            }
        ],
        'content_type': content_type
    }
    save_database()
    bot.send_message(message.chat.id, f"‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ *{notification_theme.lower()}* –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {notification_time.strftime('%d.%m.%Y –≤ %H:%M')}!", parse_mode="Markdown")
    show_notifications_menu(message)

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–û–ü–û–í–ï–©–ï–ù–ò–Ø (–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏) -----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_view_notifications(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü—Ä–æ—Å–º–æ—Ç—Ä (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–ê–∫—Ç–∏–≤–Ω—ã–µ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)', '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)')
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:", reply_markup=markup)

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–û–ü–û–í–ï–©–ï–ù–ò–Ø (–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏) -----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ê–∫—Ç–∏–≤–Ω—ã–µ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_active_notifications(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ê–∫—Ç–∏–≤–Ω—ã–µ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if alerts['notifications']:
        active_notifications = [
            f"‚≠ê ‚Ññ{i + 1} ‚≠ê\n\nüìù *–¢–µ–º–∞*: {n['theme'].lower() if n['theme'] else '–±–µ–∑ —Ç–µ–º—ã'}\nüìÖ *–î–∞—Ç–∞*: {n['time'].strftime('%d.%m.%Y')}\nüïí *–í—Ä–µ–º—è*: {n['time'].strftime('%H:%M')}\nüîÑ *–°—Ç–∞—Ç—É—Å*: {'–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if n['status'] == 'sent' else '–æ—Ç–ª–æ–∂–µ–Ω–æ'}\n"
            for i, n in enumerate([n for n in alerts['notifications'].values() if n['status'] == 'active' and n['category'] == 'time'])
        ]
        if active_notifications:
            bot.send_message(message.chat.id, "*–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)*:\n\n" + "\n\n".join(active_notifications), parse_mode="Markdown")

            markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
            markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=markup)
            bot.register_next_step_handler(message, show_notification_details, 'active')
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π!")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π!")

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–û–ü–û–í–ï–©–ï–ù–ò–Ø (–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏) -----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_stopped_notifications(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    stopped_notifications = [
        f"‚≠ê ‚Ññ{i + 1} ‚≠ê\n\nüìù *–¢–µ–º–∞*: {n['theme'].lower() if n['theme'] else '–±–µ–∑ —Ç–µ–º—ã'}\nüìÖ *–î–∞—Ç–∞*: {n['time'].strftime('%d.%m.%Y')}\nüïí *–í—Ä–µ–º—è*: {n['time'].strftime('%H:%M')}\nüîÑ *–°—Ç–∞—Ç—É—Å*: {'–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if n['status'] == 'sent' else '–æ—Ç–ª–æ–∂–µ–Ω–æ'}\n"
        for i, n in enumerate([n for n in alerts['notifications'].values() if n['status'] == 'sent' and n['category'] == 'time'])
    ]
    if stopped_notifications:
        bot.send_message(message.chat.id, "*–°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)*:\n\n" + "\n\n".join(stopped_notifications), parse_mode="Markdown")

        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')

        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=markup)
        bot.register_next_step_handler(message, show_notification_details, 'sent')
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π!")

@text_only_handler
def show_notification_details(message, status):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        indices = [int(index.strip()) - 1 for index in message.text.split(',')]
        notifications = [n for n in alerts['notifications'].values() if n['status'] == status and n['category'] == 'time']
        valid_indices = [index for index in indices if 0 <= index < len(notifications)]

        if len(valid_indices) != len(indices):
            invalid_numbers = [str(index + 1) for index in indices if index not in valid_indices]
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: `{','.join(invalid_numbers)}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")
            if len(valid_indices) == 0:
                bot.register_next_step_handler(message, show_notification_details, status)
                return

        for index in valid_indices:
            notification = notifications[index]
            theme = notification['theme'].lower() if notification['theme'] else '–±–µ–∑ —Ç–µ–º—ã'
            content_type = notification.get('content_type', '—Ç–µ–∫—Å—Ç')
            status_text = '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if notification['status'] == 'sent' else '–∞–∫—Ç–∏–≤–Ω–æ'

            notification_details = (
                f"*–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*:\n\n"
                f"üìù *–¢–µ–º–∞*: {theme}\n"
                f"üìÅ *–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞*: {content_type}\n"
                f"üìÖ *–î–∞—Ç–∞*: {notification['time'].strftime('%d.%m.%Y')}\n"
                f"üïí *–í—Ä–µ–º—è*: {notification['time'].strftime('%H:%M')}\n"
                f"üîÑ *–°—Ç–∞—Ç—É—Å*: {status_text}\n"
            )

            if content_type == 'text':
                notification_details += f"\n*–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è*:\n\n{notification['text']}\n"

            bot.send_message(message.chat.id, notification_details, parse_mode="Markdown")

            if content_type != 'text':
                for file in notification.get('files', []):
                    if file['type'] == 'photo':
                        bot.send_photo(message.chat.id, file['file_id'], caption=file.get('caption'))
                    elif file['type'] == 'video':
                        bot.send_video(message.chat.id, file['file_id'], caption=file.get('caption'))
                    elif file['type'] == 'document':
                        bot.send_document(message.chat.id, file['file_id'], caption=file.get('caption'))
                    elif file['type'] == 'animation':
                        bot.send_animation(message.chat.id, file['file_id'], caption=file.get('caption'))
                    elif file['type'] == 'sticker':
                        bot.send_sticker(message.chat.id, file['file_id'])
                    elif file['type'] == 'audio':
                        bot.send_audio(message.chat.id, file['file_id'], caption=file.get('caption'))
                    elif file['type'] == 'voice':
                        bot.send_voice(message.chat.id, file['file_id'], caption=file.get('caption'))
                    elif file['type'] == 'video_note':
                        bot.send_video_note(message.chat.id, file['file_id'])

        show_notifications_menu(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è!")
        bot.register_next_step_handler(message, show_notification_details, status)

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–û–ü–û–í–ï–©–ï–ù–ò–Ø (—É–¥–∞–ª–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏) -----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_notification(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    notifications_list = [
        f"‚≠ê *‚Ññ{i + 1}* ‚≠ê\n\nüìù *–¢–µ–º–∞*: {n['theme'].lower() if n['theme'] else '–±–µ–∑ —Ç–µ–º—ã'}\nüìÖ *–î–∞—Ç–∞*: {n['time'].strftime('%d.%m.%Y')}\nüïí *–í—Ä–µ–º—è*: {n['time'].strftime('%H:%M')}\nüîÑ *–°—Ç–∞—Ç—É—Å*: {'–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if n['status'] == 'sent' else '–∞–∫—Ç–∏–≤–Ω–æ'}"
        for i, n in enumerate([n for n in alerts['notifications'].values() if n['category'] == 'time'])
    ]
    if notifications_list:
        bot.send_message(message.chat.id, "*–°–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)*:\n\n" + "\n\n".join(notifications_list), parse_mode="Markdown")

        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')

        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=markup)
        bot.register_next_step_handler(message, process_delete_notification)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")

@text_only_handler
def process_delete_notification(message):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        indices = [int(index.strip()) - 1 for index in message.text.split(',')]
        notifications = list(alerts['notifications'].values())
        valid_indices = [index for index in indices if 0 <= index < len(notifications)]

        if len(valid_indices) != len(indices):
            invalid_numbers = [str(index + 1) for index in indices if index not in valid_indices]
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: `{','.join(invalid_numbers)}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")
            if len(valid_indices) == 0:
                bot.register_next_step_handler(message, process_delete_notification)
                return

        deleted_notifications = []
        for index in sorted(valid_indices, reverse=True):
            notification_id = list(alerts['notifications'].keys())[index]
            deleted_notification = alerts['notifications'].pop(notification_id)
            deleted_notifications.append(deleted_notification)

        new_notifications = {}
        for i, (notification_id, notification) in enumerate(alerts['notifications'].items(), start=1):
            new_notifications[str(i)] = notification

        alerts['notifications'] = new_notifications
        save_database()

        deleted_themes = ", ".join([f"*{msg['theme'].lower()}*" for msg in deleted_notifications])
        bot.send_message(message.chat.id, f"‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ —Ç–µ–º–∞–º *{deleted_themes}* –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")

        show_notifications_menu(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è!")
        bot.register_next_step_handler(message, process_delete_notification)

@text_only_handler
def list_users_for_time_notification(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, choose_user_for_time_notification)

@text_only_handler
def choose_user_for_time_notification(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return

    try:
        index = int(message.text) - 1
        users_data = load_users()
        user_list = list(users_data.keys())
        if 0 <= index < len(user_list):
            user_id = user_list[index]
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:")
            bot.register_next_step_handler(message, set_theme_for_time_notification, user_id)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, choose_user_for_time_notification)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        bot.register_next_step_handler(message, choose_user_for_time_notification)

@text_only_handler
def set_theme_for_time_notification(message, user_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    individual_theme = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª:")
    bot.register_next_step_handler(message, set_time_for_time_notification, user_id, individual_theme)

def set_time_for_time_notification(message, user_id, individual_theme):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    notification_text = message.text or message.caption
    content_type = message.content_type
    file_id = None
    caption = message.caption

    if content_type == 'photo':
        file_id = message.photo[-1].file_id
    elif content_type == 'video':
        file_id = message.video.file_id
    elif content_type == 'document':
        file_id = message.document.file_id
    elif content_type == 'animation':
        file_id = message.animation.file_id
    elif content_type == 'sticker':
        file_id = message.sticker.file_id
    elif content_type == 'audio':
        file_id = message.audio.file_id
    elif content_type == 'voice':
        file_id = message.voice.file_id
    elif content_type == 'video_note':
        file_id = message.video_note.file_id

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=markup)
    bot.register_next_step_handler(message, process_time_notification_date, user_id, individual_theme, notification_text, content_type, file_id, caption)

@text_only_handler
def process_time_notification_date(message, user_id, individual_theme, notification_text, content_type, file_id, caption):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    date_str = message.text
    if not validate_date_format(date_str):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, process_time_notification_date, user_id, individual_theme, notification_text, content_type, file_id, caption)
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:", reply_markup=markup)
    bot.register_next_step_handler(message, process_time_notification_time, user_id, individual_theme, notification_text, date_str, content_type, file_id, caption)

@text_only_handler
def process_time_notification_time(message, user_id, individual_theme, notification_text, date_str, content_type, file_id, caption):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    time_str = message.text
    if not validate_time_format(time_str):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        bot.register_next_step_handler(message, process_time_notification_time, user_id, individual_theme, notification_text, date_str, content_type, file_id, caption)
        return

    try:
        notification_time = datetime.strptime(f"{date_str}, {time_str}", "%d.%m.%Y, %H:%M")
        if notification_time < datetime.now():
            bot.send_message(message.chat.id, "–í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
            bot.register_next_step_handler(message, process_time_notification_time, user_id, individual_theme, notification_text, date_str, content_type, file_id, caption)
            return
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        bot.register_next_step_handler(message, process_time_notification_time, user_id, individual_theme, notification_text, date_str, content_type, file_id, caption)
        return

    notification_id = str(len(alerts['notifications']) + 1)
    alerts['notifications'][notification_id] = {
        'theme': individual_theme,
        'text': notification_text if content_type == 'text' else None,
        'time': notification_time,
        'status': 'active',
        'category': 'time',
        'user_id': user_id,
        'files': [
            {
                'type': content_type,
                'file_id': file_id,
                'caption': caption if content_type != 'text' else None
            }
        ],
        'content_type': content_type
    }
    save_database()

    users_data = load_users()
    username = escape_markdown(users_data.get(user_id, {}).get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))

    theme = individual_theme.lower()
    formatted_time = notification_time.strftime("%d.%m.%Y –≤ %H:%M")
    bot.send_message(message.chat.id, f"‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ *{theme.lower()}* –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {formatted_time} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} - `{user_id}`!", parse_mode="Markdown")
    show_notifications_menu(message)

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–û–ü–û–í–ï–©–ï–ù–ò–Ø (–≤—Å–µ–º) -----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–í—Å–µ–º' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_broadcast_notifications(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–í—Å–µ–º'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
    markup.add('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ', '–£–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ')
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö:", reply_markup=markup)

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–û–ü–û–í–ï–©–ï–ù–ò–Ø (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ) -----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def send_message_to_all(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, set_theme_for_broadcast)

@text_only_handler
def set_theme_for_broadcast(message):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    broadcast_theme = message.text
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª:", reply_markup=markup)
    bot.register_next_step_handler(message, process_broadcast_message, broadcast_theme)

def process_broadcast_message(message, broadcast_theme):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    broadcast_text = message.text or message.caption
    content_type = message.content_type
    file_id = None
    caption = message.caption

    if content_type == 'photo':
        file_id = message.photo[-1].file_id
    elif content_type == 'video':
        file_id = message.video.file_id
    elif content_type == 'document':
        file_id = message.document.file_id
    elif content_type == 'animation':
        file_id = message.animation.file_id
    elif content_type == 'sticker':
        file_id = message.sticker.file_id
    elif content_type == 'audio':
        file_id = message.audio.file_id
    elif content_type == 'voice':
        file_id = message.voice.file_id
    elif content_type == 'video_note':
        file_id = message.video_note.file_id

    users = load_users()
    user_ids = []

    for user_id in users.keys():
        if user_id in blocked_users:
            continue

        try:
            if content_type == 'text':
                bot.send_message(user_id, broadcast_text)
            elif content_type == 'photo':
                bot.send_photo(user_id, file_id, caption=caption)
            elif content_type == 'video':
                bot.send_video(user_id, file_id, caption=caption)
            elif content_type == 'document':
                bot.send_document(user_id, file_id, caption=caption)
            elif content_type == 'animation':
                bot.send_animation(user_id, file_id, caption=caption)
            elif content_type == 'sticker':
                bot.send_sticker(user_id, file_id)
            elif content_type == 'audio':
                bot.send_audio(user_id, file_id, caption=caption)
            elif content_type == 'voice':
                bot.send_voice(user_id, file_id, caption=caption)
            elif content_type == 'video_note':
                bot.send_video_note(user_id, file_id)

            user_ids.append(user_id)

        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                pass
                if user_id not in blocked_users:
                    blocked_users.append(user_id)
                    save_blocked_users(blocked_users)
            else:
                raise e

    notification_id = str(len(alerts['sent_messages']) + 1)
    alerts['sent_messages'][notification_id] = {
        'theme': broadcast_theme,
        'text': broadcast_text if content_type == 'text' else None,
        'time': datetime.now().strftime("%d.%m.%Y –≤ %H:%M"),
        'status': 'sent',
        'category': 'all',
        'user_ids': user_ids,
        'files': [
            {
                'type': content_type,
                'file_id': file_id,
                'caption': caption if content_type != 'text' else None
            }
        ]
    }
    save_database()
    bot.send_message(message.chat.id, "‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
    show_notifications_menu(message)

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–û–ü–û–í–ï–©–ï–ù–ò–Ø (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ) -----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_sent_messages(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if alerts['sent_messages']:
        sent_messages_list = [
            f"‚≠ê *‚Ññ{i + 1}* ‚≠ê\n\nüìù *–¢–µ–º–∞*: {msg['theme'].lower()}\nüë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*: {', '.join(msg.get('user_ids', []))}\nüìÖ *–î–∞—Ç–∞*: {msg['time'].strftime('%d.%m.%Y')}\nüïí *–í—Ä–µ–º—è*: {msg['time'].strftime('%H:%M')}\n"
            for i, msg in enumerate(alerts['sent_messages'].values()) if msg['category'] == 'all'
        ]

        header = "*–°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:*\n\n"
        max_length = 4096
        message_text = header

        for sent_message in sent_messages_list:
            if len(message_text) + len(sent_message) > max_length:
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                message_text = sent_message
            else:
                message_text += sent_message + "\n\n"

        if message_text:
            bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')

        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, show_sent_message_details)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!")

@text_only_handler
def show_sent_message_details(message):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        indices = [int(index.strip()) - 1 for index in message.text.split(',')]
        sent_messages = list(alerts['sent_messages'].values())
        valid_indices = [index for index in indices if 0 <= index < len(sent_messages)]

        if len(valid_indices) != len(indices):
            invalid_numbers = [str(index + 1) for index in indices if index not in valid_indices]
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: `{','.join(invalid_numbers)}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")
            if len(valid_indices) == 0:
                bot.register_next_step_handler(message, show_sent_message_details)
                return

        for index in valid_indices:
            sent_message = sent_messages[index]
            theme = sent_message['theme'].lower() if sent_message['theme'] else '–±–µ–∑ —Ç–µ–º—ã'
            content_type = sent_message.get('content_type', '—Ç–µ–∫—Å—Ç')
            status_text = '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'

            formatted_time = sent_message['time'].strftime("%d.%m.%Y –≤ %H:%M")

            message_text = sent_message.get('text', '')

            sent_message_details = (
                f"*–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*:\n\n"
                f"üìù *–¢–µ–º–∞*: {theme}\n"
                f"üìÅ *–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞*: {content_type}\n"
                f"üìÖ *–î–∞—Ç–∞*: {formatted_time}\n"
                f"üîÑ *–°—Ç–∞—Ç—É—Å*: {status_text}\n"
            )

            if message_text:
                sent_message_details += f"\n*–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è*:\n\n{message_text}\n"

            bot.send_message(message.chat.id, sent_message_details, parse_mode="Markdown")

            for file in sent_message.get('files', []):
                if file['type'] == 'photo':
                    bot.send_photo(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'video':
                    bot.send_video(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'document':
                    bot.send_document(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'animation':
                    bot.send_animation(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'sticker':
                    bot.send_sticker(message.chat.id, file['file_id'])
                elif file['type'] == 'audio':
                    bot.send_audio(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'voice':
                    bot.send_voice(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'video_note':
                    bot.send_video_note(message.chat.id, file['file_id'])

        show_notifications_menu(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!")
        bot.register_next_step_handler(message, show_sent_message_details)
    except IndexError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(message, show_sent_message_details)

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–û–ü–û–í–ï–©–ï–ù–ò–Ø (—É–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ) -----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_sent_messages(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if alerts['sent_messages']:
        sent_messages_list = [
            f"‚≠ê *‚Ññ{i + 1}* ‚≠ê\n\nüìù *–¢–µ–º–∞*: {msg['theme'].lower()}\nüë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*: {', '.join(msg.get('user_ids', []))}\nüìÖ *–î–∞—Ç–∞*: {msg['time'].strftime('%d.%m.%Y')}\nüïí *–í—Ä–µ–º—è*: {msg['time'].strftime('%H:%M')}\n"
            for i, msg in enumerate(alerts['sent_messages'].values()) if msg['category'] == 'all'
        ]

        header = "*–°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:*\n\n"
        max_length = 4096
        message_text = header

        for sent_message in sent_messages_list:
            if len(message_text) + len(sent_message) > max_length:
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                message_text = sent_message
            else:
                message_text += sent_message + "\n\n"

        if message_text:
            bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')

        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, process_delete_sent_message)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")

@text_only_handler
def process_delete_sent_message(message):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        indices = [int(index.strip()) - 1 for index in message.text.split(',')]
        sent_messages = list(alerts['sent_messages'].values())
        valid_indices = [index for index in indices if 0 <= index < len(sent_messages)]

        if len(valid_indices) != len(indices):
            invalid_numbers = [str(index + 1) for index in indices if index not in valid_indices]
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: `{','.join(invalid_numbers)}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")
            if len(valid_indices) == 0:
                bot.register_next_step_handler(message, process_delete_sent_message)
                return

        deleted_messages = []
        for index in sorted(valid_indices, reverse=True):
            notification_id = list(alerts['sent_messages'].keys())[index]
            deleted_message = alerts['sent_messages'].pop(notification_id)
            deleted_messages.append(deleted_message)

        new_sent_messages = {}
        for i, (key, value) in enumerate(alerts['sent_messages'].items(), start=1):
            new_sent_messages[str(i)] = value
        alerts['sent_messages'] = new_sent_messages

        save_database()

        deleted_themes = ", ".join([f"*{msg['theme'].lower()}*" for msg in deleted_messages])
        bot.send_message(message.chat.id, f"‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏—è (–≤—Å–µ–º) –ø–æ —Ç–µ–º–∞–º *{deleted_themes}* –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")

        show_notifications_menu(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!")
        bot.register_next_step_handler(message, process_delete_sent_message)
    except IndexError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(message, process_delete_sent_message)

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–û–ü–û–í–ï–©–ï–ù–ò–Ø (–æ—Ç–¥–µ–ª—å–Ω–æ) -----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–û—Ç–¥–µ–ª—å–Ω–æ' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_individual_notifications(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û—Ç–¥–µ–ª—å–Ω–æ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ')
    markup.add('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ', '–£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ')
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=markup)

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–û–ü–û–í–ï–©–ï–ù–ò–Ø (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ) -----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def send_message_to_individual(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    list_users(message)

def list_users(message):
    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ" if not data.get('blocked', False) else " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, choose_user_for_send)

@text_only_handler
def choose_user_for_send(message):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        index = int(message.text) - 1
        users_data = load_users()
        user_list = list(users_data.keys())
        if 0 <= index < len(user_list):
            user_id = user_list[index]
            send_individual_message(message, user_id)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, choose_user_for_send)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        bot.register_next_step_handler(message, choose_user_for_send)

def send_individual_message(message, user_id):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, set_theme_for_individual_broadcast, user_id)

@text_only_handler
def set_theme_for_individual_broadcast(message, user_id):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    broadcast_theme = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª:")
    bot.register_next_step_handler(message, process_individual_broadcast_message, user_id, broadcast_theme)

def process_individual_broadcast_message(message, user_id, broadcast_theme):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    broadcast_text = message.text or message.caption
    content_type = message.content_type
    file_id = None
    caption = message.caption

    if content_type == 'photo':
        file_id = message.photo[-1].file_id
    elif content_type == 'video':
        file_id = message.video.file_id
    elif content_type == 'document':
        file_id = message.document.file_id
    elif content_type == 'animation':
        file_id = message.animation.file_id
    elif content_type == 'sticker':
        file_id = message.sticker.file_id
    elif content_type == 'audio':
        file_id = message.audio.file_id
    elif content_type == 'voice':
        file_id = message.voice.file_id
    elif content_type == 'video_note':
        file_id = message.video_note.file_id

    try:
        if content_type == 'text':
            bot.send_message(user_id, broadcast_text)
        elif content_type == 'photo':
            bot.send_photo(user_id, file_id, caption=caption)
        elif content_type == 'video':
            bot.send_video(user_id, file_id, caption=caption)
        elif content_type == 'document':
            bot.send_document(user_id, file_id, caption=caption)
        elif content_type == 'animation':
            bot.send_animation(user_id, file_id, caption=caption)
        elif content_type == 'sticker':
            bot.send_sticker(user_id, file_id)
        elif content_type == 'audio':
            bot.send_audio(user_id, file_id, caption=caption)
        elif content_type == 'voice':
            bot.send_voice(user_id, file_id, caption=caption)
        elif content_type == 'video_note':
            bot.send_video_note(user_id, file_id)

    except ApiTelegramException as e:
        if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
            pass
            if user_id not in blocked_users:
                blocked_users.append(user_id)
                save_blocked_users(blocked_users)
        else:
            raise e

    notification_id = str(len(alerts['sent_messages']) + 1)
    alerts['sent_messages'][notification_id] = {
        'theme': broadcast_theme,
        'text': broadcast_text if content_type == 'text' else None,
        'time': datetime.now().strftime("%d.%m.%Y –≤ %H:%M"),
        'status': 'sent',
        'category': 'individual',
        'user_id': [user_id],
        'files': [
            {
                'type': content_type,
                'file_id': file_id,
                'caption': caption if content_type != 'text' else None
            }
        ]
    }
    save_database()

    users_data = load_users()
    username = escape_markdown(users_data.get(user_id, {}).get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))

    bot.send_message(message.chat.id, f"‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} - `{user_id}`!", parse_mode="Markdown")
    show_notifications_menu(message)

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–û–ü–û–í–ï–©–ï–ù–ò–Ø (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ) -----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_individual_messages(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ" if not data.get('blocked', False) else " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, choose_user_for_view)

@text_only_handler
def choose_user_for_view(message):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        indices = [int(index.strip()) - 1 for index in message.text.split(',')]
        users_data = load_users()
        user_list = list(users_data.keys())
        valid_indices = [index for index in indices if 0 <= index < len(user_list)]

        if len(valid_indices) != len(indices):
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, choose_user_for_view)
            return

        for index in valid_indices:
            user_id = user_list[index]
            view_individual_messages_for_user(message, user_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        bot.register_next_step_handler(message, choose_user_for_view)

def view_individual_messages_for_user(message, user_id):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    sent_messages = [msg for msg in alerts['sent_messages'].values() if msg['category'] == 'individual' and user_id in msg.get('user_id', [])]
    if sent_messages:
        sent_messages_list = [
            f"‚≠ê ‚Ññ{i + 1} ‚≠ê\n\nüìù *–¢–µ–º–∞*: {msg['theme'].lower()}\nüë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*: {', '.join(msg.get('user_id', []))}\nüìÖ *–î–∞—Ç–∞*: {msg['time'].strftime('%d.%m.%Y')}\nüïí *–í—Ä–µ–º—è*: {msg['time'].strftime('%H:%M')}\n"
            for i, msg in enumerate(sent_messages)
        ]

        header = "*–°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:*\n\n"
        max_length = 4096
        message_text = header

        for sent_message in sent_messages_list:
            if len(message_text) + len(sent_message) > max_length:
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                message_text = sent_message
            else:
                message_text += sent_message + "\n\n"

        if message_text:
            bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, show_individual_message_details, user_id)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—Å—Ç–º–æ—Ç—Ä–∞ –ø–æ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
        show_notifications_menu(message)

@text_only_handler
def show_individual_message_details(message, user_id):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        indices = [int(index.strip()) - 1 for index in message.text.split(',')]
        sent_messages = [msg for msg in alerts['sent_messages'].values() if msg['category'] == 'individual' and user_id in msg.get('user_id', [])]
        valid_indices = [index for index in indices if 0 <= index < len(sent_messages)]

        if len(valid_indices) != len(indices):
            invalid_numbers = [str(index + 1) for index in indices if index not in valid_indices]
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: `{','.join(invalid_numbers)}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")
            if len(valid_indices) == 0:
                bot.register_next_step_handler(message, show_individual_message_details, user_id)
                return

        for index in valid_indices:
            sent_message = sent_messages[index]
            theme = sent_message['theme'].lower() if sent_message['theme'] else '–±–µ–∑ —Ç–µ–º—ã'
            content_type = sent_message.get('content_type', '—Ç–µ–∫—Å—Ç')
            status_text = '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if sent_message.get('status') == 'sent' else '–∞–∫—Ç–∏–≤–Ω–æ'

            formatted_time = sent_message['time'].strftime("%d.%m.%Y –≤ %H:%M")

            message_text = sent_message.get('text', '')

            sent_message_details = (
                f"*–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*:\n\n"
                f"üìù *–¢–µ–º–∞*: {theme}\n"
                f"üìÅ *–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞*: {content_type}\n"
                f"üìÖ *–î–∞—Ç–∞*: {formatted_time}\n"
                f"üîÑ *–°—Ç–∞—Ç—É—Å*: {status_text}\n"
            )

            if message_text:
                sent_message_details += f"\n*–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è*:\n\n{message_text}\n"

            bot.send_message(message.chat.id, sent_message_details, parse_mode="Markdown")

            for file in sent_message.get('files', []):
                if file['type'] == 'photo':
                    bot.send_photo(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'video':
                    bot.send_video(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'document':
                    bot.send_document(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'animation':
                    bot.send_animation(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'sticker':
                    bot.send_sticker(message.chat.id, file['file_id'])
                elif file['type'] == 'audio':
                    bot.send_audio(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'voice':
                    bot.send_voice(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'video_note':
                    bot.send_video_note(message.chat.id, file['file_id'])

        show_notifications_menu(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è!")
        bot.register_next_step_handler(message, show_individual_message_details, user_id)

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–û–ü–û–í–ï–©–ï–ù–ò–Ø (—É–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ) -----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_individual_messages(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ" if not data.get('blocked', False) else " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, choose_user_for_delete)

@text_only_handler
def choose_user_for_delete(message):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        index = int(message.text) - 1
        users_data = load_users()
        user_list = list(users_data.keys())
        if 0 <= index < len(user_list):
            user_id = user_list[index]
            delete_individual_messages_for_user(message, user_id)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, choose_user_for_delete)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        bot.register_next_step_handler(message, choose_user_for_delete)

def delete_individual_messages_for_user(message, user_id):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    sent_messages = [msg for msg in alerts['sent_messages'].values() if msg['category'] == 'individual' and user_id in msg.get('user_id', [])]
    if sent_messages:
        sent_messages_list = [
            f"‚≠ê ‚Ññ{i + 1} ‚≠ê\n\nüìù *–¢–µ–º–∞*: {msg['theme'].lower()}\nüë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*: {', '.join(msg.get('user_id', []))}\nüìÖ *–î–∞—Ç–∞*: {msg['time'].strftime('%d.%m.%Y')}\nüïí *–í—Ä–µ–º—è*: {msg['time'].strftime('%H:%M')}\n"
            for i, msg in enumerate(sent_messages)
        ]

        header = "*–°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:*\n\n"
        max_length = 4096
        message_text = header

        for sent_message in sent_messages_list:
            if len(message_text) + len(sent_message) > max_length:
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                message_text = sent_message
            else:
                message_text += sent_message + "\n\n"

        if message_text:
            bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, process_delete_individual_message, user_id)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
        show_notifications_menu(message)

@text_only_handler
def process_delete_individual_message(message, user_id):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è":
        show_notifications_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        indices = [int(index.strip()) - 1 for index in message.text.split(',')]
        sent_messages = [msg for msg in alerts['sent_messages'].values() if msg['category'] == 'individual' and user_id in msg.get('user_id', [])]
        valid_indices = [index for index in indices if 0 <= index < len(sent_messages)]

        if len(valid_indices) != len(indices):
            invalid_numbers = [str(index + 1) for index in indices if index not in valid_indices]
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: `{','.join(invalid_numbers)}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")
            if len(valid_indices) == 0:
                bot.register_next_step_handler(message, process_delete_individual_message, user_id)
                return

        deleted_messages = []
        for index in sorted(valid_indices, reverse=True):
            notification_id = list(alerts['sent_messages'].keys())[index]
            deleted_message = alerts['sent_messages'].pop(notification_id)
            deleted_messages.append(deleted_message)

        new_sent_messages = {}
        for i, (key, value) in enumerate(alerts['sent_messages'].items(), start=1):
            new_sent_messages[str(i)] = value
        alerts['sent_messages'] = new_sent_messages

        save_database()

        deleted_themes = ", ".join([f"*{msg['theme'].lower()}*" for msg in deleted_messages])
        bot.send_message(message.chat.id, f"‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏—è (–æ—Ç–¥–µ–ª—å–Ω–æ) –ø–æ —Ç–µ–º–∞–º *{deleted_themes}* –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")

        show_notifications_menu(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è!")
        bot.register_next_step_handler(message, process_delete_individual_message, user_id)
    except IndexError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(message, process_delete_individual_message, user_id)

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–î–ò–ê–õ–û–ì–ò ---------------------------------------------------

ADMIN_SESSIONS_FILE = 'data/admin/admin_user_payments/admin_sessions.json'
USER_DB_PATH = 'data/admin/admin_user_payments/users.json'
CHAT_HISTORY_PATH = 'data/admin/chats/chat_history.json'

dialog_states = {}

def check_admin_access(message):
    admin_sessions = load_admin_sessions()
    if str(message.chat.id) in admin_sessions:
        return True
    else:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return False

def load_admin_sessions():
    with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
        data = json.load(file)
    return data['admin_sessions']

def load_users():
    check_and_create_file()
    try:
        with open(DB_PATH, 'r', encoding='utf-8') as file:
            return json.load(file)
    except UnicodeDecodeError as e:
        with open(DB_PATH, 'r', encoding='cp1251') as file:
            content = file.read()
            with open(DB_PATH, 'w', encoding='utf-8') as outfile:
                json.dump(json.loads(content), outfile, ensure_ascii=False, indent=4)
            return json.loads(content)
    except json.JSONDecodeError as e:
        return {}

def escape_markdown(text):
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

def load_chat_history():
    if os.path.exists(CHAT_HISTORY_PATH):
        with open(CHAT_HISTORY_PATH, 'r', encoding='utf-8') as file:
            return json.load(file)
    return {}

def save_dialog_states():
    with open('data/admin/chats/dialog_states.json', 'w', encoding='utf-8') as file:
        json.dump(dialog_states, file, ensure_ascii=False, indent=4)

@bot.message_handler(func=lambda message: message.text == '–î–∏–∞–ª–æ–≥–∏' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_dialogs_menu(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–î–∏–∞–ª–æ–≥–∏'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤", "–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤:", reply_markup=markup)

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–î–ò–ê–õ–û–ì–ò (–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_user_dialogs(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        return_to_communication(message)
        return

    chat_history = load_chat_history()
    users = load_users()

    user_ids = [user_id.split('_')[1] for user_id in chat_history.keys()]
    user_ids = list(set(user_ids))

    user_list = "\n\n".join(
        f"‚Ññ{i + 1}. {escape_markdown(users.get(user_id, {}).get('username', 'N/A'))} - `{user_id}`"
        for i, user_id in enumerate(user_ids)
    )

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ"))
    keyboard.add(KeyboardButton("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"))

    try:
        bot.send_message(
            message.chat.id,
            f"*–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤:*\n\n{user_list}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    except ApiTelegramException as e:
        if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
            pass
            blocked_users = load_blocked_users()
            if message.chat.id not in blocked_users:
                blocked_users.append(message.chat.id)
                save_blocked_users(blocked_users)
        else:
            raise e

    dialog_states[message.chat.id] = {"state": "select_user", "user_ids": user_ids}
    save_dialog_states()

@bot.message_handler(func=lambda message: message.chat.id in dialog_states and dialog_states[message.chat.id].get("state") == "select_user")
@check_user_blocked
def handle_user_selection(message):
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        dialog_states.pop(message.chat.id, None)
        save_dialog_states()
        return show_admin_panel(message)

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        return_to_communication(message)
        return

    if message.text == "–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏":
        dialog_states.pop(message.chat.id, None)
        save_dialog_states()
        show_delete_dialogs_menu(message)
        return

    user_ids = dialog_states[message.chat.id]["user_ids"]
    users = load_users()

    try:
        selected_index = int(message.text) - 1
        if selected_index < 0 or selected_index >= len(user_ids):
            raise IndexError

        selected_user_id = user_ids[selected_index]
        selected_username = users.get(selected_user_id, {}).get("username", "N/A")

        chat_key = f"{message.chat.id}_{selected_user_id}"
        chat_history = load_chat_history().get(chat_key, [])

        if not chat_history:
            bot.send_message(message.chat.id, "‚ùå –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—É—Å—Ç–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.", parse_mode="Markdown")
            return

        dialog_list = []
        for i, dialog in enumerate(chat_history):
            if dialog:
                timestamps = [entry['timestamp'] for entry in dialog]
                start_time = timestamps[0].split(" –≤ ")[1]
                end_time = timestamps[-1].split(" –≤ ")[1]
                date = timestamps[0].split(" –≤ ")[0]
                dialog_list.append(f"‚Ññ{i + 1}. *{date}* (—Å {start_time} –¥–æ {end_time})")
            else:
                dialog_list.append(f"‚Ññ{i + 1}. (–ü—É—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥)")

        dialog_text = "\n".join(dialog_list)
        try:
            bot.send_message(
                message.chat.id,
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {escape_markdown(selected_username)} - `{selected_user_id}`:\n\n{dialog_text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞:",
                parse_mode="Markdown"
            )
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                blocked_users = load_blocked_users()
                if message.chat.id not in blocked_users:
                    blocked_users.append(message.chat.id)
                    save_blocked_users(blocked_users)
            else:
                raise e

        dialog_states[message.chat.id] = {
            "state": "select_dialog",
            "selected_user_id": selected_user_id,
            "chat_history": chat_history,
        }
        save_dialog_states()

    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@bot.message_handler(func=lambda message: message.chat.id in dialog_states and dialog_states[message.chat.id].get("state") == "select_dialog")
@check_user_blocked
def handle_dialog_selection(message):
    selected_user_id = dialog_states[message.chat.id]["selected_user_id"]
    chat_key = f"{message.chat.id}_{selected_user_id}"
    chat_history = load_chat_history().get(chat_key, [])

    if not chat_history:
        bot.send_message(message.chat.id, "‚ùå –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—É—Å—Ç–∞!", parse_mode="Markdown")
        show_communication_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        return_to_communication(message)
        return

    try:
        selected_dialog_index = int(message.text) - 1
        if selected_dialog_index < 0 or selected_dialog_index >= len(chat_history):
            raise IndexError

        selected_dialog = chat_history[selected_dialog_index]

        if not selected_dialog:
            bot.send_message(message.chat.id, "‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –ø—É—Å—Ç!")
            show_communication_menu(message)
            return

        for entry in selected_dialog:
            timestamp = entry['timestamp']
            sender = entry['type']
            content = entry['content']
            caption = entry.get('caption')

            if caption is not None:
                caption = caption.lower()

            if content.startswith("photo:"):
                photo_id = content.replace("photo:", "").strip()
                message_text = f"üë§ *{sender.upper()}* - [–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è]"
                if caption:
                    message_text += f"\n‚úç –ü–æ–¥–ø–∏—Å—å - {caption}"
                message_text += f"\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                try:
                    bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                    bot.send_photo(message.chat.id, photo_id)
                except ApiTelegramException as e:
                    if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                        pass
                        blocked_users = load_blocked_users()
                        if message.chat.id not in blocked_users:
                            blocked_users.append(message.chat.id)
                            save_blocked_users(blocked_users)
                    else:
                        raise e

            elif content.startswith("sticker:"):
                sticker_id = content.replace("sticker:", "").strip()
                message_text = f"üë§ *{sender.upper()}* - [–°—Ç–∏–∫–µ—Ä]"
                message_text += f"\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                try:
                    bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                    bot.send_sticker(message.chat.id, sticker_id)
                except ApiTelegramException as e:
                    if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                        pass
                        blocked_users = load_blocked_users()
                        if message.chat.id not in blocked_users:
                            blocked_users.append(message.chat.id)
                            save_blocked_users(blocked_users)
                    else:
                        raise e

            elif content.startswith("voice:"):
                voice_id = content.replace("voice:", "").strip()
                message_text = f"üë§ *{sender.upper()}* - [–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]"
                message_text += f"\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                try:
                    bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                    bot.send_voice(message.chat.id, voice_id)
                except ApiTelegramException as e:
                    if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                        pass
                        blocked_users = load_blocked_users()
                        if message.chat.id not in blocked_users:
                            blocked_users.append(message.chat.id)
                            save_blocked_users(blocked_users)
                    else:
                        raise e

            elif content.startswith("video:"):
                video_id = content.replace("video:", "").strip()
                message_text = f"üë§ *{sender.upper()}* - [–í–∏–¥–µ–æ]"
                if caption:
                    message_text += f"\n‚úç –ü–æ–¥–ø–∏—Å—å - {caption}"
                message_text += f"\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                try:
                    bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                    bot.send_video(message.chat.id, video_id)
                except ApiTelegramException as e:
                    if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                        pass
                        blocked_users = load_blocked_users()
                        if message.chat.id not in blocked_users:
                            blocked_users.append(message.chat.id)
                            save_blocked_users(blocked_users)
                    else:
                        raise e

            elif content.startswith("document:"):
                document_id = content.replace("document:", "").strip()
                message_text = f"üë§ *{sender.upper()}* - [–î–æ–∫—É–º–µ–Ω—Ç]"
                if caption:
                    message_text += f"\n‚úç –ü–æ–¥–ø–∏—Å—å - {caption}"
                message_text += f"\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                try:
                    bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                    bot.send_document(message.chat.id, document_id)
                except ApiTelegramException as e:
                    if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                        pass
                        blocked_users = load_blocked_users()
                        if message.chat.id not in blocked_users:
                            blocked_users.append(message.chat.id)
                            save_blocked_users(blocked_users)
                    else:
                        raise e

            elif content.startswith("animation:"):
                animation_id = content.replace("animation:", "").strip()
                message_text = f"üë§ *{sender.upper()}* - [–ê–Ω–∏–º–∞—Ü–∏—è]"
                if caption:
                    message_text += f"\n‚úç –ü–æ–¥–ø–∏—Å—å - {escape_markdown(caption)}"
                message_text += f"\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                try:
                    bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                    bot.send_animation(message.chat.id, animation_id)
                except ApiTelegramException as e:
                    if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                        pass
                        blocked_users = load_blocked_users()
                        if message.chat.id not in blocked_users:
                            blocked_users.append(message.chat.id)
                            save_blocked_users(blocked_users)
                    else:
                        raise e

            elif content.startswith("audio:"):
                audio_id = content.replace("audio:", "").strip()
                message_text = f"üë§ *{sender.upper()}* - [–ê—É–¥–∏–æ]"
                if caption:
                    message_text += f"\n‚úç –ü–æ–¥–ø–∏—Å—å - {caption}"
                message_text += f"\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                try:
                    bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                    bot.send_audio(message.chat.id, audio_id)
                except ApiTelegramException as e:
                    if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                        pass
                        blocked_users = load_blocked_users()
                        if message.chat.id not in blocked_users:
                            blocked_users.append(message.chat.id)
                            save_blocked_users(blocked_users)
                    else:
                        raise e

            elif content.startswith("location:"):
                location_data = content.replace("location:", "").strip()
                lat, lon = map(float, location_data.split(","))
                message_text = f"üë§ *{sender.upper()}* - [–õ–æ–∫–∞—Ü–∏—è]"
                message_text += f"\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                try:
                    bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                    bot.send_location(message.chat.id, latitude=lat, longitude=lon)
                except ApiTelegramException as e:
                    if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                        pass
                        blocked_users = load_blocked_users()
                        if message.chat.id not in blocked_users:
                            blocked_users.append(message.chat.id)
                            save_blocked_users(blocked_users)
                    else:
                        raise e

            elif content.startswith("contact:"):
                contact_data = content.replace("contact:", "").strip()
                phone, first_name, last_name = contact_data.split(",", maxsplit=2)
                message_text = f"üë§ *{sender.upper()}* - [–ö–æ–Ω—Ç–∞–∫—Ç]"
                message_text += f"\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                try:
                    bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                    bot.send_contact(message.chat.id, phone_number=phone, first_name=first_name, last_name=last_name)
                except ApiTelegramException as e:
                    if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                        pass
                        blocked_users = load_blocked_users()
                        if message.chat.id not in blocked_users:
                            blocked_users.append(message.chat.id)
                            save_blocked_users(blocked_users)
                    else:
                        raise e

            elif content.startswith("gif:"):
                gif_id = content.replace("gif:", "").strip()
                message_text = f"üë§ *{sender.upper()}* - [GIF]"
                if caption:
                    message_text += f"\n‚úç –ü–æ–¥–ø–∏—Å—å - {caption}"
                message_text += f"\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                try:
                    bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                    bot.send_document(message.chat.id, gif_id)
                except ApiTelegramException as e:
                    if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                        pass
                        blocked_users = load_blocked_users()
                        if message.chat.id not in blocked_users:
                            blocked_users.append(message.chat.id)
                            save_blocked_users(blocked_users)
                    else:
                        raise e

            else:
                message_text = f"üë§ *{sender.upper()}* - [–¢–µ–∫—Å—Ç]\nüìù –¢–µ–∫—Å—Ç - {content}\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                try:
                    bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                except ApiTelegramException as e:
                    if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                        pass
                        blocked_users = load_blocked_users()
                        if message.chat.id not in blocked_users:
                            blocked_users.append(message.chat.id)
                            save_blocked_users(blocked_users)
                    else:
                        raise e

        del dialog_states[message.chat.id]
        save_dialog_states()

        show_communication_menu(message)

    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞")

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–î–ò–ê–õ–û–ì–ò (—É–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_delete_dialogs_menu(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

    try:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤:", reply_markup=markup)
    except ApiTelegramException as e:
        if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
            pass
            blocked_users = load_blocked_users()
            if message.chat.id not in blocked_users:
                blocked_users.append(message.chat.id)
                save_blocked_users(blocked_users)
        else:
            raise e

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–î–ò–ê–õ–û–ì–ò (—É–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_dialog(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        return_to_communication(message)
        return

    chat_history = load_chat_history()
    users = load_users()

    user_ids = [user_id.split('_')[1] for user_id in chat_history.keys()]
    user_ids = list(set(user_ids))

    user_list = "\n\n".join(
        f"‚Ññ{i + 1}. {escape_markdown(users.get(user_id, {}).get('username', 'N/A'))} - `{user_id}`"
        for i, user_id in enumerate(user_ids)
    )

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ"))
    keyboard.add(KeyboardButton("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"))

    bot.send_message(
        message.chat.id,
        f"*–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤:*\n\n{user_list}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

    dialog_states[message.chat.id] = {"state": "delete_dialog_select_user", "user_ids": user_ids}
    save_dialog_states()

@bot.message_handler(func=lambda message: message.chat.id in dialog_states and dialog_states[message.chat.id].get("state") == "delete_dialog_select_user")
@check_user_blocked
def handle_delete_dialog_user_selection(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        return_to_communication(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        dialog_states.pop(message.chat.id, None)
        save_dialog_states()
        return show_admin_panel(message)

    user_ids = dialog_states[message.chat.id]["user_ids"]
    users = load_users()

    try:
        selected_index = int(message.text) - 1
        if selected_index < 0 or selected_index >= len(user_ids):
            raise IndexError

        selected_user_id = user_ids[selected_index]
        selected_username = users.get(selected_user_id, {}).get("username", "N/A")

        chat_key = f"{message.chat.id}_{selected_user_id}"
        chat_history = load_chat_history().get(chat_key, [])

        if not chat_history:
            bot.send_message(message.chat.id, "‚ùå –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—É—Å—Ç–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.", parse_mode="Markdown")
            return

        dialog_list = []
        for i, dialog in enumerate(chat_history):
            if dialog:
                timestamps = [entry['timestamp'] for entry in dialog]
                start_time = timestamps[0].split(" –≤ ")[1]
                end_time = timestamps[-1].split(" –≤ ")[1]
                date = timestamps[0].split(" –≤ ")[0]
                dialog_list.append(f"‚Ññ{i + 1}. *{date}* (—Å {start_time} –¥–æ {end_time})")
            else:
                dialog_list.append(f"‚Ññ{i + 1}. (–ü—É—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥)")

        dialog_text = "\n".join(dialog_list)
        try:
            bot.send_message(
                message.chat.id,
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {escape_markdown(selected_username)} - `{selected_user_id}`:\n\n{dialog_text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞:",
                parse_mode="Markdown"
            )
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                blocked_users = load_blocked_users()
                if message.chat.id not in blocked_users:
                    blocked_users.append(message.chat.id)
                    save_blocked_users(blocked_users)
            else:
                raise e

        dialog_states[message.chat.id] = {
            "state": "delete_dialog_select_dialog",
            "selected_user_id": selected_user_id,
            "chat_history": chat_history,
        }
        save_dialog_states()

    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@bot.message_handler(func=lambda message: message.chat.id in dialog_states and dialog_states[message.chat.id].get("state") == "delete_dialog_select_dialog")
@check_user_blocked
def handle_delete_dialog_selection(message):
    selected_user_id = dialog_states[message.chat.id]["selected_user_id"]
    chat_key = f"{message.chat.id}_{selected_user_id}"
    chat_history = load_chat_history().get(chat_key, [])

    if not chat_history:
        bot.send_message(message.chat.id, "‚ùå –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—É—Å—Ç–∞!", parse_mode="Markdown")
        return show_communication_menu(message)

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        return_to_communication(message)
        return

    try:
        selected_dialog_index = int(message.text) - 1
        if selected_dialog_index < 0 or selected_dialog_index >= len(chat_history):
            raise IndexError

        del chat_history[selected_dialog_index]

        chat_history_data = load_chat_history()
        chat_history_data[chat_key] = chat_history

        with open(CHAT_HISTORY_PATH, 'w', encoding='utf-8') as file:
            json.dump(chat_history_data, file, ensure_ascii=False, indent=4)

        bot.send_message(message.chat.id, "‚úÖ –î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", parse_mode="Markdown")
        return show_communication_menu(message)

    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞")

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–î–ò–ê–õ–û–ì–ò (—É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_all_dialogs(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    chat_history = load_chat_history()
    users = load_users()

    user_ids = [user_id.split('_')[1] for user_id in chat_history.keys()]
    user_ids = list(set(user_ids))

    user_list = "\n\n".join(
        f"‚Ññ{i + 1}. {escape_markdown(users.get(user_id, {}).get('username', 'N/A'))} - `{user_id}`"
        for i, user_id in enumerate(user_ids)
    )

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ"))
    keyboard.add(KeyboardButton("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"))

    try:
        bot.send_message(
            message.chat.id,
            f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤:*\n\n{user_list}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    except ApiTelegramException as e:
        if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
            pass
            blocked_users = load_blocked_users()
            if message.chat.id not in blocked_users:
                blocked_users.append(message.chat.id)
                save_blocked_users(blocked_users)
        else:
            raise e

    dialog_states[message.chat.id] = {"state": "delete_all_dialogs_select_user", "user_ids": user_ids}
    save_dialog_states()

@bot.message_handler(func=lambda message: message.chat.id in dialog_states and dialog_states[message.chat.id].get("state") == "delete_all_dialogs_select_user")
@check_user_blocked
def handle_delete_all_dialogs_user_selection(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        return_to_communication(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        dialog_states.pop(message.chat.id, None)
        save_dialog_states()
        return show_admin_panel(message)

    user_ids = dialog_states[message.chat.id]["user_ids"]
    users = load_users()

    try:
        selected_index = int(message.text) - 1
        if selected_index < 0 or selected_index >= len(user_ids):
            raise IndexError

        selected_user_id = user_ids[selected_index]
        selected_username = users.get(selected_user_id, {}).get("username", "N/A")

        chat_key = f"{message.chat.id}_{selected_user_id}"
        chat_history = load_chat_history().get(chat_key, [])

        if not chat_history:
            bot.send_message(message.chat.id, "‚ùå –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—É—Å—Ç–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.", parse_mode="Markdown")
            return

        try:
            bot.send_message(
                message.chat.id,
                f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {escape_markdown(selected_username)} - `{selected_user_id}`?\n\n–í–≤–µ–¥–∏—Ç–µ *–¥–∞* –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ *–Ω–µ—Ç* –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:",
                parse_mode="Markdown"
            )
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                blocked_users = load_blocked_users()
                if message.chat.id not in blocked_users:
                    blocked_users.append(message.chat.id)
                    save_blocked_users(blocked_users)
            else:
                raise e

        dialog_states[message.chat.id] = {
            "state": "confirm_delete_all_dialogs",
            "selected_user_id": selected_user_id,
        }
        save_dialog_states()

    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@bot.message_handler(func=lambda message: message.chat.id in dialog_states and dialog_states[message.chat.id].get("state") == "confirm_delete_all_dialogs")
@check_user_blocked
def handle_confirm_delete_all_dialogs(message):
    if message.text.lower() not in ["–¥–∞", "–Ω–µ—Ç"]:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–¥–∞* –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ *–Ω–µ—Ç* –¥–ª—è –æ—Ç–º–µ–Ω—ã", parse_mode="Markdown")
        return

    if message.text.lower() == "–¥–∞":
        selected_user_id = dialog_states[message.chat.id]["selected_user_id"]
        chat_key = f"{message.chat.id}_{selected_user_id}"

        chat_history_data = load_chat_history()
        if chat_key in chat_history_data:
            del chat_history_data[chat_key]

        with open(CHAT_HISTORY_PATH, 'w', encoding='utf-8') as file:
            json.dump(chat_history_data, file, ensure_ascii=False, indent=4)

        bot.send_message(message.chat.id, "‚úÖ –í—Å–µ –¥–∏–∞–ª–æ–≥–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç–º–µ–Ω–µ–Ω–æ!", parse_mode="Markdown")

    return show_communication_menu(message)

# -------------------------------------------------- –†–ï–ö–õ–ê–ú–ê ---------------------------------------------------

ADVERTISEMENT_PATH = 'data/admin/chats/advertisement.json'

advertisements = {}
temp_advertisement = {
    'text': None,
    'caption': None,
    'files': [],
    'chat_id': None
}

def save_advertisements():
    with open(ADVERTISEMENT_PATH, 'w', encoding='utf-8') as file:
        json.dump(advertisements, file, ensure_ascii=False, indent=4)

def load_advertisements():
    if os.path.exists(ADVERTISEMENT_PATH):
        with open(ADVERTISEMENT_PATH, 'r', encoding='utf-8') as file:
            data = json.load(file)
            for adv in data['advertisements'].values():
                if 'expected_date' in adv and 'expected_time' in adv:
                    adv['expected_date'] = datetime.strptime(adv['expected_date'], "%d.%m.%Y").strftime("%d.%m.%Y")
                    adv['expected_time'] = datetime.strptime(adv['expected_time'], "%H:%M").strftime("%H:%M")
                if 'end_date' in adv and 'end_time' in adv:
                    adv['end_date'] = datetime.strptime(adv['end_date'], "%d.%m.%Y").strftime("%d.%m.%Y")
                    adv['end_time'] = datetime.strptime(adv['end_time'], "%H:%M").strftime("%H:%M")
            return data
    return {"advertisements": {}}

advertisements = load_advertisements()
blocked_users = load_blocked_users()

@bot.message_handler(func=lambda message: message.text == '–†–µ–∫–ª–∞–º–∞' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_advertisement_menu(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–†–µ–∫–ª–∞–º–∞'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    handle_admin_advertisement_requests(message)

def handle_admin_advertisement_requests(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É', '–£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:", reply_markup=markup)

# -------------------------------------------------- –†–ï–ö–õ–ê–ú–ê (–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É) ---------------------------------------------------

def validate_date_format(date_str):
    if date_str is None:
        return False
    try:
        datetime.strptime(date_str, "%d.%m.%Y")
        return True
    except ValueError:
        return False

def validate_future_date(date_str):
    today = datetime.now().date()
    input_date = datetime.strptime(date_str, "%d.%m.%Y").date()
    return input_date >= today

def validate_time_format(time_str):
    try:
        datetime.strptime(time_str, "%H:%M")
        return True
    except ValueError:
        return False

def validate_future_time(date_str, time_str):
    now = datetime.now()
    input_datetime = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
    return input_datetime >= now

def validate_duration(duration_str):
    try:
        duration = int(duration_str)
        return 1 <= duration <= 7
    except ValueError:
        return False

@bot.message_handler(func=lambda message: message.text == '–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_advertisement_requests(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É":
        show_advertisement_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    pending_advertisements = [adv for adv in advertisements['advertisements'].values() if adv['status'] == 'pending']
    current_time = datetime.now()

    for adv in pending_advertisements:
        end_datetime = datetime.strptime(f"{adv['end_date']} {adv['end_time']}", "%d.%m.%Y %H:%M")
        if current_time >= end_datetime:
            advertisement_id = next(key for key, value in advertisements['advertisements'].items() if value == adv)
            user_id = adv['user_id']
            theme = adv['theme']
            del advertisements['advertisements'][advertisement_id]
            save_advertisements()
            bot.send_message(user_id, f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ —Ç–µ–º–µ *{theme.lower()}* –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫!", parse_mode="Markdown")

    pending_advertisements = [adv for adv in advertisements['advertisements'].values() if adv['status'] == 'pending']
    if pending_advertisements:
        advertisement_list = [
            f"‚≠ê *‚Ññ{i + 1}*\n\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*: `{adv['user_id']}`\n"
            f"üìù *–¢–µ–º–∞*: {adv['theme'].lower()}\n"
            f"üìÖ *–ù–∞—á–∞–ª–æ*: {adv['expected_date']} –≤ {adv['expected_time']}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü*: {adv.get('end_date', 'N/A')} –≤ {adv.get('end_time', 'N/A')}\n\n"
            for i, adv in enumerate(pending_advertisements)
        ]
        full_message = "*–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤* –Ω–∞ —Ä–µ–∫–ª–∞–º—É:\n\n" + "\n\n".join(advertisement_list)

        max_length = 4096
        if len(full_message) > max_length:
            parts = [full_message[i:i + max_length] for i in range(0, len(full_message), max_length)]
            for part in parts:
                bot.send_message(message.chat.id, part, parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, full_message, parse_mode="Markdown")

        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, show_advertisement_request_details)
    else:
        bot.send_message(message.chat.id, "‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–µ–∫–ª–∞–º—É –Ω–µ—Ç!", parse_mode="Markdown")

def show_advertisement_request_details(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É":
        show_advertisement_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    status_translation = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'accepted': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞',
        'sent': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
    }

    try:
        index = int(message.text) - 1
        advertisement_list = list(advertisements['advertisements'].values())
        if 0 <= index < len(advertisement_list):
            advertisement = advertisement_list[index]
            text = advertisement['text']

            info_message = (
                f"‚≠ê *–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∫–ª–∞–º–µ*:\n\n"
                f"üìù *–¢–µ–º–∞*: {advertisement['theme'].lower()}\n"
                f"üìÖ *–ù–∞—á–∞–ª–æ*: {advertisement['expected_date']} –≤ {advertisement['expected_time']}\n"
                f"‚åõ *–ö–æ–Ω–µ—Ü*: {advertisement.get('end_date', 'N/A')} –≤ {advertisement.get('end_time', 'N/A')}\n"
                f"üìç *–°—Ç–∞—Ç—É—Å*: {status_translation.get(advertisement['status'], '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n\n"
            )

            bot.send_message(message.chat.id, info_message, parse_mode="Markdown")

            if text and text != 'None':
                message_text = f"üìù –¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã üìù\n\n{text}"
            else:
                message_text = ""

            if 'files' in advertisement and advertisement['files']:
                media_group = []
                first_file = True
                for file in advertisement['files']:
                    if first_file:
                        caption = message_text
                    else:
                        caption = None
                    if file['type'] == 'photo':
                        media_group.append(telebot.types.InputMediaPhoto(file['file_id'], caption=caption))
                    elif file['type'] == 'video':
                        media_group.append(telebot.types.InputMediaVideo(file['file_id'], caption=caption))
                    elif file['type'] == 'document':
                        media_group.append(telebot.types.InputMediaDocument(file['file_id'], caption=caption))
                    elif file['type'] == 'animation':
                        media_group.append(telebot.types.InputMediaAnimation(file['file_id'], caption=caption))
                    elif file['type'] == 'sticker':
                        bot.send_sticker(message.chat.id, file['file_id'])
                    elif file['type'] == 'audio':
                        media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
                    elif file['type'] == 'voice':
                        media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
                    elif file['type'] == 'video_note':
                        bot.send_video_note(message.chat.id, file['file_id'])
                    first_file = False

                if media_group:
                    bot.send_media_group(message.chat.id, media_group)
            else:
                if message_text:
                    bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

            markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            markup.add('–ü—Ä–∏–Ω—è—Ç—å —Ä–µ–∫–ª–∞–º—É', '–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Ä–µ–∫–ª–∞–º—É')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É')
            markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:", reply_markup=markup)
            bot.register_next_step_handler(message, handle_advertisement_request_action, index)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, show_advertisement_request_details)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞!")
        bot.register_next_step_handler(message, show_advertisement_request_details)

def handle_advertisement_request_action(message, index):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É":
        show_advertisement_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    advertisement_id = list(advertisements['advertisements'].keys())[index]
    if advertisement_id not in advertisements['advertisements']:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –†–µ–∫–ª–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        show_advertisement_menu(message)
        return

    advertisement = advertisements['advertisements'][advertisement_id]

    if message.text == '–ü—Ä–∏–Ω—è—Ç—å —Ä–µ–∫–ª–∞–º—É':
        advertisements['advertisements'][advertisement_id]['status'] = 'accepted'
        save_advertisements()
        bot.send_message(message.chat.id, "‚úÖ –†–µ–∫–ª–∞–º–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
        choose_send_advertisement_action(message, advertisement_id)

    elif message.text == '–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Ä–µ–∫–ª–∞–º—É':
        user_id = advertisement['user_id']
        theme = advertisement['theme']
        del advertisements['advertisements'][advertisement_id]
        save_advertisements()
        bot.send_message(message.chat.id, "‚ùå –†–µ–∫–ª–∞–º–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
        bot.send_message(user_id, f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ —Ç–µ–º–µ *{theme.lower()}* –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", parse_mode="Markdown")
        show_advertisement_menu(message)

    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        show_advertisement_request_details(message)

def handle_user_withdraw_advertisement(message):
    user_id = message.chat.id
    for adv_id, adv in advertisements['advertisements'].items():
        if adv['user_id'] == user_id and adv['status'] == 'pending':
            del advertisements['advertisements'][adv_id]
            save_advertisements()
            bot.send_message(message.chat.id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω–∞!")
            return

    bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

def schedule_advertisement(message, advertisement_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É":
        show_advertisement_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    advertisement = advertisements['advertisements'][advertisement_id]
    bot.send_message(message.chat.id, f"–¢–µ–º–∞: {advertisement['theme']}")

    if advertisement['text'] and advertisement['text'] != 'None':
        message_text = f"üìù –¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã üìù\n\n{advertisement['text']}"
    else:
        message_text = ""

    if 'files' in advertisement and advertisement['files']:
        media_group = []
        first_file = True
        for file in advertisement['files']:
            if first_file:
                caption = message_text
            else:
                caption = None
            if file['type'] == 'photo':
                media_group.append(telebot.types.InputMediaPhoto(file['file_id'], caption=caption))
            elif file['type'] == 'video':
                media_group.append(telebot.types.InputMediaVideo(file['file_id'], caption=caption))
            elif file['type'] == 'document':
                media_group.append(telebot.types.InputMediaDocument(file['file_id'], caption=caption))
            elif file['type'] == 'animation':
                media_group.append(telebot.types.InputMediaAnimation(file['file_id'], caption=caption))
            elif file['type'] == 'sticker':
                bot.send_sticker(message.chat.id, file['file_id'])
            elif file['type'] == 'audio':
                media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
            elif file['type'] == 'voice':
                media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
            elif file['type'] == 'video_note':
                bot.send_video_note(message.chat.id, file['file_id'])
            first_file = False

        if media_group:
            bot.send_media_group(message.chat.id, media_group)
    else:
        if message_text:
            bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, choose_send_advertisement_action, advertisement_id)

def choose_send_advertisement_action(message, advertisement_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É":
        show_advertisement_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_send_advertisement_action, advertisement_id)

def handle_send_advertisement_action(message, advertisement_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É":
        show_advertisement_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏':
        schedule_notification(message, advertisement_id)
    elif message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º':
        send_advertisement_to_all(message, advertisement_id)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        choose_send_advertisement_action(message, advertisement_id)

def schedule_notification(message, advertisement_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É":
        show_advertisement_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if advertisement_id not in advertisements['advertisements']:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –†–µ–∫–ª–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        show_admin_panel(message)
        return

    advertisement = advertisements['advertisements'][advertisement_id]
    expected_datetime = datetime.strptime(f"{advertisement['expected_date']} {advertisement['expected_time']}", "%d.%m.%Y %H:%M")
    current_time = datetime.now()

    advertisement['status'] = 'accepted'  
    save_advertisements()

    if current_time >= expected_datetime:
        send_advertisement_to_all(message, advertisement_id)
    else:
        delay = (expected_datetime - current_time).total_seconds()
        threading.Timer(delay, send_advertisement_to_all, [message, advertisement_id]).start()
        bot.send_message(message.chat.id, f"‚úÖ –†–µ–∫–ª–∞–º–∞ *{advertisement['theme'].lower()}* –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {advertisement['expected_date']} –≤ {advertisement['expected_time']}!", parse_mode="Markdown")
        show_advertisement_menu(message)

def send_advertisement_to_all(message, advertisement_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É":
        show_advertisement_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if advertisement_id not in advertisements['advertisements']:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –†–µ–∫–ª–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        show_admin_panel(message)
        return

    advertisement = advertisements['advertisements'][advertisement_id]
    users = load_users()
    user_message_pairs = []  

    for user_id in users.keys():
        if user_id in blocked_users:
            continue

        media_group = []
        first_file = True
        for file in advertisement['files']:
            if first_file:
                caption = advertisement['text']
            else:
                caption = None
            if file['type'] == 'photo':
                media_group.append(telebot.types.InputMediaPhoto(file['file_id'], caption=caption))
            elif file['type'] == 'video':
                media_group.append(telebot.types.InputMediaVideo(file['file_id'], caption=caption))
            elif file['type'] == 'document':
                media_group.append(telebot.types.InputMediaDocument(file['file_id'], caption=caption))
            elif file['type'] == 'animation':
                media_group.append(telebot.types.InputMediaAnimation(file['file_id'], caption=caption))
            elif file['type'] == 'sticker':
                bot.send_sticker(user_id, file['file_id'])
            elif file['type'] == 'audio':
                media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
            elif file['type'] == 'voice':
                media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
            elif file['type'] == 'video_note':
                bot.send_video_note(user_id, file['file_id'])
            first_file = False

        try:
            if media_group:
                sent_messages = bot.send_media_group(user_id, media_group)
                for sent_message in sent_messages:
                    user_message_pairs.append((user_id, sent_message.message_id))
            else:
                sent_message = bot.send_message(user_id, advertisement['text'])
                user_message_pairs.append((user_id, sent_message.message_id))
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                if user_id not in blocked_users:
                    blocked_users.append(user_id)
                    save_blocked_users(blocked_users)
            else:
                continue

    advertisement['user_ids'] = [pair[0] for pair in user_message_pairs]
    advertisement['message_ids'] = [pair[1] for pair in user_message_pairs]
    advertisement['status'] = 'sent'
    save_advertisements()

    bot.send_message(message.chat.id, "‚úÖ –†–µ–∫–ª–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
    show_admin_panel(message)
    schedule_advertisement_deletion(advertisement_id, advertisement['end_date'], advertisement['end_time'])

def check_advertisement_expiration():
    while True:
        now = datetime.now()
        for adv_id, adv in list(advertisements['advertisements'].items()):
            if adv['status'] == 'accepted':
                end_datetime = datetime.strptime(f"{adv['end_date']} {adv['end_time']}", "%d.%m.%Y %H:%M")
                if now >= end_datetime:
                    delete_advertisement_messages(adv_id)
        time.sleep(60)
threading.Thread(target=check_advertisement_expiration, daemon=True).start()

def check_pending_advertisement_expiration():
    while True:
        current_time = datetime.now()
        for adv_id, adv in list(advertisements['advertisements'].items()):
            if adv['status'] == 'pending':
                end_datetime = datetime.strptime(f"{adv['end_date']} {adv['end_time']}", "%d.%m.%Y %H:%M")
                if current_time >= end_datetime:
                    user_id = adv['user_id']
                    theme = adv['theme']
                    del advertisements['advertisements'][adv_id]
                    save_advertisements()
                    bot.send_message(user_id, f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ —Ç–µ–º–µ *{theme.lower()}* –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫!", parse_mode="Markdown")
        time.sleep(60)

threading.Thread(target=check_pending_advertisement_expiration, daemon=True).start()

# -------------------------------------------------- –†–ï–ö–õ–ê–ú–ê (—É–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_advertisement(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É":
        show_advertisement_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if advertisements['advertisements']:
        advertisement_list = [
            f"‚≠êÔ∏è ‚Ññ{i + 1}\n\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*: `{adv['user_id']}`\n"
            f"üìù *–¢–µ–º–∞*: {adv['theme'].lower()}\n"
            f"üìÖ *–ù–∞—á–∞–ª–æ*: {adv['expected_date']} –≤ {adv['expected_time']}\n"
            f"‚åõÔ∏è *–ö–æ–Ω–µ—Ü*: {adv.get('end_date', 'N/A')} –≤ {adv.get('end_time', 'N/A')}\n"
            for i, adv in enumerate(advertisements['advertisements'].values()) if adv['status'] == 'accepted'
        ]
        if advertisement_list:
            full_message = "*–°–ø–∏—Å–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º*:\n\n" + "\n\n".join(advertisement_list)

            max_length = 4096
            if len(full_message) > max_length:
                parts = [full_message[i:i + max_length] for i in range(0, len(full_message), max_length)]
                for part in parts:
                    bot.send_message(message.chat.id, part, parse_mode="Markdown")
            else:
                bot.send_message(message.chat.id, full_message, parse_mode="Markdown")

            markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É')
            markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∫–ª–∞–º—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
            bot.register_next_step_handler(message, process_delete_advertisement)
        else:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º!", parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º!", parse_mode="Markdown")

def process_delete_advertisement(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É":
        show_advertisement_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        index = int(message.text) - 1
        advertisement_list = list(advertisements['advertisements'].values())
        if 0 <= index < len(advertisement_list):
            advertisement_id = list(advertisements['advertisements'].keys())[index]
            delete_advertisement_messages(advertisement_id)
            bot.send_message(message.chat.id, f"‚úÖ –†–µ–∫–ª–∞–º–∞ —É–¥–∞–ª–µ–Ω–∞!")
            show_advertisement_menu(message)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–∫–ª–∞–º—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            delete_advertisement(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–∫–ª–∞–º—ã!")
        delete_advertisement(message)


# -------------------------------------------------- –†–ï–î–ê–ö–¶–ò–Ø ----------------------------------------------

NEWS_DATABASE_PATH = 'data/admin/chats/news.json'
ADMIN_SESSIONS_FILE = 'data/admin/admin_user_payments/admin_sessions.json'
USER_DATA_PATH = 'data/admin/admin_user_payments/users.json'
news = {}
admin_sessions = []
temp_news = {}

def load_users():
    check_and_create_file()
    try:
        with open(DB_PATH, 'r', encoding='utf-8') as file:
            return json.load(file)
    except UnicodeDecodeError as e:
        with open(DB_PATH, 'r', encoding='cp1251') as file:
            content = file.read()
            with open(DB_PATH, 'w', encoding='utf-8') as outfile:
                json.dump(json.loads(content), outfile, ensure_ascii=False, indent=4)
            return json.loads(content)
    except json.JSONDecodeError as e:
        return {}

def save_news_database():
    for key, value in news.items():
        if 'time' in value and isinstance(value['time'], datetime):
            value['time'] = value['time'].strftime("%d.%m.%Y –≤ %H:%M")
    with open(NEWS_DATABASE_PATH, 'w', encoding='utf-8') as file:
        json.dump(news, file, ensure_ascii=False, indent=4)
    for key, value in news.items():
        if 'time' in value and isinstance(value['time'], str):
            value['time'] = datetime.strptime(value['time'], "%d.%m.%Y –≤ %H:%M")

def load_news_database():
    if os.path.exists(NEWS_DATABASE_PATH):
        with open(NEWS_DATABASE_PATH, 'r', encoding='utf-8') as file:
            data = json.load(file)
            for key, value in data.items():
                if 'time' in value and value['time']:
                    value['time'] = datetime.strptime(value['time'], "%d.%m.%Y –≤ %H:%M")
            return data
    return {}

news = load_news_database()

def load_admin_sessions():
    if os.path.exists(ADMIN_SESSIONS_FILE):
        with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
            data = json.load(file)
        return data.get('admin_sessions', [])
    return []

admin_sessions = load_admin_sessions()

def check_admin_access(message):
    if str(message.chat.id) in admin_sessions:
        return True
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!")
        return False

def split_text(text, chunk_size=4096):
    return [text[i:i + chunk_size] for i in range(0, len(text), chunk_size)]

@bot.message_handler(func=lambda message: message.text == '–†–µ–¥–∞–∫—Ü–∏—è' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_editorial_menu(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–†–µ–¥–∞–∫—Ü–∏—è'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å', '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç—å', '–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Ä–µ–¥–∞–∫—Ü–∏–∏:", reply_markup=markup)

# -------------------------------------------------- –†–ï–î–ê–ö–¶–ò–Ø (–æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å) ----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def publish_news(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, set_news_title)

@text_only_handler
def set_news_title(message):

    if message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    news_title = message.text.capitalize()
    temp_news['title'] = news_title
    temp_news['files'] = []
    temp_news['chat_id'] = message.chat.id

    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, collect_news_caption)

@text_only_handler
def collect_news_caption(message):

    if message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    caption = message.text
    temp_news['caption'] = caption

    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã')
    markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:", reply_markup=markup)
    bot.register_next_step_handler(message, collect_news_media)

def collect_news_media(message):
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã":
        temp_news['text'] = temp_news['caption']
        temp_news['caption'] = None
        save_news(message)
        return

    content_type = message.content_type
    file_id = None

    if content_type == 'photo':
        file_id = message.photo[-1].file_id
    elif content_type == 'video':
        file_id = message.video.file_id
    elif content_type == 'document':
        file_id = message.document.file_id
    elif content_type == 'animation':
        file_id = message.animation.file_id
    elif content_type == 'sticker':
        file_id = message.sticker.file_id
    elif content_type == 'audio':
        file_id = message.audio.file_id
    elif content_type == 'voice':
        file_id = message.voice.file_id
    elif content_type == 'video_note':
        file_id = message.video_note.file_id

    if file_id:
        temp_news['files'].append({
            'type': content_type,
            'file_id': file_id,
            'caption': temp_news['caption']
        })

        if len(temp_news['files']) >= 10:
            save_news(message)
            return

        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É')
        markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_media_options)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª!")
        bot.register_next_step_handler(message, collect_news_media)

def handle_media_options(message):
    if message.text == "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ":
        markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª:", reply_markup=markup)
        bot.register_next_step_handler(message, collect_news_media)
    elif message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É":
        save_news(message)
    elif message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
    elif message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!")
        bot.register_next_step_handler(message, handle_media_options)

def save_news(message):
    news_id = str(len(news) + 1)
    news[news_id] = {
        'title': temp_news['title'],
        'text': temp_news.get('text'),
        'time': datetime.now(),
        'files': temp_news['files']
    }
    save_news_database()
    bot.send_message(temp_news['chat_id'], "‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
    temp_news.clear()
    show_editorial_menu(message)

# -------------------------------------------------- –†–ï–î–ê–ö–¶–ò–Ø (–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å) ----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def edit_news(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    news_list = [
        f"üì∞ ‚Ññ{i + 1}. *{n['title']}* - {n['time'].strftime('%d.%m.%Y –≤ %H:%M')}"
        for i, n in enumerate(news.values())
    ]

    if news_list:
        news_text = "\n\n".join(news_list)
        chunks = split_text(news_text)
        for chunk in chunks:
            markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
            markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
            bot.send_message(message.chat.id, "üìú *–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π*:\n\n" + chunk, parse_mode="Markdown", reply_markup=markup)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, choose_news_to_edit)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")

@text_only_handler
def choose_news_to_edit(message):

    if message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        index = int(message.text) - 1
        news_list = list(news.values())
        if 0 <= index < len(news_list):
            news_id = list(news.keys())[index]
            news_item = news[news_id]

            caption = news_item['files'][0]['caption'] if 'files' in news_item and news_item['files'] else None

            if caption and len(caption) > 200:
                caption = caption[:200] + "..."

            if caption:
                message_text = f"üìå –ó–ê–ì–û–õ–û–í–û–ö –ù–û–í–û–°–¢–ò üìå\n\n\n{news_item['title']}\n\n\nüì¢ –ü–û–î–ü–ò–°–¨ –ù–û–í–û–°–¢–ò üì¢\n\n\n{caption}"
            elif news_item.get('text'):
                message_text = f"üìå –ó–ê–ì–û–õ–û–í–û–ö –ù–û–í–û–°–¢–ò üìå\n\n\n{news_item['title']}\n\n\nüìù –¢–ï–ö–°–¢ –ù–û–í–û–°–¢–ò üìù\n\n\n{news_item['text']}"
            else:
                message_text = f"üìå –ó–ê–ì–û–õ–û–í–û–ö –ù–û–í–û–°–¢–ò üìå\n\n\n{news_item['title']}"

            if 'files' in news_item and news_item['files']:
                media_group = []
                first_file = True
                for file in news_item['files']:
                    if first_file:
                        caption = message_text
                    else:
                        caption = None
                    if file['type'] == 'photo':
                        media_group.append(telebot.types.InputMediaPhoto(file['file_id'], caption=caption))
                    elif file['type'] == 'video':
                        media_group.append(telebot.types.InputMediaVideo(file['file_id'], caption=caption))
                    elif file['type'] == 'document':
                        media_group.append(telebot.types.InputMediaDocument(file['file_id'], caption=caption))
                    elif file['type'] == 'animation':
                        media_group.append(telebot.types.InputMediaAnimation(file['file_id'], caption=caption))
                    elif file['type'] == 'sticker':
                        bot.send_sticker(message.chat.id, file['file_id'])
                    elif file['type'] == 'audio':
                        media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
                    elif file['type'] == 'voice':
                        media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
                    elif file['type'] == 'video_note':
                        bot.send_video_note(message.chat.id, file['file_id'])
                    first_file = False

                if media_group:
                    bot.send_media_group(message.chat.id, media_group)
            else:
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

            edit_list = []
            edit_list.append(f"‚Ññ1. –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏")
            if news_item['text']:
                edit_list.append(f"‚Ññ2. –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏")
            if 'files' in news_item and news_item['files']:
                edit_list.append(f"‚Ññ3. –ü–æ–¥–ø–∏—Å—å –∫ –Ω–æ–≤–æ—Å—Ç–∏")
                edit_list.append("‚Ññ4. –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã")

            edit_text = "\n".join(edit_list)
            bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?\n\n" + edit_text)

            markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
            markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
            bot.register_next_step_handler(message, edit_news_item, news_id)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, choose_news_to_edit)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏!")
        bot.register_next_step_handler(message, choose_news_to_edit)

@text_only_handler
def edit_news_item(message, news_id):

    if message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        choice = int(message.text)
        news_item = news[news_id]

        if choice == 1:
            markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
            markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:", reply_markup=markup)
            bot.register_next_step_handler(message, edit_news_title, news_id)
        elif choice == 2:
            if 'text' in news_item and news_item['text']:
                markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
                markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
                markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:", reply_markup=markup)
                bot.register_next_step_handler(message, edit_news_text, news_id)
            else:
                bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—É–Ω–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
                bot.register_next_step_handler(message, edit_news_item, news_id)
        elif choice == 3:
            if 'files' in news_item and news_item['files']:
                markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
                markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
                markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å –∫ –Ω–æ–≤–æ—Å—Ç–∏:", reply_markup=markup)
                bot.register_next_step_handler(message, edit_news_caption, news_id)
            else:
                bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å—å –∫ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—É–Ω–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
                bot.register_next_step_handler(message, edit_news_item, news_id)
        elif choice == 4:
            if 'files' in news_item and news_item['files']:
                markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
                markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
                markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
                bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã:", reply_markup=markup)
                bot.register_next_step_handler(message, edit_news_media, news_id)
            else:
                bot.send_message(message.chat.id, "–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—É–Ω–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
                bot.register_next_step_handler(message, edit_news_item, news_id)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, edit_news_item, news_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞!")
        bot.register_next_step_handler(message, edit_news_item, news_id)

@text_only_handler
def edit_news_title(message, news_id):

    if message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    news_title = message.text
    news[news_id]['title'] = news_title
    save_news_database()
    bot.send_message(message.chat.id, "‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!")
    show_editorial_menu(message)

@text_only_handler
def edit_news_text(message, news_id):

    if message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    news_text = message.text
    news[news_id]['text'] = news_text
    save_news_database()
    bot.send_message(message.chat.id, "‚úÖ –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!")
    show_editorial_menu(message)

@text_only_handler
def edit_news_caption(message, news_id):

    if message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    caption = message.text
    for file in news[news_id]['files']:
        file['caption'] = caption
    save_news_database()
    bot.send_message(message.chat.id, "‚úÖ –ü–æ–¥–ø–∏—Å—å –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
    show_editorial_menu(message)

def edit_news_media(message, news_id):
    if message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    content_type = message.content_type
    file_id = None

    if content_type == 'photo':
        file_id = message.photo[-1].file_id
    elif content_type == 'video':
        file_id = message.video.file_id
    elif content_type == 'document':
        file_id = message.document.file_id
    elif content_type == 'animation':
        file_id = message.animation.file_id
    elif content_type == 'sticker':
        file_id = message.sticker.file_id
    elif content_type == 'audio':
        file_id = message.audio.file_id
    elif content_type == 'voice':
        file_id = message.voice.file_id
    elif content_type == 'video_note':
        file_id = message.video_note.file_id

    if file_id:
        caption = news[news_id]['files'][0]['caption'] if 'files' in news[news_id] and news[news_id]['files'] else None

        if caption and len(caption) > 200:
            caption = caption[:200] + "..."

        if not news[news_id].get('new_files'):
            news[news_id]['new_files'] = []
            news[news_id]['files'] = []

        news[news_id]['new_files'].append({
            'type': content_type,
            'file_id': file_id,
            'caption': caption
        })

        if len(news[news_id]['new_files']) >= 10:
            news[news_id]['files'] = news[news_id].get('new_files', [])
            del news[news_id]['new_files']
            save_news_database()
            bot.send_message(message.chat.id, "‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
            show_editorial_menu(message)
            return

        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É')
        markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_edit_media_options, news_id)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª!")
        bot.register_next_step_handler(message, edit_news_media, news_id)

def handle_edit_media_options(message, news_id):
    if message.text == "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ":
        markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª:", reply_markup=markup)
        bot.register_next_step_handler(message, edit_news_media, news_id)
    elif message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É":
        news[news_id]['files'] = news[news_id].get('new_files', [])
        del news[news_id]['new_files']
        save_news_database()
        bot.send_message(message.chat.id, "‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
        show_editorial_menu(message)
    elif message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
    elif message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!")
        bot.register_next_step_handler(message, handle_edit_media_options, news_id)

# -------------------------------------------------- –†–ï–î–ê–ö–¶–ò–Ø (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç—å) ----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç—å' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_news(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç—å'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    news_list = [
        f"üì∞ ‚Ññ{i + 1}. *{n['title']}* - {n['time'].strftime('%d.%m.%Y –≤ %H:%M')}"
        for i, n in enumerate(news.values())
    ]

    if news_list:
        news_text = "\n\n".join(news_list)
        chunks = split_text(news_text)
        for chunk in chunks:
            markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
            markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
            bot.send_message(message.chat.id, "üìú *–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π*:\n\n" + chunk, parse_mode="Markdown", reply_markup=markup)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, choose_news_to_view)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!")

@text_only_handler
def choose_news_to_view(message):

    if message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        indices = [int(x.strip()) - 1 for x in message.text.split(',')]
        news_list = list(news.values())
        invalid_indices = []

        for index in indices:
            if not (0 <= index < len(news_list)):
                invalid_indices.append(index + 1)

        if invalid_indices:
            bot.send_message(message.chat.id, f"–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: *{', '.join(map(str, invalid_indices))}*! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π", parse_mode="Markdown")
            bot.register_next_step_handler(message, choose_news_to_view)
        else:
            for index in indices:
                news_item = news_list[index]

                caption = news_item['files'][0]['caption'] if 'files' in news_item and news_item['files'] else None

                if caption and len(caption) > 200:
                    caption = caption[:200] + "..."

                if caption:
                    message_text = f"üìå –ó–ê–ì–û–õ–û–í–û–ö –ù–û–í–û–°–¢–ò üìå\n\n\n{news_item['title']}\n\n\nüì¢ –ü–û–î–ü–ò–°–¨ –ù–û–í–û–°–¢–ò üì¢\n\n\n{caption}"
                elif news_item.get('text'):
                    message_text = f"üìå –ó–ê–ì–û–õ–û–í–û–ö –ù–û–í–û–°–¢–ò üìå\n\n\n{news_item['title']}\n\n\nüìù –¢–ï–ö–°–¢ –ù–û–í–û–°–¢–ò üìù\n\n\n{news_item['text']}"
                else:
                    message_text = f"üìå –ó–ê–ì–û–õ–û–í–û–ö –ù–û–í–û–°–¢–ò üìå\n\n\n{news_item['title']}"

                if 'files' in news_item and news_item['files']:
                    media_group = []
                    first_file = True
                    for file in news_item['files']:
                        if first_file:
                            caption = message_text
                        else:
                            caption = None
                        if file['type'] == 'photo':
                            media_group.append(telebot.types.InputMediaPhoto(file['file_id'], caption=caption))
                        elif file['type'] == 'video':
                            media_group.append(telebot.types.InputMediaVideo(file['file_id'], caption=caption))
                        elif file['type'] == 'document':
                            media_group.append(telebot.types.InputMediaDocument(file['file_id'], caption=caption))
                        elif file['type'] == 'animation':
                            media_group.append(telebot.types.InputMediaAnimation(file['file_id'], caption=caption))
                        elif file['type'] == 'sticker':
                            bot.send_sticker(message.chat.id, file['file_id'])
                        elif file['type'] == 'audio':
                            media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
                        elif file['type'] == 'voice':
                            media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
                        elif file['type'] == 'video_note':
                            bot.send_video_note(message.chat.id, file['file_id'])
                        first_file = False

                    if media_group:
                        bot.send_media_group(message.chat.id, media_group)
                else:
                    bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

            show_editorial_menu(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π!")
        bot.register_next_step_handler(message, choose_news_to_view)

# -------------------------------------------------- –†–ï–î–ê–ö–¶–ò–Ø (—É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å) ----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_news(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    news_list = [
        f"üì∞ ‚Ññ{i + 1}. *{n['title']}* - {n['time'].strftime('%d.%m.%Y –≤ %H:%M')}"
        for i, n in enumerate(news.values())
    ]

    if news_list:
        news_text = "\n\n".join(news_list)
        chunks = split_text(news_text)
        for chunk in chunks:
            markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
            markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
            bot.send_message(message.chat.id, "üìú *–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π*:\n\n" + chunk, parse_mode="Markdown", reply_markup=markup)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=markup)
        bot.register_next_step_handler(message, choose_news_to_delete)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")

@text_only_handler
def choose_news_to_delete(message):

    if message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        indices = [int(x.strip()) - 1 for x in message.text.split(',')]
        news_list = list(news.values())
        deleted_news_titles = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(news_list):
                news_id = list(news.keys())[index]
                deleted_news = news.pop(news_id)
                deleted_news_titles.append(deleted_news['title'])
            else:
                invalid_indices.append(index + 1)

        if invalid_indices:
            bot.send_message(message.chat.id, f"–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: *{', '.join(map(str, invalid_indices))}*! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π", parse_mode="Markdown")
            bot.register_next_step_handler(message, choose_news_to_delete)
        else:
            if deleted_news_titles:
                new_news = {}
                for i, (key, value) in enumerate(news.items(), start=1):
                    new_news[str(i)] = value
                news.clear()
                news.update(new_news)

                save_news_database()
                deleted_news_titles_lower = [title.lower() for title in deleted_news_titles]
                bot.send_message(message.chat.id, f"‚úÖ –ù–æ–≤–æ—Å—Ç–∏ (*{', '.join(deleted_news_titles_lower)}*) —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")
            else:
                bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")

            show_editorial_menu(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π!")
        bot.register_next_step_handler(message, choose_news_to_delete)

# -------------------------------------------------- –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê ----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_emergency_stop(message):
    emergency_stop(message)

@log_user_actions
def emergency_stop(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É", "–û—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    markup.add("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞?", reply_markup=markup)
    bot.register_next_step_handler(message, confirm_emergency_stop)

def stop_bot_after_delay():
    threading.Timer(5.0, stop_bot).start()

def stop_bot():
    bot.stop_polling()
    os._exit(0) 
    
@log_user_actions
def confirm_emergency_stop(message):
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É":
        bot.send_message(message.chat.id, "üõë –ë–æ—Ç –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        stop_bot_after_delay()
        show_admin_panel(message)
    elif message.text == "–û—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏":
        bot.send_message(message.chat.id, "‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
        show_admin_panel(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        bot.register_next_step_handler(message, confirm_emergency_stop)

# -------------------------------------------------- –§–£–ù–ö–¶–ò–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø ----------------------------------------------

def start_bot_with_retries(retries=10000000, delay=5):
    attempt = 0
    while attempt < retries:
        try:
            print(f"–ó–∞–ø—É—Å–∫ –ø–æ–ø—ã—Ç–∫–∏ ‚Ññ{attempt + 1}")
            bot.polling(none_stop=True, interval=1, timeout=120, long_polling_timeout=120)
        except (ReadTimeout, ConnectionError) as e:
            print(f"–û—à–∏–±–∫–∞: {e}. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {retries}")
            attempt += 1
            if attempt < retries:
                print(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(delay)
            else:
                print("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫! –ë–æ—Ç –Ω–µ —Å–º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è!")
        except Exception as e:
            print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            break

start_bot_with_retries()

@bot.message_handler(func=lambda message: True)
@restricted
@track_user_activity
@check_chat_state
@check_subscription
@check_subscription_chanal
def echo_all(message):
    bot.reply_to(message, message.text)

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    chat_id = message.chat.id  
    bot.reply_to(message, message.text)
    background_subscription_expiration_check(chat_id)

def background_subscription_expiration_check(chat_id):
    try:
        bot.send_message(chat_id, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è!")
    except ApiTelegramException as e:
        if e.result_json.get('description') == "Forbidden: bot was blocked by the user":
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.")
        else:
            pass

# -------------------------------------------------- –ó–ê–ü–£–°–ö –ë–û–¢–ê ----------------------------------------------

if __name__ == '__main__':
    bot_thread = threading.Thread(target=lambda: bot.infinity_polling(none_stop=True, interval=1, timeout=120, long_polling_timeout=120), daemon=True)
    bot_thread.start()
    load_captcha_data()  