# (1) --------------- –ò–ú–ü–û–†–¢ –ú–û–î–£–õ–ï–ô ---------------

import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telebot import types
import datetime
from datetime import datetime
from geopy.geocoders import Nominatim
from geopy.distance import geodesic
import os
import json
import locale
import re
import requests
from functools import partial
from urllib.parse import quote
import traceback
from bs4 import BeautifulSoup
import time
import logging
import calendar
from telegram_bot_calendar import DetailedTelegramCalendar
from datetime import date
from requests.exceptions import ReadTimeout, ConnectionError
from scipy.spatial import cKDTree
import threading
import csv
import shutil
import hashlib
from statistics import mean
from functools import wraps
import schedule
import threading
from datetime import timedelta

# (2) --------------- –¢–û–ö–ï–ù –ë–û–¢–ê ---------------

bot = telebot.TeleBot("7519948621:AAGPoPBJrnL8-vZepAYvTmm18TipvvmLUoE")


import pytz

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è GMT+3
moscow_tz = pytz.timezone('Europe/Moscow')

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
current_time = datetime.now(moscow_tz)
formatted_time = current_time.strftime('%d.%m.%Y –≤ %H:%M:%S')


# (4) --------------- –ó–ê–ì–†–£–ó–ö–ê –¢–ï–ö–°–¢–û–í–û–ì–û –§–ê–ô–õ–ê –° –†–ï–ì–ò–û–ù–ê–ú–ò ---------------

regions = {}
try:
    with open('files/regions.txt', 'r', encoding='utf-8') as file:
        for line in file:
            parts = line.strip().split(' ‚Äî ')
            if len(parts) == 2:
                code, name = parts
                regions[code.strip()] = name.strip()
except FileNotFoundError:
    pass

# (5) --------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /START ---------------

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
def restricted(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    def wrapper(message, *args, **kwargs):
        user_id = message.from_user.id
        username = message.from_user.username

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID
        if is_user_blocked(user_id):
            bot.send_message(message.chat.id, "üö´ –í—ã *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã* –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ!", parse_mode="Markdown")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ username
        if username and is_user_blocked(get_user_id_by_username(username)):
            bot.send_message(message.chat.id, "üö´ –í—ã *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã* –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ!", parse_mode="Markdown")
            return
        
        return func(message, *args, **kwargs)
    return wrapper

def track_user_activity(func):
    def wrapper(message, *args, **kwargs):
        user_id = message.from_user.id
        username = message.from_user.username if message.from_user.username else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        first_name = message.from_user.first_name if message.from_user.first_name else ""
        last_name = message.from_user.last_name if message.from_user.last_name else ""
        update_user_activity(user_id, username, first_name, last_name)  # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return func(message, *args, **kwargs)
    return wrapper

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
message_history = {}

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞
def check_chat_state(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        global active_chats  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç
        if user_id in active_chats and active_chats[user_id].get("awaiting_response", False):
            if message.text.strip().lower() not in ["–ø—Ä–∏–Ω—è—Ç—å", "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å"]:
                bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ *–ü–†–ò–ù–Ø–¢–¨* –∏–ª–∏ *–û–¢–ö–õ–û–ù–ò–¢–¨*!", parse_mode="Markdown")
                return

        return func(message, *args, **kwargs)
    return wrapper


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
def save_last_bot_message(user_id, message_text):
    message_history[user_id] = {"last_bot_message": message_text}

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏

def check_function_state(function_name):
    if function_name in function_states:
        return function_states[function_name]['state']
    return False

def check_function_state_decorator(function_name):
    def decorator(func):
        @wraps(func)
        def wrapped(message, *args, **kwargs):
            if check_function_state(function_name):
                return func(message, *args, **kwargs)
            else:
                bot.send_message(message.chat.id, f"–§—É–Ω–∫—Ü–∏—è *{function_name.lower()}* –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!", parse_mode="Markdown")
        return wrapped
    return decorator

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
def track_usage(func_name):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            statistics = load_statistics()
            current_date = datetime.now().strftime('%d.%m.%Y')

            if current_date not in statistics:
                statistics[current_date] = {'users': set(), 'functions': {}}
            if 'functions' not in statistics[current_date]:
                statistics[current_date]['functions'] = {}
            if func_name not in statistics[current_date]['functions']:
                statistics[current_date]['functions'][func_name] = 0
            statistics[current_date]['functions'][func_name] += 1

            save_statistics(statistics)
            return func(*args, **kwargs)
        return wrapper
    return decorator


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞
file_logger = logging.getLogger('fileLogger')
file_handler = logging.FileHandler('data base/log/bot_logs.log', encoding='utf-8')
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
file_logger.addHandler(file_handler)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
console_logger = logging.getLogger('consoleLogger')
console_logger.setLevel(logging.ERROR)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å ERROR, —á—Ç–æ–±—ã –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
console_logger.addHandler(console_handler)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ JSON —Ñ–∞–π–ª
def log_to_json(user_id, log_entry):
    log_dir = "data base/log"
    os.makedirs(log_dir, exist_ok=True)
    log_file = os.path.join(log_dir, f"{user_id}_log.json")

    # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    if os.path.exists(log_file):
        try:
            with open(log_file, 'r', encoding='utf-8') as file:
                logs = json.load(file)
        except json.decoder.JSONDecodeError:  # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {log_file}, —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω! –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª...")
            logs = []  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
    else:
        logs = []  # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–∏
    logs.append(log_entry)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ª–æ–≥–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
    with open(log_file, 'w', encoding='utf-8') as file:
        json.dump(logs, file, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ –æ—à–∏–±–æ–∫
def clear_logs_and_transfer_errors():
    log_dir = "data base/log"
    error_log_file = os.path.join(log_dir, "errors_log.json")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—à–∏–±–∫–∏ –∏–∑ errors_log.json
    if os.path.exists(error_log_file):
        with open(error_log_file, 'r', encoding='utf-8') as file:
            errors = json.load(file)
    else:
        errors = []

    for filename in os.listdir(log_dir):
        if filename.endswith("_log.json") and filename != "errors_log.json":
            file_path = os.path.join(log_dir, filename)
            with open(file_path, 'r', encoding='utf-8') as file:
                logs = json.load(file)

            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –æ—à–∏–±–∫–∏ –≤ errors_log.json
            for log in logs:
                if log.get("level") == "ERROR":
                    errors.append(log)

            # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(file_path, 'w', encoding='utf-8') as file:
                json.dump([], file, ensure_ascii=False, indent=4)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫–∏ –≤ errors_log.json
    with open(error_log_file, 'w', encoding='utf-8') as file:
        json.dump(errors, file, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –æ—à–∏–±–æ–∫ –∏–∑ errors_log.json
def remove_old_errors():
    log_dir = "data base/log"
    error_log_file = os.path.join(log_dir, "errors_log.json")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—à–∏–±–∫–∏ –∏–∑ errors_log.json
    if os.path.exists(error_log_file):
        with open(error_log_file, 'r', encoding='utf-8') as file:
            errors = json.load(file)
    else:
        errors = []

    # –£–¥–∞–ª—è–µ–º –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∏—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π
    current_time = datetime.now()
    errors = [error for error in errors if (current_time - datetime.strptime(error["timestamp"], '%d.%m.%Y –≤ %H:%M:%S')) <= timedelta(days=7)]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ errors_log.json
    with open(error_log_file, 'w', encoding='utf-8') as file:
        json.dump(errors, file, ensure_ascii=False, indent=4)

# –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ—Ç–∞
def log_user_actions(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ message
        if not hasattr(message, 'from_user') or not hasattr(message, 'chat'):
            file_logger.error(f"Invalid message type: {type(message)}. Message: {message}")
            console_logger.error(f"Invalid message type: {type(message)}. Message: {message}")
            return  # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

        try:
            user_id = message.from_user.id
            username = message.from_user.username if message.from_user.username else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            first_name = message.from_user.first_name if message.from_user.first_name else ""
            last_name = message.from_user.last_name if message.from_user.last_name else ""
            message_text = message.text if hasattr(message, 'text') and message.text else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
            command = func.__name__
            chat_id = message.chat.id
            message_id = message.message_id
            message_type = "text" if hasattr(message, 'text') and message.text else "media"
            context = message_text
            language_code = message.from_user.language_code if hasattr(message.from_user, 'language_code') else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫"
            chat_type = message.chat.type if hasattr(message.chat, 'type') else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
            location = message.location if hasattr(message, 'location') and message.location else "–ù–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"

            start_time = time.time()

            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            result = func(message, *args, **kwargs)
            execution_time = time.time() - start_time

            log_entry = {
                "timestamp": datetime.now().strftime('%d.%m.%Y –≤ %H:%M:%S'),
                "level": "INFO",
                "event_type": "User Action",
                "user_id": user_id,
                "username": username,
                "first_name": first_name,
                "last_name": last_name,
                "message_text": message_text,
                "command": command,
                "result": "Success",
                "execution_time": f"{execution_time:.2f} sec",
                "chat_id": chat_id,
                "message_id": message_id,
                "message_type": message_type,
                "context": context,
                "language_code": language_code,
                "chat_type": chat_type,
                "location": location,
                "bot_info": {
                    "version": "1.0",
                    "bot_id": "7519948621:AAGPoPBJrnL8-vZepAYvTmm18TipvvmLUoE"
                }
            }
            file_logger.info(f"User {user_id} executed command {command} successfully in {execution_time:.2f} sec.")
        except Exception as e:
            execution_time = time.time() - start_time
            error_details_more = traceback.format_exc().splitlines()
            log_entry = {
                "timestamp": datetime.now().strftime('%d.%m.%Y –≤ %H:%M:%S'),
                "level": "ERROR",
                "event_type": "User Action",
                "user_id": "Unknown" if 'user_id' not in locals() else user_id,
                "username": "Unknown" if 'username' not in locals() else username,
                "first_name": "Unknown" if 'first_name' not in locals() else first_name,
                "last_name": "Unknown" if 'last_name' not in locals() else last_name,
                "message_text": "Unknown" if 'message_text' not in locals() else message_text,
                "command": command,
                "result": "Error",
                "execution_time": f"{execution_time:.2f} sec",
                "error_details": str(e),
                "error_details_more": error_details_more,
                "chat_id": "Unknown" if 'chat_id' not in locals() else chat_id,
                "message_id": "Unknown" if 'message_id' not in locals() else message_id,
                "message_type": "Unknown" if 'message_type' not in locals() else message_type,
                "context": "Unknown" if 'context' not in locals() else context,
                "language_code": "Unknown" if 'language_code' not in locals() else language_code,
                "chat_type": "Unknown" if 'chat_type' not in locals() else chat_type,
                "location": "Unknown" if 'location' not in locals() else location,
                "bot_info": {
                    "version": "1.0",
                    "bot_id": "7519948621:AAGPoPBJrnL8-vZepAYvTmm18TipvvmLUoE"
                }
            }
            file_logger.error(f"Error while executing command {command}: {e}")
            console_logger.error(f"Error while executing command {command}: {e}")
            raise
        finally:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏ –≤ JSON
            log_to_json(user_id if 'user_id' in locals() else "Unknown", log_entry)

        return result
    return wrapper

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –æ—à–∏–±–æ–∫ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
def run_weekly_task():
    while True:
        remove_old_errors()
        time.sleep(7 * 24 * 60 * 60)  # –°–ø–∏–º 7 –¥–Ω–µ–π

# –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ –æ—à–∏–±–æ–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
schedule.every().day.at("00:00").do(clear_logs_and_transfer_errors)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
def run_scheduled_tasks():
    while True:
        schedule.run_pending()
        time.sleep(1)

# –ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
scheduler_thread = threading.Thread(target=run_scheduled_tasks)
scheduler_thread.start()

# –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –æ—à–∏–±–æ–∫ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
weekly_task_thread = threading.Thread(target=run_weekly_task)
weekly_task_thread.start()


from functools import wraps
from telebot.apihelper import ApiTelegramException

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
BLOCKED_USERS_FILE = 'data base/admin/blocked_bot_users.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_blocked_users():
    if os.path.exists(BLOCKED_USERS_FILE):
        with open(BLOCKED_USERS_FILE, 'r') as file:
            return json.load(file)
    return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_blocked_users(blocked_users):
    with open(BLOCKED_USERS_FILE, 'w') as file:
        json.dump(blocked_users, file, indent=4)

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞
def check_user_blocked(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                user_id = kwargs.get('user_id') or args[0].chat.id
                print(f"User blocked the bot: {user_id}")

                # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                blocked_users = load_blocked_users()

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
                if user_id not in blocked_users:
                    blocked_users.append(user_id)
                    save_blocked_users(blocked_users)
            else:
                raise e
    return wrapper


# -------- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ---------

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_PATH = 'data base/admin/users.json'

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (3 –¥–Ω—è)
INACTIVITY_THRESHOLD = 3 * 24 * 60 * 60

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (12 —á–∞—Å–æ–≤)
CHECK_INTERVAL = 12 * 60 * 60

def load_users():
    with open(DB_PATH, 'r', encoding='utf-8') as file:
        return json.load(file)

def save_users(users):
    with open(DB_PATH, 'w', encoding='utf-8') as file:
        json.dump(users, file, ensure_ascii=False, indent=4)

def check_inactivity():
    while True:
        users = load_users()
        current_time = datetime.now()

        for user_id, user_data in users.items():
            last_active_str = user_data.get('last_active')
            if last_active_str:
                last_active = datetime.strptime(last_active_str, '%d.%m.%Y –≤ %H:%M:%S')
                if current_time - last_active > timedelta(seconds=INACTIVITY_THRESHOLD):
                    username = user_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                    message = f"–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, @{escape_markdown(username)}, –æ—Ç –≤–∞—Å –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –∏–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!"
                    bot.send_message(user_id, message, parse_mode="Markdown")

        # –ñ–¥–µ–º 12 —á–∞—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        time.sleep(CHECK_INTERVAL)

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
inactivity_thread = threading.Thread(target=check_inactivity)
inactivity_thread.daemon = True
inactivity_thread.start()


# -------- –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ---------

import signal

def emergency_stop(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É", "–û—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    markup.add("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞?", reply_markup=markup)
    bot.register_next_step_handler(message, confirm_emergency_stop)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
@bot.message_handler(func=lambda message: message.text == '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞' and check_admin_access(message))
def handle_emergency_stop(message):
    emergency_stop(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
def stop_bot_after_delay():
    threading.Timer(5.0, stop_bot).start()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
def stop_bot():
    bot.stop_polling()
    os.kill(os.getpid(), signal.SIGINT)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
def confirm_emergency_stop(message):
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É":
        bot.send_message(message.chat.id, "üõë –ë–æ—Ç –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        stop_bot_after_delay()
        show_admin_panel(message)
    elif message.text == "–û—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏":
        bot.send_message(message.chat.id, "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
        show_admin_panel(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        bot.register_next_step_handler(message, confirm_emergency_stop)


# (3) --------------- –°–û–•–†–ê–ù–ï–ù–ò–Ø –ò –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---------------

# (3.1) --------------- –°–û–•–†–ê–ù–ï–ù–ò–Ø –ò –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (–ü–û–ï–ó–î–ö–ò) ---------------

def save_data(user_id): 
    if user_id in user_trip_data:
        folder_path = "data base\\trip"  # –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º–æ–π —Å–ª—ç—à "data base/trip"
        if not os.path.exists(folder_path):
            os.makedirs(folder_path)

        with open(os.path.join(folder_path, f"{user_id}_trip_data.json"), "w") as json_file:
            json.dump(user_trip_data[user_id], json_file)

# –ü—Å–µ–≤–¥–æ–¥–∞–Ω–Ω—ã–µ - –ø—Ä–æ—Å—Ç–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
# –í —Ä–µ–∞–ª—å–Ω–æ–º —Å–ª—É—á–∞–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
user_trip_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
#@log_user_actions
def add_trip(user_id, trip):
    if user_id not in user_trip_data:
        user_trip_data[user_id] = []
    user_trip_data[user_id].append(trip)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_trip_data(user_id):
    folder_path = "data base\\trip"
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    file_path = os.path.join(folder_path, f"{user_id}_trip_data.json")
    with open(file_path, "w", encoding='utf-8') as json_file:
        json.dump(user_trip_data.get(user_id, []), json_file, ensure_ascii=False, indent=4)


# –î–∞–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–æ–∫ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_trip_data = {}

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–∞–Ω–Ω—ã–º–∏
folder_path = "data base\\trip"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def load_trip_data(user_id):
    folder_path = "data base\\trip"
    file_path = os.path.join(folder_path, f"{user_id}_trip_data.json")
    if os.path.exists(file_path):
        try:
            with open(file_path, "r", encoding='utf-8') as json_file:
                return json.load(json_file)
        except UnicodeDecodeError:
            with open(file_path, "r", encoding='windows-1251') as json_file:
                data = json.load(json_file)
            with open(file_path, "w", encoding='utf-8') as json_file:
                json.dump(data, json_file, ensure_ascii=False, indent=4)
            return data
    else:
        return []  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_all_user_data():
    folder_path = "data base\\trip"
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)  # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
    for filename in os.listdir(folder_path):
        if filename.endswith("_trip_data.json"):
            user_id = filename.split("_")[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            user_trip_data[user_id] = load_trip_data(user_id)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
#@log_user_actions
def add_trip(user_id, trip):
    if user_id not in user_trip_data:
        user_trip_data[user_id] = []
    user_trip_data[user_id].append(trip)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
def save_all_trip_data():
    for user_id in user_trip_data:
        save_trip_data(user_id)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
load_all_user_data()


# –°—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
@restricted
@track_user_activity
@check_chat_state
#@log_user_actions
def start(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = message.from_user.username if message.from_user.username else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    update_user_activity(user_id, username)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item2 = types.KeyboardButton("–¢—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã")
    item3 = types.KeyboardButton("–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    item4 = types.KeyboardButton("–ü–æ–∏—Å–∫ –º–µ—Å—Ç")
    item5 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞")
    item6 = types.KeyboardButton("–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞")
    item7 = types.KeyboardButton("–¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ")
    item8 = types.KeyboardButton("–ê–Ω—Ç–∏-—Ä–∞–¥–∞—Ä")
    item9 = types.KeyboardButton("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    item10 = types.KeyboardButton("–ö–æ–¥—ã OBD2")
    item11 = types.KeyboardButton("–ü—Ä–æ—á–µ–µ")

    markup.add(item1, item2)
    markup.add(item3, item4)
    markup.add(item5, item7)
    markup.add(item6, item8)
    markup.add(item9, item10)
    markup.add(item11)

    welcome_message = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{escape_markdown(username)}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"
    bot.send_message(chat_id, welcome_message, parse_mode="Markdown", reply_markup=markup)

# (6) --------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /MAINMENU ---------------
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@bot.message_handler(commands=['mainmenu'])
def return_to_menu(message):
    start(message)

# (7) --------------- –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---------------

@bot.message_handler(func=lambda message: message.text == "–°–∞–π—Ç")
@bot.message_handler(commands=['website'])
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–°–∞–π—Ç')
@track_usage('–°–∞–π—Ç')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def send_website_file(message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç
    bot.send_message(message.chat.id, "[–°–∞–π—Ç CAR MANAGER](carmngrbot.com.swtest.ru)", parse_mode="Markdown")  # http://carmngrbot.com.swtest.ru/ # https://goo.su/5htqWmk
    
    # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    # try:
    #     with open('files/website.html', 'rb') as website_file:
    #         bot.send_document(chat_id, website_file)
    # except FileNotFoundError:
    #     bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª website –Ω–µ –Ω–∞–π–¥–µ–Ω")

# (8) --------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ "–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê"---------------

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞')
@track_usage('–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def handle_fuel_expense(message):

    user_id = message.from_user.id

    if user_id not in user_trip_data:
        user_trip_data[user_id] = load_trip_data(user_id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item2 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–µ–∑–¥–∫–∏")
    item3 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫—É")
    item4 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    markup.add(item1)
    markup.add(item2, item3)
    markup.add(item4)

    bot.clear_step_handler_by_chat_id(user_id)
    bot.send_message(user_id, "–ú–µ–Ω—é –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# (9) --------------- –ö–û–î –î–õ–Ø "–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê" ---------------

# (9.1) --------------- –ö–û–î –î–õ–Ø "–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê" (–°–õ–û–í–ê–†–ò, –°–ü–ò–°–û–ö, –†–ï–ì–£–õ–Ø–†–ù–û–ï –í–´–†–ê–ñ–ï–ù–ò–ï) ---------------

user_trip_data = {}

trip_data = {}

temporary_trip_data = {}

fuel_types = ["–ê–ò-92", "–ê–ò-95", "–ê–ò-98", "–ê–ò-100", "–î–¢", "–ì–ê–ó"]

date_pattern = r"^\d{2}.\d{2}.\d{4}$"

# (9.2) --------------- –ö–û–î –î–õ–Ø "–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê" (–ö–û–ú–ê–ù–î–´ /restart1 ) ---------------

# –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞
@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞')
#@log_user_actions
def restart_handler(message):
    user_id = message.chat.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –≤ –º–µ–Ω—é
    save_trip_data(user_id)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ –º–µ–Ω—é
    user_trip_data[user_id] = load_trip_data(user_id)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
    reset_and_start_over(message.chat.id)

#@log_user_actions
def reset_and_start_over(chat_id):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item2 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–µ–∑–¥–∫–∏")
    item3 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫—É")
    item4 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    markup.add(item1)
    markup.add(item2, item3)
    markup.add(item4)

    bot.send_message(chat_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –ö–æ–≥–¥–∞ –±–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –º–µ–Ω—é, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
# –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∏–ª–∏ –≤—ã—Ö–æ–¥–µ:
save_all_trip_data()

# (9.3) --------------- –ö–û–î –î–õ–Ø "–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê" (–ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ü–†–ò /restart1) ---------------

#@log_user_actions
def reset_user_data(user_id):
    if user_id not in user_trip_data:
        user_trip_data[user_id] = load_trip_data(user_id)
    bot.clear_step_handler_by_chat_id(user_id) 

# (9.4) --------------- –ö–û–î –î–õ–Ø "–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê" (–§–£–ù–ö–¶–ò–Ø –ù–ê–ß–ê–õ–¨–ù–û–ì–û –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø) ---------------


@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞')
@track_usage('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def calculate_fuel_cost_handler(message):
    chat_id = message.chat.id

    bot.clear_step_handler_by_chat_id(chat_id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
    item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)
    sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=markup)
    reset_user_data(chat_id)  

    bot.register_next_step_handler(sent, process_start_location_step)
	
#@log_user_actions
def process_start_location_step(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
    item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞":
        reset_and_start_over(chat_id)
        return  
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message) 
        return    

    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        sent = bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(sent, process_start_location_step)
        return  

    if message.location:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        location = message.location
        try:
            start_address = geolocator.reverse((location.latitude, location.longitude), timeout=10).address
        except GeocoderUnavailable: # type: ignore
            bot.send_message(chat_id, "–°–µ—Ä–≤–∏—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        trip_data[chat_id] = {
            "start_location": {
                "address": start_address,
                "latitude": location.latitude,
                "longitude": location.longitude
            }
        }
        bot.send_message(chat_id, f"–í–∞—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n{start_address}")
    else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        start_location = message.text
        try:
            location = geolocator.geocode(start_location, timeout=10)
        except GeocoderUnavailable: # type: ignore
            bot.send_message(chat_id, "–°–µ—Ä–≤–∏—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        if location:
            trip_data[chat_id] = {
                "start_location": {
                    "address": start_location,
                    "latitude": location.latitude,
                    "longitude": location.longitude
                }
            }
            bot.send_message(chat_id, f"–í–∞—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n{start_location}")
        else:
            sent = bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å")
            bot.register_next_step_handler(sent, process_start_location_step)
            return
    
    sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=markup)
    bot.register_next_step_handler(sent, process_end_location_step)

#@log_user_actions
def process_start_location_step(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
    item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞":
        reset_and_start_over(chat_id)
        return  
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message) 
        return    

    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        sent = bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(sent, process_start_location_step)
        return  

    if message.location:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        location = message.location
        try:
            start_address = geolocator.reverse((location.latitude, location.longitude), timeout=10).address
        except GeocoderUnavailable: # type: ignore
            bot.send_message(chat_id, "–°–µ—Ä–≤–∏—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        trip_data[chat_id] = {
            "start_location": {
                "address": start_address,
                "latitude": location.latitude,
                "longitude": location.longitude
            }
        }
        bot.send_message(chat_id, f"–í–∞—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n{start_address}")
    else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        start_location = message.text
        try:
            location = geolocator.geocode(start_location, timeout=10)
        except GeocoderUnavailable: # type: ignore
            bot.send_message(chat_id, "–°–µ—Ä–≤–∏—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        if location:
            trip_data[chat_id] = {
                "start_location": {
                    "address": start_location,
                    "latitude": location.latitude,
                    "longitude": location.longitude
                }
            }
            bot.send_message(chat_id, f"–í–∞—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n{start_location}")
        else:
            sent = bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å")
            bot.register_next_step_handler(sent, process_start_location_step)
            return
    
    sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=markup)
    bot.register_next_step_handler(sent, process_end_location_step)

#@log_user_actions
def process_end_location_step(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
    item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞":
        reset_and_start_over(chat_id)
        return  
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message) 
        return    

    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        sent = bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(sent, process_end_location_step)
        return

    if message.location:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        location = message.location
        try:
            end_address = geolocator.reverse((location.latitude, location.longitude), timeout=10).address
        except GeocoderUnavailable: # type: ignore
            bot.send_message(chat_id, "–°–µ—Ä–≤–∏—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        trip_data[chat_id]["end_location"] = {
            "address": end_address,
            "latitude": location.latitude,
            "longitude": location.longitude
        }
        bot.send_message(chat_id, f"–í–∞—à–µ –∫–æ–Ω–µ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n{end_address}")
    else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        end_location = message.text
        try:
            location = geolocator.geocode(end_location, timeout=10)
        except GeocoderUnavailable: # type: ignore
            bot.send_message(chat_id, "–°–µ—Ä–≤–∏—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        if location:
            trip_data[chat_id]["end_location"] = {
                "address": end_location,
                "latitude": location.latitude,
                "longitude": location.longitude
            }
            bot.send_message(chat_id, f"–í–∞—à–µ –∫–æ–Ω–µ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n{end_location}")
        else:
            sent = bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å")
            bot.register_next_step_handler(sent, process_end_location_step)
            return

    start_coords = (trip_data[chat_id]["start_location"]["latitude"], trip_data[chat_id]["start_location"]["longitude"])
    end_coords = (trip_data[chat_id]["end_location"]["latitude"], trip_data[chat_id]["end_location"]["longitude"])
    distance_km = geodesic(start_coords, end_coords).kilometers

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_auto = types.KeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ")
    item_input = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ —Å–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ")
    item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
    item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    markup.add(item_auto, item_input)
    markup.add(item1)
    markup.add(item2)
    
    sent = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –≤–≤–æ–¥–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(sent, process_distance_choice_step, distance_km)

#@log_user_actions
def process_custom_distance_step(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
    item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)

    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        sent = bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=markup)
        bot.register_next_step_handler(sent, process_custom_distance_step)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞":
        reset_and_start_over(chat_id)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    try:
        custom_distance = float(message.text)
        bot.send_message(chat_id, f"–í—ã –≤–≤–µ–ª–∏ —Å–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {custom_distance:.2f} –∫–º.", reply_markup=markup)
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
        markup_date = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_calendar = types.KeyboardButton("–ò–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
        item_manual = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é")
        item_skip = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã")
        markup_date.add(item_calendar, item_manual, item_skip)
        markup_date.add(item1)
        markup_date.add(item2)

        sent = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–∞—Ç—ã:", reply_markup=markup_date)
        bot.register_next_step_handler(sent, process_date_step, custom_distance)
    except ValueError:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è.", reply_markup=markup)
        bot.register_next_step_handler(sent, process_custom_distance_step)

#@log_user_actions
def process_distance_choice_step(message, distance_km):
    chat_id = message.chat.id
    trip_data[chat_id]["distance"] = distance_km

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞":
        reset_and_start_over(chat_id)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_auto = types.KeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ")
    item_input = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ —Å–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ")
    item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
    item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    markup.add(item_auto, item_input)
    markup.add(item1)
    markup.add(item2)

    if message.text == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ":
        bot.send_message(chat_id, f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏: {distance_km:.2f} –∫–º.")
        process_date_step(message, distance_km)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã

    elif message.text == "–í–≤–µ—Å—Ç–∏ —Å–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ":
        custom_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
        item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        custom_markup.add(item1)
        custom_markup.add(item2)
        
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö:", reply_markup=custom_markup)
        bot.register_next_step_handler(sent, process_custom_distance_step)
    else:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.", reply_markup=markup)
        bot.register_next_step_handler(sent, process_distance_choice_step, distance_km)

#@log_user_actions
def process_date_step(message, distance):
    chat_id = message.chat.id
    user_code = trip_data[chat_id].get("user_code", "ru")  # –ó–∞–¥–∞–µ–º –∫–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã":
        selected_date = "–ë–µ–∑ –¥–∞—Ç—ã"
        process_selected_date(message, selected_date)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞":
        reset_and_start_over(chat_id)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–ò–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è":
        show_calendar(chat_id, user_code)
    elif message.text == "–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é":
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
        item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1)
        markup.add(item2)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é
        sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏:", reply_markup=markup)
        bot.register_next_step_handler(sent, process_manual_date_step, distance)
    else:
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã, –µ—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_calendar = types.KeyboardButton("–ò–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
        item_manual = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é")
        item_skip = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã")
        markup.add(item_calendar, item_manual, item_skip)

        item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
        item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1)
        markup.add(item2)

        sent = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–∞—Ç—ã:", reply_markup=markup)
        bot.register_next_step_handler(sent, process_date_step, distance)

#@log_user_actions
def process_date_input_step(message, distance):
    chat_id = message.chat.id
    date_input = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã (–î–î.–ú–ú.–ì–ì–ì–ì)
    date_pattern = r"^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.\d{4}$"
    if re.match(date_pattern, date_input):
        selected_date = date_input
        process_selected_date(message, selected_date)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —Å –¥–≤—É–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ —Å–Ω–æ–≤–∞
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, process_date_input_step, distance)

#@log_user_actions
def handle_date_selection(message, distance):
    chat_id = message.chat.id
    user_code = trip_data[chat_id].get("user_code", "ru")  # –ó–∞–¥–∞–µ–º –∫–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã":
        selected_date = "–ë–µ–∑ –¥–∞—Ç—ã"
        process_selected_date(message, selected_date)

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞":
        reset_and_start_over(chat_id)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–ò–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è":
        show_calendar(chat_id, user_code)  # –ü–µ—Ä–µ–¥–∞–µ–º user_code
    elif message.text == "–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
        item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1)
        markup.add(item2)

        sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏:", reply_markup=markup)
        bot.register_next_step_handler(sent, process_manual_date_step, distance)
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞":
        reset_and_start_over(chat_id)
    elif message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
    else:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.")
        bot.register_next_step_handler(sent, handle_date_selection, distance)

#@log_user_actions
def show_calendar(chat_id, user_code):
    # Inline-–∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    calendar, _ = DetailedTelegramCalendar(min_date=date(2000, 1, 1), max_date=date(3000, 12, 31), locale=user_code).build()

    # –û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
    item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
    bot.send_message(chat_id, "–ö–∞–ª–µ–Ω–¥–∞—Ä—å:", reply_markup=markup)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=calendar)

#@log_user_actions
@bot.callback_query_handler(func=DetailedTelegramCalendar.func())
@restricted
@track_user_activity
def handle_calendar(call):
    result, key, step = DetailedTelegramCalendar(
        min_date=date(2000, 1, 1), max_date=date(3000, 12, 31), unique_key=call.data
    ).process(call.data)

    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {step}",
                              call.message.chat.id,
                              call.message.message_id,
                              reply_markup=key)
    elif result:
        selected_date = result.strftime('%d.%m.%Y')
        bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date}",
                              call.message.chat.id,
                              call.message.message_id)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        process_selected_date(call.message, selected_date)

#@log_user_actions
def process_selected_date(message, selected_date):
    chat_id = message.chat.id
    distance_km = trip_data[chat_id].get("distance")  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ

    if distance_km is None:
        bot.send_message(chat_id, "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∑–∞–¥–∞–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    show_fuel_types(chat_id, selected_date, distance_km)

#@log_user_actions
def process_manual_date_step(message, distance):
    chat_id = message.chat.id
    date_pattern = r"\d{2}\.\d{2}\.\d{4}"  # –§–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì
    
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞":
        reset_and_start_over(chat_id)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    # –†–∞–∑–º–µ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
    item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)

    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        sent = bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=markup)
        bot.register_next_step_handler(sent, process_manual_date_step, distance)
        return

    if re.match(date_pattern, message.text):
        day, month, year = map(int, message.text.split('.'))
        if 2000 <= year <= 3000:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≥–æ–¥–∞
            try:
                datetime(year, month, day)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
                bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {message.text}", reply_markup=markup)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
                show_fuel_types(chat_id, message.text, distance)
            except ValueError:
                sent = bot.send_message(chat_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.", reply_markup=markup)
                bot.register_next_step_handler(sent, process_manual_date_step, distance)
        else:
            sent = bot.send_message(chat_id, "–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 2000 –≥. –¥–æ 3000 –≥.", reply_markup=markup)
            bot.register_next_step_handler(sent, process_manual_date_step, distance)
    else:
        sent = bot.send_message(chat_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=markup)
        bot.register_next_step_handler(sent, process_manual_date_step, distance)

#@log_user_actions
def show_fuel_types(chat_id, date, distance):
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ —Ç–æ–ø–ª–∏–≤–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–∏–ø–∞–º–∏ —Ç–æ–ø–ª–∏–≤–∞
    row1 = [KeyboardButton(fuel_type) for fuel_type in fuel_types[:3]] 
    row2 = [KeyboardButton(fuel_type) for fuel_type in fuel_types[3:]] 
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    row3 = [KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")]
    row4 = [KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]

    markup.add(*row1, *row2, *row3)
    markup.add(*row4)
    
    sent = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞:", reply_markup=markup)
    bot.register_next_step_handler(sent, process_fuel_type, date, distance)

#@log_user_actions
def clean_price(price):
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–µ–∫
    cleaned_price = re.sub(r'[^\d.]', '', price)
    if cleaned_price.count('.') > 1:
        cleaned_price = cleaned_price[:cleaned_price.find('.') + 1] + cleaned_price[cleaned_price.find('.') + 1:].replace('.', '')
    return cleaned_price

fuel_type_mapping = {
    "–∞–∏-92": "–ê–∏-92",
    "–∞–∏-95": "–ê–∏-95",
    "–∞–∏-98": "–ê–∏-98",
    "–∞–∏-100": "–ê–∏-100",
    "–¥—Ç": "–î–¢",
    "–≥–∞–∑": "–ì–∞–∑ –°–ü–ë–¢",
}

#@log_user_actions
def get_average_fuel_price_from_files(fuel_type, directory="data base/azs"):
    fuel_prices = []

    # –ü—Ä–∏–≤–æ–¥–∏–º fuel_type –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
    fuel_type = fuel_type.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞
    if not os.path.exists(directory):
        return None

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
    for filename in os.listdir(directory):
        if filename.endswith(".json"):
            file_path = os.path.join(directory, filename)

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª JSON
            try:
                with open(file_path, "r", encoding="utf-8") as file:
                    data = json.load(file)

                    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª–µ –∏ –Ω–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–µ –ø–æ —Ç–∏–ø—É —Ç–æ–ø–ª–∏–≤–∞
                    for entry in data:
                        if len(entry) == 3:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                            company, fuel, price = entry
                            # –ü—Ä–∏–≤–æ–¥–∏–º fuel –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                            if fuel.lower() == fuel_type:
                                try:
                                    price = float(price)
                                    fuel_prices.append(price)
                                except ValueError:
                                    continue  # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –≤ —á–∏—Å–ª–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            except Exception as e:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if fuel_prices:
        average_price = sum(fuel_prices) / len(fuel_prices)
        return average_price
    else:
        return None

#@log_user_actions
def get_average_fuel_prices(city_code='default_city_code'):
    url = f'https://azsprice.ru/benzin-{city_code}'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–π URL —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º city_code
    
    try:
        response = requests.get(url)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        
        soup = BeautifulSoup(response.text, 'html.parser')
        
        table = soup.find('table')
        if not table:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏")
        
        fuel_prices = {}
        rows = table.find_all('tr')
        
        for row in rows[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
            columns = row.find_all('td')
            if len(columns) < 5:
                continue
            
            fuel_type = columns[2].text.strip()  # –ú–∞—Ä–∫–∞ —Ç–æ–ø–ª–∏–≤–∞
            today_price = clean_price(columns[3].text.strip())  # –¶–µ–Ω–∞ –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ
            
            if today_price:
                try:
                    price = float(today_price)
                    if fuel_type not in fuel_prices:
                        fuel_prices[fuel_type] = []
                    fuel_prices[fuel_type].append(price)
                except ValueError:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã

        average_prices = {fuel: sum(prices) / len(prices) for fuel, prices in fuel_prices.items()}
        return average_prices
    
    except (requests.RequestException, ValueError) as e:
        return None  # –í–µ—Ä–Ω–µ–º None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

#@log_user_actions
def process_fuel_type(message, date, distance):
    if message is None:
        return  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None

    chat_id = message.chat.id

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞":
        reset_and_start_over(chat_id)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.voice or message.video_note:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        sent = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞:")
        bot.register_next_step_handler(sent, process_fuel_type, date, distance)
        return

    fuel_type = message.text.strip().lower() if message.text else ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã —Ç–æ–ø–ª–∏–≤–∞
    fuel_type_mapping = {
        "–∞–∏-92": "–∞–∏-92",
        "–∞–∏-95": "–∞–∏-95",
        "–∞–∏-98": "–∞–∏-98",
        "–∞–∏-100": "–∞–∏-100",
        "–¥—Ç": "–¥—Ç",
        "–≥–∞–∑": "–≥–∞–∑ —Å–ø–±—Ç",
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if fuel_type not in fuel_type_mapping:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        bot.register_next_step_handler(sent, process_fuel_type, date, distance)
        return

    actual_fuel_type = fuel_type_mapping[fuel_type]

    # –î–∞–ª—å–Ω–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É")
    item2 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Ü–µ–Ω—É")
    item3 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
    item4 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1, item2)
    markup.add(item3)
    markup.add(item4)

    sent = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã —Ç–æ–ø–ª–∏–≤–∞:", reply_markup=markup)
    bot.register_next_step_handler(sent, handle_price_input_choice, date, distance, actual_fuel_type)

#@log_user_actions
def handle_price_input_choice(message, date, distance, fuel_type):
    chat_id = message.chat.id

    if message.text == "–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Ü–µ–Ω—É":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
        item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1)
        markup.add(item2)

        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –ª–∏—Ç—Ä —Ç–æ–ø–ª–∏–≤–∞:", reply_markup=markup)
        bot.register_next_step_handler(sent, process_price_per_liter_step, date, distance, fuel_type)
    
    elif message.text == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É":
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Å —Å–∞–π—Ç–∞
        fuel_prices = get_average_fuel_prices(city_code="cheboksary")
        
        if fuel_prices:  # –ï—Å–ª–∏ —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
            item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            markup.add(item1)
            markup.add(item2)
            
            if fuel_type.lower() in fuel_prices:  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                price = fuel_prices[fuel_type.lower()]
                bot.send_message(chat_id, f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –Ω–∞ {fuel_type.upper()} –ø–æ –†–§: {price:.2f} —Ä—É–±./–ª.", reply_markup=markup)
                sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ 100 –∫–º:", reply_markup=markup)
                bot.register_next_step_handler(sent, process_fuel_consumption_step, date, distance, fuel_type, price)
            else:
                # –ï—Å–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–∞–π—Ç–µ, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–æ–≤
                price_from_files = get_average_fuel_price_from_files(fuel_type, directory="data base/azs")
                
                if price_from_files:  # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–∞—Ö
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
                    item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                    markup.add(item1)
                    markup.add(item2)
                    
                    bot.send_message(chat_id, f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –Ω–∞ {fuel_type.upper()} –ø–æ –†–§: {price_from_files:.2f} —Ä—É–±./–ª.", reply_markup=markup)
                    sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ 100 –∫–º:", reply_markup=markup)
                    bot.register_next_step_handler(sent, process_fuel_consumption_step, date, distance, fuel_type, price_from_files)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–∞—Ö, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É –≤—Ä—É—á–Ω—É—é
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
                    item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                    markup.add(item1)
                    markup.add(item2)
                    sent = bot.send_message(chat_id, f"–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞ '{fuel_type}' –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É", reply_markup=markup)
                    bot.register_next_step_handler(sent, process_price_per_liter_step, date, distance, fuel_type)
        
        else:  # –ï—Å–ª–∏ —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–æ–≤
            price_from_files = get_average_fuel_price_from_files(fuel_type, directory="data base/azs")
            
            if price_from_files:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
                item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                markup.add(item1)
                markup.add(item2)
                
                bot.send_message(chat_id, f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –Ω–∞ {fuel_type.upper()} –ø–æ –†–§: {price_from_files:.2f} —Ä—É–±./–ª.", reply_markup=markup)
                sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ 100 –∫–º:", reply_markup=markup)
                bot.register_next_step_handler(sent, process_fuel_consumption_step, date, distance, fuel_type, price_from_files)
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
                item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                markup.add(item1)
                markup.add(item2)
                sent = bot.send_message(chat_id, f"–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞ '{fuel_type}' –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É", reply_markup=markup)
                bot.register_next_step_handler(sent, process_price_per_liter_step, date, distance, fuel_type)
    
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞":
        reset_and_start_over(chat_id)
    elif message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
    else:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        bot.register_next_step_handler(sent, handle_price_input_choice, date, distance, fuel_type)

#@log_user_actions
def process_price_per_liter_step(message, date, distance, fuel_type):
    chat_id = message.chat.id

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞":
        reset_and_start_over(chat_id)
        return    
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message) 
        return    

    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        sent = bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(sent, process_price_per_liter_step, date, distance, fuel_type)
        return

    input_text = message.text.replace(',', '.')
    
    try:
        price_per_liter = float(input_text)
        if price_per_liter <= 0:
            raise ValueError
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
        item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1)
        markup.add(item2)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞
        sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ 100 –∫–º:", reply_markup=markup)
        bot.clear_step_handler_by_chat_id(chat_id)  # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞
        bot.register_next_step_handler(sent, process_fuel_consumption_step, date, distance, fuel_type, price_per_liter)
        
    except ValueError:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã —Ç–æ–ø–ª–∏–≤–∞ –∑–∞ –ª–∏—Ç—Ä:")
        bot.register_next_step_handler(sent, process_price_per_liter_step, date, distance, fuel_type)

# (9.11) --------------- –ö–û–î –î–õ–Ø "–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê" (–§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–ê–°–°–ê–ñ–ò–†–û–í ) ---------------

#@log_user_actions
def process_fuel_consumption_step(message, date, distance, fuel_type, price_per_liter):
    chat_id = message.chat.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞":
        reset_and_start_over(chat_id)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message) 
        return
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        sent = bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(sent, process_fuel_consumption_step, date, distance, fuel_type, price_per_liter)
        return
    input_text = message.text.replace(',', '.') 
    try:
        fuel_consumption = float(input_text)
        if fuel_consumption <= 0:
            raise ValueError
        sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –≤ –º–∞—à–∏–Ω–µ:")
        bot.clear_step_handler_by_chat_id(chat_id) 
        bot.register_next_step_handler(sent, process_passengers_step, date, distance, fuel_type, price_per_liter, fuel_consumption)
    except ValueError:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ 100 –∫–º:")
        bot.register_next_step_handler(sent, process_fuel_consumption_step, date, distance, fuel_type, price_per_liter)

# (9.12) --------------- –ö–û–î –î–õ–Ø "–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê" (–§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ê–°–ß–ï–¢–ê) ---------------

#@log_user_actions
def process_passengers_step(message, date, distance, fuel_type, price_per_liter, fuel_consumption):
    chat_id = message.chat.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞":
        reset_and_start_over(chat_id)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        sent = bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(sent, process_passengers_step, date, distance, fuel_type, price_per_liter, fuel_consumption)
        return
    try:
        passengers = int(message.text)
        if passengers <= 0:
            raise ValueError

        # –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞
        fuel_cost = (distance / 100) * fuel_consumption * price_per_liter
        fuel_cost_per_person = fuel_cost / passengers

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π
        start_location = trip_data[chat_id]['start_location']
        end_location = trip_data[chat_id]['end_location']
        
        # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç–∞
        yandex_maps_url = f"https://yandex.ru/maps/?rtext={start_location['latitude']},{start_location['longitude']}~{end_location['latitude']},{end_location['longitude']}&rtt=auto"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ clck.ru –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
        try:
            response = requests.get(f'https://clck.ru/--?url={yandex_maps_url}')
            short_url = response.text
        except Exception as e:
            bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É: {str(e)}")
            short_url = yandex_maps_url  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        
        if chat_id not in temporary_trip_data:
            temporary_trip_data[chat_id] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏
        temporary_trip_data[chat_id].append({
            "start_location": start_location,
            "end_location": end_location,
            "date": date,
            "distance": distance,
            "fuel_type": fuel_type,
            "price_per_liter": price_per_liter,
            "fuel_consumption": fuel_consumption,
            "passengers": passengers,
            "fuel_spent": (distance / 100) * fuel_consumption,
            "fuel_cost": fuel_cost,
            "fuel_cost_per_person": fuel_cost_per_person,
            "route_link": short_url  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        })

        display_summary(chat_id, fuel_cost, fuel_cost_per_person, fuel_type, date, distance, price_per_liter, fuel_consumption, passengers)
    except ValueError:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:")
        bot.register_next_step_handler(sent, process_passengers_step, date, distance, fuel_type, price_per_liter, fuel_consumption)

# (9.13) --------------- –ö–û–î –î–õ–Ø "–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê" (–ò–¢–û–ì–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø) ---------------

#@log_user_actions
def display_summary(chat_id, fuel_cost, fuel_cost_per_person, fuel_type, date, distance, price_per_liter, fuel_consumption, passengers):
    fuel_spent = (distance / 100) * fuel_consumption 

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π
    start_location = trip_data[chat_id]['start_location']
    end_location = trip_data[chat_id]['end_location']
    
    # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç–∞
    yandex_maps_url = f"https://yandex.ru/maps/?rtext={start_location['latitude']},{start_location['longitude']}~{end_location['latitude']},{end_location['longitude']}&rtt=auto"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ clck.ru –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
    try:
        response = requests.get(f'https://clck.ru/--?url={yandex_maps_url}')
        short_url = response.text
    except Exception as e:
        bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É: {str(e)}")
        short_url = yandex_maps_url  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    summary_message = "üöó *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–ï–ó–î–ö–ï* üöó\n"
    summary_message += "-------------------------------------------------------------\n"
    summary_message += f"üìç *–ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:*\n{start_location['address']}\n"
    summary_message += f"üèÅ *–ö–æ–Ω–µ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:*\n{end_location['address']}\n"
    summary_message += f"üóìÔ∏è *–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏:* {date}\n"
    summary_message += f"üìè *–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:* {distance:.2f} –∫–º\n"
    summary_message += f"‚õΩ *–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞:* {fuel_type}\n"
    summary_message += f"üíµ *–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ –∑–∞ –ª–∏—Ç—Ä:* {price_per_liter:.2f} —Ä—É–±.\n"
    summary_message += f"‚öôÔ∏è *–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ 100 –∫–º:* {fuel_consumption} –ª.\n"
    summary_message += f"üë• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:* {passengers}\n"
    summary_message += "-------------------------------------------------------------\n"
    summary_message += f"üõ¢Ô∏è *–ü–û–¢–†–ê–ß–ï–ù–û –õ–ò–¢–†–û–í –¢–û–ü–õ–ò–í–ê:* {fuel_spent:.2f} –ª.\n"
    summary_message += f"üí∞ *–°–¢–û–ò–ú–û–°–¢–¨ –¢–û–ü–õ–ò–í–ê –î–õ–Ø –ü–û–ï–ó–î–ö–ò:* {fuel_cost:.2f} —Ä—É–±.\n"
    summary_message += f"üë§ *–°–¢–û–ò–ú–û–°–¢–¨ –¢–û–ü–õ–ò–í–ê –ù–ê –ß–ï–õ–û–í–ï–ö–ê:* {fuel_cost_per_person:.2f} —Ä—É–±.\n"
    summary_message += f"[–°–°–´–õ–ö–ê –ù–ê –ú–ê–†–®–†–£–¢]({short_url})\n"

    summary_message = summary_message.replace('\n', '\n\n')
    bot.clear_step_handler_by_chat_id(chat_id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É")
    item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
    item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)

    bot.send_message(chat_id, summary_message, reply_markup=markup, parse_mode="Markdown")

#@log_user_actions
def update_excel_file(user_id):
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏ Excel
    folder_path = "data base/trip/excel"
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    file_path = os.path.join(folder_path, f"{user_id}_trips.xlsx")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    if not os.path.exists(file_path):
        df = pd.DataFrame(columns=[
            "–î–∞—Ç–∞", "–ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", "–ö–æ–Ω–µ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
            "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)", "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞", "–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±/–ª)",
            "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª/100 –∫–º)", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
            "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –ª–∏—Ç—Ä–æ–≤", "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±)", 
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ (—Ä—É–±)", "–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç"
        ])
        df.to_excel(file_path, index=False)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ Excel
    df = pd.read_excel(file_path)
    trips = user_trip_data.get(user_id, [])
    trip_records = [
        [
            trip['start_location']['address'], trip['end_location']['address'], trip['date'],
            trip['distance'], trip['fuel_type'], trip['price_per_liter'], trip['fuel_consumption'], 
            trip['passengers'], trip['fuel_spent'], trip['fuel_cost'], trip['fuel_cost_per_person'], 
            trip.get('route_link', "–ù–µ—Ç —Å—Å—ã–ª–∫–∏")
        ] for trip in trips
    ]
    df = pd.DataFrame(trip_records, columns=df.columns)
    df.to_excel(file_path, index=False)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é Excel
    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows(min_row=2):
        for cell in row:
            cell.alignment = Alignment(horizontal='center', vertical='center')
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'), 
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_row=2, min_col=9, max_col=12):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)


import os
import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Alignment, Font
from openpyxl.styles import Alignment, Border, Side

import pandas as pd
import os
from openpyxl import load_workbook

def save_trip_to_excel(user_id, trip):
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏ Excel
    directory = "data base/trip/excel"
    if not os.path.exists(directory):
        os.makedirs(directory)
    file_path = os.path.join(directory, f"{user_id}_trips.xlsx")

    # –°–æ–∑–¥–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª Excel –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏
    new_trip_data = {
        "–ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ": trip['start_location']['address'],
        "–ö–æ–Ω–µ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ": trip['end_location']['address'],
        "–î–∞—Ç–∞": trip['date'],
        "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)": round(trip.get('distance', None), 2),
        "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞": trip.get('fuel_type', None),
        "–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±/–ª)": round(trip.get('price_per_liter', None), 2),
        "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª/100 –∫–º)": round(trip.get('fuel_consumption', None), 2),
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤": trip.get('passengers', None),
        "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –ª–∏—Ç—Ä–æ–≤": round(trip.get('fuel_spent', None), 2),
        "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±)": round(trip.get('fuel_cost', None), 2),
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ (—Ä—É–±)": round(trip.get('fuel_cost_per_person', None), 2),
        "–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç": trip.get('route_link', None)
    }
    new_trip_df = pd.DataFrame([new_trip_data])

    if os.path.exists(file_path):
        existing_data = pd.read_excel(file_path).dropna(axis=1, how='all')
        updated_data = pd.concat([existing_data, new_trip_df], ignore_index=True)
    else:
        updated_data = new_trip_df

    updated_data.to_excel(file_path, index=False)
    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows():
        for cell in row:
            cell.alignment = Alignment(horizontal="center", vertical="center")
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_col=worksheet.max_column-3, max_col=worksheet.max_column):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)



# (9.14) --------------- –ö–û–î –î–õ–Ø "–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê" (–ö–û–ú–ê–ù–î–ê "–°–û–•–†–ê–ù–ò–¢–¨ –ü–û–ï–ó–î–ö–£") ---------------

@bot.message_handler(func=lambda message: message.text == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É')
@track_usage('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def save_data_handler(message):
    user_id = message.chat.id
    if user_id in temporary_trip_data and temporary_trip_data[user_id]:
        if user_id not in user_trip_data:
            user_trip_data[user_id] = []

        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ
        user_trip_data[user_id].extend(temporary_trip_data[user_id])

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–µ–∑–¥–∫—É
        last_trip = user_trip_data[user_id][-1]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_trip_data(user_id) 
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–µ–∑–¥–∫—É –≤ Excel
        save_trip_to_excel(user_id, last_trip)

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        temporary_trip_data[user_id] = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
        item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1)
        markup.add(item2) 
        
        bot.send_message(user_id, "–î–∞–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=markup)

# (9.15) --------------- –ö–û–î –î–õ–Ø "–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê" (–ö–û–ú–ê–ù–î–ê "–í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ  –í–†–ï–ú–ï–ù–ù–´–• –î–ê–ù–ù–´–•") ---------------

@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@bot.message_handler(commands=['mainmenu'])
def return_to_menu(message):
    user_id = message.chat.id
    if user_id in temporary_trip_data:
        temporary_trip_data[user_id] = []
    start(message)

# # (9.16) --------------- –ö–û–î –î–õ–Ø "–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê" (–ö–û–ú–ê–ù–î–ê "–í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ –†–ê–°–ß–ï–¢–ê –¢–û–ü–õ–ò–í–ê   –í–†–ï–ú–ï–ù–ù–´–• –î–ê–ù–ù–´–•") ---------------

@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞')
#@log_user_actions
def restart_handler(message):
    user_id = message.chat.id

    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞, –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    if user_id in user_trip_data:
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–±—Ä–æ—Å–∏—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        save_trip_data(user_id, user_trip_data[user_id])

    # –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º reset, –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ
    reset_and_start_over(user_id)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–µ–∑–¥–∫–∏ (–Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—è –∏—Ö)
    user_trip_data[user_id] = load_trip_data(user_id)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞
    reset_and_start_over(message)

# (9.17) --------------- –ö–û–î –î–õ–Ø "–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê" (–ö–û–ú–ê–ù–î–ê "–ü–û–°–ú–û–¢–†–ï–¢–¨ –ü–û–ï–ó–î–ö–ò") ---------------

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–µ–∑–¥–∫–∏")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–µ–∑–¥–∫–∏')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–µ–∑–¥–∫–∏')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def view_trips(message):
    user_id = message.chat.id
    trips = load_trip_data(user_id)  # –ó–∞–≥—Ä—É–∑–∏–º –ø–æ–µ–∑–¥–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    if trips:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–µ–∑–¥–æ–∫
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        buttons = []

        for i, trip in enumerate(trips, start=1):
            start_address = trip['start_location']['address']
            end_address = trip['end_location']['address']
            date = trip['date'] if trip['date'] != "–ë–µ–∑ –¥–∞—Ç—ã" else "–ë–µ–∑ –¥–∞—Ç—ã"  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            button_text = f"‚Ññ{i}. {date}"
            buttons.append(types.KeyboardButton(button_text))

            # –†–∞–∑–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä—è–¥–æ–≤, —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ
            if len(buttons) == 3 or i == len(trips):
                markup.row(*buttons)
                buttons = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä—è–¥–∞

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        markup.add("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ Excel")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫!")

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ Excel")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ Excel')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ Excel')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def send_excel_file(message):
    user_id = message.chat.id
    excel_file_path = f"data base/trip/excel/{user_id}_trips.xlsx"

    if os.path.exists(excel_file_path):
        with open(excel_file_path, 'rb') as excel_file:
            bot.send_document(user_id, excel_file)
    else:
        bot.send_message(user_id, "–§–∞–π–ª Excel –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏.")

@bot.message_handler(func=lambda message: message.text and re.match(r"‚Ññ\d+\.\s*\d{2}\.\d{2}\.\d{4}|‚Ññ\d+\.\s*–ë–µ–∑ –¥–∞—Ç—ã", message.text))
@restricted
@track_user_activity
@check_chat_state
#@log_user_actions
def show_trip_details(message):
    user_id = message.chat.id
    trips = load_trip_data(user_id)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–µ–∑–¥–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        match = re.match(r"‚Ññ(\d+)\.\s*(\d{2}\.\d{2}\.\d{4}|–ë–µ–∑ –¥–∞—Ç—ã)", message.text)
        if match:
            trip_index = int(match.group(1)) - 1  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ–µ–∑–¥–∫–∏
            if 0 <= trip_index < len(trips):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
                trip = trips[trip_index]

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–µ–∑–¥–∫–∏
                start_address = trip['start_location']['address']
                end_address = trip['end_location']['address']
                date = trip['date'] if trip['date'] != "–ë–µ–∑ –¥–∞—Ç—ã" else "–ë–µ–∑ –¥–∞—Ç—ã"  # –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ë–µ–∑ –¥–∞—Ç—ã"
                summary_message = f"*–ò–¢–û–ì–û–í–´–ï –î–ê–ù–ù–´–ï –ü–û–ï–ó–î–ö–ò* *{trip_index + 1}* \n\n"
                summary_message += "-------------------------------------------------------------\n\n"
                summary_message += f"üìç *–ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:*\n\n{start_address}\n\n"
                summary_message += f"üèÅ *–ö–æ–Ω–µ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:*\n\n{end_address}\n\n"
                summary_message += f"üóìÔ∏è *–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏:* {date}\n\n"
                summary_message += f"üìè *–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:* {trip['distance']:.2f} –∫–º.\n\n"
                summary_message += f"‚õΩ *–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞:* {trip['fuel_type']}\n\n"
                summary_message += f"üíµ *–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ –∑–∞ –ª–∏—Ç—Ä:* {trip['price_per_liter']:.2f} —Ä—É–±.\n\n"
                summary_message += f"‚öôÔ∏è *–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ 100 –∫–º:* {trip['fuel_consumption']} –ª.\n\n"
                summary_message += f"üë• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:* {trip['passengers']}\n\n"
                summary_message += "-------------------------------------------------------------\n\n"
                summary_message += f"üõ¢Ô∏è *–ü–û–¢–†–ê–ß–ï–ù–û –õ–ò–¢–†–û–í –¢–û–ü–õ–ò–í–ê:* {trip['fuel_spent']:.2f} –ª.\n\n"
                summary_message += f"üí∞ *–°–¢–û–ò–ú–û–°–¢–¨ –¢–û–ü–õ–ò–í–ê –î–õ–Ø –ü–û–ï–ó–î–ö–ò:* {trip['fuel_cost']:.2f} —Ä—É–±.\n\n"
                summary_message += f"üë§ *–°–¢–û–ò–ú–û–°–¢–¨ –¢–û–ü–õ–ò–í–ê –ù–ê –ß–ï–õ–û–í–ï–ö–ê:* {trip['fuel_cost_per_person']:.2f} —Ä—É–±.\n\n"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ 'route_link' –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–∫–∏
                if 'route_link' in trip:
                    summary_message += f"[–°–°–´–õ–ö–ê –ù–ê –ú–ê–†–®–†–£–¢]({trip['route_link']})\n\n"
                else:
                    summary_message += "–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–µ–∑–¥–∫–µ
                bot.send_message(user_id, summary_message, parse_mode="Markdown")

                # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–µ–∑–¥–∫–∏
                markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
                markup.add("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–µ–∑–¥–∫–∏")
                markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
                markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

                bot.send_message(user_id, "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–µ–∑–¥–∫–∏", reply_markup=markup)

            else:
                bot.send_message(user_id, "–ü–æ–µ–∑–¥–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        else:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–µ–∑–¥–∫–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

    except (IndexError, ValueError) as e:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–µ–∑–¥–∫–∏"
@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–µ–∑–¥–∫–∏")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–µ–∑–¥–∫–∏')

#@log_user_actions
def view_other_trips(message):
    view_trips(message)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–∫

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞" –∏ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
# @bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞")
# @restricted
# @track_user_activity
# @check_chat_state
# @check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞')

# #@log_user_actions
# def return_to_fuel_calc_menu(message):
#     chat_id = message.chat.id
#     reset_and_start_over(chat_id)  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞
#     bot.send_message(chat_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞", reply_markup=types.ReplyKeyboardRemove())

# (9.18) --------------- –ö–û–î –î–õ–Ø "–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê" (–ö–û–ú–ê–ù–î–ê "–£–î–ê–õ–ò–¢–¨ –ü–û–ï–ó–î–ö–£") ---------------

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫—É")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫—É')
@track_usage('–£–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫—É')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def ask_for_trip_to_delete(message):
    user_id = message.chat.id

    if user_id in user_trip_data:
        if user_trip_data[user_id]:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            buttons = []

            # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∏ –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏
            for i, trip in enumerate(user_trip_data[user_id], start=1):
                trip_date = trip.get('date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')  # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏
                button_text = f"‚Ññ{i}. {trip_date}"  # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º –∏ –¥–∞—Ç–æ–π
                buttons.append(types.KeyboardButton(button_text))

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ä—è–¥ –ø–æ 3
                if len(buttons) == 3 or i == len(user_trip_data[user_id]):
                    markup.row(*buttons)
                    buttons = []  # –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä—è–¥–∞

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            markup.add(types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–µ–∑–¥–∫–∏"))
            markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞"))
            markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
            bot.register_next_step_handler(message, confirm_trip_deletion)
        else:
            bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–µ–∑–¥–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫!")

#@log_user_actions
def confirm_trip_deletion(message):
    user_id = message.chat.id

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞":
        reset_and_start_over(user_id)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–µ–∑–¥–∫–∏":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        
        bot.send_message(
            user_id,
            "*–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–µ–∑–¥–∫–∏?*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–î–ê* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–ù–ï–¢* –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode="Markdown",
            reply_markup=markup
        )
        bot.register_next_step_handler(message, confirm_delete_all)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º–∞—Ç—É "‚ÑñN. –¥–∞—Ç–∞"
    if message.text.startswith("‚Ññ") and "." in message.text:
        try:
            trip_number = int(message.text.split(".")[0][1:])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∫–∏
            if 1 <= trip_number <= len(user_trip_data[user_id]):
                deleted_trip = user_trip_data[user_id].pop(trip_number - 1)
                bot.send_message(user_id, f"–ü–æ–µ–∑–¥–∫–∞ *‚Ññ.{trip_number}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", parse_mode="Markdown")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
                update_excel_file(user_id)

            else:
                bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        except ValueError:
            bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–∫–∏")
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫")

    reset_and_start_over(user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–µ–∑–¥–æ–∫
#@log_user_actions
def confirm_delete_all(message):
    user_id = message.chat.id
    
    if message.text is None:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        bot.register_next_step_handler(message, confirm_delete_all)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞" –∏ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞":
        reset_and_start_over(user_id)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    user_response = message.text.lower()

    if user_response == "–¥–∞":
        if user_id in user_trip_data and user_trip_data[user_id]:
            user_trip_data[user_id].clear()
            bot.send_message(user_id, "–í—Å–µ –ø–æ–µ–∑–¥–∫–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
            # –û—á–∏—Å—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞
            update_excel_file(user_id)
        else:
            bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–µ–∑–¥–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            reset_and_start_over(user_id)
        
        # –û—á–∏—â–∞–µ–º Excel —Ñ–∞–π–ª, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        excel_file = os.path.join('data base', f"{user_id}_trips.xlsx")
        if os.path.exists(excel_file):
            workbook = load_workbook(excel_file)
            sheet = workbook.active
            for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row):
                for cell in row:
                    cell.value = None
            workbook.save(excel_file)

    elif user_response == "–Ω–µ—Ç":
        bot.send_message(user_id, "–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–µ–∑–¥–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
        reset_and_start_over(user_id)
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ *–î–ê* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–ù–ï–¢* –¥–ª—è –æ—Ç–º–µ–Ω—ã", parse_mode="Markdown")
        bot.register_next_step_handler(message, confirm_delete_all)

# (10) --------------- –ö–û–î –î–õ–Ø "–¢–†–ê–¢" ---------------

# (10.1) --------------- –ö–û–î –î–õ–Ø "–¢–†–ê–¢" (–û–ë–†–ê–ë–û–¢–ß–ò–ö "–¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´") ---------------

@bot.message_handler(func=lambda message: message.text == "–¢—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–¢—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã')
@track_usage('–¢—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def handle_expenses_and_repairs(message):

    user_id = message.from_user.id

    expense_data = load_expense_data(user_id).get(str(user_id), {})
    repair_data = load_repair_data(user_id).get(str(user_id), {})

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É")
    item2 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã")
    item3 = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–º–æ–Ω—Ç")
    item4 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã")
    item5 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã")
    item6 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã")
    item7 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    item8 = types.KeyboardButton("–í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")

    markup.add(item8)
    markup.add(item1, item3)
    markup.add(item2, item4)
    markup.add(item5, item6)
    markup.add(item7)

    bot.clear_step_handler_by_chat_id(user_id)
    bot.send_message(user_id, "–ú–µ–Ω—é –¥–ª—è —É—á–µ—Ç–∞ —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# (10.3) --------------- –ö–û–î –î–õ–Ø "–¢–†–ê–¢" (–ü–†–û–í–ï–†–ö–ê –ù–ê –ú–£–õ–¨–¢–ò–ú–ï–î–ò–Æ) ---------------

#@log_user_actions
def contains_media(message):
    return (message.photo or message.video or message.document or message.animation or
            message.sticker or message.location or message.audio or message.contact or
            message.voice or message.video_note)

# (10.4) --------------- –ö–û–î –î–õ–Ø "–¢–†–ê–¢" (–í–û–ó–í–†–ê–¢ –í –ú–ï–ù–Æ) ---------------

#@log_user_actions
def send_menu(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É")
    item2 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã")
    item3 = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–º–æ–Ω—Ç")
    item4 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã")
    item5 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã")
    item6 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã")
    item7 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    item8 = types.KeyboardButton("–í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    
    markup.add(item8)
    markup.add(item1, item3)
    markup.add(item2, item4)
    markup.add(item5, item6)
    markup.add(item7)

    bot.send_message(user_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
@bot.message_handler(commands=['restart2'])
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤')
#@log_user_actions
def return_to_menu_2(message):
    user_id = message.from_user.id
    send_menu(user_id)

# (10.5) --------------- –ö–û–î –î–õ–Ø "–¢–†–ê–¢" (–û–ë–†–ê–ë–û–¢–ß–ò–ö "–ó–ê–ü–ò–°–ê–¢–¨ –¢–†–ê–¢–£") ---------------

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö
def save_expense_data(user_id, user_data, selected_transport=None):
    folder_path = os.path.join("data base", "expense")
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)

    file_path = os.path.join(folder_path, f"{user_id}_expenses.json")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    current_data = load_expense_data(user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ä–∞—Å—Ö–æ–¥—ã, –Ω–µ —Ç—Ä–æ–≥–∞—è –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ
    user_data["user_categories"] = user_data.get("user_categories", current_data.get("user_categories", []))
    user_data["expenses"] = current_data.get("expenses", [])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ –Ω–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω
    if selected_transport is not None:
        user_data["selected_transport"] = selected_transport

    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
    with open(file_path, "w", encoding="utf-8") as file:
        json.dump(user_data, file, ensure_ascii=False, indent=4)

def load_expense_data(user_id):
    folder_path = os.path.join("data base", "expense")
    file_path = os.path.join(folder_path, f"{user_id}_expenses.json")
    
    if not os.path.exists(file_path):
        return {"user_categories": [], "selected_transport": "", "expenses": []}

    try:
        with open(file_path, "r", encoding="utf-8") as file:
            data = json.load(file)
    except (FileNotFoundError, ValueError) as e:
        data = {"user_categories": [], "selected_transport": "", "expenses": []}
    
    return data

#@log_user_actions
def get_user_categories(user_id):
    data = load_expense_data(user_id)
    default_categories = ["–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–ê–ó–°", "–ú–æ–π–∫–∞", "–ü–∞—Ä–∫–æ–≤–∫–∞", "–ü–ª–∞—Ç–Ω–∞—è –¥–æ—Ä–æ–≥–∞", "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞", "–®—Ç—Ä–∞—Ñ—ã"]
    user_categories = data.get("user_categories", [])
    return default_categories + user_categories

#@log_user_actions
def add_user_category(user_id, new_category):
    data = load_expense_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
    if "user_categories" not in data:
        data["user_categories"] = []
    if new_category not in data["user_categories"]:
        data["user_categories"].append(new_category)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    save_expense_data(user_id, data)  # –¢–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã

#@log_user_actions
def remove_user_category(user_id, category_to_remove, selected_transport=""):
    data = load_expense_data(user_id)
    if "user_categories" in data and category_to_remove in data["user_categories"]:
        data["user_categories"].remove(category_to_remove)
        save_expense_data(user_id, data, selected_transport)

#@log_user_actions
def get_user_transport_keyboard(user_id):
    transports = user_transport.get(str(user_id), [])  # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    for i in range(0, len(transports), 2):
        transport_buttons = [
            types.KeyboardButton(f"{transport['brand']} {transport['model']} ({transport['license_plate']})")
            for transport in transports[i:i+2]
        ]
        markup.row(*transport_buttons)

    markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"))
    return markup

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞—Ç—ã
@bot.message_handler(func=lambda message: message.text == "–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É')
@track_usage('–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def record_expense(message):
    user_id = message.from_user.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if contains_media(message):
        sent = bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(sent, record_expense)
        return

    markup = get_user_transport_keyboard(str(user_id))
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞—Ç—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_transport_selection_for_expense)

#@log_user_actions
def handle_transport_selection_for_expense(message):
    user_id = message.from_user.id

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return
    elif message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        add_transport(message)
        return

    selected_transport = message.text
    for transport in user_transport.get(str(user_id), []):
        formatted_transport = f"{transport['brand']} {transport['model']} ({transport['license_plate']})"
        if formatted_transport == selected_transport:
            brand, model, license_plate = transport['brand'], transport['model'], transport['license_plate']
            break
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        markup = get_user_transport_keyboard(user_id)
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:", reply_markup=markup)
        bot.register_next_step_handler(message, handle_transport_selection_for_expense)
        return

    # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    process_category_selection(user_id, brand, model, license_plate)

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞—Ç—ã
#@log_user_actions
def process_category_selection(user_id, brand, model, license_plate, prompt_message=None):
    categories = get_user_categories(user_id)

    # –°–º–∞–π–ª—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    system_emoji = "üîπ"
    user_emoji = "üî∏"

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–º–∞–π–ª–æ–≤ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: –ø–µ—Ä–≤—ã–µ 7 —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏
    category_list = "\n".join(
        f"{system_emoji if i < 7 else user_emoji} {i + 1}. {category}"
        for i, category in enumerate(categories)
    )
    category_list = f"*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*\n\n{category_list}"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(
        types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"),
        types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    )
    markup.add(
        types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    )
    markup.add(
        types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    )
    if prompt_message:
        bot.send_message(user_id, category_list, reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(prompt_message, get_expense_category, brand, model, license_plate)
    else:
        prompt_message = bot.send_message(user_id, category_list, reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(prompt_message, get_expense_category, brand, model, license_plate)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç—Ä–∞—Ç—ã
#@log_user_actions
def get_expense_category(message, brand, model, license_plate):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_expense_category, brand, model, license_plate)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.text:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_expense_category, brand, model, license_plate)
        return
    
    selected_index = message.text.strip()

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
    if selected_index == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return
    elif selected_index == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if selected_index == '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
        selected_category = "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        proceed_to_expense_name(message, selected_category, brand, model, license_plate)
        return

    if selected_index == '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(
            types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        )
        markup.add(
            types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        )
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, add_new_category, brand, model, license_plate)
        return

    if selected_index == '–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
        handle_category_removal(message, brand, model, license_plate)
        return

    if selected_index.isdigit():
        index = int(selected_index) - 1
        categories = get_user_categories(user_id)
        if 0 <= index < len(categories):
            selected_category = categories[index]
            proceed_to_expense_name(message, selected_category, brand, model, license_plate)
        else:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            bot.register_next_step_handler(message, get_expense_category, brand, model, license_plate)
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        bot.register_next_step_handler(message, get_expense_category, brand, model, license_plate)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç—Ä–∞—Ç
#@log_user_actions
def add_new_category(message, brand, model, license_plate):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, add_new_category, brand, model, license_plate)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.text:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, add_new_category, brand, model, license_plate)
        return

    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
    new_category = message.text.strip().lower()  # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

    if new_category in ["–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if new_category == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_menu_2(message)
        else:
            return_to_menu(message)
        return

    if not new_category:
        bot.send_message(user_id, "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        bot.register_next_step_handler(message, add_new_category, brand, model, license_plate)
        return

    user_categories = [cat.lower() for cat in get_user_categories(user_id)]  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    if new_category in user_categories:
        bot.send_message(user_id, "–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        bot.register_next_step_handler(message, add_new_category, brand, model, license_plate)
        return

    add_user_category(user_id, new_category)
    bot.send_message(user_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è *{new_category}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", parse_mode="Markdown")
    process_category_selection(user_id, brand, model, license_plate)

#@log_user_actions
def proceed_to_expense_name(message, selected_category, brand, model, license_plate):
    user_id = message.from_user.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, get_expense_name, selected_category, brand, model, license_plate)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–∞—Ç—ã
#@log_user_actions
def get_expense_name(message, selected_category, brand, model, license_plate):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–µ —Ñ–∞–π–ª—ã
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_expense_name, selected_category, brand, model, license_plate)
        return

    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_menu_2(message)
        else:
            return_to_menu(message)
        return

    expense_name = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_skip = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")  
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_skip)
    markup.add(item_return)
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:", reply_markup=markup)
    bot.register_next_step_handler(message, get_expense_description, selected_category, expense_name, brand, model, license_plate)

#@log_user_actions
def get_expense_description(message, selected_category, expense_name, brand, model, license_plate):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–µ —Ñ–∞–π–ª—ã
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_expense_description, selected_category, expense_name, brand, model, license_plate)
        return

    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_menu_2(message)
        else:
            return_to_menu(message)
        return

    description = message.text if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ" else ""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return) 
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–∞—Ç—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, get_expense_date, selected_category, expense_name, description, brand, model, license_plate)

#@log_user_actions
def get_expense_date(message, selected_category, expense_name, description, brand, model, license_plate):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–µ —Ñ–∞–π–ª—ã
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_expense_date, selected_category, expense_name, description, brand, model, license_plate)
        return

    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_menu_2(message)
        else:
            return_to_menu(message)
        return

    expense_date = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    if re.match(r"^\d{2}\.\d{2}\.\d{4}$", expense_date):
        try:
            day, month, year = map(int, expense_date.split('.'))
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π –¥–Ω—è, –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
            if 1 <= month <= 12 and 1 <= day <= 31 and 2000 <= year <= 3000:
                datetime.strptime(expense_date, "%d.%m.%Y")
            else:
                raise ValueError
        except ValueError:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            bot.register_next_step_handler(message, get_expense_date, selected_category, expense_name, description, brand, model, license_plate)
            return
    else:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, get_expense_date, selected_category, expense_name, description, brand, model, license_plate)
        return

    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main_menu)
    
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, get_expense_amount, selected_category, expense_name, description, expense_date, brand, model, license_plate)

#@log_user_actions    
def get_expense_amount(message, selected_category, expense_name, description, expense_date, brand, model, license_plate):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–µ —Ñ–∞–π–ª—ã
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_expense_amount, selected_category, expense_name, description, expense_date, brand, model, license_plate)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Ç—Ä–∞—Ç—ã
    expense_amount = message.text.replace(",", ".")
    if not is_numeric(expense_amount):
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        bot.register_next_step_handler(message, get_expense_amount, selected_category, expense_name, description, expense_date, brand, model, license_plate)
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = load_expense_data(user_id)
    if str(user_id) not in data:
        data[str(user_id)] = {"expenses": []}

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥
    selected_transport = f"{brand} {model} {license_plate}"
    expenses = data[str(user_id)].get("expenses", [])
    new_expense = {
        "category": selected_category,
        "name": expense_name,
        "date": expense_date,
        "amount": expense_amount,
        "description": description,
        "transport": {"brand": brand, "model": model, "license_plate": license_plate}
    }
    expenses.append(new_expense)
    data[str(user_id)]["expenses"] = expenses
    save_expense_data(user_id, data, selected_transport)  # –ü–µ—Ä–µ–¥–∞–µ–º selected_transport –∑–¥–µ—Å—å

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ö–æ–¥ –≤ Excel
    save_expense_to_excel(user_id, new_expense)

    bot.send_message(user_id, "–¢—Ä–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞!")
    send_menu(user_id)

from openpyxl import Workbook, load_workbook
from openpyxl.styles import Font, Alignment
from openpyxl.utils import get_column_letter
import os

def save_expense_to_excel(user_id, expense_data):
    # –ü—É—Ç—å –∫ Excel-—Ñ–∞–π–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    excel_path = os.path.join("data base", "expense", "excel", f"{user_id}_expenses.xlsx")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    directory = os.path.dirname(excel_path)
    if not os.path.exists(directory):
        os.makedirs(directory)  # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
    try:
        if os.path.exists(excel_path):
            workbook = load_workbook(excel_path)
        else:
            workbook = Workbook()
            workbook.remove(workbook.active)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏—Å—Ç
        
        # –õ–∏—Å—Ç –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ (Summary)
        summary_sheet = workbook["Summary"] if "Summary" in workbook.sheetnames else workbook.create_sheet("Summary")
        
        # –õ–∏—Å—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
        transport_sheet_name = f"{expense_data['transport']['brand']}_{expense_data['transport']['model']}_{expense_data['transport']['license_plate']}"
        if transport_sheet_name not in workbook.sheetnames:
            transport_sheet = workbook.create_sheet(transport_sheet_name)
        else:
            transport_sheet = workbook[transport_sheet_name]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]
        
        # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—Å—Ç–æ–≤
        #@log_user_actions
        def setup_sheet(sheet):
            if sheet.max_row == 1:
                sheet.append(headers)
                for cell in sheet[1]:
                    cell.font = Font(bold=True)
                    cell.alignment = Alignment(horizontal="center")

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ
        for sheet in [summary_sheet, transport_sheet]:
            setup_sheet(sheet)
            row_data = [
                f"{expense_data['transport']['brand']} {expense_data['transport']['model']} {expense_data['transport']['license_plate']}",
                expense_data["category"],
                expense_data["name"],
                expense_data["date"],
                float(expense_data["amount"]),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∫–∞–∫ —á–∏—Å–ª–æ
                expense_data["description"],
            ]
            sheet.append(row_data)
        
        # –ê–≤—Ç–æ–ø–æ–¥–≥–æ–Ω–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        for sheet in [summary_sheet, transport_sheet]:
            for col in sheet.columns:
                max_length = max(len(str(cell.value)) for cell in col)
                sheet.column_dimensions[get_column_letter(col[0].column)].width = max_length + 2

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
        workbook.save(excel_path)
    except Exception as e:
        pass

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
@track_usage('–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def handle_category_removal(message, brand=None, model=None, license_plate=None):
    user_id = message.from_user.id
    categories = get_user_categories(user_id)

    # –°–º–∞–π–ª—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    system_emoji = "üîπ"
    user_emoji = "üî∏"

    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —ç–º–æ–¥–∑–∏
    category_list = "\n".join(
        f"{system_emoji if i < 7 else user_emoji} {i + 1}. {category}"
        for i, category in enumerate(categories)
    )
    category_list = f"*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã:*\n\n{category_list}"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    bot.send_message(user_id, category_list, reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, remove_selected_category, brand, model, license_plate)

#@log_user_actions
def remove_selected_category(message, brand, model, license_plate):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, remove_selected_category, brand, model, license_plate)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if not message.text:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, remove_selected_category, brand, model, license_plate)
        return

    selected_index = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    if selected_index == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return
    elif selected_index == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if selected_index == '0':
        bot.send_message(user_id, "–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
        return process_category_selection(user_id, brand, model, license_plate)

    if selected_index.isdigit():
        index = int(selected_index) - 1
        categories = get_user_categories(user_id)
        default_categories = ["–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–∞–∑—Å", "–º–æ–π–∫–∞", "–ø–∞—Ä–∫–æ–≤–∫–∞", "–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Ä–æ–≥–∞", "—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞", "—à—Ç—Ä–∞—Ñ—ã"]

        if 0 <= index < len(categories):
            category_to_remove = categories[index].lower()  # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            if category_to_remove in default_categories:
                bot.send_message(user_id, f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é *{category_to_remove}*. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", parse_mode="Markdown")
                return bot.register_next_step_handler(message, remove_selected_category, brand, model, license_plate)

            remove_user_category(user_id, category_to_remove)
            bot.send_message(user_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è *{category_to_remove}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", parse_mode="Markdown")
        else:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            return bot.register_next_step_handler(message, remove_selected_category, brand, model, license_plate)
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return bot.register_next_step_handler(message, remove_selected_category, brand, model, license_plate)

    return process_category_selection(user_id, brand, model, license_plate)

#@log_user_actions
def is_numeric(s):
    if s is not None:
        try:
            float(s)
            return True
        except ValueError:
            return False
    return False

# (10.9) --------------- –ö–û–î –î–õ–Ø "–¢–†–ê–¢" (–û–ë–†–ê–ë–û–¢–ß–ò–ö "–ü–û–°–ú–û–¢–†–ï–¢–¨ –¢–†–ê–¢–´") ---------------

#@log_user_actions
def create_transport_options_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_add_transport = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    item_cancel = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_add_transport)
    markup.add(item_cancel)
    markup.add(item_main)
    return markup

#@log_user_actions
def ask_add_transport(message):
    user_id = message.from_user.id

    if message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        add_transport(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        send_menu(user_id)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.", reply_markup=create_transport_options_markup())
        bot.register_next_step_handler(message, ask_add_transport)

# (10.10) --------------- –ö–û–î –î–õ–Ø "–¢–†–ê–¢" (–§–£–ù–ö–¶–ò–Ø –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø) ---------------

MAX_MESSAGE_LENGTH = 4096 

#@log_user_actions
def send_message_with_split(user_id, message_text):
    if len(message_text) <= MAX_MESSAGE_LENGTH:
        bot.send_message(user_id, message_text)
    else:
        message_parts = [message_text[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(message_text), MAX_MESSAGE_LENGTH)]
        for part in message_parts:
            bot.send_message(user_id, part)

# (10.11) --------------- –ö–û–î –î–õ–Ø "–¢–†–ê–¢" (–û–ë–†–ê–ë–û–¢–ß–ò–ö "–¢–†–ê–¢–´ –ó–ê –ú–ï–°–Ø–¶") ---------------

selected_transport_dict = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–∞—Ç –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
#@log_user_actions
def filter_expenses_by_transport(user_id, expenses):
    selected_transport = selected_transport_dict.get(user_id)
    if not selected_transport:
        return expenses

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
    filtered_expenses = [expense for expense in expenses if f"{expense['transport']['brand']} {expense['transport']['model']} ({expense['transport']['license_plate']})" == selected_transport]
    return filtered_expenses

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ
#@log_user_actions
def send_message_with_split(user_id, message_text):
    bot.send_message(user_id, message_text, parse_mode="Markdown")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é
#@log_user_actions
def send_menu1(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–¢—Ä–∞—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)")
    item2 = types.KeyboardButton("–¢—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)")
    item3 = types.KeyboardButton("–¢—Ä–∞—Ç—ã (–≥–æ–¥)")
    item4 = types.KeyboardButton("–¢—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
    item_excel = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã –≤ EXCEL")  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1, item2)
    markup.add(item3, item4)
    markup.add(item_excel)
    markup.add(item_return)
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞—Ç:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞—Ç
@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def view_expenses(message):
    user_id = message.from_user.id

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
    transport_list = load_transport_data(user_id)

    if not transport_list:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?", reply_markup=create_transport_options_markup())
        bot.register_next_step_handler(message, ask_add_transport)
        return

    # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –≤—ã–±–æ—Ä–æ–º
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
    for i in range(0, len(transport_list), 2):
        transport_buttons = []
        for j in range(i, min(i + 2, len(transport_list))):
            transport = transport_list[j]
            transport_name = f"{transport['brand']} {transport['model']} ({transport['license_plate']})"
            transport_buttons.append(types.KeyboardButton(transport_name))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—É –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É
        markup.add(*transport_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_transport_selection)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
#@log_user_actions
def handle_transport_selection(message):
    user_id = message.from_user.id
    selected_transport = message.text

    if selected_transport == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        send_menu(user_id)
        return

    if selected_transport == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_transport_dict[user_id] = selected_transport

    # –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç—Ä–∞—Ç
    bot.send_message(user_id, f"–ü–æ–∫–∞–∑—ã–≤–∞—é —Ç—Ä–∞—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: *{selected_transport}*", parse_mode="Markdown")
    send_menu1(user_id)

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã –≤ EXCEL")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã –≤ EXCEL')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã –≤ EXCEL')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def send_expenses_excel(message):
    user_id = message.from_user.id

    # –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
    excel_path = os.path.join("data base", "expense", "excel", f"{user_id}_expenses.xlsx")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(excel_path):
        bot.send_message(user_id, "–§–∞–π–ª —Å –≤–∞—à–∏–º–∏ —Ç—Ä–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(excel_path, 'rb') as excel_file:
        bot.send_document(user_id, excel_file)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
@bot.message_handler(func=lambda message: message.text == "–¢—Ä–∞—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–¢—Ä–∞—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)')
@track_usage('–¢—Ä–∞—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def view_expenses_by_category(message):
    user_id = message.from_user.id
    user_data = load_expense_data(user_id)
    expenses = user_data.get(str(user_id), {}).get("expenses", [])

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
    expenses = filter_expenses_by_transport(user_id, expenses)

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    categories = set(expense['category'] for expense in expenses)
    if not categories:
        bot.send_message(user_id, "*–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π* –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", parse_mode="Markdown")
        send_menu1(user_id)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤
        return

    category_buttons = [types.KeyboardButton(category) for category in categories]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*category_buttons)
    item_return_to_expenses = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_return_to_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return_to_expenses)
    markup.add(item_return_to_main)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞—Ç:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_category_selection)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#@log_user_actions
def handle_category_selection(message):
    user_id = message.from_user.id
    selected_category = message.text

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, handle_category_selection)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', message.text):  
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, handle_category_selection)
        return

    user_data = load_expense_data(user_id)
    expenses = user_data.get(str(user_id), {}).get("expenses", [])

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
    expenses = filter_expenses_by_transport(user_id, expenses)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    if selected_category not in {expense['category'] for expense in expenses}:
        bot.send_message(user_id, "–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        view_expenses_by_category(message)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_expenses = [expense for expense in expenses if expense['category'] == selected_category]

    total_expenses = 0
    expense_details = []

    for index, expense in enumerate(category_expenses, start=1):
        expense_name = expense.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        expense_date = expense.get("date", "")
        amount = float(expense.get("amount", 0))
        total_expenses += amount

        expense_details.append(
            f"üí∏ *‚Ññ {index}*\n\n"
            f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {selected_category}\n"
            f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {expense_name}\n"
            f"üìÖ *–î–∞—Ç–∞:* {expense_date}\n"
            f"üí∞ *–°—É–º–º–∞:* {amount} —Ä—É–±.\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {expense.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
        )

    if expense_details:
        message_text = f"–¢—Ä–∞—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category.lower()}*:\n\n\n" + "\n\n".join(expense_details)
        send_message_with_split(user_id, message_text)
        bot.send_message(
            user_id, 
            f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category.lower()}*: *{total_expenses}* —Ä—É–±.", 
            parse_mode="Markdown"
        )
    else:
        bot.send_message(user_id, f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category.lower()}* —Ç—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", parse_mode="Markdown")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    send_menu1(user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞—Ç –∑–∞ –º–µ—Å—è—Ü
@bot.message_handler(func=lambda message: message.text == "–¢—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–¢—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)')
@track_usage('–¢—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def view_expenses_by_month(message):
    user_id = message.from_user.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ (–ú–ú.–ì–ì–ì–ì) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞—Ç –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥:", reply_markup=markup)
    bot.register_next_step_handler(message, get_expenses_by_month)

#@log_user_actions
def get_expenses_by_month(message):
    user_id = message.from_user.id
    date = message.text.strip() if message.text else None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if not date:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_expenses_by_month)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_expenses_by_month)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', message.text):  
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_expenses_by_month)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
    if "." in date:
        parts = date.split(".")
        if len(parts) == 2:
            month, year = parts
            if month.isdigit() and year.isdigit() and 1 <= int(month) <= 12 and 2000 <= int(year) <= 3000:
                month, year = map(int, parts)
                
                user_data = load_expense_data(user_id)
                expenses = user_data.get(str(user_id), {}).get("expenses", [])

                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
                expenses = filter_expenses_by_transport(user_id, expenses)

                total_expenses = 0
                expense_details = []

                for index, expense in enumerate(expenses, start=1):
                    expense_date = expense.get("date", "")
                    expense_date_parts = expense_date.split(".")
                    if len(expense_date_parts) >= 2:
                        expense_month, expense_year = map(int, expense_date_parts[1:3])

                        if expense_month == month and expense_year == year:
                            amount = float(expense.get("amount", 0))
                            total_expenses += amount

                            expense_name = expense.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                            description = expense.get("description", "")
                            category = expense.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

                            expense_details.append(
                                f"üí∏ *‚Ññ {index}*\n\n"
                                f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
                                f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {expense_name}\n"
                                f"üìÖ *–î–∞—Ç–∞:* {expense_date}\n"
                                f"üí∞ *–°—É–º–º–∞:* {amount} —Ä—É–±.\n"
                                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
                            )

                if expense_details:
                    message_text = f"–¢—Ä–∞—Ç—ã –∑–∞ *{date}* –º–µ—Å—è—Ü:\n\n\n" + "\n\n".join(expense_details)
                    send_message_with_split(user_id, message_text)
                    bot.send_message(user_id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç –∑–∞ *{date}* –º–µ—Å—è—Ü: *{total_expenses}* —Ä—É–±.", parse_mode="Markdown")
                else:
                    bot.send_message(user_id, f"–ó–∞ *{date}* –º–µ—Å—è—Ü —Ç—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", parse_mode="Markdown")
                
                send_menu1(user_id)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            else:
                bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì")
                bot.register_next_step_handler(message, get_expenses_by_month)
                return
        else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì")
            bot.register_next_step_handler(message, get_expenses_by_month)
            return
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, get_expenses_by_month)
        return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞—Ç –∑–∞ –≥–æ–¥
@bot.message_handler(func=lambda message: message.text == "–¢—Ä–∞—Ç—ã (–≥–æ–¥)")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–¢—Ä–∞—Ç—ã (–≥–æ–¥)')
@track_usage('–¢—Ä–∞—Ç—ã (–≥–æ–¥)')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def view_expenses_by_license_plate(message):
    user_id = message.from_user.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–ì–ì–ì–ì) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞—Ç –∑–∞ —ç—Ç–æ—Ç –≥–æ–¥:", reply_markup=markup)
    bot.register_next_step_handler(message, get_expenses_by_license_plate)

#@log_user_actions
def get_expenses_by_license_plate(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    if not message.text:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_expenses_by_license_plate)
        return

    year_input = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_expenses_by_license_plate)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', message.text):  
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_expenses_by_license_plate)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ
    if not year_input.isdigit() or len(year_input) != 4:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì")
        bot.register_next_step_handler(message, get_expenses_by_license_plate)
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥–æ–¥ –≤ —á–∏—Å–ª–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    year = int(year_input)
    if year < 2000 or year > 3000:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì")
        bot.register_next_step_handler(message, get_expenses_by_license_plate)
        return

    user_data = load_expense_data(user_id)
    expenses = user_data.get(str(user_id), {}).get("expenses", [])

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
    expenses = filter_expenses_by_transport(user_id, expenses)

    total_expenses = 0
    expense_details = []

    for index, expense in enumerate(expenses, start=1):
        expense_date = expense.get("date", "")
        if "." in expense_date:
            date_parts = expense_date.split(".")
            if len(date_parts) >= 3:
                expense_year = int(date_parts[2])
                if expense_year == year:
                    amount = float(expense.get("amount", 0))
                    total_expenses += amount

                    expense_name = expense.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    description = expense.get("description", "")
                    category = expense.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

                    expense_details.append(
                        f"üí∏ *‚Ññ {index}*\n\n"
                        f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
                        f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {expense_name}\n"
                        f"üìÖ *–î–∞—Ç–∞:* {expense_date}\n"
                        f"üí∞ *–°—É–º–º–∞:* {amount} —Ä—É–±.\n"
                        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
                    )
                    
    if expense_details:
        message_text = f"–¢—Ä–∞—Ç—ã –∑–∞ *{year}* –≥–æ–¥:\n\n\n" + "\n\n".join(expense_details)
        send_message_with_split(user_id, message_text)
        bot.send_message(user_id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç –∑–∞ *{year}* –≥–æ–¥: *{total_expenses}* —Ä—É–±.", parse_mode="Markdown")
    else:
        bot.send_message(user_id, f"–ó–∞ *{year}* –≥–æ–¥ —Ç—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", parse_mode="Markdown")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    send_menu1(user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç—Ä–∞—Ç
@bot.message_handler(func=lambda message: message.text == "–¢—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–¢—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')
@track_usage('–¢—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def view_all_expenses(message):
    user_id = message.from_user.id

    user_data = load_expense_data(user_id)
    expenses = user_data.get(str(user_id), {}).get("expenses", [])

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
    expenses = filter_expenses_by_transport(user_id, expenses)

    total_expenses = 0
    expense_details = []

    for index, expense in enumerate(expenses, start=1):
        amount = float(expense.get("amount", 0))
        total_expenses += amount

        expense_name = expense.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        expense_date = expense.get("date", "")
        description = expense.get("description", "")
        category = expense.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

        expense_details.append(
            f"üí∏ *‚Ññ {index}*\n\n"
            f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
            f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {expense_name}\n"
            f"üìÖ *–î–∞—Ç–∞:* {expense_date}\n"
            f"üí∞ *–°—É–º–º–∞:* {amount} —Ä—É–±.\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
        )

    if expense_details:
        message_text = "*–í—Å–µ* —Ç—Ä–∞—Ç—ã:\n\n\n" + "\n\n".join(expense_details)
        send_message_with_split(user_id, message_text)
        bot.send_message(user_id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö —Ç—Ä–∞—Ç: *{total_expenses}* —Ä—É–±.", parse_mode="Markdown")
    else:
        bot.send_message(user_id, "–¢—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", parse_mode="Markdown")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    send_menu1(user_id)

# (10.18) --------------- –ö–û–î –î–õ–Ø "–¢–†–ê–¢" (–û–ë–†–ê–ë–û–¢–ß–ò–ö "–£–î–ê–õ–ò–¢–¨ –¢–†–ê–¢–´") ---------------

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø–æ user_id
selected_transports = {}

def save_selected_transport(user_id, selected_transport):
    user_data = load_expense_data(user_id)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ò–∑–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –Ω–µ —Ç—Ä–æ–≥–∞—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_data["selected_transport"] = selected_transport
    save_expense_data(user_id, user_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã')
@track_usage('–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def delete_expenses_menu(message):
    user_id = message.from_user.id

    transport_data = load_transport_data(user_id)
    if not transport_data:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_add_transport = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        item_cancel = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item_add_transport)
        markup.add(item_cancel)
        markup.add(item_main)
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?", reply_markup=markup)
        bot.register_next_step_handler(message, ask_add_transport)
        return

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    transport_buttons = []  # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –¥–∞–Ω–Ω—ã–º –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    for transport in transport_data:
        brand = transport.get("brand", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        model = transport.get("model", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        license_plate = transport.get("license_plate", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤ —Å–∫–æ–±–∫–∞—Ö
        button_label = f"{brand} {model} ({license_plate})"
        transport_buttons.append(types.KeyboardButton(button_label))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    for i in range(0, len(transport_buttons), 2):
        markup.row(*transport_buttons[i:i + 2])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_transport_selection_for_deletion)

#@log_user_actions
def handle_transport_selection_for_deletion(message):
    user_id = message.from_user.id
    selected_transport = message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
    selected_transports[user_id] = selected_transport
    save_selected_transport(user_id, selected_transport)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î

    if selected_transport == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        send_menu(user_id)
        return

    if selected_transport == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_month = types.KeyboardButton("Del —Ç—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)")
    item_license_plate = types.KeyboardButton("Del —Ç—Ä–∞—Ç—ã (–≥–æ–¥)")
    item_all_time = types.KeyboardButton("Del —Ç—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
    item_del_category_exp = types.KeyboardButton("Del —Ç—Ä–∞—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)")
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    markup.add(item_del_category_exp, item_month)
    markup.add(item_license_plate, item_all_time)
    markup.add(item_return)
    markup.add(item_main_menu)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç:", reply_markup=markup)

expenses_to_delete_dict = {}


MAX_MESSAGE_LENGTH = 4096

#@log_user_actions
def send_long_message(user_id, text):
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    while len(text) > MAX_MESSAGE_LENGTH:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        bot.send_message(user_id, text[:MAX_MESSAGE_LENGTH], parse_mode="Markdown")
        # –û—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
        text = text[MAX_MESSAGE_LENGTH:]
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
    bot.send_message(user_id, text, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "Del —Ç—Ä–∞—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('Del —Ç—Ä–∞—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)')
@track_usage('Del —Ç—Ä–∞—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def delete_expenses_by_category(message):
    user_id = message.from_user.id

    selected_transport = selected_transports.get(user_id)

    if not selected_transport:
        bot.send_message(user_id, "–ù–µ –≤—ã–±—Ä–∞–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        send_menu(user_id)
        return

    # –ü—Ä–∏–≤–æ–¥–∏–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ —É–¥–∞–ª—è–µ–º —Å–∫–æ–±–∫–∏
    selected_transport_info = selected_transport.strip().lower().replace('(', '').replace(')', '')

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = load_expense_data(user_id).get(str(user_id), {})
    expenses = user_data.get("expenses", [])

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
    categories = list({
        expense.get("category")
        for expense in expenses
        if f"{expense.get('transport', {}).get('brand', '').strip().lower()} {expense.get('transport', {}).get('model', '').strip().lower()} {str(expense.get('transport', {}).get('license_plate', '')).strip().lower()}".replace('(', '').replace(')', '') == selected_transport_info
    })

    if not categories:
        bot.send_message(user_id, "–£ –≤–∞—Å *–Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π* –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É", parse_mode="Markdown")
        send_menu(user_id)
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    markup.add(*[types.KeyboardButton(category) for category in categories])
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_category_selection_for_deletion)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
selected_categories = {}

user_expenses_to_delete = {}

#@log_user_actions
def handle_category_selection_for_deletion(message):
    user_id = message.from_user.id

    if not message.text:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, handle_category_selection_for_deletion)
        return

    selected_category = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, handle_category_selection_for_deletion)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', message.text):  
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, handle_category_selection_for_deletion)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    if selected_category == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return

    if selected_category == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    selected_categories[user_id] = selected_category

    user_data = load_expense_data(user_id).get(str(user_id), {})
    expenses = user_data.get("expenses", [])

    selected_transport = selected_transports.get(user_id)
    selected_transport_info = selected_transport.strip().lower().replace('(', '').replace(')', '')

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã
    expenses_to_delete = [
        expense for expense in expenses 
        if expense.get("category") == selected_category and 
           f"{expense.get('transport', {}).get('brand', '').strip().lower()} {expense.get('transport', {}).get('model', '').strip().lower()} {str(expense.get('transport', {}).get('license_plate', '')).strip().lower()}".replace('(', '').replace(')', '') == selected_transport_info
    ]

    if not expenses_to_delete:
        bot.send_message(user_id, f"–ù–µ—Ç —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category.lower()}* –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É", parse_mode="Markdown")
        send_menu(user_id)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç
    user_expenses_to_delete[user_id] = expenses_to_delete

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    expense_list_text = f"–°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category.lower()}*:\n\n\n"
    for index, expense in enumerate(expenses_to_delete, start=1):
        expense_name = expense.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        expense_date = expense.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        expense_list_text += f"üìÑ ‚Ññ{index}. {expense_name} - ({expense_date})\n\n"

    expense_list_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏—à–∞–º–∏ –≤ –æ–¥–Ω–æ–º –≤—ã–∑–æ–≤–µ
    bot.send_message(user_id, expense_list_text, reply_markup=markup, parse_mode="Markdown")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
    bot.register_next_step_handler(message, delete_expense_confirmation)

#@log_user_actions
def delete_expense_confirmation(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if not message.text:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, delete_expense_confirmation)
        return

    selected_option = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, delete_expense_confirmation)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', selected_option):
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, delete_expense_confirmation)
        return

    if selected_option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return

    if selected_option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä
    if not selected_option.isdigit():
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞.")
        bot.register_next_step_handler(message, delete_expense_confirmation)
        return

    expense_index = int(selected_option) - 1
    expenses_to_delete = user_expenses_to_delete.get(user_id, [])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
    if 0 <= expense_index < len(expenses_to_delete):
        deleted_expense = expenses_to_delete.pop(expense_index)
        user_data = load_expense_data(user_id).get(str(user_id), {})
        user_expenses = user_data.get("expenses", [])

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç—Ä–∞—Ç—ã
        if deleted_expense in user_expenses:
            user_expenses.remove(deleted_expense)
            save_expense_data(user_id, {str(user_id): user_data})

        bot.send_message(
            user_id,
            f"–¢—Ä–∞—Ç–∞ *{deleted_expense.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').lower()}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
            parse_mode="Markdown"
        )

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        send_menu(user_id)
    else:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, delete_expense_confirmation)
        return

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç –∑–∞ –º–µ—Å—è—Ü

MAX_MESSAGE_LENGTH = 4096

#@log_user_actions
def send_long_message(user_id, text):
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    while len(text) > MAX_MESSAGE_LENGTH:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        bot.send_message(user_id, text[:MAX_MESSAGE_LENGTH], parse_mode="Markdown")
        # –û—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
        text = text[MAX_MESSAGE_LENGTH:]
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
    bot.send_message(user_id, text, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "Del —Ç—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('Del —Ç—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)')
@track_usage('Del —Ç—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def delete_expense_by_month(message):
    user_id = message.from_user.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main_menu)
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ (–ú–ú.–ì–ì–ì–ì) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:", reply_markup=markup)
    bot.register_next_step_handler(message, delete_expenses_by_month)

#@log_user_actions
def delete_expenses_by_month(message):
    user_id = message.from_user.id
    month_year = message.text.strip() if message.text else None

    if not month_year:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        bot.register_next_step_handler(message, delete_expenses_by_month)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, delete_expenses_by_month)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', message.text):  
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, delete_expenses_by_month)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
    match = re.match(r"^(0[1-9]|1[0-2])\.(20[0-9]{2})$", month_year)
    if not match:
        bot.send_message(user_id, "–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü –∏–ª–∏ –≥–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ú–ú.–ì–ì–ì–ì)")
        bot.register_next_step_handler(message, delete_expenses_by_month)
        return

    selected_month, selected_year = match.groups()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    selected_transport = selected_transports.get(user_id)
    if not selected_transport:
        bot.send_message(user_id, "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        send_menu(user_id)
        return

    transport_info = selected_transport.split(" ")
    selected_brand = transport_info[0].strip()
    selected_model = transport_info[1].strip()
    selected_license_plate = transport_info[2].strip().replace("(", "").replace(")", "")

    user_data = load_expense_data(user_id).get(str(user_id), {})
    expenses = user_data.get("expenses", [])

    if not expenses:
        bot.send_message(user_id, f"–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç –∑–∞ *{month_year}* –º–µ—Å—è—Ü", parse_mode="Markdown")
        send_menu(user_id)
        return

    expenses_to_delete = []
    for index, expense in enumerate(expenses, start=1):
        expense_date = expense.get("date", "")

        if not expense_date or len(expense_date.split(".")) != 3:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞—Ç—ã —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π

        expense_day, expense_month, expense_year = expense_date.split(".")

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
        if expense_month == selected_month and expense_year == selected_year:
            expense_license_plate = expense.get("transport", {}).get("license_plate", "").strip()
            expense_brand = expense.get("transport", {}).get("brand", "").strip()
            expense_model = expense.get("transport", {}).get("model", "").strip()

            if (expense_license_plate == selected_license_plate and
                expense_brand == selected_brand and
                expense_model == selected_model):
                expenses_to_delete.append((index, expense))

    if expenses_to_delete:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        expenses_to_delete_dict[user_id] = expenses_to_delete

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        expense_list_text = f"–°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞ *{month_year}* –º–µ—Å—è—Ü:\n\n\n"
        for index, expense in expenses_to_delete:
            expense_name = expense.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            expense_date = expense.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            expense_list_text += f"üìÑ ‚Ññ{index}. {expense_name} - ({expense_date})\n\n"

        expense_list_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        send_long_message(user_id, expense_list_text)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.register_next_step_handler(message, confirm_delete_expense_month)
    else:
        bot.send_message(user_id, f"–ù–µ—Ç —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞ *{month_year}* –º–µ—Å—è—Ü", parse_mode="Markdown")
        send_menu(user_id)

#@log_user_actions
def confirm_delete_expense_month(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if not message.text:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        bot.register_next_step_handler(message, confirm_delete_expense_month)
        return

    selected_option = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, confirm_delete_expense_month)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', selected_option):
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, confirm_delete_expense_month)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    if selected_option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return

    if selected_option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞—Ç—ã
    if selected_option.isdigit():
        expense_index = int(selected_option) - 1
        expenses_to_delete = expenses_to_delete_dict.get(user_id, [])

        if 0 <= expense_index < len(expenses_to_delete):
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç—Ä–∞—Ç—ã
            _, deleted_expense = expenses_to_delete.pop(expense_index)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = load_expense_data(user_id).get(str(user_id), {})
            if "expenses" in user_data and deleted_expense in user_data["expenses"]:
                user_data["expenses"].remove(deleted_expense)
                save_expense_data(user_id, {str(user_id): user_data})

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
            bot.send_message(
                user_id,
                f"–¢—Ä–∞—Ç–∞ *{deleted_expense.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').lower()}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
                parse_mode="Markdown"
            )

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            expenses_to_delete_dict[user_id] = expenses_to_delete

            # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            send_menu(user_id)
        else:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, confirm_delete_expense_month)
            return
    else:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞—Ç—ã")
        bot.register_next_step_handler(message, confirm_delete_expense_month)
        return

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç –∑–∞ –≥–æ–¥
MAX_MESSAGE_LENGTH = 4096

#@log_user_actions
def send_long_message(user_id, text):
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    while len(text) > MAX_MESSAGE_LENGTH:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        bot.send_message(user_id, text[:MAX_MESSAGE_LENGTH], parse_mode="Markdown")
        # –û—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
        text = text[MAX_MESSAGE_LENGTH:]
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
    bot.send_message(user_id, text, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "Del —Ç—Ä–∞—Ç—ã (–≥–æ–¥)")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('Del —Ç—Ä–∞—Ç—ã (–≥–æ–¥)')
@track_usage('Del —Ç—Ä–∞—Ç—ã (–≥–æ–¥)')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def delete_expense_by_license_plate(message):
    user_id = message.from_user.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main_menu)
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (–ì–ì–ì–ì) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç –∑–∞ —ç—Ç–æ—Ç –≥–æ–¥:", reply_markup=markup)
    bot.register_next_step_handler(message, delete_expenses_by_license_plate)

#@log_user_actions
def delete_expenses_by_license_plate(message):
    user_id = message.from_user.id
    license_plate = message.text.strip() if message.text else None  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç–∞
    if not license_plate:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, delete_expenses_by_license_plate)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, delete_expenses_by_license_plate)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', license_plate):  
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, delete_expenses_by_license_plate)
        return

    if license_plate == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return

    if license_plate == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≥–æ–¥–∞ (–æ—Ç 2000 –¥–æ 3000)
    if not re.match(r"^(20[0-9]{2}|2[1-9][0-9]{2}|3000)$", license_plate):
        bot.send_message(user_id, "–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥.")
        bot.register_next_step_handler(message, delete_expenses_by_license_plate)
        return

    user_data = load_expense_data(user_id).get(str(user_id), {})
    expenses = user_data.get("expenses", [])

    selected_transport = selected_transports.get(user_id, None)

    if selected_transport:
        transport_info = selected_transport.split(" ")
        selected_brand = transport_info[0].strip()
        selected_model = transport_info[1].strip()
        selected_license_plate = str(transport_info[2].strip())
    else:
        selected_brand = selected_model = selected_license_plate = None

    if not expenses:
        bot.send_message(user_id, f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç –∑–∞ *{license_plate}* –≥–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", parse_mode="Markdown")
        send_menu(user_id)
        return

    expenses_to_delete = []
    for index, expense in enumerate(expenses, start=1):
        expense_date = expense.get("date", "")
        expense_license_plate = expense_date.split(".")[2]

        expense_brand = expense.get("transport", {}).get("brand", "").strip()
        expense_model = expense.get("transport", {}).get("model", "").strip()

        if (expense_license_plate == license_plate and
           expense_brand == selected_brand and
           expense_model == selected_model):
            expenses_to_delete.append((index, expense))

    if expenses_to_delete:
        expenses_to_delete_dict[user_id] = expenses_to_delete

        expense_list_text = f"–°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞ *{license_plate}* –≥–æ–¥:\n\n\n"
        for index, expense in expenses_to_delete:
            expense_name = expense.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            expense_date = expense.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            expense_list_text += f"üìÑ ‚Ññ{index}. {expense_name} - ({expense_date})\n\n"

        expense_list_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        send_long_message(user_id, expense_list_text)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.register_next_step_handler(message, confirm_delete_expense_license_plate)
    else:
        bot.send_message(user_id, f"–ó–∞ *{license_plate}* –≥–æ–¥ —Ç—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", parse_mode="Markdown")
        send_menu(user_id)

#@log_user_actions
def confirm_delete_expense_license_plate(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if not message.text:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, confirm_delete_expense_license_plate)
        return

    selected_option = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, confirm_delete_expense_license_plate)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', selected_option):
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, confirm_delete_expense_license_plate)
        return

    if selected_option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return

    if selected_option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    expenses_to_delete = expenses_to_delete_dict.get(user_id, [])

    if selected_option.isdigit():
        expense_index = int(selected_option) - 1

        if 0 <= expense_index < len(expenses_to_delete):
            _, deleted_expense = expenses_to_delete.pop(expense_index)

            user_data = load_expense_data(user_id).get(str(user_id), {})
            user_data["expenses"].remove(deleted_expense)
            save_expense_data(user_id, {str(user_id): user_data})

            bot.send_message(user_id, f"–¢—Ä–∞—Ç–∞ *{deleted_expense.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').lower()}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", parse_mode="Markdown")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            expenses_to_delete_dict[user_id] = expenses_to_delete

            # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            send_menu(user_id)
        else:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, confirm_delete_expense_license_plate)
    else:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞—Ç—ã")
        bot.register_next_step_handler(message, confirm_delete_expense_license_plate)

# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞—Ç
@bot.message_handler(func=lambda message: message.text == "Del —Ç—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('Del —Ç—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')
@track_usage('Del —Ç—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def delete_all_expenses_for_selected_transport(message):
    user_id = message.from_user.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main_menu)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    bot.send_message(user_id, 
                    "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç—Ä–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞?\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–î–ê* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–ù–ï–¢* –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                    reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, confirm_delete_all_expenses)

#@log_user_actions
def confirm_delete_all_expenses(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, confirm_delete_all_expenses)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', message.text):  
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, confirm_delete_all_expenses)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ message.text –Ω–µ None
    if not message.text:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, confirm_delete_all_expenses)
        return

    # –ü—Ä–∏–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    response = message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–¥–∞" –∏ "–Ω–µ—Ç"
    if response == "–¥–∞":
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = load_expense_data(user_id).get(str(user_id), {})
        expenses = user_data.get("expenses", [])

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        selected_transport = selected_transports.get(user_id, None)
        if selected_transport:
            transport_info = selected_transport.split(" ")
            selected_brand = transport_info[0].strip()
            selected_model = transport_info[1].strip()
            selected_license_plate = transport_info[2].strip()
        else:
            selected_brand = selected_model = selected_license_plate = None

        if not expenses:
            bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            send_menu(user_id)
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        expenses_to_keep = []
        for expense in expenses:
            expense_brand = expense.get("transport", {}).get("brand", "").strip()
            expense_model = expense.get("transport", {}).get("model", "").strip()

            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º
            if not (expense_brand == selected_brand and expense_model == selected_model):
                expenses_to_keep.append(expense)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data["expenses"] = expenses_to_keep
        save_expense_data(user_id, {str(user_id): user_data}, selected_transport)

        update_excel_file(user_id)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
        bot.send_message(user_id, f"–í—Å–µ —Ç—Ä–∞—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_brand} {selected_model} {selected_license_plate}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã", parse_mode="Markdown")
    elif response == "–Ω–µ—Ç":
        bot.send_message(user_id, "–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        # –û—Ç–≤–µ—Ç –¥–ª—è –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–î–ê* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–ù–ï–¢* –¥–ª—è –æ—Ç–º–µ–Ω—ã", parse_mode="Markdown")
        bot.register_next_step_handler(message, confirm_delete_all_expenses)
        return

    send_menu(user_id)


import os
import pandas as pd
import openpyxl

#@log_user_actions
def delete_expense(user_id, deleted_expense):
    # –£–¥–∞–ª—è–µ–º —Ç—Ä–∞—Ç—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_data = load_expense_data(user_id).get(str(user_id), {})
    expenses = user_data.get("expenses", [])

    # –£–¥–∞–ª—è–µ–º —Ç—Ä–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
    expenses = [expense for expense in expenses if not (
        expense["transport"]["brand"] == deleted_expense["transport"]["brand"] and
        expense["transport"]["model"] == deleted_expense["transport"]["model"] and
        expense["transport"]["license_plate"] == deleted_expense["transport"]["license_plate"] and
        expense["category"] == deleted_expense["category"] and
        expense["name"] == deleted_expense["name"] and
        expense["date"] == deleted_expense["date"] and
        expense["amount"] == deleted_expense["amount"] and
        expense["description"] == deleted_expense["description"]
    )]

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data["expenses"] = expenses
    save_expense_data(user_id, user_data)

    # –û–±–Ω–æ–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
    update_excel_file(user_id)

#@log_user_actions
def update_excel_file(user_id):
    user_data = load_expense_data(user_id).get(str(user_id), {})
    expenses = user_data.get("expenses", [])

    # –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    excel_file_path = f"data base/expense/excel/{user_id}_expenses.xlsx"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if not os.path.exists(excel_file_path):
        workbook = openpyxl.Workbook()
        workbook.remove(workbook.active)
        workbook.save(excel_file_path)

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
    workbook = load_workbook(excel_file_path)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –ª–∏—Å—Ç–∞ (Summary)
    summary_sheet = workbook["Summary"] if "Summary" in workbook.sheetnames else workbook.create_sheet("Summary")
    headers = ["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]

    # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ª–∏—Å—Ç–µ Summary (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    if summary_sheet.max_row > 1:
        summary_sheet.delete_rows(2, summary_sheet.max_row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
    if summary_sheet.max_row == 0:  # –ï—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π
        summary_sheet.append(headers)
        for cell in summary_sheet[1]:
            cell.font = Font(bold=True)
            cell.alignment = Alignment(horizontal="center")

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—â–∏–π –ª–∏—Å—Ç –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    for expense in expenses:
        transport = expense["transport"]
        row_data = [
            f"{transport['brand']} {transport['model']} {transport['license_plate']}",
            expense["category"],
            expense["name"],
            expense["date"],
            float(expense["amount"]),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∫–∞–∫ —á–∏—Å–ª–æ
            expense["description"],
        ]
        summary_sheet.append(row_data)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    unique_transports = set((exp["transport"]["brand"], exp["transport"]["model"], exp["transport"]["license_plate"]) for exp in expenses)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–∏—Å—Ç—ã –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
    for sheet_name in workbook.sheetnames:
        if sheet_name != "Summary" and (sheet_name.split('_')[0], sheet_name.split('_')[1], sheet_name.split('_')[2]) not in unique_transports:
            del workbook[sheet_name]

    for brand, model, license_plate in unique_transports:
        sheet_name = f"{brand}_{model}_{license_plate}"
        if sheet_name not in workbook.sheetnames:
            transport_sheet = workbook.create_sheet(sheet_name)
            transport_sheet.append(headers)
            for cell in transport_sheet[1]:
                cell.font = Font(bold=True)
                cell.alignment = Alignment(horizontal="center")
        else:
            transport_sheet = workbook[sheet_name]
            # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ª–∏—Å—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            if transport_sheet.max_row > 1:
                transport_sheet.delete_rows(2, transport_sheet.max_row)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        for expense in expenses:
            if (expense["transport"]["brand"], expense["transport"]["model"], expense["transport"]["license_plate"]) == (brand, model, license_plate):
                row_data = [
                    f"{brand} {model} {license_plate}",
                    expense["category"],
                    expense["name"],
                    expense["date"],
                    float(expense["amount"]),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∫–∞–∫ —á–∏—Å–ª–æ
                    expense["description"],
                ]
                transport_sheet.append(row_data)

    # –ê–≤—Ç–æ–ø–æ–¥–≥–æ–Ω–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
    for sheet in workbook.sheetnames:
        current_sheet = workbook[sheet]
        for col in current_sheet.columns:
            max_length = max(len(str(cell.value)) for cell in col)
            current_sheet.column_dimensions[get_column_letter(col[0].column)].width = max_length + 2

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    workbook.save(excel_file_path)
    workbook.close()

# (11) --------------- –ö–û–î –î–õ–Ø "–†–ï–ú–û–ù–¢–û–í" ---------------

# (11.1) --------------- –ö–û–î –î–õ–Ø "–†–ï–ú–û–ù–¢–û–í" (–û–ë–†–ê–ë–û–¢–ß–ò–ö "–ó–ê–ü–ò–°–ê–¢–¨ –†–ï–ú–û–ù–¢") ---------------
# –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–º–æ–Ω—Ç–∞

user_transport = {}  # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∞—à–∏–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–º–æ–Ω—Ç–∞—Ö
def save_repair_data(user_id, user_data, selected_transport=None):
    # –í–∞—à –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if selected_transport:
        user_data["selected_transport"] = selected_transport
    # –ó–∞–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∏ —Ñ–∞–π–ª—É
    folder_path = os.path.join("data base", "repairs")
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)

    # –ò–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: "user_id_repairs.json"
    file_path = os.path.join(folder_path, f"{user_id}_repairs.json")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å user_categories
    current_data = load_repair_data(user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è user_categories
    if "user_categories" in current_data:
        user_data["user_categories"] = current_data["user_categories"]

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ selected_transport –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data["selected_transport"] = selected_transport

    with open(file_path, "w", encoding="utf-8") as file:
        json.dump(user_data, file, ensure_ascii=False, indent=4)

def load_repair_data(user_id):
    folder_path = os.path.join("data base", "repairs")
    file_path = os.path.join(folder_path, f"{user_id}_repairs.json")

    if not os.path.exists(file_path):
        return {"user_categories": [], "selected_transport": ""}

    try:
        with open(file_path, "r", encoding="utf-8") as file:
            data = json.load(file)
            data.setdefault("selected_transport", "")
            return data
    except:
        return {"user_categories": [], "selected_transport": ""}

#@log_user_actions
def get_user_repair_categories(user_id):
    data = load_repair_data(user_id)
    system_categories = ["–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–¢–û", "–†–µ–º–æ–Ω—Ç", "–ó–∞–ø—á–∞—Å—Ç—å", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞", "–ö—É–∑–æ–≤"]
    user_categories = data.get("user_categories", [])
    return system_categories + user_categories

#@log_user_actions
def add_repair_category(user_id, new_category):
    data = load_repair_data(user_id)
    if "user_categories" not in data:
        data["user_categories"] = []
    if new_category not in data["user_categories"]:
        data["user_categories"].append(new_category)
    save_repair_data(user_id, data)

#@log_user_actions
def remove_repair_category(user_id, category_to_remove):
    data = load_repair_data(user_id)
    if "user_categories" in data and category_to_remove in data["user_categories"]:
        data["user_categories"].remove(category_to_remove)
        save_repair_data(user_id, data)

@bot.message_handler(func=lambda message: message.text == "–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–º–æ–Ω—Ç")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–º–æ–Ω—Ç')
@track_usage('–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–º–æ–Ω—Ç')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def record_repair(message):
    user_id = message.from_user.id
    if contains_media(message):
        sent = bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(sent, record_repair)
        return

    markup = get_user_transport_keyboard(user_id)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–º–æ–Ω—Ç–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_transport_selection_for_repair)

#@log_user_actions
def handle_transport_selection_for_repair(message):
    user_id = message.from_user.id

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return
    elif message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        add_transport(message)
        return

    selected_transport = message.text
    for transport in user_transport.get(str(user_id), []):
        formatted_transport = f"{transport['brand']} {transport['model']} ({transport['license_plate']})"
        if formatted_transport == selected_transport:
            brand, model, license_plate = transport['brand'], transport['model'], transport['license_plate']
            break
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        markup = get_user_transport_keyboard(user_id)
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:", reply_markup=markup)
        bot.register_next_step_handler(message, handle_transport_selection_for_repair)
        return

    # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    process_category_selection_repair(user_id, brand, model, license_plate)

from functools import partial

#@log_user_actions
def process_category_selection_repair(user_id, brand, model, license_plate):
    categories = get_user_repair_categories(user_id)

    # –°–º–∞–π–ª—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    system_emoji = "üîπ"
    user_emoji = "üî∏"

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–º–∞–π–ª–æ–≤ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: –ø–µ—Ä–≤—ã–µ 7 —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏
    category_list = "\n".join(
        f"{system_emoji if i < 7 else user_emoji} {i + 1}. {category}"
        for i, category in enumerate(categories)
    )
    category_list = f"*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*\n\n{category_list}"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(
        types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"),
        types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    )
    markup.add(
        types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    )
    markup.add(
        types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    )

    prompt_message = bot.send_message(user_id, category_list, reply_markup=markup, parse_mode="Markdown")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º partial –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    bot.register_next_step_handler(prompt_message, partial(get_repair_category, brand=brand, model=model, license_plate=license_plate))

#@log_user_actions
def get_repair_category(message, brand, model, license_plate):
    user_id = message.from_user.id
    selected_index = message.text.strip() if message.text else ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, partial(get_repair_category, brand=brand, model=model, license_plate=license_plate))
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', message.text):  
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, partial(get_repair_category, brand=brand, model=model, license_plate=license_plate))
        return

    if selected_index == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return
    elif selected_index == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if selected_index == '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, partial(add_new_repair_category, brand=brand, model=model, license_plate=license_plate))
        return

    if selected_index == '–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
        handle_repair_category_removal(message, brand, model, license_plate)
        return

    if selected_index.isdigit():
        index = int(selected_index) - 1
        categories = get_user_repair_categories(user_id)
        if 0 <= index < len(categories):
            selected_category = categories[index]
            proceed_to_repair_name(message, selected_category, brand, model, license_plate)
        else:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            bot.register_next_step_handler(message, partial(get_repair_category, brand=brand, model=model, license_plate=license_plate))
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        bot.register_next_step_handler(message, partial(get_repair_category, brand=brand, model=model, license_plate=license_plate))

#@log_user_actions
def add_new_repair_category(message, brand, model, license_plate):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –∏–ª–∏ None –∑–Ω–∞—á–µ–Ω–∏–µ
    if not message.text:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        bot.register_next_step_handler(message, partial(add_new_repair_category, brand=brand, model=model, license_plate=license_plate))
        return

    new_category = message.text.strip()

    system_categories = ["–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–¢–û", "–†–µ–º–æ–Ω—Ç", "–ó–∞–ø—á–∞—Å—Ç—å", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞", "–ö—É–∑–æ–≤"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, partial(add_new_repair_category, brand=brand, model=model, license_plate=license_plate))
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', message.text):  
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, partial(add_new_repair_category, brand=brand, model=model, license_plate=license_plate))
        return


    if new_category in system_categories:
        bot.send_message(user_id, "–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ")
        process_category_selection_repair(user_id, brand, model, license_plate)
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    data = load_repair_data(user_id)
    if new_category not in data["user_categories"]:
        data["user_categories"].append(new_category)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
        with open(os.path.join("data base", "repairs", f"{user_id}_repairs.json"), "w", encoding="utf-8") as file:
            json.dump(data, file, ensure_ascii=False, indent=4)

        bot.send_message(user_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è *{new_category}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", parse_mode="Markdown")
    else:
        bot.send_message(user_id, "–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    process_category_selection_repair(user_id, brand, model, license_plate)

#@log_user_actions
def handle_repair_category_removal(message, brand, model, license_plate):
    user_id = message.from_user.id
    categories = get_user_repair_categories(user_id)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    system_categories = ["–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–¢–û", "–†–µ–º–æ–Ω—Ç", "–ó–∞–ø—á–∞—Å—Ç—å", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞", "–ö—É–∑–æ–≤"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, partial(handle_repair_category_removal, brand=brand, model=model, license_plate=license_plate))
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', message.text):  
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, partial(handle_repair_category_removal, brand=brand, model=model, license_plate=license_plate))
        return

    if not categories:
        bot.send_message(user_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        process_category_selection_repair(user_id, brand, model, license_plate)
        return

    # –°–º–∞–π–ª—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    system_emoji = "üîπ"
    user_emoji = "üî∏"

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏
    category_list = "\n".join(
        f"{system_emoji if category in system_categories else user_emoji} {i + 1}. {category}"
        for i, category in enumerate(categories)
    )
    bot.send_message(user_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã:\n\n{category_list}")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=markup)

    bot.register_next_step_handler(message, remove_repair_category, categories, system_categories, brand, model, license_plate)

#@log_user_actions
def remove_repair_category(message, categories, system_categories, brand, model, license_plate):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '0' –¥–ª—è –æ—Ç–º–µ–Ω—ã
    if message.text == "0":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏
        process_category_selection_repair(user_id, brand, model, license_plate)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return
    elif message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ message.text –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç—ã–º –∏–ª–∏ None
    if message.text:
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            index = int(message.text) - 1
            if 0 <= index < len(categories):
                removed_category = categories[index]

                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π
                if removed_category in system_categories:
                    bot.send_message(user_id, "–≠—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
                    # –ñ–¥–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                    bot.register_next_step_handler(message, remove_repair_category, categories, system_categories, brand, model, license_plate)
                    return

                # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                data = load_repair_data(user_id)
                data["user_categories"].remove(removed_category)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
                with open(os.path.join("data base", "repairs", f"{user_id}_repairs.json"), "w", encoding="utf-8") as file:
                    json.dump(data, file, ensure_ascii=False, indent=4)

                bot.send_message(user_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è *{removed_category}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", parse_mode="Markdown")
                # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞—Ç–Ω–æ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                process_category_selection_repair(user_id, brand, model, license_plate)

            else:
                bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
                # –ñ–¥–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                bot.register_next_step_handler(message, remove_repair_category, categories, system_categories, brand, model, license_plate)

        except ValueError:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            # –ñ–¥–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
            bot.register_next_step_handler(message, remove_repair_category, categories, system_categories, brand, model, license_plate)
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        # –ñ–¥–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        bot.register_next_step_handler(message, remove_repair_category, categories, system_categories, brand, model, license_plate)

#@log_user_actions
def proceed_to_repair_name(message, selected_category, brand, model, license_plate):
    user_id = message.from_user.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, get_repair_name, selected_category, brand, model, license_plate)

#@log_user_actions
def get_repair_name(message, selected_category, brand, model, license_plate):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(
            message,
            partial(get_repair_name, selected_category=selected_category, brand=brand, model=model, license_plate=license_plate)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', message.text):  
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(
            message,
            partial(get_repair_name, selected_category=selected_category, brand=brand, model=model, license_plate=license_plate)
        )
        return

    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_menu_2(message)
        else:
            return_to_menu(message)
        return

    repair_name = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_skip = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_skip)
    markup.add(item_return)
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:", reply_markup=markup)
    bot.register_next_step_handler(message, get_repair_description, selected_category, repair_name, brand, model, license_plate)

#@log_user_actions
def get_repair_description(message, selected_category, repair_name, brand, model, license_plate):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(
            message,
            partial(get_repair_description, selected_category=selected_category, repair_name=repair_name, brand=brand, model=model, license_plate=license_plate)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', message.text):  
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(
            message,
            partial(get_repair_description, selected_category=selected_category, repair_name=repair_name, brand=brand, model=model, license_plate=license_plate)
        )
        return

    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_menu_2(message)
        else:
            return_to_menu(message)
        return

    repair_description = message.text if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ" else ""
    
    # –í–≤–æ–¥ –¥–∞—Ç—ã
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–º–æ–Ω—Ç–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, get_repair_date, selected_category, repair_name, repair_description, brand, model, license_plate)

#@log_user_actions
def is_valid_date(date_str):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –î–î.–ú–ú.–ì–ì–ì–ì
    pattern = r'^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.(2000|20[01][0-9]|202[0-9]|203[0-9]|[2-9][0-9]{3})$'
    return bool(re.match(pattern, date_str))

#@log_user_actions
def get_repair_date(message, selected_category, repair_name, repair_description, brand, model, license_plate):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(
            message, 
            partial(
                get_repair_date, 
                selected_category=selected_category, 
                repair_name=repair_name, 
                repair_description=repair_description, 
                brand=brand, 
                model=model, 
                license_plate=license_plate
            )
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', message.text):  
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(
            message, 
            partial(
                get_repair_date, 
                selected_category=selected_category, 
                repair_name=repair_name, 
                repair_description=repair_description, 
                brand=brand, 
                model=model, 
                license_plate=license_plate
            )
        )
        return

    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_menu_2(message)
        else:
            return_to_menu(message)
        return

    repair_date = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    if not is_valid_date(repair_date):
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(
            message, 
            get_repair_date, 
            selected_category, 
            repair_name, 
            repair_description, 
            brand, 
            model, 
            license_plate
        )
        return

    # –í–≤–æ–¥ —Å—É–º–º—ã
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–µ–º–æ–Ω—Ç–∞:", reply_markup=markup)
    bot.register_next_step_handler(
        message, 
        save_repair_data_final, 
        selected_category, 
        repair_name, 
        repair_description, 
        repair_date, 
        brand, 
        model, 
        license_plate, 
        f"{brand} {model} {license_plate}"  # –ó–¥–µ—Å—å –ø–µ—Ä–µ–¥–∞–µ–º selected_transport
    )

def save_repair_data_final(message, selected_category, repair_name, repair_description, repair_date, brand, model, license_plate, selected_transport):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(
            message,
            partial(
                save_repair_data_final,
                selected_category=selected_category,
                repair_name=repair_name,
                repair_description=repair_description,
                repair_date=repair_date,
                brand=brand,
                model=model,
                license_plate=license_plate,
                selected_transport=selected_transport
            )
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', message.text):
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(
            message,
            partial(
                save_repair_data_final,
                selected_category=selected_category,
                repair_name=repair_name,
                repair_description=repair_description,
                repair_date=repair_date,
                brand=brand,
                model=model,
                license_plate=license_plate,
                selected_transport=selected_transport
            )
        )
        return

    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_menu_2(message)
        else:
            return_to_menu(message)
        return

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é —Å—É–º–º—É –≤ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
        repair_amount = float(message.text)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–º–æ–Ω—Ç–µ
        repair_data = {
            "category": selected_category,
            "name": repair_name,
            "date": repair_date,
            "amount": repair_amount,
            "description": repair_description,
            "transport": {
                "brand": brand,
                "model": model,
                "license_plate": license_plate
            }
        }

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–º–æ–Ω—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = load_repair_data(user_id)
        if str(user_id) not in data:
            data[str(user_id)] = {"repairs": []}

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞
        repairs = data[str(user_id)].get("repairs", [])
        repairs.append(repair_data)
        data[str(user_id)]["repairs"] = repairs

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –∏ Excel
        save_repair_data(user_id, data, selected_transport)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
        save_repair_to_excel(user_id, repair_data)          # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel

        bot.send_message(user_id, "–†–µ–º–æ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω")
        send_menu(user_id)

    except ValueError:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
        bot.register_next_step_handler(
            message,
            partial(
                save_repair_data_final,
                selected_category=selected_category,
                repair_name=repair_name,
                repair_description=repair_description,
                repair_date=repair_date,
                brand=brand,
                model=model,
                license_plate=license_plate,
                selected_transport=selected_transport
            )
        )

def save_repair_to_excel(user_id, repair_data):
    # –ü—É—Ç—å –∫ Excel-—Ñ–∞–π–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞
    excel_path = os.path.join("data base", "repairs", "excel", f"{user_id}_repairs.xlsx")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    directory = os.path.dirname(excel_path)
    if not os.path.exists(directory):
        os.makedirs(directory)  # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
    try:
        if os.path.exists(excel_path):
            workbook = load_workbook(excel_path)
        else:
            workbook = Workbook()
            workbook.remove(workbook.active)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏—Å—Ç
        
        # –õ–∏—Å—Ç –¥–ª—è –≤—Å–µ—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤ (Summary)
        summary_sheet = workbook["Summary"] if "Summary" in workbook.sheetnames else workbook.create_sheet("Summary")
        
        # –õ–∏—Å—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
        transport_sheet_name = f"{repair_data['transport']['brand']}_{repair_data['transport']['model']}_{repair_data['transport']['license_plate']}"
        if transport_sheet_name not in workbook.sheetnames:
            transport_sheet = workbook.create_sheet(transport_sheet_name)
        else:
            transport_sheet = workbook[transport_sheet_name]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]
        
        # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—Å—Ç–æ–≤
        #@log_user_actions
        def setup_sheet(sheet):
            if sheet.max_row == 1:
                sheet.append(headers)
                for cell in sheet[1]:
                    cell.font = Font(bold=True)
                    cell.alignment = Alignment(horizontal="center")

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ
        for sheet in [summary_sheet, transport_sheet]:
            setup_sheet(sheet)
            row_data = [
                f"{repair_data['transport']['brand']} {repair_data['transport']['model']} {repair_data['transport']['license_plate']}",
                repair_data["category"],
                repair_data["name"],
                repair_data["date"],
                float(repair_data["amount"]),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∫–∞–∫ —á–∏—Å–ª–æ
                repair_data["description"],
            ]
            sheet.append(row_data)
        
        # –ê–≤—Ç–æ–ø–æ–¥–≥–æ–Ω–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        for sheet in [summary_sheet, transport_sheet]:
            for col in sheet.columns:
                max_length = max(len(str(cell.value)) for cell in col)
                sheet.column_dimensions[get_column_letter(col[0].column)].width = max_length + 2

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
        workbook.save(excel_path)
    except Exception as e:
        pass

        
# (11.5) --------------- –ö–û–î –î–õ–Ø "–†–ï–ú–û–ù–¢–û–í" (–û–ë–†–ê–ë–û–¢–ß–ò–ö "–ü–û–°–ú–û–¢–†–ï–¢–¨ –†–ï–ú–û–ù–¢–´") ---------------

selected_repair_transport_dict = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–º–æ–Ω—Ç–æ–≤ –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
#@log_user_actions
def filter_repairs_by_transport(user_id, repairs):
    selected_transport = selected_repair_transport_dict.get(user_id)
    
    # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Ä–µ–º–æ–Ω—Ç–æ–≤
    if not selected_transport:
        return repairs

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    filtered_repairs = [
        repair for repair in repairs 
        if f"{repair['transport']['brand']} {repair['transport']['model']} ({repair['transport']['license_plate']})" == selected_transport
    ]
    return filtered_repairs

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ —á–∞—Å—Ç–∏ (–æ–±—â–∞—è)
#@log_user_actions
def send_message_with_split(user_id, message_text):
    bot.send_message(user_id, message_text, parse_mode="Markdown")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞
#@log_user_actions
def send_repair_menu(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–†–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)")
    item2 = types.KeyboardButton("–†–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)")
    item3 = types.KeyboardButton("–†–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
    item4 = types.KeyboardButton("–†–µ–º–æ–Ω—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)")
    item5 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –≤ EXCEL")
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item4, item1)
    markup.add(item2, item3)
    markup.add(item5)
    markup.add(item_return)
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤
@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def view_repairs(message):
    user_id = message.from_user.id

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
    transport_list = load_transport_data(user_id)

    if not transport_list:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?", reply_markup=create_transport_options_markup())
        bot.register_next_step_handler(message, ask_add_transport)
        return

    # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –µ—Å—Ç—å, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –Ω–∞ —Å—Ç—Ä–æ–∫—É
    transport_buttons = [
        types.KeyboardButton(f"{transport['brand']} {transport['model']} ({transport['license_plate']})")
        for transport in transport_list
    ]
    for i in range(0, len(transport_buttons), 2):
        markup.add(*transport_buttons[i:i+2])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_transport_selection_for_repairs)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞
#@log_user_actions
def handle_transport_selection_for_repairs(message):
    user_id = message.from_user.id
    selected_transport = message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    if selected_transport == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        send_menu(user_id)
        return

    if selected_transport == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_repair_transport_dict[user_id] = selected_transport

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
    bot.send_message(
        user_id,
        f"–ü–æ–∫–∞–∑—ã–≤–∞—é —Ä–µ–º–æ–Ω—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: *{selected_transport}*",
        parse_mode="Markdown"
    )

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é —Ä–µ–º–æ–Ω—Ç–æ–≤
    send_repair_menu(user_id)


@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –≤ EXCEL")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –≤ EXCEL')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –≤ EXCEL')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def send_repairs_excel(message):
    user_id = message.from_user.id

    # –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
    excel_path = os.path.join("data base", "repairs", "excel", f"{user_id}_repairs.xlsx")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(excel_path):
        bot.send_message(user_id, "–§–∞–π–ª —Å –≤–∞—à–∏–º–∏ —Ä–µ–º–æ–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(excel_path, 'rb') as excel_file:
        bot.send_document(user_id, excel_file)

MAX_MESSAGE_LENGTH = 4096

#@log_user_actions
def send_message_with_split(user_id, message_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞."""
    if len(message_text) <= MAX_MESSAGE_LENGTH:
        bot.send_message(user_id, message_text, parse_mode="Markdown")
    else:
        message_parts = [
            message_text[i:i + MAX_MESSAGE_LENGTH] 
            for i in range(0, len(message_text), MAX_MESSAGE_LENGTH)
        ]
        for part in message_parts:
            bot.send_message(user_id, part, parse_mode="Markdown")

MAX_MESSAGE_LENGTH = 4096

#@log_user_actions
def send_message_with_split(user_id, message_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞."""
    if len(message_text) <= MAX_MESSAGE_LENGTH:
        bot.send_message(user_id, message_text, parse_mode="Markdown")
    else:
        message_parts = [
            message_text[i:i + MAX_MESSAGE_LENGTH] 
            for i in range(0, len(message_text), MAX_MESSAGE_LENGTH)
        ]
        for part in message_parts:
            bot.send_message(user_id, part, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "–†–µ–º–æ–Ω—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–†–µ–º–æ–Ω—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)')
@track_usage('–†–µ–º–æ–Ω—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def view_repairs_by_category(message):
    user_id = message.from_user.id
    user_data = load_repair_data(user_id)
    repairs = user_data.get(str(user_id), {}).get("repairs", [])

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
    repairs = filter_repairs_by_transport(user_id, repairs)

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    categories = {repair['category'] for repair in repairs}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–∫ –µ—Å—Ç—å

    if not categories:
        bot.send_message(user_id, "*–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π* –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", parse_mode="Markdown")
        send_repair_menu(user_id)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤
        return

    category_buttons = [types.KeyboardButton(category) for category in categories]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*category_buttons)
    item_return_to_repairs = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_return_to_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return_to_repairs)
    markup.add(item_return_to_main)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_repair_category_selection)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–º–æ–Ω—Ç–æ–≤
#@log_user_actions
def handle_repair_category_selection(message):
    user_id = message.from_user.id
    selected_category = message.text.strip().lower()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
    if not selected_category or selected_category == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return
    if selected_category == "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    user_data = load_repair_data(user_id)
    repairs = user_data.get(str(user_id), {}).get("repairs", [])

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
    repairs = filter_repairs_by_transport(user_id, repairs)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    available_categories = {repair['category'].lower() for repair in repairs}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    if selected_category not in available_categories:
        bot.send_message(user_id, "–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        view_repairs_by_category(message)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_repairs = [repair for repair in repairs if repair['category'].lower() == selected_category]

    total_repairs_amount = 0
    repair_details = []

    for index, repair in enumerate(category_repairs, start=1):
        repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        repair_date = repair.get("date", "")
        repair_amount = float(repair.get("amount", 0))
        total_repairs_amount += repair_amount

        repair_details.append(
            f"üîß *‚Ññ {index}*\n\n"
            f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {repair['category']}\n"  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞–∫ –µ—Å—Ç—å
            f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {repair_name}\n"
            f"üìÖ *–î–∞—Ç–∞:* {repair_date}\n"
            f"üí∞ *–°—É–º–º–∞:* {repair_amount:.2f} —Ä—É–±.\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {repair.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
        )

    if repair_details:
        message_text = f"*–†–µ–º–æ–Ω—Ç—ã* –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category}*:\n\n\n" + "\n\n".join(repair_details)
        send_message_with_split(user_id, message_text)
        bot.send_message(
            user_id,
            f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category}*: *{total_repairs_amount:.2f}* —Ä—É–±.",
            parse_mode="Markdown"
        )
    else:
        bot.send_message(
            user_id,
            f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category}* —Ä–µ–º–æ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            parse_mode="Markdown"
        )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    send_repair_menu(user_id) # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–Ω–æ–≤–æ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü
MAX_MESSAGE_LENGTH = 4096

#@log_user_actions
def send_message_with_split(user_id, message_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞."""
    if len(message_text) <= MAX_MESSAGE_LENGTH:
        bot.send_message(user_id, message_text, parse_mode="Markdown")
    else:
        message_parts = [
            message_text[i:i + MAX_MESSAGE_LENGTH] 
            for i in range(0, len(message_text), MAX_MESSAGE_LENGTH)
        ]
        for part in message_parts:
            bot.send_message(user_id, part, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "–†–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–†–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)')
@track_usage('–†–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def view_repairs_by_month(message):
    user_id = message.from_user.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ (–ú–ú.–ì–ì–ì–ì) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥:", reply_markup=markup)
    bot.register_next_step_handler(message, get_repairs_by_month)

#@log_user_actions
def get_repairs_by_month(message):
    user_id = message.from_user.id
    date = message.text.strip() if message.text else None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if not date:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_repairs_by_month)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_repairs_by_month)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', message.text):
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–º–∞–π–ª–∏–∫–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_repairs_by_month)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
    if "." in date:
        parts = date.split(".")
        if len(parts) == 2:
            month, year = parts
            if month.isdigit() and year.isdigit() and 1 <= int(month) <= 12 and 2000 <= int(year) <= 3000:
                month, year = map(int, parts)

                user_data = load_repair_data(user_id)
                repairs = user_data.get(str(user_id), {}).get("repairs", [])

                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
                repairs = filter_repairs_by_transport(user_id, repairs)

                total_repairs = 0
                repair_details = []

                for index, repair in enumerate(repairs, start=1):
                    repair_date = repair.get("date", "")
                    repair_date_parts = repair_date.split(".")
                    if len(repair_date_parts) >= 2:
                        repair_month, repair_year = map(int, repair_date_parts[1:3])

                        if repair_month == month and repair_year == year:
                            amount = float(repair.get("amount", 0))
                            total_repairs += amount

                            repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                            description = repair.get("description", "")
                            category = repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

                            repair_details.append(
                                f"üîß *‚Ññ {index}*\n\n"
                                f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
                                f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {repair_name}\n"
                                f"üìÖ *–î–∞—Ç–∞:* {repair_date}\n"
                                f"üí∞ *–°—É–º–º–∞:* {amount} —Ä—É–±.\n"
                                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
                            )

                if repair_details:
                    message_text = f"–†–µ–º–æ–Ω—Ç—ã –∑–∞ *{date}* –º–µ—Å—è—Ü:\n\n\n" + "\n\n".join(repair_details)
                    send_message_with_split(user_id, message_text)
                    bot.send_message(user_id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ *{date}* –º–µ—Å—è—Ü: *{total_repairs}* —Ä—É–±.", parse_mode="Markdown")
                else:
                    bot.send_message(user_id, f"–ó–∞ *{date}* –º–µ—Å—è—Ü —Ä–µ–º–æ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", parse_mode="Markdown")

                send_repair_menu(user_id)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            else:
                bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì")
                bot.register_next_step_handler(message, get_repairs_by_month)
                return
        else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì")
            bot.register_next_step_handler(message, get_repairs_by_month)
            return
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, get_repairs_by_month)
        return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ –≥–æ–¥
MAX_MESSAGE_LENGTH = 4096

#@log_user_actions
def send_message_with_split(user_id, message_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞."""
    if len(message_text) <= MAX_MESSAGE_LENGTH:
        bot.send_message(user_id, message_text, parse_mode="Markdown")
    else:
        message_parts = [
            message_text[i:i + MAX_MESSAGE_LENGTH] 
            for i in range(0, len(message_text), MAX_MESSAGE_LENGTH)
        ]
        for part in message_parts:
            bot.send_message(user_id, part, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "–†–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–†–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)')
@track_usage('–†–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def view_repairs_by_year(message):
    user_id = message.from_user.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–ì–ì–ì–ì) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ —ç—Ç–æ—Ç –≥–æ–¥:", reply_markup=markup)
    bot.register_next_step_handler(message, get_repairs_by_year)

#@log_user_actions
def get_repairs_by_year(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    if not message.text:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_repairs_by_year)
        return

    year_input = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_repairs_by_year)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', message.text):
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, get_repairs_by_year)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ
    if not year_input.isdigit() or len(year_input) != 4:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì.")
        bot.register_next_step_handler(message, get_repairs_by_year)
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥–æ–¥ –≤ —á–∏—Å–ª–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    year = int(year_input)
    if year < 2000 or year > 3000:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì.")
        bot.register_next_step_handler(message, get_repairs_by_year)
        return

    user_data = load_repair_data(user_id)
    repairs = user_data.get(str(user_id), {}).get("repairs", [])

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
    repairs = filter_repairs_by_transport(user_id, repairs)

    total_repairs = 0
    repair_details = []

    for index, repair in enumerate(repairs, start=1):
        repair_date = repair.get("date", "")
        if "." in repair_date:
            date_parts = repair_date.split(".")
            if len(date_parts) >= 3:
                repair_year = int(date_parts[2])
                if repair_year == year:
                    amount = float(repair.get("amount", 0))
                    total_repairs += amount

                    repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    description = repair.get("description", "")
                    category = repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

                    repair_details.append(
                        f"üîß *‚Ññ {index}*\n\n"
                        f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
                        f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {repair_name}\n"
                        f"üìÖ *–î–∞—Ç–∞:* {repair_date}\n"
                        f"üí∞ *–°—É–º–º–∞:* {amount} —Ä—É–±.\n"
                        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
                    )

    if repair_details:
        message_text = f"–†–µ–º–æ–Ω—Ç—ã –∑–∞ *{year}* –≥–æ–¥:\n\n\n" + "\n\n".join(repair_details)
        send_message_with_split(user_id, message_text)
        bot.send_message(user_id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ *{year}* –≥–æ–¥: *{total_repairs}* —Ä—É–±.", parse_mode="Markdown")
    else:
        bot.send_message(user_id, f"–ó–∞ *{year}* –≥–æ–¥ —Ä–µ–º–æ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", parse_mode="Markdown")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    send_repair_menu(user_id)
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤
MAX_MESSAGE_LENGTH = 4096

#@log_user_actions
def send_message_with_split(user_id, message_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞."""
    if len(message_text) <= MAX_MESSAGE_LENGTH:
        bot.send_message(user_id, message_text, parse_mode="Markdown")
    else:
        message_parts = [
            message_text[i:i + MAX_MESSAGE_LENGTH] 
            for i in range(0, len(message_text), MAX_MESSAGE_LENGTH)
        ]
        for part in message_parts:
            bot.send_message(user_id, part, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "–†–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–†–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')
@track_usage('–†–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def view_all_repairs(message):
    user_id = message.from_user.id

    user_data = load_repair_data(user_id)
    repairs = user_data.get(str(user_id), {}).get("repairs", [])

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
    repairs = filter_repairs_by_transport(user_id, repairs)

    total_repairs = 0
    repair_details = []

    for index, repair in enumerate(repairs, start=1):
        amount = float(repair.get("amount", 0))
        total_repairs += amount

        repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        repair_date = repair.get("date", "")
        description = repair.get("description", "")
        category = repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

        repair_details.append(
            f"üîß *‚Ññ {index}*\n\n"
            f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
            f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {repair_name}\n"
            f"üìÖ *–î–∞—Ç–∞:* {repair_date}\n"
            f"üí∞ *–°—É–º–º–∞:* {amount} —Ä—É–±.\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
        )

    if repair_details:
        message_text = "*–í—Å–µ* —Ä–µ–º–æ–Ω—Ç—ã:\n\n\n" + "\n\n".join(repair_details)
        send_message_with_split(user_id, message_text)
        bot.send_message(user_id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤: *{total_repairs}* —Ä—É–±.", parse_mode="Markdown")
    else:
        bot.send_message(user_id, "–†–µ–º–æ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", parse_mode="Markdown")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    send_repair_menu(user_id)

# (11.9) --------------- –ö–û–î –î–õ–Ø "–†–ï–ú–û–ù–¢–û–í" (–û–ë–†–ê–ë–û–¢–ß–ò–ö "–£–î–ê–õ–ò–¢–¨ –†–ï–ú–û–ù–¢–´") ---------------

selected_repair_transports = {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–æ–≤
def save_selected_repair_transport(user_id, selected_transport):
    user_data = load_repair_data(user_id).get(str(user_id), {})
    user_data["selected_transport"] = selected_transport
    save_repair_data(user_id, {str(user_id): user_data})

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã')
@track_usage('–£–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def delete_repairs_menu(message):
    user_id = message.from_user.id

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
    transport_data = load_transport_data(user_id)
    if not transport_data:
        # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_add_transport = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        item_cancel = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add(item_add_transport)
        markup.add(item_cancel)
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?", reply_markup=markup)
        bot.register_next_step_handler(message, ask_add_transport)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞–º–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    transport_buttons = [
        types.KeyboardButton(f"{transport['brand']} {transport['model']} ({transport['license_plate']})")
        for transport in transport_data
    ]
    for i in range(0, len(transport_buttons), 2):
        markup.add(*transport_buttons[i:i+2])  # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_repair_transport_selection_for_deletion)

#@log_user_actions
def handle_repair_transport_selection_for_deletion(message):
    user_id = message.from_user.id
    selected_transport = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    if selected_transport == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        send_menu(user_id)
        return
    if selected_transport == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    selected_repair_transports[user_id] = selected_transport
    save_selected_repair_transport(user_id, selected_transport)

    # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_month = types.KeyboardButton("Del —Ä–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)")
    item_license_plate = types.KeyboardButton("Del —Ä–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)")
    item_all_time = types.KeyboardButton("Del —Ä–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
    item_del_category_rep = types.KeyboardButton("Del —Ä–µ–º–æ–Ω—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)")
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    markup.add(item_del_category_rep, item_month)
    markup.add(item_license_plate, item_all_time)
    markup.add(item_return)
    markup.add(item_main_menu)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)

repairs_to_delete_dict = {}
selected_repair_categories = {}
user_repairs_to_delete = {}

@bot.message_handler(func=lambda message: message.text == "Del —Ä–µ–º–æ–Ω—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('Del —Ä–µ–º–æ–Ω—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)')
@track_usage('Del —Ä–µ–º–æ–Ω—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def delete_repairs_by_category(message):
    user_id = message.from_user.id
    selected_transport = selected_repair_transports.get(user_id)

    if not selected_transport:
        selected_transport = load_repair_data(user_id).get("selected_transport")
        if not selected_transport:
            bot.send_message(user_id, "–ù–µ –≤—ã–±—Ä–∞–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
            send_menu(user_id)
            return

    selected_transport_info = selected_transport.strip().lower().replace('(', '').replace(')', '')

    user_data = load_repair_data(user_id).get(str(user_id), {})
    repairs = user_data.get("repairs", [])

    categories = list({
        repair.get("category")
        for repair in repairs
        if f"{repair.get('transport', {}).get('brand', '').strip().lower()} {repair.get('transport', {}).get('model', '').strip().lower()} {str(repair.get('transport', {}).get('license_plate', '')).strip().lower()}" == selected_transport_info
    })

    if not categories:
        bot.send_message(user_id, "–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        send_menu(user_id)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    markup.add(*[types.KeyboardButton(category) for category in categories])
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_repair_category_selection_for_deletion)

#@log_user_actions
def handle_repair_category_selection_for_deletion(message):
    user_id = message.from_user.id
    selected_category = message.text.strip()

    if selected_category in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if selected_category == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            send_menu(user_id)
        else:
            return_to_menu(message)
        return

    selected_repair_categories[user_id] = selected_category

    user_data = load_repair_data(user_id).get(str(user_id), {})
    repairs = user_data.get("repairs", [])

    selected_transport = selected_repair_transports.get(user_id)
    if not selected_transport:
        selected_transport = load_repair_data(user_id).get("selected_transport")
        if not selected_transport:
            bot.send_message(user_id, "–ù–µ –≤—ã–±—Ä–∞–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
            send_menu(user_id)
            return

    selected_transport_info = selected_transport.strip().lower().replace('(', '').replace(')', '')

    repairs_to_delete = [
        repair for repair in repairs
        if repair.get("category") == selected_category and
           f"{repair.get('transport', {}).get('brand', '').strip().lower()} {repair.get('transport', {}).get('model', '').strip().lower()} {str(repair.get('transport', {}).get('license_plate', '')).strip().lower()}" == selected_transport_info
    ]

    if not repairs_to_delete:
        bot.send_message(user_id, f"–ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category.lower()}* –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", parse_mode="Markdown")
        send_menu(user_id)
        return

    user_repairs_to_delete[user_id] = repairs_to_delete

    repair_list_text = f"–°–ø–∏—Å–æ–∫ —Ä–µ–º–æ–Ω—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category.lower()}*:\n\n\n"
    for index, repair in enumerate(repairs_to_delete, start=1):
        repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        repair_date = repair.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        repair_list_text += f"üîß ‚Ññ{index}. {repair_name} - ({repair_date})\n\n"

    repair_list_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"

    send_long_message(user_id, repair_list_text)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    bot.register_next_step_handler(message, delete_repair_confirmation)

#@log_user_actions
def delete_repair_confirmation(message):
    user_id = message.from_user.id

    selected_option = message.text.strip()

    if selected_option in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if selected_option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            send_menu(user_id)
        else:
            return_to_menu(message)
        return

    if not selected_option.isdigit():
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")
        bot.register_next_step_handler(message, delete_repair_confirmation)
        return

    repair_index = int(selected_option) - 1
    repairs_to_delete = user_repairs_to_delete.get(user_id, [])

    if 0 <= repair_index < len(repairs_to_delete):
        user_data = load_repair_data(user_id).get(str(user_id), {})
        user_repairs = user_data.get("repairs", [])

        deleted_repair = repairs_to_delete.pop(repair_index)
        user_repairs.remove(deleted_repair)
        user_data["repairs"] = user_repairs
        save_repair_data(user_id, {str(user_id): user_data})

        bot.send_message(
            user_id,
            f"–†–µ–º–æ–Ω—Ç *{deleted_repair.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", parse_mode="Markdown"
        )

        send_menu(user_id)
    else:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(message, delete_repair_confirmation)

# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü
@bot.message_handler(func=lambda message: message.text == "Del —Ä–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('Del —Ä–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)')
@track_usage('Del —Ä–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def delete_repair_by_month(message):
    user_id = message.from_user.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main_menu)
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ (–ú–ú.–ì–ì–ì–ì) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:", reply_markup=markup)
    bot.register_next_step_handler(message, delete_repairs_by_month_handler)

#@log_user_actions
def delete_repairs_by_month_handler(message):
    user_id = message.from_user.id
    month_year = message.text.strip() if message.text else None

    if not month_year:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, delete_repairs_by_month_handler)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, delete_repairs_by_month_handler)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', month_year):
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, delete_repairs_by_month_handler)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
    match = re.match(r"^(0[1-9]|1[0-2])\.(20[0-9]{2})$", month_year)
    if not match:
        bot.send_message(user_id, "–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü –∏–ª–∏ –≥–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ú–ú.–ì–ì–ì–ì)")
        bot.register_next_step_handler(message, delete_repairs_by_month_handler)
        return

    selected_month, selected_year = match.groups()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    selected_transport = selected_repair_transports.get(user_id)
    if not selected_transport:
        bot.send_message(user_id, "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        send_menu(user_id)
        return

    transport_info = selected_transport.split(" ")
    selected_brand = transport_info[0].strip()
    selected_model = transport_info[1].strip()
    selected_license_plate = transport_info[2].strip().replace("(", "").replace(")", "")

    user_data = load_repair_data(user_id).get(str(user_id), {})
    repairs = user_data.get("repairs", [])

    if not repairs:
        bot.send_message(user_id, f"–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ *{month_year}* –º–µ—Å—è—Ü", parse_mode="Markdown")
        send_menu(user_id)
        return

    repairs_to_delete = []
    for index, repair in enumerate(repairs, start=1):
        repair_date = repair.get("date", "")

        if not repair_date or len(repair_date.split(".")) != 3:
            continue

        repair_day, repair_month, repair_year = repair_date.split(".")

        if repair_month == selected_month and repair_year == selected_year:
            repair_license_plate = repair.get("transport", {}).get("license_plate", "").strip()
            repair_brand = repair.get("transport", {}).get("brand", "").strip()
            repair_model = repair.get("transport", {}).get("model", "").strip()

            if (repair_license_plate == selected_license_plate and
                repair_brand == selected_brand and
                repair_model == selected_model):
                repairs_to_delete.append((index, repair))

    if repairs_to_delete:
        repairs_to_delete_dict[user_id] = repairs_to_delete

        repair_list_text = f"–°–ø–∏—Å–æ–∫ —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞ *{month_year}* –º–µ—Å—è—Ü:\n\n\n"
        for index, repair in repairs_to_delete:
            repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            repair_date = repair.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            repair_list_text += f"üîß ‚Ññ{index}. {repair_name} - ({repair_date})\n\n"

        repair_list_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"

        send_long_message(user_id, repair_list_text)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.register_next_step_handler(message, confirm_delete_repair_month)
    else:
        bot.send_message(user_id, f"–ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞ *{month_year}* –º–µ—Å—è—Ü", parse_mode="Markdown")
        send_menu(user_id)

#@log_user_actions
def confirm_delete_repair_month(message):
    user_id = message.from_user.id

    if not message.text:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, confirm_delete_repair_month)
        return

    selected_option = message.text.strip()

    if selected_option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return

    if selected_option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if selected_option.isdigit():
        repair_index = int(selected_option) - 1
        repairs_to_delete = repairs_to_delete_dict.get(user_id, [])

        if 0 <= repair_index < len(repairs_to_delete):
            _, deleted_repair = repairs_to_delete.pop(repair_index)

            user_data = load_repair_data(user_id).get(str(user_id), {})
            if "repairs" in user_data and deleted_repair in user_data["repairs"]:
                user_data["repairs"].remove(deleted_repair)
                save_repair_data(user_id, {str(user_id): user_data})

            bot.send_message(
                user_id,
                f"–†–µ–º–æ–Ω—Ç *{deleted_repair.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').lower()}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                parse_mode="Markdown"
            )

            repairs_to_delete_dict[user_id] = repairs_to_delete
            send_menu(user_id)
        else:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, confirm_delete_repair_month)
    else:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞")
        bot.register_next_step_handler(message, confirm_delete_repair_month)

# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ –≥–æ–¥
MAX_MESSAGE_LENGTH = 4096

#@log_user_actions
def send_long_message(user_id, message_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ."""
    if len(message_text) <= MAX_MESSAGE_LENGTH:
        bot.send_message(user_id, message_text, parse_mode="Markdown")
    else:
        message_parts = [
            message_text[i:i + MAX_MESSAGE_LENGTH] 
            for i in range(0, len(message_text), MAX_MESSAGE_LENGTH)
        ]
        for part in message_parts:
            bot.send_message(user_id, part, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "Del —Ä–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('Del —Ä–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)')
@track_usage('Del —Ä–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def delete_repairs_by_year(message):
    user_id = message.from_user.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main_menu)
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (–ì–ì–ì–ì) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ —ç—Ç–æ—Ç –≥–æ–¥:", reply_markup=markup)
    bot.register_next_step_handler(message, delete_repairs_by_year_handler)

#@log_user_actions
def delete_repairs_by_year_handler(message):
    user_id = message.from_user.id
    year = message.text.strip() if message.text else None

    if not year:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, delete_repairs_by_year_handler)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, delete_repairs_by_year_handler)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', year):  
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, delete_repairs_by_year_handler)
        return

    if year == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return

    if year == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≥–æ–¥–∞ (–æ—Ç 2000 –¥–æ 3000)
    if not re.match(r"^(20[0-9]{2}|2[1-9][0-9]{2}|3000)$", year):
        bot.send_message(user_id, "–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥")
        bot.register_next_step_handler(message, delete_repairs_by_year_handler)
        return

    user_data = load_repair_data(user_id).get(str(user_id), {})
    repairs = user_data.get("repairs", [])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    selected_transport = selected_repair_transports.get(user_id, None)

    if selected_transport:
        transport_info = selected_transport.split(" ")
        selected_brand = transport_info[0].strip()
        selected_model = transport_info[1].strip()
        selected_license_plate = str(transport_info[2].strip())
    else:
        selected_brand = selected_model = selected_license_plate = None

    if not repairs:
        bot.send_message(user_id, f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ *{year}* –≥–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", parse_mode="Markdown")
        send_menu(user_id)
        return

    repairs_to_delete = []
    for index, repair in enumerate(repairs, start=1):
        repair_date = repair.get("date", "")
        repair_year = repair_date.split(".")[2]

        repair_brand = repair.get("transport", {}).get("brand", "").strip()
        repair_model = repair.get("transport", {}).get("model", "").strip()

        if (repair_year == year and
           repair_brand == selected_brand and
           repair_model == selected_model):
            repairs_to_delete.append((index, repair))

    if repairs_to_delete:
        repairs_to_delete_dict[user_id] = repairs_to_delete

        repair_list_text = f"–°–ø–∏—Å–æ–∫ —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞ *{year}* –≥–æ–¥:\n\n\n"
        for index, repair in repairs_to_delete:
            repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            repair_date = repair.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            repair_list_text += f"üîß ‚Ññ{index}. {repair_name} - ({repair_date})\n\n"

        repair_list_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        send_long_message(user_id, repair_list_text)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.register_next_step_handler(message, confirm_delete_repair)
    else:
        bot.send_message(user_id, f"–ó–∞ *{year}* –≥–æ–¥ —Ä–µ–º–æ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", parse_mode="Markdown")
        send_menu(user_id)

#@log_user_actions
def confirm_delete_repair(message):
    user_id = message.from_user.id

    if not message.text:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, confirm_delete_repair)
        return

    selected_option = message.text.strip()

    if re.search(r'[^\w\s,.?!]', selected_option):
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, confirm_delete_repair)
        return

    if selected_option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_menu_2(message)
        return

    if selected_option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    repairs_to_delete = repairs_to_delete_dict.get(user_id, [])

    if selected_option.isdigit():
        repair_index = int(selected_option) - 1

        if 0 <= repair_index < len(repairs_to_delete):
            _, deleted_repair = repairs_to_delete.pop(repair_index)

            user_data = load_repair_data(user_id).get(str(user_id), {})
            user_data["repairs"].remove(deleted_repair)
            save_repair_data(user_id, {str(user_id): user_data})

            bot.send_message(user_id, f"–†–µ–º–æ–Ω—Ç *{deleted_repair.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').lower()}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", parse_mode="Markdown")

            repairs_to_delete_dict[user_id] = repairs_to_delete
            send_menu(user_id)
        else:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, confirm_delete_repair)
    else:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞")
        bot.register_next_step_handler(message, confirm_delete_repair)

# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤
@bot.message_handler(func=lambda message: message.text == "Del —Ä–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('Del —Ä–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')
@track_usage('Del —Ä–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def delete_all_repairs_for_selected_transport(message):
    user_id = message.from_user.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main_menu)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    bot.send_message(user_id,
                     "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–µ–º–æ–Ω—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞?\n\n"
                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–î–ê* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–ù–ï–¢* –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                     reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, confirm_delete_all_repairs)
    
#@log_user_actions
def confirm_delete_all_repairs(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, confirm_delete_all_repairs)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏
    if re.search(r'[^\w\s,.?!]', message.text):
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, confirm_delete_all_repairs)
        return

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        send_menu(user_id)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    response = message.text.strip().lower()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = load_repair_data(user_id).get(str(user_id), {})
    repairs = user_data.get("repairs", [])

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    selected_transport = user_data.get("selected_transport")
    if selected_transport:
        transport_info = selected_transport.split()
        selected_brand = transport_info[0].strip()
        selected_model = transport_info[1].strip()
        selected_license_plate = transport_info[2].strip()
    else:
        selected_brand = selected_model = selected_license_plate = None

    if not repairs:
        bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        send_menu(user_id)
        return

    if response == "–¥–∞":
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–º–æ–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        repairs_to_keep = []
        for repair in repairs:
            repair_brand = repair.get("transport", {}).get("brand", "").strip()
            repair_model = repair.get("transport", {}).get("model", "").strip()

            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º
            if not (repair_brand == selected_brand and repair_model == selected_model):
                repairs_to_keep.append(repair)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–º–æ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data["repairs"] = repairs_to_keep
        save_repair_data(user_id, {str(user_id): user_data})

        update_repairs_excel_file(user_id)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
        bot.send_message(user_id, f"–í—Å–µ —Ä–µ–º–æ–Ω—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_brand} {selected_model} {selected_license_plate}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã", parse_mode="Markdown")
    elif response == "–Ω–µ—Ç":
        bot.send_message(user_id, "–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        # –û—Ç–≤–µ—Ç –¥–ª—è –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–î–ê* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–ù–ï–¢* –¥–ª—è –æ—Ç–º–µ–Ω—ã.", parse_mode="Markdown")
        bot.register_next_step_handler(message, confirm_delete_all_repairs)
        return

    send_menu(user_id)

#@log_user_actions
def delete_repairs(user_id, deleted_repair):
    # –£–¥–∞–ª—è–µ–º —Ä–µ–º–æ–Ω—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_data = load_repair_data(user_id).get(str(user_id), {})
    repairs = user_data.get("repairs", [])

    # –£–¥–∞–ª—è–µ–º —Ä–µ–º–æ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤
    repairs = [repair for repair in repairs if not (
        repair["transport"]["brand"] == deleted_repair["transport"]["brand"] and
        repair["transport"]["model"] == deleted_repair["transport"]["model"] and
        repair["transport"]["license_plate"] == deleted_repair["transport"]["license_plate"] and
        repair["category"] == deleted_repair["category"] and
        repair["name"] == deleted_repair["name"] and
        repair["date"] == deleted_repair["date"] and
        repair["amount"] == deleted_repair["amount"] and
        repair["description"] == deleted_repair["description"]
    )]

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data["repairs"] = repairs
    save_repair_data(user_id, user_data)

    # –û–±–Ω–æ–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
    update_repairs_excel_file(user_id)

#@log_user_actions
def update_repairs_excel_file(user_id):
    user_data = load_repair_data(user_id).get(str(user_id), {})
    repairs = user_data.get("repairs", [])

    # –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    excel_file_path = f"data base/repairs/excel/{user_id}_repairs.xlsx"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not os.path.exists(excel_file_path):
        workbook = Workbook()
        workbook.save(excel_file_path)

    try:
        workbook = load_workbook(excel_file_path)
    except Exception as e:
        workbook = Workbook()
        workbook.save(excel_file_path)
        workbook = load_workbook(excel_file_path)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –ª–∏—Å—Ç–∞ (Summary)
    if "Summary" not in workbook.sheetnames:
        summary_sheet = workbook.create_sheet("Summary")
    else:
        summary_sheet = workbook["Summary"]
        summary_sheet.delete_rows(2, summary_sheet.max_row)  # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤

    headers = ["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]

    if summary_sheet.max_row == 0:  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        summary_sheet.append(headers)
        for cell in summary_sheet[1]:
            cell.font = Font(bold=True)
            cell.alignment = Alignment(horizontal="center")

    for repair in repairs:
        transport = repair["transport"]
        row_data = [
            f"{transport['brand']} {transport['model']} {transport['license_plate']}",
            repair["category"],
            repair["name"],
            repair["date"],
            float(repair["amount"]),
            repair["description"],
        ]
        summary_sheet.append(row_data)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    unique_transports = set((rep["transport"]["brand"], rep["transport"]["model"], rep["transport"]["license_plate"]) for rep in repairs)
    existing_sheets = set(workbook.sheetnames) - {"Summary"}

    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã
    for sheet_name in existing_sheets:
        parts = sheet_name.split("_")
        if len(parts) < 3 or tuple(parts) not in unique_transports:
            del workbook[sheet_name]

    for brand, model, license_plate in unique_transports:
        sheet_name = f"{brand}_{model}_{license_plate}".replace(" ", "_")[:31]
        if sheet_name not in workbook.sheetnames:
            transport_sheet = workbook.create_sheet(sheet_name)
            transport_sheet.append(headers)
            for cell in transport_sheet[1]:
                cell.font = Font(bold=True)
                cell.alignment = Alignment(horizontal="center")
        else:
            transport_sheet = workbook[sheet_name]
            transport_sheet.delete_rows(2, transport_sheet.max_row)

        for repair in repairs:
            if (repair["transport"]["brand"], repair["transport"]["model"], repair["transport"]["license_plate"]) == (brand, model, license_plate):
                row_data = [
                    f"{brand} {model} {license_plate}",
                    repair["category"],
                    repair["name"],
                    repair["date"],
                    float(repair["amount"]),
                    repair["description"],
                ]
                transport_sheet.append(row_data)

    # –ê–≤—Ç–æ–ø–æ–¥–≥–æ–Ω–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    for sheet in workbook.sheetnames:
        current_sheet = workbook[sheet]
        for col in current_sheet.columns:
            max_length = max((len(str(cell.value)) if cell.value else 0) for cell in col)
            adjusted_width = max_length + 2
            current_sheet.column_dimensions[get_column_letter(col[0].column)].width = adjusted_width

    workbook.save(excel_file_path)
    workbook.close()

# (12) --------------- –ö–û–î –î–õ–Ø "–ü–û–ò–°–ö–ê –ú–ï–°–¢" ---------------

# (12.1) --------------- –ö–û–î –î–õ–Ø "–ü–û–ò–°–ö–ê –ú–ï–°–¢" (–í–í–û–î–ù–´–ï –§–£–ù–ö–¶–ò–ò) ---------------

geolocator = Nominatim(user_agent="geo_bot")

user_locations = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ Yandex.–ö–∞—Ä—Ç—ã
#@log_user_actions
def get_yandex_maps_search_url(latitude, longitude, query):
    base_url = "https://yandex.ru/maps/?"
    search_params = {
        'll': f"{longitude},{latitude}",
        'z': 15,  # –£—Ä–æ–≤–µ–Ω—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
        'text': query,  # –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, '–ê–ó–°'
        'mode': 'search'
    }
    query_string = "&".join([f"{key}={value}" for key, value in search_params.items()])
    return f"{base_url}{query_string}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è URL
#@log_user_actions
def shorten_url(original_url):
    endpoint = 'https://clck.ru/--'
    response = requests.get(endpoint, params={'url': original_url})
    return response.text

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é "–ü–æ–∏—Å–∫ –º–µ—Å—Ç"
@bot.message_handler(func=lambda message: message.text == "–ü–æ–∏—Å–∫ –º–µ—Å—Ç")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ü–æ–∏—Å–∫ –º–µ—Å—Ç')
@track_usage('–ü–æ–∏—Å–∫ –º–µ—Å—Ç')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def send_welcome(message):

    user_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    # –ö–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    button_azs = types.KeyboardButton("–ê–ó–°")
    button_car_wash = types.KeyboardButton("–ê–≤—Ç–æ–º–æ–π–∫–∏")
    button_auto_service = types.KeyboardButton("–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã")
    button_parking = types.KeyboardButton("–ü–∞—Ä–∫–æ–≤–∫–∏")
    button_evacuation = types.KeyboardButton("–≠–≤–∞–∫—É–∞—Ü–∏—è")
    button_gibdd_mreo = types.KeyboardButton("–ì–ò–ë–î–î")
    button_accident_commissioner = types.KeyboardButton("–ö–æ–º–∏—Å—Å–∞—Ä—ã")
    button_impound = types.KeyboardButton("–®—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–∞")  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —à—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–∏

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    item1 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup.add(button_azs, button_car_wash, button_auto_service)
    markup.add(button_parking, button_evacuation, button_gibdd_mreo, button_accident_commissioner, button_impound)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —à—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–∏
    markup.add(item1)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–∏—Å–∫–∞:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–Ω–æ–≤–æ
@bot.message_handler(func=lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ')
#@log_user_actions
def handle_reset_category(message):
    global selected_category
    selected_category = None
    send_welcome(message)

selected_category = None 

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.message_handler(func=lambda message: message.text in {"–ê–ó–°", "–ê–≤—Ç–æ–º–æ–π–∫–∏", "–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã", "–ü–∞—Ä–∫–æ–≤–∫–∏", "–≠–≤–∞–∫—É–∞—Ü–∏—è", "–ì–ò–ë–î–î", "–ö–æ–º–∏—Å—Å–∞—Ä—ã", "–®—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–∞"})
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ê–ó–°')
@check_function_state_decorator('–ê–≤—Ç–æ–º–æ–π–∫–∏')
@check_function_state_decorator('–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã')
@check_function_state_decorator('–ü–∞—Ä–∫–æ–≤–∫–∏')
@check_function_state_decorator('–≠–≤–∞–∫—É–∞—Ü–∏—è')
@check_function_state_decorator('–ì–ò–ë–î–î')
@check_function_state_decorator('–ö–æ–º–∏—Å—Å–∞—Ä—ã')
@check_function_state_decorator('–®—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–∞')
@track_usage('–ê–ó–°')
@track_usage('–ê–≤—Ç–æ–º–æ–π–∫–∏')
@track_usage('–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã')
@track_usage('–ü–∞—Ä–∫–æ–≤–∫–∏')
@track_usage('–≠–≤–∞–∫—É–∞—Ü–∏—è')
@track_usage('–ì–ò–ë–î–î')
@track_usage('–ö–æ–º–∏—Å—Å–∞—Ä—ã')
@track_usage('–®—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–∞')
#@log_user_actions
def handle_menu_buttons(message):
    global selected_category 
    if message.text in {"–ê–ó–°", "–ê–≤—Ç–æ–º–æ–π–∫–∏", "–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã", "–ü–∞—Ä–∫–æ–≤–∫–∏", "–≠–≤–∞–∫—É–∞—Ü–∏—è", "–ì–ò–ë–î–î", "–ö–æ–º–∏—Å—Å–∞—Ä—ã", "–®—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–∞"}:  # –í–∫–ª—é—á–∞–µ–º "–®—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–∞"
        selected_category = message.text 
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_send_location = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
        button_reset_category = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ")
        item1 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        keyboard.add(button_send_location)
        keyboard.add(button_reset_category)
        keyboard.add(item1)
        bot.send_message(message.chat.id, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –í–∞–º –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - *{selected_category.lower()}:*", reply_markup=keyboard, parse_mode="Markdown")
    else:
        selected_category = None
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@bot.message_handler(content_types=['location'])
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏')
@track_usage('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def handle_location(message):
    global selected_category  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ selected_category —è–≤–ª—è–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    user_id = message.chat.id
    latitude = message.location.latitude
    longitude = message.location.longitude

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –∞–Ω—Ç–∏-—Ä–∞–¥–∞—Ä–∞
    if user_tracking.get(user_id, {}).get('tracking', False):
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω—Ç–∏-—Ä–∞–¥–∞—Ä–∞
        user_tracking[user_id]['location'] = message.location

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫–∏–Ω–≥ –∫–∞–º–µ—Ä –¥–ª—è –∞–Ω—Ç–∏-—Ä–∞–¥–∞—Ä–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω
        if not user_tracking[user_id].get('started', False):
            user_tracking[user_id]['started'] = True
            track_user_location(user_id, message.location)

        # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —Ç–∞–∫ –∫–∞–∫ –∞–Ω—Ç–∏-—Ä–∞–¥–∞—Ä –∞–∫—Ç–∏–≤–µ–Ω
        return
    elif selected_category:
        # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç
        try:
            location = geolocator.reverse((latitude, longitude), language='ru', timeout=10)
            address = location.address

            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Yandex.–ö–∞—Ä—Ç—ã
            search_url = get_yandex_maps_search_url(latitude, longitude, selected_category)
            short_search_url = shorten_url(search_url)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = f"üèôÔ∏è *–ë–ª–∏–∂–∞–π—à–∏–µ {selected_category.lower()} –ø–æ –∞–¥—Ä–µ—Å—É:* \n\n{address}\n\n"
            message_text += f"üó∫Ô∏è [–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É]({short_search_url})"

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

            # –°–±—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            selected_category = None

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button_reset_category = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ")
            item1 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            keyboard.add(button_reset_category)
            keyboard.add(item1)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)

        except Exception as e:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    else:
        # –ï—Å–ª–∏ –Ω–∏ –∞–Ω—Ç–∏-—Ä–∞–¥–∞—Ä, –Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é")


#------------------- (–ù–ê–ß–ê–õ–û) –ö–û–î –î–õ–Ø –ü–û–ò–°–ö–ê –ú–ï–°–¢, –†–ê–ë–û–ß–ò–ô, –ù–ï–î–û–î–ï–õ–ê–ù–ù–´–ô –í –ü–õ–ê–ù–ï –ö–ê–¢–ï–ì–û–†–ò–ô –ò –ü–†–û–í–ï–†–ö–ò –í–´–î–ê–ß–ò, –ù–£–ñ–ï–ù API------------------------


# geolocator = Nominatim(user_agent="geo_bot")

# user_locations = {}

# #@log_user_actions
# def calculate_distance(origin, destination):
#     return geodesic(origin, destination).kilometers

# # (12.2) --------------- –ö–û–î –î–õ–Ø "–ü–û–ò–°–ö–ê –ú–ï–°–¢" (–°–û–ö–†–ê–©–ï–ù–ò–ï –°–°–´–õ–û–ö) ---------------

# #@log_user_actions
# def shorten_url(original_url):
#     endpoint = 'https://clck.ru/--'
#     response = requests.get(endpoint, params={'url': original_url})
#     return response.text

# # (12.3) --------------- –ö–û–î –î–õ–Ø "–ü–û–ò–°–ö–ê –ú–ï–°–¢" (–ê–ó–°) ---------------

# #@log_user_actions
# def get_nearby_fuel_stations(latitude, longitude, user_coordinates):
#     api_url = "https://search-maps.yandex.ru/v1/"
#     params = {
#         "apikey": "af145d41-4168-430b-b7d5-392df4d232cc",
#         "text": "–ê–ó–°",
#         "lang": "ru_RU",
#         "ll": f"{longitude},{latitude}",
#         "spn": "0.045,0.045", 
#         "type": "biz"
#     }
#     response = requests.get(api_url, params=params)
#     data = response.json()

#     fuel_stations = []
#     for feature in data["features"]:
#         coordinates = feature["geometry"]["coordinates"]
#         name = feature["properties"]["name"]
#         address = feature["properties"]["description"]
#         fuel_stations.append({"name": name, "coordinates": coordinates, "address": address})

#     return fuel_stations

# # (12.4) --------------- –ö–û–î –î–õ–Ø "–ü–û–ò–°–ö–ê –ú–ï–°–¢" (–ê–í–¢–û–ú–û–ô–ö–ò) ---------------

# #@log_user_actions
# def get_nearby_car_washes(latitude, longitude, user_coordinates):
#     api_url = "https://search-maps.yandex.ru/v1/"
#     params = {
#         "apikey": "af145d41-4168-430b-b7d5-392df4d232cc",
#         "text": "–ê–≤—Ç–æ–º–æ–π–∫–∞",
#         "lang": "ru_RU",
#         "ll": f"{longitude},{latitude}",
#         "spn": "0.045,0.045", 
#         "type": "biz"
#     }
#     response = requests.get(api_url, params=params)
#     data = response.json()

#     car_washes = []
#     for feature in data["features"]:
#         coordinates = feature["geometry"]["coordinates"]
#         name = feature["properties"]["name"]
#         address = feature["properties"]["description"]
#         car_washes.append({"name": name, "coordinates": coordinates, "address": address})

#     return car_washes

# # (12.5) --------------- –ö–û–î –î–õ–Ø "–ü–û–ò–°–ö–ê –ú–ï–°–¢" (–ê–í–¢–û–°–ï–†–í–ò–°) ---------------

# #@log_user_actions
# def get_nearby_auto_services(latitude, longitude, user_coordinates):
#     api_url = "https://search-maps.yandex.ru/v1/"
#     params = {
#         "apikey": "af145d41-4168-430b-b7d5-392df4d232cc",
#         "text": "–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å",
#         "lang": "ru_RU",
#         "ll": f"{longitude},{latitude}",
#         "spn": "0.045,0.045",
#         "type": "biz"
#     }
#     response = requests.get(api_url, params=params)
#     data = response.json()

#     auto_services = []
#     for feature in data.get("features", []):
#         coordinates = feature.get("geometry", {}).get("coordinates")
#         name = feature.get("properties", {}).get("name")
#         address = feature.get("properties", {}).get("description", "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
#         if coordinates and name:
#             auto_services.append({"name": name, "coordinates": coordinates, "address": address})

#     return auto_services

# # (12.6) --------------- –ö–û–î –î–õ–Ø "–ü–û–ò–°–ö–ê –ú–ï–°–¢" (–ü–ê–†–ö–û–í–ö–ò) ---------------

# #@log_user_actions
# def get_nearby_parking(latitude, longitude, user_coordinates):
#     api_url = "https://search-maps.yandex.ru/v1/"
#     params = {
#         "apikey": "af145d41-4168-430b-b7d5-392df4d232cc",
#         "text": "–ü–∞—Ä–∫–æ–≤–∫–∏",
#         "lang": "ru_RU",
#         "ll": f"{longitude},{latitude}",
#         "spn": "0.045,0.045",
#         "type": "biz"
#     }
#     response = requests.get(api_url, params=params)
#     data = response.json()

#     parking_places = []
#     for feature in data["features"]:
#         coordinates = feature["geometry"]["coordinates"]
#         name = feature["properties"]["name"]
#         address = feature["properties"]["description"]
#         parking_places.append({"name": name, "coordinates": coordinates, "address": address})

#     return parking_places

# # (12.7) --------------- –ö–û–î –î–õ–Ø "–ü–û–ò–°–ö–ê –ú–ï–°–¢" (–≠–í–ê–ö–£–ê–¢–û–†) ---------------

# #@log_user_actions
# def get_nearby_evacuation_services(latitude, longitude, user_coordinates):
#     api_url = "https://search-maps.yandex.ru/v1/"
#     params = {
#         "apikey": "af145d41-4168-430b-b7d5-392df4d232cc",
#         "text": "–≠–≤–∞–∫—É–∞—Ü–∏—è",
#         "lang": "ru_RU",
#         "ll": f"{longitude},{latitude}",
#         "spn": "0.045,0.045",
#         "type": "biz"
#     }
#     response = requests.get(api_url, params=params)
#     data = response.json()

#     evacuation_services = []
#     for feature in data["features"]:
#         coordinates = feature["geometry"]["coordinates"]
#         name = feature["properties"]["name"]
#         address = feature["properties"]["description"]
#         evacuation_services.append({"name": name, "coordinates": coordinates, "address": address})

#     return evacuation_services

# # (12.8) --------------- –ö–û–î –î–õ–Ø "–ü–û–ò–°–ö–ê –ú–ï–°–¢" (–ì–ò–ë–î–î) ---------------

# #@log_user_actions
# def get_nearby_gibdd_mreo(latitude, longitude, user_coordinates):
#     api_url = "https://search-maps.yandex.ru/v1/"
#     params = {
#         "apikey": "af145d41-4168-430b-b7d5-392df4d232cc",
#         "text": "–ì–ò–ë–î–î",
#         "lang": "ru_RU",
#         "ll": f"{longitude},{latitude}",
#         "spn": "0.045,0.045",
#         "type": "biz"
#     }
#     response = requests.get(api_url, params=params)
#     data = response.json()

#     gibdd_mreo_offices = []
#     for feature in data["features"]:
#         coordinates = feature["geometry"]["coordinates"]
#         name = feature["properties"]["name"]
#         address = feature["properties"]["description"]
#         gibdd_mreo_offices.append({"name": name, "coordinates": coordinates, "address": address})

#     return gibdd_mreo_offices

# # (12.9) --------------- –ö–û–î –î–õ–Ø "–ü–û–ò–°–ö–ê –ú–ï–°–¢" (–ö–û–ú–ò–°–°–ê–†–´) ---------------

# #@log_user_actions
# def get_nearby_accident_commissioner(latitude, longitude, user_coordinates):
#     api_url = "https://search-maps.yandex.ru/v1/"
#     params = {
#         "apikey": "af145d41-4168-430b-b7d5-392df4d232cc",
#         "text": "–ö–æ–º–∏—Å—Å–∞—Ä—ã",
#         "lang": "ru_RU",
#         "ll": f"{longitude},{latitude}",
#         "spn": "0.045,0.045",
#         "type": "biz"
#     }
#     response = requests.get(api_url, params=params)
#     data = response.json()

#     accident_commissioners = []
#     for feature in data["features"]:
#         coordinates = feature["geometry"]["coordinates"]
#         name = feature["properties"]["name"]
#         address = feature["properties"]["description"]
#         accident_commissioners.append({"name": name, "coordinates": coordinates, "address": address})

#     return accident_commissioners

# # (12.10) --------------- –ö–û–î –î–õ–Ø "–ü–û–ò–°–ö–ê –ú–ï–°–¢" (–û–ë–†–ê–ë–û–¢–ß–ò–ö "–ü–û–ò–°–ö –ú–ï–°–¢") ---------------

# @bot.message_handler(func=lambda message: message.text == "–ü–æ–∏—Å–∫ –º–µ—Å—Ç")
# @restricted
# @track_user_activity
# @check_chat_state
# @track_usage('–ü–æ–∏—Å–∫ –º–µ—Å—Ç')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
# #@log_user_actions
# def send_welcome(message):
#     user_id = message.chat.id
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

#     button_azs = types.KeyboardButton("–ê–ó–°")
#     button_car_wash = types.KeyboardButton("–ê–≤—Ç–æ–º–æ–π–∫–∏")
#     button_auto_service = types.KeyboardButton("–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã")
#     button_parking = types.KeyboardButton("–ü–∞—Ä–∫–æ–≤–∫–∏")
#     button_evacuation = types.KeyboardButton("–≠–≤–∞–∫—É–∞—Ü–∏—è")
#     button_gibdd_mreo = types.KeyboardButton("–ì–ò–ë–î–î")
#     button_accident_commissioner = types.KeyboardButton("–ö–æ–º–∏—Å—Å–∞—Ä—ã")

#     item1 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

#     markup.add(button_azs, button_car_wash, button_auto_service)
#     markup.add(button_parking, button_evacuation, button_gibdd_mreo, button_accident_commissioner)
#     markup.add(item1)

#     bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–∏—Å–∫–∞:", reply_markup=markup)

# # (12.11) --------------- –ö–û–î –î–õ–Ø "–ü–û–ò–°–ö–ê –ú–ï–°–¢" (–û–ë–†–ê–ë–û–¢–ß–ò–ö "–í–´–ë–û–† –ö–ê–¢–ï–ì–û–†–ò–ò –ó–ê–ù–û–í–û") ---------------

# @bot.message_handler(func=lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ")
# @restricted
# @track_user_activity
# @check_chat_state
# #@log_user_actions
# def handle_reset_category(message):
#     global selected_category
#     selected_category = None
#     send_welcome(message)

# selected_category = None 

# # (12.12) --------------- –ö–û–î –î–õ–Ø "–ü–û–ò–°–ö–ê –ú–ï–°–¢" (–û–ë–†–ê–ë–û–¢–ß–ò–ö "–î–õ–Ø –í–´–ë–û–†–ê –ö–ê–¢–ï–ì–û–†–ò–ò") ---------------

# @bot.message_handler(func=lambda message: message.text in {"–ê–ó–°", "–ê–≤—Ç–æ–º–æ–π–∫–∏", "–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã", "–ü–∞—Ä–∫–æ–≤–∫–∏", "–≠–≤–∞–∫—É–∞—Ü–∏—è", "–ì–ò–ë–î–î", "–ö–æ–º–∏—Å—Å–∞—Ä—ã"})
# @restricted
# @track_user_activity
# @check_chat_state
# #@log_user_actions
# def handle_menu_buttons(message):
#     global selected_category 
#     if message.text in {"–ê–ó–°", "–ê–≤—Ç–æ–º–æ–π–∫–∏", "–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã", "–ü–∞—Ä–∫–æ–≤–∫–∏", "–≠–≤–∞–∫—É–∞—Ü–∏—è", "–ì–ò–ë–î–î", "–ö–æ–º–∏—Å—Å–∞—Ä—ã"}:
#         selected_category = message.text 
#         keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#         button_send_location = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
#         button_reset_category = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ")
#         item1 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
#         keyboard.add(button_send_location)
#         keyboard.add(button_reset_category)
#         keyboard.add(item1)
#         bot.send_message(message.chat.id, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –í–∞–º –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö {selected_category.lower()}.", reply_markup=keyboard)
#     else:
#         selected_category = None
#         bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é.")

# # (12.13) --------------- –ö–û–î –î–õ–Ø "–ü–û–ò–°–ö–ê –ú–ï–°–¢" (–û–ë–†–ê–ë–û–¢–ß–ò–ö "–ì–ï–û–õ–û–ö–ê–¶–ò–Ø") ---------------

# @bot.message_handler(content_types=['location'])
# @restricted
# @track_user_activity
# @check_chat_state
# @check_function_state_decorator('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏')
# @track_usage('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
# #@log_user_actions
# def handle_location(message):
#     global selected_category, selected_location, user_locations
#     latitude = message.location.latitude
#     longitude = message.location.longitude
#     user_id = message.from_user.id

#     try:
#         location = geolocator.reverse((latitude, longitude), language='ru', timeout=10)
#         address = location.address

#         if selected_category is None:
#             bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é.")
#             return

#         user_locations[user_id] = {"address": address, "coordinates": (latitude, longitude)}

#         if selected_category == "–ê–ó–°":
#             locations = get_nearby_fuel_stations(latitude, longitude, user_locations[user_id]["coordinates"])
#         elif selected_category == "–ê–≤—Ç–æ–º–æ–π–∫–∏":
#             locations = get_nearby_car_washes(latitude, longitude, user_locations[user_id]["coordinates"])
#         elif selected_category == "–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã":
#             locations = get_nearby_auto_services(latitude, longitude, user_locations[user_id]["coordinates"])
#         elif selected_category == "–ü–∞—Ä–∫–æ–≤–∫–∏":
#             locations = get_nearby_parking(latitude, longitude, user_locations[user_id]["coordinates"])
#         elif selected_category == "–≠–≤–∞–∫—É–∞—Ü–∏—è":
#             locations = get_nearby_evacuation_services(latitude, longitude, user_locations[user_id]["coordinates"])
#         elif selected_category == "–ì–ò–ë–î–î":
#             locations = get_nearby_gibdd_mreo(latitude, longitude, user_locations[user_id]["coordinates"])
#         elif selected_category == "–ö–æ–º–∏—Å—Å–∞—Ä—ã":
#             locations = get_nearby_accident_commissioner(latitude, longitude, user_locations[user_id]["coordinates"])

#         selected_location = {"address": address, "coordinates": (latitude, longitude)}

#         # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–º–∞–π–ª–æ–≤, –≥–∏–ø–µ—Ä—Å—Å—ã–ª–æ–∫ –∏ Markdown
#         message_text = f"üìç *–ë–ª–∏–∂–∞–π—à–∏–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É:*\n\nüè† *{address}*\n\n"
#         message_text += f"üîç *{selected_category}:*\n\n"

#         for location in locations:
#             name = location["name"]
#             coordinates = location["coordinates"]
#             address = location["address"]

#             # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã
#             yandex_maps_url = f"https://yandex.ru/maps/?rtext={user_locations[user_id]['coordinates'][0]},{user_locations[user_id]['coordinates'][1]}~{coordinates[1]},{coordinates[0]}&l=map&rtt=auto&ruri=~ymapsbm1%3A%2F%2Forg%3Foid%3D1847883008%26name%3D{quote(name)}%26address%3D{quote(address)}\n\n"
#             short_yandex_maps_url = shorten_url(yandex_maps_url)

#             # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π
#             message_text += f"üöó *{name}* ({address}):\n[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ]({short_yandex_maps_url})\n\n"

#         # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å Markdown
#         bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

#         selected_category = None

#         keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#         button_reset_category = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ")
#         item1 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
#         keyboard.add(button_reset_category)
#         keyboard.add(item1)
#         bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)

#     except Exception as e:
#         bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")


#-------------------(–ö–û–ù–ï–¶) –ö–û–î –î–õ–Ø –ü–û–ò–°–ö–ê –ú–ï–°–¢, –†–ê–ë–û–ß–ò–ô, –ù–ï–î–û–î–ï–õ–ê–ù–ù–´–ô –í –ü–õ–ê–ù–ï –ö–ê–¢–ï–ì–û–†–ò–ô –ò –ü–†–û–í–ï–†–ö–ò –í–´–î–ê–ß–ò, –ù–£–ñ–ï–ù API------------------------

#-----------------------------------------------------------------------------------------------------------------------------------


# (13) --------------- –ö–û–î –î–õ–Ø "–ü–û–ò–°–ö–ê –¢–†–ê–ù–°–ü–û–†–¢–ê" ---------------

# (13.1) --------------- –ö–û–î –î–õ–Ø "–ü–û–ò–°–ö–ê –¢–†–ê–ù–°–ü–û–†–¢–ê" (–°–û–•–†–ê–ù–ï–ù–ò–ï –ò –ó–ê–ì–†–£–ó–ö–ê –ì–ï–û–õ–û–ö–ê–¶–ò–ò) ---------------

LATITUDE_KEY = 'latitude'
LONGITUDE_KEY = 'longitude'

def save_location_data(location_data):
    folder_path = "data base/findtransport"
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è
    with open(os.path.join(folder_path, "location_data.json"), "w") as json_file:
        json.dump(location_data, json_file, indent=4)


def load_location_data():
    try:
        with open(os.path.join("data base/findtransport", "location_data.json"), "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

location_data = load_location_data()

# (13.2) --------------- –ö–û–î –î–õ–Ø "–ü–û–ò–°–ö–ê –¢–†–ê–ù–°–ü–û–†–¢–ê" (–û–ë–†–ê–ë–û–¢–ß–ò–ö "–ù–ê–ô–¢–ò –¢–†–ê–ù–°–ü–û–†–¢") ---------------

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
@bot.message_handler(func=lambda message: message.text == "–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def start_transport_search(message):

    global location_data
    user_id = str(message.from_user.id)

    # –ï—Å–ª–∏ —É–∂–µ –Ω–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å (–Ω–∞—á–∞–ª—å–Ω–∞—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞)
    if user_id in location_data and location_data[user_id].get('start_location') is not None and location_data[user_id].get('end_location') is None:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
        item2 = types.KeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
        item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1, item2)
        markup.add(item3)
        bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å?", reply_markup=markup)
        bot.register_next_step_handler(message, continue_or_restart)
    else:
        start_new_transport_search(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
#@log_user_actions
def start_new_transport_search(message):
    global location_data
    user_id = str(message.from_user.id)

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
    location_data[user_id] = {'start_location': None, 'end_location': None}
    save_location_data(location_data)

    request_transport_location(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
#@log_user_actions
def request_transport_location(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)
    item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)

    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_car_location)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
#@log_user_actions
def continue_or_restart(message):
    if message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        # –ü–æ—Å–ª–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–µ—Ä–Ω–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
        request_user_location(message)
    elif message.text == "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        start_new_transport_search(message)
    else:
        return_to_menu(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#@log_user_actions
def request_user_location(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)
    item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)

    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_car_location)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(content_types=['location'])
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏')
@track_usage('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def handle_car_location(message):
    global location_data
    user_id = str(message.from_user.id)

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if user_id not in location_data:
        location_data[user_id] = {'start_location': None, 'end_location': None}

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    if location_data[user_id]['start_location'] is None:
        if message.location is not None:
            location_data[user_id]['start_location'] = {
                LATITUDE_KEY: message.location.latitude,
                LONGITUDE_KEY: message.location.longitude
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –Ω–∞—á–∞—Ç
            location_data[user_id]['process'] = 'in_progress'
            save_location_data(location_data)

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            request_user_location(message)
        else:
            handle_location_error(message)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif location_data[user_id]['end_location'] is None:
        if message.location is not None:
            location_data[user_id]['end_location'] = {
                LATITUDE_KEY: message.location.latitude,
                LONGITUDE_KEY: message.location.longitude
            }

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –¥–∞–Ω–Ω—ã–µ
            location_data[user_id]['process'] = 'completed'
            save_location_data(location_data)

            send_map_link(message.chat.id, location_data[user_id]['start_location'], location_data[user_id]['end_location'])
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
            item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            markup.add(item1)
            markup.add(item2)
            bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –µ—â–µ —Ä–∞–∑", reply_markup=markup)
        else:
            handle_location_error(message)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
#@log_user_actions
def handle_location_error(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    bot.register_next_step_handler(message, handle_car_location)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç—ã —Å –º–∞—Ä—à—Ä—É—Ç–æ–º
#@log_user_actions
def send_map_link(chat_id, start_location, end_location):
    map_url = f"https://yandex.ru/maps/?rtext={end_location['latitude']},{end_location['longitude']}~{start_location['latitude']},{start_location['longitude']}&rtt=pd"
    short_url = shorten_url(map_url)
    bot.send_message(chat_id, f"üìç *–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:* [—Å—Å—ã–ª–∫–∞]({short_url})", parse_mode="Markdown")
    
# (14) --------------- –ö–û–î –î–õ–Ø "–ü–û–ò–°–ö –†–ï–ì–ò–û–ù–ê –ü–û –ì–û–°–ù–û–ú–ï–†–£" ---------------

ALLOWED_LETTERS = "–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•ABEKMHOPCTYX"  # –î–æ–ø—É—Å—Ç–∏–º—ã–µ –±—É–∫–≤—ã –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –≥–æ—Å–Ω–æ–º–µ—Ä–æ–≤

#@log_user_actions
def is_valid_car_number(car_number):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ—Å–Ω–æ–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç—É:
    1 –±—É–∫–≤–∞, 3 —Ü–∏—Ñ—Ä—ã, 2 –±—É–∫–≤—ã, 2 –∏–ª–∏ 3 —Ü–∏—Ñ—Ä—ã.
    """
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –ê123–ê–ê12 –∏–ª–∏ –ê123–ê–ê123
    pattern = rf"^[{ALLOWED_LETTERS}]\d{{3}}[{ALLOWED_LETTERS}]{{2}}\d{{2,3}}$"
    return bool(re.match(pattern, car_number))

@bot.message_handler(func=lambda message: message.text == "–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞')
@track_usage('–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def handle_start4(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    bot.send_message(
        message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (8 - 9 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ –∫–æ–¥–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞ (2 - 3 —Ü–∏—Ñ—Ä—ã), —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç–æ–π:",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, process_input)

#@log_user_actions
def process_input(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_input)
        return

    text = message.text.strip()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –µ—â–µ")
    item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)

    inputs = [i.strip() for i in text.split(',')]
    responses = []

    for input_item in inputs:
        if input_item.isdigit() and (2 <= len(input_item) <= 3):
            region_code = input_item
            if region_code in regions:
                region_name = regions[region_code]
                response = f"üîç *–†–µ–≥–∏–æ–Ω –¥–ª—è –∫–æ–¥–∞ {region_code}:*\n{region_name}\n\n\n"
            else:
                response = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω –¥–ª—è –∫–æ–¥–∞: *{region_code}*\n\n\n"
        
        elif 8 <= len(input_item) <= 9 and is_valid_car_number(input_item.upper()):
            car_number = input_item.upper()
            region_code = car_number[-3:] if len(car_number) == 9 else car_number[-2:]

            if region_code in regions:
                region_name = regions[region_code]
                avtocod_url = f"https://avtocod.ru/proverkaavto/{car_number}?rd=GRZ"
                short_url = shorten_url(avtocod_url)
                
                response = (
                    f"üîç –†–µ–≥–∏–æ–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞ `{car_number}`: {region_name}\n"
                    f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ AvtoCod —Å –ø–æ–∏—Å–∫–æ–º]({short_url})\n\n\n"
                )
            else:
                response = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞: `{car_number}`\n\n\n"
        
        else:
            response = f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è `{input_item}`. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–æ—Å–Ω–æ–º–µ—Ä –∏–ª–∏ –∫–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞\n\n\n"

        responses.append(response)

    final_response = "".join(responses)
    bot.send_message(message.chat.id, final_response, reply_markup=markup, parse_mode="Markdown")
    bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ –∏–ª–∏ –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.register_next_step_handler(message, handle_action_after_response)

#@log_user_actions
def handle_action_after_response(message):
    if message.text == "–í–≤–µ—Å—Ç–∏ –µ—â–µ":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1)
        bot.send_message(
            message.chat.id,
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (8 - 9 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ –∫–æ–¥–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞ (2 - 3 —Ü–∏—Ñ—Ä—ã), —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç–æ–π:",
            reply_markup=markup
        )
        bot.register_next_step_handler(message, process_input)
    elif message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:")
        bot.register_next_step_handler(message, handle_action_after_response)


# (15) --------------- –ö–û–î –î–õ–Ø "–ü–û–ì–û–î–´" ---------------

# (15.1) --------------- –ö–û–î –î–õ–Ø "–ü–û–ì–û–î–´" (–í–í–û–î–ù–´–ï –§–£–ù–ö–¶–ò–ò) ---------------

# API –∫–ª—é—á –æ—Ç OpenWeatherMap
API_KEY = '2949ae1ef99c838462d16e7b0caf65b5'

WEATHER_URL = 'http://api.openweathermap.org/data/2.5/weather'

FORECAST_URL = 'http://api.openweathermap.org/data/2.5/forecast'

MAX_MESSAGE_LENGTH = 4096

user_data = {}

# (15.1) --------------- –ö–û–î –î–õ–Ø "–ü–û–ì–û–î–´" (–û–ë–†–ê–ë–û–¢–ß–ò–ö "–ü–û–ì–û–î–ê") ---------------

@bot.message_handler(func=lambda message: message.text == "–ü–æ–≥–æ–¥–∞")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ü–æ–≥–æ–¥–∞')
@track_usage('–ü–æ–≥–æ–¥–∞')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def handle_start_5(message):
    try:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(telebot.types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True))
        markup.row(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:", reply_markup=markup)
        bot.register_next_step_handler(message, handle_location_5)
    
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@bot.message_handler(content_types=['location'])
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏')
@track_usage('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def handle_location_5(message):
    try:
        if message.location:
            latitude = message.location.latitude
            longitude = message.location.longitude

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            save_user_location(message.chat.id, latitude, longitude, None)  # city_code –ø–æ–∫–∞ None

            markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
            markup.row('–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞')
            markup.row('–ù–µ–¥–µ–ª—è', '–ú–µ—Å—è—Ü')
            markup.row('–î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ')
            markup.row('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=markup)
        elif message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            return_to_menu(message)
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑")
            bot.register_next_step_handler(message, handle_location_5)
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


import telebot
import threading
import schedule
import time
import json
import requests
import traceback
from datetime import datetime

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É notifications.json
notifications_file_path = 'data base/notifications/notifications.json'

def save_user_location(chat_id, latitude, longitude, city_code):
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        with open('data base/notifications/notifications.json', 'r') as f:
            notifications = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        notifications = {}

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if str(chat_id) not in notifications:
        notifications[str(chat_id)] = {
            "latitude": None,
            "longitude": None,
            "city_code": None
        }

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if latitude is not None:
        notifications[str(chat_id)]["latitude"] = latitude
    if longitude is not None:
        notifications[str(chat_id)]["longitude"] = longitude
    if city_code is not None:
        notifications[str(chat_id)]["city_code"] = city_code

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
    with open('data base/notifications/notifications.json', 'w') as f:
        json.dump(notifications, f, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
def load_user_locations():
    file_path = 'data base/notifications/notifications.json'
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        return {}

import traceback

#@log_user_actions
def get_city_name(latitude, longitude):
    try:
        geocode_url = "https://eu1.locationiq.com/v1/reverse.php"
        params = {
            'key': 'pk.fa5c52bb6b9e1b801d72b75d151aea63',  # –í–∞—à API –∫–ª—é—á LocationIQ
            'lat': latitude,
            'lon': longitude,
            'format': 'json',
            'accept-language': 'ru'
        }
        response = requests.get(geocode_url, params=params)
        data = response.json()

        if response.status_code == 200:
            city = data.get("address", {}).get("city", None)
            return city or f"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ ({latitude}, {longitude})"
        return None
    except:
        return None

#@log_user_actions
def get_current_weather(coords):
    try:
        city_name = get_city_name(coords['latitude'], coords['longitude'])
        params = {
            'lat': coords['latitude'],
            'lon': coords['longitude'],
            'appid': API_KEY,
            'units': 'metric',
            'lang': 'ru'
        }
        response = requests.get(WEATHER_URL, params=params, timeout=30)
        data = response.json()

        if response.status_code == 200:
            temperature = round(data['main']['temp'])
            feels_like = round(data['main']['feels_like'])
            humidity = data['main']['humidity']
            pressure = data['main']['pressure']
            wind_speed = data['wind']['speed']
            description = translate_weather_description(data['weather'][0]['description'])

            current_time = datetime.now().strftime("%H:%M")
            current_date = datetime.now().strftime("%d.%m.%Y")

            return (
                f"*–í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!*üîî\n\n\n"
                f"*–ü–æ–≥–æ–¥–∞ –Ω–∞ {current_date} –≤ {current_time}*:\n"
                f"*(–≥. {city_name}; {coords['latitude']}, {coords['longitude']})*\n\n"
                f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temperature}¬∞C\n"
                f"üå¨Ô∏è *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {feels_like}¬∞C\n"
                f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {humidity}%\n"
                f"„ÄΩÔ∏è *–î–∞–≤–ª–µ–Ω–∏–µ:* {pressure} –º–º —Ä—Ç. —Å—Ç.\n"
                f"üí® *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {wind_speed} –º/—Å\n"
                f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
            )
        else:
            return None
    except:
        return None

#@log_user_actions
def get_average_fuel_prices(city_code):
    fuel_prices = {}
    file_path = f'data base/azs/{city_code}_table_azs_data.json'

    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            prices_data = json.load(f)

            for entry in prices_data:
                fuel_type = entry[1]  # –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞
                price = entry[2]  # –¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞

                try:
                    price = float(price)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—É –≤ —á–∏—Å–ª–æ (–µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ)
                except ValueError:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞

                if fuel_type not in fuel_prices:
                    fuel_prices[fuel_type] = []

                fuel_prices[fuel_type].append(price)

    except FileNotFoundError:
        pass
        return None
    except json.JSONDecodeError:
        pass
        return None

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö —Ü–µ–Ω
    average_prices = {fuel: sum(prices) / len(prices) for fuel, prices in fuel_prices.items()}

    return average_prices

def load_city_names(file_path):
    city_names = {}
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            for line in file:
                # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –µ–≥–æ –∫–æ–¥
                city_data = line.strip().split(' - ')
                if len(city_data) == 2:
                    city_name, city_code = city_data
                    city_names[city_code] = city_name  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
    except FileNotFoundError:
        pass
    except Exception as e:
        pass
    
    return city_names

#@log_user_actions
def send_weather_notifications():
    user_locations = load_user_locations()
    city_names = load_city_names('files/combined_cities.txt')  # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
    
    for chat_id, coords in user_locations.items():
        weather_message = get_current_weather(coords)
        
        if weather_message:
            city_code = coords.get('city_code')
            city_name = city_names.get(city_code, city_code)  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
            average_prices = get_average_fuel_prices(city_code)

             # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            current_time = datetime.now().strftime("%d.%m.%Y –≤ %H:%M") 

            fuel_prices_message = ""
            if average_prices:
                fuel_prices_message = "\n*–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ (–≥. {}) –Ω–∞ –¥–∞—Ç—É {}:*\n\n".format(city_name, current_time)
                for fuel_type, price in average_prices.items():
                    fuel_prices_message += f"‚õΩ *{fuel_type}:* {price:.2f} —Ä—É–±./–ª.\n"

            try:
                bot.send_message(chat_id, weather_message + fuel_prices_message, parse_mode="Markdown")
            except Exception as e:
                pass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
schedule.every().day.at("07:30").do(send_weather_notifications)
schedule.every().day.at("13:00").do(send_weather_notifications)
schedule.every().day.at("17:00").do(send_weather_notifications)
schedule.every().day.at("20:00").do(send_weather_notifications)

@bot.message_handler(func=lambda message: message.text in ['–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞', '–ù–µ–¥–µ–ª—è', '–ú–µ—Å—è—Ü', '–î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ'])
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–°–µ–≥–æ–¥–Ω—è')
@check_function_state_decorator('–ó–∞–≤—Ç—Ä–∞')
@check_function_state_decorator('–ù–µ–¥–µ–ª—è')
@check_function_state_decorator('–ú–µ—Å—è—Ü')
@check_function_state_decorator('–î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ')
@track_usage('–°–µ–≥–æ–¥–Ω—è')
@track_usage('–ó–∞–≤—Ç—Ä–∞')
@track_usage('–ù–µ–¥–µ–ª—è')
@track_usage('–ú–µ—Å—è—Ü')
@track_usage('–î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ')
#@log_user_actions
def handle_period_5(message):
    period = message.text.lower()
    chat_id = message.chat.id
    user_locations = load_user_locations()  # –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    coords = user_locations.get(str(chat_id))  # –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if coords is None:
        bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑")
        return

    if period == '–î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ':
        user_data.pop(chat_id, None)
        handle_start_5(message)
        return

    if message.text == "–î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ":
        handle_start_5(message)
        return

    if coords:
        if period == '—Å–µ–≥–æ–¥–Ω—è':
            send_weather(chat_id, coords, WEATHER_URL)
        elif period == '–∑–∞–≤—Ç—Ä–∞':
            send_forecast_daily(chat_id, coords, FORECAST_URL, 1)
        elif period == '–Ω–µ–¥–µ–ª—è':
            send_forecast_weekly(chat_id, coords, FORECAST_URL, 8)
        elif period == '–º–µ—Å—è—Ü':
            send_forecast_monthly(chat_id, coords, FORECAST_URL, 31)

#@log_user_actions
def send_weather(chat_id, coords, url):
    try:
        # –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
        params = {
            'lat': coords['latitude'],
            'lon': coords['longitude'],
            'appid': API_KEY,
            'units': 'metric'  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 'metric' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –¶–µ–ª—å—Å–∏—è—Ö
        }
        response = requests.get(url, params=params)
        data = response.json()

        if response.status_code == 200:
            temperature = round(data['main']['temp'])
            feels_like = round(data['main']['feels_like'])
            humidity = data['main']['humidity']
            pressure = data['main']['pressure']
            wind_speed = data['wind']['speed']
            description = translate_weather_description(data['weather'][0]['description'])

            current_time = datetime.now().strftime("%H:%M")
            current_date = datetime.now().strftime("%d.%m.%Y")

            message = (
                f"*–ü–æ–≥–æ–¥–∞ –Ω–∞ {current_date} –≤ {current_time}:*\n\n"
                f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temperature}¬∞C\n"
                f"üå¨Ô∏è *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {feels_like}¬∞C\n"
                f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {humidity}%\n"
                f"„ÄΩÔ∏è *–î–∞–≤–ª–µ–Ω–∏–µ:* {pressure} –º–º —Ä—Ç. —Å—Ç.\n"
                f"üí® *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {wind_speed} –º/—Å\n"
                f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
            )
            bot.send_message(chat_id, message, parse_mode="Markdown")
            send_forecast_remaining_day(chat_id, coords, FORECAST_URL)
        else:
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

#@log_user_actions
def send_forecast_remaining_day(chat_id, coords, url):
    try:
        params = {
            'lat': coords['latitude'],
            'lon': coords['longitude'],
            'appid': API_KEY,
            'units': 'metric',
            'lang': 'ru'
        }
        response = requests.get(url, params=params, timeout=30)
        data = response.json()

        if response.status_code == 200:
            forecasts = data['list']
            now = datetime.now()
            message = "*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –¥–Ω—è:*\n\n"

            for forecast in forecasts:
                date_time = datetime.strptime(forecast['dt_txt'], "%Y-%m-%d %H:%M:%S")
                
                # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                if now.date() == date_time.date() and date_time > now:
                    formatted_date = date_time.strftime("%d.%m.%Y")
                    formatted_time = date_time.strftime("%H:%M")
                    temperature = round(forecast['main']['temp'])
                    feels_like = round(forecast['main']['feels_like'])
                    humidity = forecast['main']['humidity']
                    pressure = forecast['main']['pressure']
                    wind_speed = forecast['wind']['speed']
                    description = translate_weather_description(forecast['weather'][0]['description'])

                    message += (
                        f"*–ü–æ–≥–æ–¥–∞ –Ω–∞ {formatted_date} –≤ {formatted_time}:*\n\n"
                        f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temperature}¬∞C\n"
                        f"üå¨ *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {feels_like}¬∞C\n"
                        f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {humidity}%\n"
                        f"„ÄΩÔ∏è *–î–∞–≤–ª–µ–Ω–∏–µ:* {pressure} –º–º —Ä—Ç. —Å—Ç.\n"
                        f"üí® *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {wind_speed} –º/—Å\n"
                        f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
                    )

            if message == "*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –¥–Ω—è:*\n\n":
                message = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –¥–Ω—è"

            bot.send_message(chat_id, message, parse_mode="Markdown")
        else:
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –¥–Ω—è")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


# (15.6) --------------- –ö–û–î –î–õ–Ø "–ü–û–ì–û–î–´" (–§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–í–û–î–ê) ---------------

#@log_user_actions
def translate_weather_description(english_description):
    translation_dict = {
        'clear sky': '—è—Å–Ω–æ–µ –Ω–µ–±–æ',
        'few clouds': '–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
        'scattered clouds': '—Ä–∞—Å—Å–µ—è–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞',
        'broken clouds': '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏',
        'shower rain': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
        'rain': '–¥–æ–∂–¥—å',
        'thunderstorm': '–≥—Ä–æ–∑–∞',
        'snow': '—Å–Ω–µ–≥',
        'mist': '—Ç—É–º–∞–Ω',
        'light snow': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥',
        'overcast clouds': '–ø–∞—Å–º—É—Ä–Ω–æ',
        'light snow': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥',
        'snow': '—Å–Ω–µ–≥',
        'heavy snow': '—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥',
    }

    return translation_dict.get(english_description, english_description)

# (15.7) --------------- –ö–û–î –î–õ–Ø "–ü–û–ì–û–î–´" (–§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –ü–†–û–ì–ù–û–ó–ê) ---------------

#@log_user_actions
def send_forecast(chat_id, coords, url, days=1):
    try:
        params = {
            'lat': coords['latitude'],
            'lon': coords['longitude'],
            'appid': API_KEY,
        }
        response = requests.get(url, params=params)
        data = response.json()

        if response.status_code == 200:
            forecasts = data['list'][:days * 8]
            message = "*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:*\n"

            for forecast in forecasts:
                date_time = datetime.strptime(forecast['dt_txt'], "%Y-%m-%d %H:%M:%S")
                formatted_date = date_time.strftime("%d-%m-%Y %H:%M:%S")
                temperature = round(forecast['main']['temp'] - 273.15)
                feels_like = round(forecast['main']['feels_like'] - 273.15)
                humidity = forecast['main']['humidity']
                pressure = forecast['main']['pressure']
                wind_speed = forecast['wind']['speed']
                description = translate_weather_description(forecast['weather'][0]['description'])

                message += (
                    f"{formatted_date}:\n"
                    f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temperature}¬∞C\n"
                    f"üå¨Ô∏è *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {feels_like}¬∞C\n"
                    f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {humidity}%\n"
                    f"„ÄΩÔ∏è *–î–∞–≤–ª–µ–Ω–∏–µ:* {pressure} –º–º —Ä—Ç. —Å—Ç\n"
                    f"üí® *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {wind_speed} –º/—Å\n"
                    f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
                )

            message_chunks = [message[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(message), MAX_MESSAGE_LENGTH)]

            for chunk in message_chunks:
                bot.send_message(chat_id, chunk, parse_mode="Markdown")
        else:
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

# (15.8) --------------- –ö–û–î –î–õ–Ø "–ü–û–ì–û–î–´" (–§–£–ù–ö–¶–ò–Ø –ü–û–ì–û–î–´ –ù–ê –ó–ê–í–¢–†–ê) ---------------

# ---------- –ü–†–û–ì–ù–û–ó –ù–ê –ó–ê–í–¢–†–ê -----------
#@log_user_actions
def send_forecast_daily(chat_id, coords, url, days_ahead):
    try:
        params = {
            'lat': coords['latitude'],
            'lon': coords['longitude'],
            'appid': API_KEY,
            'units': 'metric',
            'lang': 'ru'
        }
        response = requests.get(url, params=params, timeout=30)
        data = response.json()

        if response.status_code == 200:
            forecast = data['list'][days_ahead * 8]
            date_time = datetime.strptime(forecast['dt_txt'], "%Y-%m-%d %H:%M:%S")
            temperature = round(forecast['main']['temp'])
            feels_like = round(forecast['main']['feels_like'])
            humidity = forecast['main']['humidity']
            pressure = forecast['main']['pressure']
            wind_speed = forecast['wind']['speed']
            description = translate_weather_description(forecast['weather'][0]['description'])

            message = (
                f"*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {date_time.strftime('%d.%m.%Y')}*\n\n"
                f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temperature}¬∞C\n"
                f"üå¨Ô∏è *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {feels_like}¬∞C\n"
                f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {humidity}%\n"
                f"„ÄΩÔ∏è *–î–∞–≤–ª–µ–Ω–∏–µ:* {pressure} –º–º —Ä—Ç. —Å—Ç.\n"
                f"üí® *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {wind_speed} –º/—Å\n"
                f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
            )
            bot.send_message(chat_id, message, parse_mode="Markdown")

            send_hourly_forecast_tomorrow(chat_id, coords, url)
        else:
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
#@log_user_actions
def send_hourly_forecast_tomorrow(chat_id, coords, url):
    try:
        params = {
            'lat': coords['latitude'],
            'lon': coords['longitude'],
            'appid': API_KEY,
            'units': 'metric',
            'lang': 'ru'
        }
        response = requests.get(url, params=params, timeout=30)
        data = response.json()

        if response.status_code == 200:
            forecasts = data['list']
            now = datetime.now()
            tomorrow = now + timedelta(days=1)
            message = "*–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:*\n\n\n"  # –î–æ–±–∞–≤–ª–µ–Ω –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

            for forecast in forecasts:
                date_time = datetime.strptime(forecast['dt_txt'], "%Y-%m-%d %H:%M:%S")
                if tomorrow.date() == date_time.date():
                    formatted_time = date_time.strftime("%H:%M")
                    formatted_date = date_time.strftime("%d.%m.%Y")  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
                    temperature = round(forecast['main']['temp'])
                    feels_like = round(forecast['main']['feels_like'])
                    humidity = forecast['main']['humidity']
                    pressure = forecast['main']['pressure']
                    wind_speed = forecast['wind']['speed']
                    description = translate_weather_description(forecast['weather'][0]['description'])

                    message += (
                        f"*–ü–æ–≥–æ–¥–∞ –Ω–∞ {formatted_date} –≤ {formatted_time}:*\n\n"
                        f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temperature}¬∞C\n"
                        f"üå¨Ô∏è *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {feels_like}¬∞C\n"
                        f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {humidity}%\n"
                        f"„ÄΩÔ∏è *–î–∞–≤–ª–µ–Ω–∏–µ:* {pressure} –º–º —Ä—Ç. —Å—Ç.\n"
                        f"üí® *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {wind_speed} –º/—Å\n"
                        f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                    )

            if message == "*–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:*\n\n":
                message = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"

            message_chunks = [message[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(message), MAX_MESSAGE_LENGTH)]
            for chunk in message_chunks:
                bot.send_message(chat_id, chunk, parse_mode="Markdown")  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Markdown
        else:
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        
# (15.9) --------------- –ö–û–î –î–õ–Ø "–ü–û–ì–û–î–´" (–§–£–ù–ö–¶–ò–Ø –ü–û–ì–û–î–´ –ù–ê –ù–ï–î–ï–õ–Æ) ---------------


# ---------- –ü–†–û–ì–ù–û–ó –ù–ê –ù–ï–î–ï–õ–Æ -----------

from datetime import datetime, timedelta
from collections import defaultdict

#@log_user_actions
def send_forecast_weekly(chat_id, coords, url, retries=3):
    try:
        params = {
            'lat': coords['latitude'],
            'lon': coords['longitude'],
            'appid': API_KEY,
            'units': 'metric',
            'lang': 'ru'
        }

        daily_forecasts = defaultdict(list)
        message = "*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n\n\n"

        for attempt in range(retries):
            try:
                response = requests.get(url, params=params, timeout=10)

                if response.status_code == 200:
                    data = response.json()
                    forecasts = data['list']

                    # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –∑–∞ 7 –¥–Ω–µ–π
                    for forecast in forecasts:
                        date_time = datetime.strptime(forecast['dt_txt'], "%Y-%m-%d %H:%M:%S")
                        date_str = date_time.strftime('%d.%m.%Y')

                        if len(daily_forecasts) >= 7 and date_str not in daily_forecasts:
                            break

                        temperature = round(forecast['main']['temp'])
                        feels_like = round(forecast['main']['feels_like'])
                        humidity = forecast['main']['humidity']
                        pressure = forecast['main']['pressure']
                        wind_speed = forecast['wind']['speed']
                        description = translate_weather_description(forecast['weather'][0]['description'])

                        daily_forecasts[date_str].append({
                            'temperature': temperature,
                            'feels_like': feels_like,
                            'humidity': humidity,
                            'pressure': pressure,
                            'wind_speed': wind_speed,
                            'description': description
                        })

                    for date, forecasts in daily_forecasts.items():
                        temp_sum = sum(f['temperature'] for f in forecasts)
                        feels_like_sum = sum(f['feels_like'] for f in forecasts)
                        count = len(forecasts)
                        avg_temp = round(temp_sum / count)
                        avg_feels_like = round(feels_like_sum / count)

                        message += (
                            f"*–ü–æ–≥–æ–¥–∞ –Ω–∞ {date}:*\n\n"
                            f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {avg_temp}¬∞C\n"
                            f"üå¨Ô∏è *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {avg_feels_like}¬∞C\n"
                            f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {forecasts[0]['humidity']}%\n"
                            f"„ÄΩÔ∏è *–î–∞–≤–ª–µ–Ω–∏–µ:* {forecasts[0]['pressure']} –º–º —Ä—Ç. —Å—Ç.\n"
                            f"üí® *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {forecasts[0]['wind_speed']} –º/—Å\n"
                            f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {forecasts[0]['description']}\n\n"
                        )

                    bot.send_message(chat_id, message, parse_mode="Markdown")
                    break
                else:
                    bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é")
                    break
            except Exception as e:
                if attempt == retries - 1:
                    bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

# ---------- –ü–†–û–ì–ù–û–ó –ù–ê –ú–ï–°–Ø–¶ -----------
from collections import defaultdict
import requests
from datetime import datetime, timedelta
import traceback

#@log_user_actions
def send_forecast_monthly(chat_id, coords, url, days=31):
    try:
        params = {
            'lat': coords['latitude'],
            'lon': coords['longitude'],
            'appid': API_KEY,
            'units': 'metric',
            'lang': 'ru'
        }
        response = requests.get(url, params=params, timeout=30)
        data = response.json()

        if response.status_code == 200:
            forecasts = data['list']
            message = "*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü:*\n\n\n"

            daily_forecasts = {}
            for forecast in forecasts:
                date_time = datetime.strptime(forecast['dt_txt'], "%Y-%m-%d %H:%M:%S")
                date_str = date_time.strftime('%d.%m.%Y')

                if date_str not in daily_forecasts:
                    daily_forecasts[date_str] = {
                        'temperature': round(forecast['main']['temp']),
                        'feels_like': round(forecast['main']['feels_like'])
                    }

            for date, values in daily_forecasts.items():
                message += (
                    f"*{date}:*\n\n"
                    f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {values['temperature']}¬∞C\n"
                    f"üå¨Ô∏è *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {values['feels_like']}¬∞C\n\n"
                )

            unavailable_dates = [
                date for date in pd.date_range(start=datetime.now(), periods=days).strftime('%d.%m.%Y')
                if date not in daily_forecasts
            ]

            if unavailable_dates:
                start_date = unavailable_dates[0]
                end_date = unavailable_dates[-1]
                message += (
                    f"*–° {start_date} –ø–æ {end_date}:*\n\n_"
                    f"–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π_\n\n"
                )

            if message == "*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü:*\n\n":
                message = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –º–µ—Å—è—Ü"

            bot.send_message(chat_id, message, parse_mode="Markdown")
        else:
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü")
    except:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –º–µ—Å—è—Ü. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

# –¶–ï–ù–´ –ù–ê –¢–û–ü–õ–ò–í–û

import threading

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–Ω–Ω—ã—Ö
user_state = {}
user_data = {}

# –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
os.makedirs(os.path.join('data base', 'azs'), exist_ok=True)
os.makedirs(os.path.join('data base', 'cityforprice'), exist_ok=True)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE_PATH = os.path.join('data base', 'cityforprice', 'city_for_the_price.json')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_citys_users_data():
    global user_data
    if os.path.exists(DATA_FILE_PATH):
        with open(DATA_FILE_PATH, 'r', encoding='utf-8') as f:
            user_data = json.load(f)
    else:
        user_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_citys_users_data():
    with open(DATA_FILE_PATH, 'w', encoding='utf-8') as f:
        json.dump(user_data, f, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_citys_users_data()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ—Ä–æ–¥–∞ –∏ –¥–∞—Ç—ã
#@log_user_actions
def create_filename(city_code, date):
    date_str = date.strftime('%d_%m_%Y')
    return f"{city_code}_table_azs_data_{date_str}.json"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON
def save_fuel_data(city_code, fuel_prices):
    filename = f'{city_code}_table_azs_data.json'  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    filepath = os.path.join('data base', 'azs', filename)  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª, –∑–∞–º–µ–Ω—è—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    with open(filepath, 'w', encoding='utf-8') as f:
        json.dump(fuel_prices, f, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
def load_saved_data(city_code):
    filename = f'{city_code}_table_azs_data.json'  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    filepath = os.path.join('data base', 'azs', filename)  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ

    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data
    except FileNotFoundError:
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –∏—Ö URL
def load_cities():
    cities = {}
    try:
        with open('files/combined_cities.txt', 'r', encoding='utf-8') as file:
            for line in file:
                if '-' in line:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å –¥–µ—Ñ–∏—Å
                    city, city_code = line.strip().split(' - ')
                    cities[city.lower()] = city_code  # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    except FileNotFoundError:
        pass  # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    return cities

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
cities_dict = load_cities()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º
#@log_user_actions
def get_city_code(city_name):
    # –ó–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω –≤ load_cities
    return cities_dict.get(city_name.lower())  # –ü—Ä–∏–≤–æ–¥–∏–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ"
@bot.message_handler(func=lambda message: message.text == "–¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ')
@track_usage('–¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def fuel_prices_command(message):
    chat_id = message.chat.id
    load_citys_users_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    user_state[chat_id] = "choosing_city"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞

    str_chat_id = str(chat_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

    if str_chat_id in user_data and 'recent_cities' in user_data[str_chat_id]:
        recent_cities = user_data[str_chat_id]['recent_cities']
        city_buttons = [types.KeyboardButton(city.capitalize()) for city in recent_cities]
        markup.row(*city_buttons)  # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≥–æ—Ä–æ–¥–æ–≤ –±—É–¥—É—Ç –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    else:
        pass  # –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –≥–æ—Ä–æ–¥–æ–≤

    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö:", reply_markup=markup)
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
    bot.register_next_step_handler(message, process_city_selection)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
#@log_user_actions
def process_city_selection(message):
    chat_id = message.chat.id
    str_chat_id = str(chat_id)

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if user_state.get(chat_id) != "choosing_city":
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        return

    city_name = message.text.strip().lower()
    city_code = get_city_code(city_name)

    if city_code:
        if str_chat_id not in user_data:
            user_data[str_chat_id] = {'recent_cities': [], 'city_code': None}

        update_recent_cities(str_chat_id, city_name)
        user_data[str_chat_id]['city_code'] = city_code  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≥–æ—Ä–æ–¥–∞

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        notifications = load_user_locations()  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ notifications.json
        user_info = notifications.get(str_chat_id)

        latitude = None
        longitude = None

        if user_info:
            latitude = user_info.get('latitude')
            longitude = user_info.get('longitude')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º city_code –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ notifications.json, –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ—Å—Ç—å
        save_user_location(chat_id, latitude, longitude, city_code)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞
        save_citys_users_data()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å —Ü–µ–Ω–∞–º–∏ –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ
        site_type = "default_site_type"  # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ site_type
        show_fuel_price_menu(chat_id, city_code, site_type)
    else:
        bot.send_message(chat_id, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)  # row_width=3 ‚Äî –≥–æ—Ä–æ–¥–∞ –≤ —Å—Ç—Ä–æ–∫—É

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        recent_cities = user_data.get(str_chat_id, {}).get('recent_cities', [])
        if recent_cities:
            markup.add(*[types.KeyboardButton(city.title()) for city in recent_cities])  # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤ –∫–æ–Ω—Ü–µ
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö:", reply_markup=markup)

        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
        bot.register_next_step_handler(message, process_city_selection)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
#@log_user_actions
def update_recent_cities(chat_id, city_name):
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if chat_id not in user_data:
        user_data[chat_id] = {'recent_cities': [], 'city_code': None}

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
    recent_cities = user_data[chat_id].get('recent_cities', [])

    # –£–¥–∞–ª—è–µ–º –≥–æ—Ä–æ–¥, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
    if city_name in recent_cities:
        recent_cities.remove(city_name)
    elif len(recent_cities) >= 3:
        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥, –µ—Å–ª–∏ —É–∂–µ 3 –≥–æ—Ä–æ–¥–∞
        recent_cities.pop(0)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
    recent_cities.append(city_name)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_data[chat_id]['recent_cities'] = recent_cities
    save_citys_users_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ–ø–ª–∏–≤–∞
fuel_types = ["–ê–ò-92", "–ê–ò-95", "–ê–ò-98", "–ê–ò-100", "–î–¢", "–ì–∞–∑"]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–∏–ø–∞–º–∏ —Ç–æ–ø–ª–∏–≤–∞
#@log_user_actions
def show_fuel_price_menu(chat_id, city_code, site_type):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

    row1 = [types.KeyboardButton(fuel_type) for fuel_type in fuel_types[:3]]
    row2 = [types.KeyboardButton(fuel_type) for fuel_type in fuel_types[3:]]
    row3 = [types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]

    markup.add(*row1, *row2, *row3)

    sent = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω:", reply_markup=markup)
    bot.register_next_step_handler(sent, lambda msg: process_fuel_price_selection(msg, city_code, site_type))

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
progress = 0
progress_lock = threading.Lock()

def update_progress(chat_id, message_id, bot, start_time):
    global progress
    while progress < 100:
        time.sleep(1)  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        elapsed_time = time.time() - start_time
        with progress_lock:
            current_progress = progress
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è. –û–∂–∏–¥–∞–π—Ç–µ! –ù–∏–∫—É–¥–∞ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç–µ!\n\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {current_progress:.2f}%\n–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥"
        )

def process_fuel_price_selection(message, city_code, site_type):
    global progress
    chat_id = message.chat.id

    if chat_id not in user_data:
        user_data[chat_id] = {'city_code': city_code, 'site_type': site_type}

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    selected_fuel_type = message.text.strip().lower()

    fuel_type_mapping = {
        "–∞–∏-92": ["–ê–ò-92", "–ü—Ä–µ–º–∏—É–º 92"],
        "–∞–∏-95": ["–ê–ò-95", "–ü—Ä–µ–º–∏—É–º 95"],
        "–∞–∏-98": ["–ê–ò-98", "–ü—Ä–µ–º–∏—É–º 98"],
        "–∞–∏-100": ["–ê–ò-100", "–ü—Ä–µ–º–∏—É–º 100"],
        "–¥—Ç": ["–î–¢", "–ü—Ä–µ–º–∏—É–º –î–¢"],
        "–≥–∞–∑": ["–ì–∞–∑"],
    }

    if selected_fuel_type not in fuel_type_mapping:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        bot.register_next_step_handler(sent, lambda msg: process_fuel_price_selection(msg, city_code, site_type))
        return

    actual_fuel_types = fuel_type_mapping[selected_fuel_type]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    progress_message = bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è. –û–∂–∏–¥–∞–π—Ç–µ! –ù–∏–∫—É–¥–∞ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç–µ!")
    message_id = progress_message.message_id

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    start_time = time.time()
    progress_thread = threading.Thread(target=update_progress, args=(chat_id, message_id, bot, start_time))
    progress_thread.start()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–∞—Ä—Å–∏–º —Å–∞–π—Ç
        fuel_prices = []
        total_steps = len(actual_fuel_types) * 2  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        current_step = 0

        saved_data = load_saved_data(city_code)
        today = datetime.now().date()

        if saved_data:
            file_modification_time = datetime.fromtimestamp(os.path.getmtime(os.path.join('data base', 'azs', f"{city_code}_table_azs_data.json"))).date()
            if file_modification_time >= today:
                print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥.")
                fuel_prices = [
                    item for item in saved_data
                    if item[1].lower() == selected_fuel_type.lower() or
                    (selected_fuel_type.lower() == "–≥–∞–∑" and item[1].lower() == "–≥–∞–∑ —Å–ø–±—Ç") or
                    any(premium_type in item[1].lower() for premium_type in ["–ø—Ä–µ–º–∏—É–º 92", "–ø—Ä–µ–º–∏—É–º 95", "–ø—Ä–µ–º–∏—É–º 98", "–ø—Ä–µ–º–∏—É–º 100", "–ø—Ä–µ–º–∏—É–º –¥—Ç"])
                ]
                with progress_lock:
                    progress = 100
            else:
                for fuel_type in actual_fuel_types:
                    try:
                        print(f"–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ AZCPRICE –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                        fuel_prices.extend(get_fuel_prices_from_site(fuel_type, city_code, "azcprice"))
                        current_step += 1
                    except ValueError:
                        try:
                            print(f"–°–∞–π—Ç AZCPRICE –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ petrolplus –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                            fuel_prices.extend(get_fuel_prices_from_site(fuel_type, city_code, "petrolplus"))
                            current_step += 1
                        except ValueError:
                            print(f"–û–±–∞ —Å–∞–π—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                            current_step += 1

                    with progress_lock:
                        progress = (current_step / total_steps) * 100

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
                save_fuel_data(city_code, fuel_prices)
        else:
            for fuel_type in actual_fuel_types:
                try:
                    print(f"–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ AZCPRICE –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                    fuel_prices.extend(get_fuel_prices_from_site(fuel_type, city_code, "azcprice"))
                    current_step += 1
                except ValueError:
                    try:
                        print(f"–°–∞–π—Ç AZCPRICE –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ petrolplus –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                        fuel_prices.extend(get_fuel_prices_from_site(fuel_type, city_code, "petrolplus"))
                        current_step += 1
                    except ValueError:
                        print(f"–û–±–∞ —Å–∞–π—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                        current_step += 1

                with progress_lock:
                    progress = (current_step / total_steps) * 100

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
            save_fuel_data(city_code, fuel_prices)

        if not fuel_prices:
            raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ü–µ–Ω–∞–º.")

        brand_prices = {}
        for brand, fuel_type, price in fuel_prices:
            price = float(price)
            # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞
            brand_name = brand.split(' ‚Ññ')[0]
            if brand_name not in brand_prices:
                brand_prices[brand_name] = []
            brand_prices[brand_name].append((fuel_type, price))

        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±—ã—á–Ω—ã–µ –∏ "–ø—Ä–µ–º–∏—É–º"
        normal_prices = {brand: [price for fuel_type, price in prices if '–ü—Ä–µ–º–∏—É–º' not in fuel_type] for brand, prices in brand_prices.items()}
        premium_prices = {brand: [price for fuel_type, price in prices if '–ü—Ä–µ–º–∏—É–º' in fuel_type] for brand, prices in brand_prices.items()}

        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
        normal_prices = {brand: prices for brand, prices in normal_prices.items() if prices}
        premium_prices = {brand: prices for brand, prices in premium_prices.items() if prices}

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
        averaged_normal_prices = {brand: sum(prices) / len(prices) for brand, prices in normal_prices.items()}
        averaged_premium_prices = {brand: sum(prices) / len(prices) for brand, prices in premium_prices.items()}

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
        sorted_normal_prices = sorted(averaged_normal_prices.items(), key=lambda x: x[1])
        sorted_premium_prices = sorted(averaged_premium_prices.items(), key=lambda x: x[1])

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º actual_fuel_type –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        readable_fuel_type = selected_fuel_type.upper()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        normal_prices_message = "\n\n".join([f"‚õΩ {i + 1}. {brand} - {avg_price:.2f} —Ä—É–±./–ª." for i, (brand, avg_price) in enumerate(sorted_normal_prices)])
        premium_prices_message = "\n\n".join([f"‚õΩ {i + 1}. {brand} - {avg_price:.2f} —Ä—É–±./–ª." for i, (brand, avg_price) in enumerate(sorted_premium_prices)])

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
        max_length = 4000
        normal_parts = [normal_prices_message[i:i + max_length] for i in range(0, len(normal_prices_message), max_length)]
        premium_parts = [premium_prices_message[i:i + max_length] for i in range(0, len(premium_prices_message), max_length)]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        if normal_parts:
            for i, part in enumerate(normal_parts):
                if i == 0:
                    bot.send_message(chat_id, f"*–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ {readable_fuel_type}:*\n\n\n{part}", parse_mode="Markdown")
                else:
                    bot.send_message(chat_id, part, parse_mode="Markdown")

        if premium_parts:
            for i, part in enumerate(premium_parts):
                if i == 0:
                    bot.send_message(chat_id, f"*–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ {readable_fuel_type} –ü—Ä–µ–º–∏—É–º:*\n\n\n{part}", parse_mode="Markdown")
                else:
                    bot.send_message(chat_id, part, parse_mode="Markdown")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        another_fuel_button = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–µ —Ç–æ–ø–ª–∏–≤–æ")
        choose_another_city_button = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")
        main_menu_button = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(another_fuel_button)
        markup.add(choose_another_city_button)
        markup.add(main_menu_button)

        user_state[chat_id] = "next_action"
        sent = bot.send_message(chat_id, "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–µ —Ç–æ–ø–ª–∏–≤–æ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", reply_markup=markup)
        bot.register_next_step_handler(sent, process_next_action)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ 100%
        with progress_lock:
            progress = 100

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω!\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞")
        show_fuel_price_menu(chat_id, city_code, site_type)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–æ–µ —Ç–æ–ø–ª–∏–≤–æ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥)
#@log_user_actions
def process_next_action(message):
    chat_id = message.chat.id
    text = message.text.strip().lower()

    if text == "–≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥":
        user_state[chat_id] = "choosing_city"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        recent_cities = user_data.get(str(chat_id), {}).get('recent_cities', [])

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        city_buttons = [types.KeyboardButton(city.capitalize()) for city in recent_cities]
        if city_buttons:
            markup.row(*city_buttons)

        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö:", reply_markup=markup)

        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ process_city_selection –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
        bot.register_next_step_handler(message, process_city_selection)
    elif text == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–µ —Ç–æ–ø–ª–∏–≤–æ":
        city_code = user_data[str(chat_id)]['city_code']
        site_type = "default_site_type"  # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ site_type
        show_fuel_price_menu(chat_id, city_code, site_type)
    elif text == "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.")
        bot.register_next_step_handler(message, process_next_action)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞ –∏ –∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
#@log_user_actions
def process_city_fuel_data(city_code, selected_fuel_type, site_type, actual_fuel_types):
    today = datetime.now().date()
    saved_data = load_saved_data(city_code)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Ñ–∞–π–ª–∞
    filepath = os.path.join('data base', 'azs', f"{city_code}_table_azs_data.json")
    if saved_data:
        file_modification_time = datetime.fromtimestamp(os.path.getmtime(filepath)).date()
        if file_modification_time < today:  # –ï—Å–ª–∏ —Ñ–∞–π–ª —É—Å—Ç–∞—Ä–µ–ª
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            all_fuel_prices = []
            for fuel_type in actual_fuel_types:
                try:
                    print(f"–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ AZCPRICE –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                    fuel_prices = get_fuel_prices_from_site(fuel_type, city_code, "azcprice")
                except ValueError:
                    try:
                        print(f"–°–∞–π—Ç AZCPRICE –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ petrolplus –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                        fuel_prices = get_fuel_prices_from_site(fuel_type, city_code, "petrolplus")
                    except ValueError:
                        print(f"–û–±–∞ —Å–∞–π—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        if saved_data:
                            return [
                                item for item in saved_data
                                if item[1].lower() == selected_fuel_type.lower() or
                                (selected_fuel_type.lower() == "–≥–∞–∑" and item[1].lower() == "–≥–∞–∑ —Å–ø–±—Ç")
                            ]
                        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤—ã–∑—ã–≤–∞–µ–º —Ç—É –∂–µ –æ—à–∏–±–∫—É
                        raise ValueError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω!\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞")

                fuel_prices = remove_duplicate_prices(fuel_prices)
                all_fuel_prices.extend(fuel_prices)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            save_fuel_data(city_code, all_fuel_prices)
            saved_data = all_fuel_prices  # –û–±–Ω–æ–≤–ª—è–µ–º saved_data

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∏—Ö –ø–æ–ª—É—á–∏—Ç—å
    if not saved_data:
        all_fuel_prices = []
        for fuel_type in actual_fuel_types:
            try:
                print(f"–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ AZCPRICE –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                fuel_prices = get_fuel_prices_from_site(fuel_type, city_code, "azcprice")
            except ValueError:
                try:
                    print(f"–°–∞–π—Ç AZCPRICE –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ petrolplus –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                    fuel_prices = get_fuel_prices_from_site(fuel_type, city_code, "petrolplus")
                except ValueError:
                    print(f"–û–±–∞ —Å–∞–π—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}")
                    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏ —Ñ–∞–π–ª–∞ —Ç–æ–∂–µ –Ω–µ—Ç, –≤—ã–∑—ã–≤–∞–µ–º —Ç—É –∂–µ –æ—à–∏–±–∫—É
                    raise ValueError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω!\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞")

            fuel_prices = remove_duplicate_prices(fuel_prices)
            all_fuel_prices.extend(fuel_prices)

        save_fuel_data(city_code, all_fuel_prices)
        saved_data = all_fuel_prices  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É —Ç–æ–ø–ª–∏–≤–∞
    filtered_prices = [
        item for item in saved_data
        if item[1].lower() == selected_fuel_type.lower() or
        (selected_fuel_type.lower() == "–≥–∞–∑" and item[1].lower() == "–≥–∞–∑ —Å–ø–±—Ç") or
        any(premium_type in item[1].lower() for premium_type in ["–ø—Ä–µ–º–∏—É–º 92", "–ø—Ä–µ–º–∏—É–º 95", "–ø—Ä–µ–º–∏—É–º 98", "–ø—Ä–µ–º–∏—É–º 100", "–ø—Ä–µ–º–∏—É–º –¥—Ç"])
    ]
    print(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ {selected_fuel_type}: {filtered_prices}")
    return remove_duplicate_prices(filtered_prices)

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ü–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–π –ê–ó–° –∏ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞
#@log_user_actions
def remove_duplicate_prices(fuel_prices):
    unique_prices = {}
    for brand, fuel_type, price in fuel_prices:
        price = float(price)
        key = (brand, fuel_type)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –±—Ä–µ–Ω–¥–∞ –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
        if key not in unique_prices or price < unique_prices[key]:
            unique_prices[key] = price  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞
    return [(brand, fuel_type, price) for (brand, fuel_type), price in unique_prices.items()]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞
#@log_user_actions
def get_fuel_prices_from_site(selected_fuel_type, city_code, site_type):
    if site_type == "azcprice":
        print(f"–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ AZCPRICE –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code}")
        url = f'https://azsprice.ru/benzin-{city_code}'
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')

        table = soup.find('table')
        if not table:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏")

        fuel_prices = []

        rows = table.find_all('tr')
        for row in rows[1:]:
            columns = row.find_all('td')
            if len(columns) < 5:
                continue

            brand = columns[1].text.strip()
            fuel_type = columns[2].text.strip()
            today_price = clean_price(columns[3].text.strip())

            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞
            if fuel_type.lower() == selected_fuel_type.lower() or (fuel_type.lower() == "–≥–∞–∑ —Å–ø–±—Ç" and selected_fuel_type.lower() == "–≥–∞–∑"):
                fuel_prices.append((brand, fuel_type, today_price))
            elif any(premium_type in fuel_type.lower() for premium_type in ["–ø—Ä–µ–º–∏—É–º 92", "–ø—Ä–µ–º–∏—É–º 95", "–ø—Ä–µ–º–∏—É–º 98", "–ø—Ä–µ–º–∏—É–º 100", "–ø—Ä–µ–º–∏—É–º –¥—Ç"]):
                fuel_prices.append((brand, fuel_type, today_price))

        return fuel_prices
    elif site_type == "petrolplus":
        print(f"–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ petrolplus –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code}")
        base_url = f'https://www.petrolplus.ru/fuelstations/{city_code}/?PAGEN_='
        page = 1
        all_fuel_prices = []

        while True:
            url = f'{base_url}{page}'
            response = requests.get(url)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
            if response.status_code != 200:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞: {response.status_code}")
                break

            soup = BeautifulSoup(response.text, 'html.parser')

            # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏
            table = soup.find('table')
            if not table:
                print(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
                break

            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            for row in table.find_all('tr')[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
                cols = row.find_all('td')
                if len(cols) >= 3:
                    address = cols[0].text.strip()
                    brand = cols[1].text.strip()
                    fuel_types = [ft.strip() for ft in cols[2].stripped_strings]
                    prices = [p.strip().replace(',', '.') for p in cols[3].stripped_strings]

                    for fuel_type, price in zip(fuel_types, prices):
                        all_fuel_prices.append((brand, fuel_type, clean_price(price)))

            page += 1

        print(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code}: {all_fuel_prices}")
        return all_fuel_prices
    else:
        raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–∞–π—Ç–∞")

# __________________________________________________–ï–°–õ–ò –°–ê–ô–¢ –ù–ï –†–ê–ë–û–¢–ê–ï–¢ (–ó–ê–ö–û–ú–ï–ù–¢–ò–†–û–í–ê–ù–û)__________________________________________________

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞
# #@log_user_actions
# def get_fuel_prices_from_site(selected_fuel_type, city_code, site_type):
#     if site_type == "azcprice":
#         print(f"–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ AZCPRICE –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code}")
#         # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞ AZCPRICE
#         raise ValueError("–°–∞–π—Ç AZCPRICE –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
#     elif site_type == "petrolplus":
#         print(f"–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ petrolplus –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code}")
#         base_url = f'https://www.petrolplus.ru/fuelstations/{city_code}/?PAGEN_='
#         page = 1
#         all_fuel_prices = []

#         while True:
#             url = f'{base_url}{page}'
#             response = requests.get(url)

#             # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
#             if response.status_code != 200:
#                 print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞: {response.status_code}")
#                 break

#             soup = BeautifulSoup(response.text, 'html.parser')

#             # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏
#             table = soup.find('table')
#             if not table:
#                 print(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
#                 break

#             # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
#             for row in table.find_all('tr')[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
#                 cols = row.find_all('td')
#                 if len(cols) >= 3:
#                     address = cols[0].text.strip()
#                     brand = cols[1].text.strip()
#                     fuel_types = [ft.strip() for ft in cols[2].stripped_strings]
#                     prices = [p.strip().replace(',', '.') for p in cols[3].stripped_strings]

#                     for fuel_type, price in zip(fuel_types, prices):
#                         all_fuel_prices.append((brand, fuel_type, clean_price(price)))

#             page += 1

#         print(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code}: {all_fuel_prices}")
#         return all_fuel_prices
#     else:
#         raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–∞–π—Ç–∞")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ü–µ–Ω—ã
#@log_user_actions
def clean_price(price):
    cleaned_price = ''.join([ch for ch in price if ch.isdigit() or ch == '.'])
    return cleaned_price

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
#@log_user_actions
def parse_fuel_prices():
    cities_to_parse = os.listdir(os.path.join('data base', 'azs'))  # –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    for city_code in cities_to_parse:
        city_code = city_code.replace('_table_azs_data.json', '')  # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
        saved_data = load_saved_data(city_code)

        today = datetime.now().date()
        if saved_data:
            file_modification_time = datetime.fromtimestamp(os.path.getmtime(os.path.join('data base', 'azs', f"{city_code}_table_azs_data.json"))).date()
            if file_modification_time >= today:
                print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

        # –ï—Å–ª–∏ —Ñ–∞–π–ª —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        all_fuel_prices = []
        for fuel_type in fuel_types:
            try:
                fuel_prices = get_fuel_prices_from_site(fuel_type, city_code, "azcprice")
            except ValueError:
                try:
                    fuel_prices = get_fuel_prices_from_site(fuel_type, city_code, "petrolplus")
                except ValueError:
                    print(f"–û–±–∞ —Å–∞–π—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code}")
                    continue

            fuel_prices = remove_duplicate_prices(fuel_prices)
            all_fuel_prices.extend(fuel_prices)

        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} —Å {len(all_fuel_prices)} –∑–∞–ø–∏—Å—è–º–∏.")
        save_fuel_data(city_code, all_fuel_prices)
        print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")


# _____________________________________________________–ü–ê–†–°–ò–ù–ì –°–ê–ô–¢–ê RUSSIABASE –û–¢–î–ï–õ–¨–ù–û (–ù–ï –í–°–¢–†–û–ï–ù)_____________________________________________________

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# def load_citys_users_data():
#     global user_data
#     print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
#     if os.path.exists(DATA_FILE_PATH):
#         with open(DATA_FILE_PATH, 'r', encoding='utf-8') as f:
#             user_data = json.load(f)
#             print(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {user_data}")
#     else:
#         user_data = {}
#         print("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# def save_citys_users_data():
#     print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
#     with open(DATA_FILE_PATH, 'w', encoding='utf-8') as f:
#         json.dump(user_data, f, ensure_ascii=False, indent=4)
#         print("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

# # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
# load_citys_users_data()

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ—Ä–æ–¥–∞ –∏ –¥–∞—Ç—ã
# #@log_user_actions
# def create_filename(city_code, date):
#     date_str = date.strftime('%d_%m_%Y')
#     city_info = cities_dict.get(city_code.lower())
#     if city_info:
#         city_name_en = city_info[1]  # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
#         return f"{city_name_en}_table_azs_data_{date_str}.json"
#     return None


# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –∏—Ö URL
# def load_cities_from_file(file_path, site_type):
#     cities = {}
#     try:
#         with open(file_path, 'r', encoding='utf-8') as file:
#             for line in file:
#                 if '-' in line:
#                     parts = line.strip().split(' - ')
#                     if len(parts) != 3:
#                         print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Ç—Ä–æ–∫–∏: {line.strip()}")
#                         continue
#                     city_code = parts[0]
#                     region_name_ru = parts[1]
#                     region_name_en = parts[2]
#                     cities[region_name_ru.lower()] = (city_code, region_name_en, site_type)
#                     print(f"–î–æ–±–∞–≤–ª–µ–Ω –≥–æ—Ä–æ–¥: {region_name_ru} —Å –∫–æ–¥–æ–º {city_code} –∏ —Ç–∏–ø–æ–º {site_type}")
#     except FileNotFoundError:
#         print(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#     return cities

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
# def load_cities():
#     cities_dict_2 = load_cities_from_file('files/combined_cities_2.txt', 'region')
#     cities_dict_3 = load_cities_from_file('files/combined_cities_3.txt', 'raion')
#     cities_dict_4 = load_cities_from_file('files/combined_cities_4.txt', 'city')

#     # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–ª–æ–≤–∞—Ä–∏ –≤ –æ–¥–∏–Ω
#     combined_cities_dict = {**cities_dict_2, **cities_dict_3, **cities_dict_4}
#     print(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –≥–æ—Ä–æ–¥–∞: {combined_cities_dict}")
#     return combined_cities_dict

# # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
# cities_dict = load_cities()
# print(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –≥–æ—Ä–æ–¥–∞: {cities_dict}")

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ combined_cities_4.txt
# def load_cities_4():
#     cities = {}
#     try:
#         with open('files/combined_cities_4.txt', 'r', encoding='utf-8') as file:
#             for line in file:
#                 if '-' in line:
#                     parts = line.strip().split(' - ')
#                     if len(parts) != 3:
#                         print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Ç—Ä–æ–∫–∏: {line.strip()}")
#                         continue
#                     city_code = parts[0]
#                     region_name_ru = parts[1]
#                     region_name_en = parts[2]
#                     cities[region_name_ru.lower()] = (city_code, region_name_en)
#                     print(f"–î–æ–±–∞–≤–ª–µ–Ω –≥–æ—Ä–æ–¥: {region_name_ru} —Å –∫–æ–¥–æ–º {city_code}")
#     except FileNotFoundError:
#         print("–§–∞–π–ª —Å –≥–æ—Ä–æ–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#     return cities

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ combined_cities_3.txt
# def load_cities_3():
#     cities = {}
#     try:
#         with open('files/combined_cities_3.txt', 'r', encoding='utf-8') as file:
#             for line in file:
#                 if '-' in line:
#                     parts = line.strip().split(' - ')
#                     if len(parts) != 3:
#                         print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Ç—Ä–æ–∫–∏: {line.strip()}")
#                         continue
#                     city_code = parts[0]
#                     region_name_ru = parts[1]
#                     region_name_en = parts[2]
#                     cities[region_name_ru.lower()] = (city_code, region_name_en)
#                     print(f"–î–æ–±–∞–≤–ª–µ–Ω –≥–æ—Ä–æ–¥: {region_name_ru} —Å –∫–æ–¥–æ–º {city_code}")
#     except FileNotFoundError:
#         print("–§–∞–π–ª —Å –≥–æ—Ä–æ–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#     return cities

# # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ä–æ–¥–∞ –∏–∑ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
# cities_dict_4 = load_cities_4()
# cities_dict_3 = load_cities_3()
# print(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –≥–æ—Ä–æ–¥–∞ –∏–∑ combined_cities_4.txt: {cities_dict_4}")
# print(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –≥–æ—Ä–æ–¥–∞ –∏–∑ combined_cities_3.txt: {cities_dict_3}")


# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º
# #@log_user_actions
# def get_city_code(region_name):
#     region_name_lower = region_name.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
#     city_info = cities_dict.get(region_name_lower)
#     print(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name}: {city_info}")
#     if city_info:
#         return str(city_info[0]), city_info[1], city_info[2]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º city_code –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–∏–ø —Å—Å—ã–ª–∫–∏
#     return None, None, None


# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON
# def save_fuel_data(city_name, fuel_prices):
#     filename = f'{city_name}_table_azs_data.json'  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
#     filepath = os.path.join('data base', 'azs', filename)  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
#     print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name} –≤ —Ñ–∞–π–ª {filepath}")
#     with open(filepath, 'w', encoding='utf-8') as f:
#         json.dump(fuel_prices, f, ensure_ascii=False, indent=4)

# def load_saved_data(city_identifier):
#     filename = f'{city_identifier}_table_azs_data.json'  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
#     filepath = os.path.join('data base', 'azs', filename)  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
#     print(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_identifier} –∏–∑ —Ñ–∞–π–ª–∞ {filepath}")
#     try:
#         with open(filepath, 'r', encoding='utf-8') as f:
#             return json.load(f)
#     except FileNotFoundError:
#         print(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#         return None

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ"
# @bot.message_handler(func=lambda message: message.text == "–¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ")
# @restricted
# @track_user_activity
# @check_chat_state
# @check_function_state_decorator('–¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ')
# @track_usage('–¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
# #@log_user_actions
# def fuel_prices_command(message):
#     chat_id = message.chat.id
#     load_citys_users_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
#     user_state[chat_id] = "choosing_city"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞

#     str_chat_id = str(chat_id)

#     # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

#     if str_chat_id in user_data and 'recent_cities' in user_data[str_chat_id]:
#         recent_cities = user_data[str_chat_id]['recent_cities']
#         city_buttons = [types.KeyboardButton(city.capitalize()) for city in recent_cities]
#         markup.row(*city_buttons)  # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≥–æ—Ä–æ–¥–æ–≤ –±—É–¥—É—Ç –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
#     else:
#         pass  # –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –≥–æ—Ä–æ–¥–æ–≤

#     markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥
#     bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö:", reply_markup=markup)
#     # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
#     bot.register_next_step_handler(message, process_city_selection)

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
# #@log_user_actions
# def process_city_selection(message):
#     chat_id = message.chat.id
#     str_chat_id = str(chat_id)

#     if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
#         return_to_menu(message)
#         return

#     if user_state.get(chat_id) != "choosing_city":
#         bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
#         return

#     region_name = message.text.strip()  # –ü—Ä–∏–≤–æ–¥–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
#     city_code, city_name_en, site_type = get_city_code(region_name)
#     print(f"–ü–æ–ª—É—á–µ–Ω city_code –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name}: {city_code}")

#     if city_code:
#         if str_chat_id not in user_data:
#             user_data[str_chat_id] = {'recent_cities': [], 'city_code': None, 'site_type': None}

#         update_recent_cities(str_chat_id, region_name)
#         user_data[str_chat_id]['city_code'] = city_code  # –°–æ—Ö—Ä–∞–Ω—è–µ–º city_code –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
#         user_data[str_chat_id]['site_type'] = site_type  # –°–æ—Ö—Ä–∞–Ω—è–µ–º site_type
#         print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω city_code –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {str_chat_id}: {user_data[str_chat_id]['city_code']}")
#         print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω site_type –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {str_chat_id}: {user_data[str_chat_id]['site_type']}")

#         # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         notifications = load_user_locations()  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ notifications.json
#         user_info = notifications.get(str_chat_id)

#         latitude = None
#         longitude = None

#         if user_info:
#             latitude = user_info.get('latitude')
#             longitude = user_info.get('longitude')

#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º city_code –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ notifications.json, –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ—Å—Ç—å
#         save_user_location(chat_id, latitude, longitude, city_code)

#         # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞
#         save_citys_users_data()

#         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å —Ü–µ–Ω–∞–º–∏ –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ
#         show_fuel_price_menu(chat_id, city_code, site_type)
#     else:
#         bot.send_message(chat_id, "–†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

#         # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#         markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)  # row_width=3 ‚Äî —Ä–µ–≥–∏–æ–Ω—ã –≤ —Å—Ç—Ä–æ–∫—É

#         # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
#         recent_cities = user_data.get(str_chat_id, {}).get('recent_cities', [])
#         if recent_cities:
#             markup.add(*[types.KeyboardButton(city.title()) for city in recent_cities])  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

#         # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤ –∫–æ–Ω—Ü–µ
#         markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

#         bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö:", reply_markup=markup)

#         # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–≥–∏–æ–Ω–∞
#         bot.register_next_step_handler(message, process_city_selection)


# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
# #@log_user_actions
# def update_recent_cities(chat_id, region_name):
#     # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
#     if chat_id not in user_data:
#         user_data[chat_id] = {'recent_cities': [], 'city_code': None}

#     # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
#     recent_cities = user_data[chat_id].get('recent_cities', [])

#     # –£–¥–∞–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
#     if region_name in recent_cities:
#         recent_cities.remove(region_name)
#     elif len(recent_cities) >= 3:
#         # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–≥–∏–æ–Ω, –µ—Å–ª–∏ —É–∂–µ 3 —Ä–µ–≥–∏–æ–Ω–∞
#         recent_cities.pop(0)

#     # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
#     recent_cities.append(region_name)

#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#     user_data[chat_id]['recent_cities'] = recent_cities
#     save_citys_users_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª

# # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ–ø–ª–∏–≤–∞
# fuel_types = ["–ê–ò-92", "–ê–ò-95", "–ê–ò-98", "–ê–ò-100", "–î–¢", "–ì–∞–∑"]

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–∏–ø–∞–º–∏ —Ç–æ–ø–ª–∏–≤–∞
# #@log_user_actions
# def show_fuel_price_menu(chat_id, city_code, site_type):
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

#     row1 = [types.KeyboardButton(fuel_type) for fuel_type in fuel_types[:3]]
#     row2 = [types.KeyboardButton(fuel_type) for fuel_type in fuel_types[3:]]
#     row3 = [types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]

#     markup.add(*row1, *row2, *row3)

#     sent = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω:", reply_markup=markup)
#     bot.register_next_step_handler(sent, lambda msg: process_fuel_price_selection(msg, city_code, site_type))

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–ø–ª–∏–≤–∞
# #@log_user_actions
# def process_fuel_price_selection(message, city_code, site_type):
#     chat_id = message.chat.id

#     if chat_id not in user_data:
#         user_data[chat_id] = {'city_code': city_code, 'site_type': site_type}

#     if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
#         return_to_menu(message)
#         return

#     selected_fuel_type = message.text.strip().lower()

#     fuel_type_mapping = {
#         "–∞–∏-92": ["ai92", "ai92plus"],
#         "–∞–∏-95": ["ai95", "ai95plus"],
#         "–∞–∏-98": ["ai98", "ai98plus"],
#         "–∞–∏-100": ["ai100", "ai100plus"],
#         "–¥—Ç": ["dt", "dtplus"],
#         "–≥–∞–∑": ["gas"],
#     }

#     if selected_fuel_type not in fuel_type_mapping:
#         sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
#         bot.register_next_step_handler(sent, lambda msg: process_fuel_price_selection(msg, city_code, site_type))
#         return

#     actual_fuel_types = fuel_type_mapping[selected_fuel_type]

#     try:
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–∞—Ä—Å–∏–º —Å–∞–π—Ç
#         fuel_prices = []
#         for fuel_type in actual_fuel_types:
#             fuel_prices.extend(process_city_fuel_data(city_code, fuel_type, site_type, actual_fuel_types))

#         if not fuel_prices:
#             raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ü–µ–Ω–∞–º.")

#         brand_prices = {}
#         for brand, fuel_type, price in fuel_prices:
#             price = float(price)
#             # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞
#             brand_name = brand.split(' ‚Ññ')[0]
#             if brand_name not in brand_prices:
#                 brand_prices[brand_name] = []
#             brand_prices[brand_name].append((fuel_type, price))

#         # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±—ã—á–Ω—ã–µ –∏ "–ø–ª—é—Å"
#         normal_prices = {brand: [price for fuel_type, price in prices if 'plus' not in fuel_type] for brand, prices in brand_prices.items()}
#         plus_prices = {brand: [price for fuel_type, price in prices if 'plus' in fuel_type] for brand, prices in brand_prices.items()}

#         # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
#         normal_prices = {brand: prices for brand, prices in normal_prices.items() if prices}
#         plus_prices = {brand: prices for brand, prices in plus_prices.items() if prices}

#         # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
#         averaged_normal_prices = {brand: sum(prices) / len(prices) for brand, prices in normal_prices.items()}
#         averaged_plus_prices = {brand: sum(prices) / len(prices) for brand, prices in plus_prices.items()}

#         # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
#         sorted_normal_prices = sorted(averaged_normal_prices.items(), key=lambda x: x[1])
#         sorted_plus_prices = sorted(averaged_plus_prices.items(), key=lambda x: x[1])

#         # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º actual_fuel_type –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
#         readable_fuel_type = selected_fuel_type.upper()

#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
#         normal_prices_message = "\n\n".join([f"‚õΩ {i + 1}. {brand} - {avg_price:.2f} —Ä—É–±./–ª." for i, (brand, avg_price) in enumerate(sorted_normal_prices)])
#         plus_prices_message = "\n\n".join([f"‚õΩ {i + 1}. {brand} - {avg_price:.2f} —Ä—É–±./–ª." for i, (brand, avg_price) in enumerate(sorted_plus_prices)])

#         # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
#         max_length = 4000
#         normal_parts = [normal_prices_message[i:i + max_length] for i in range(0, len(normal_prices_message), max_length)]
#         plus_parts = [plus_prices_message[i:i + max_length] for i in range(0, len(plus_prices_message), max_length)]

#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
#         if normal_parts:
#             for i, part in enumerate(normal_parts):
#                 if i == 0:
#                     bot.send_message(chat_id, f"*–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ {readable_fuel_type}:*\n\n\n{part}", parse_mode="Markdown")
#                 else:
#                     bot.send_message(chat_id, part, parse_mode="Markdown")

#         if plus_parts:
#             for i, part in enumerate(plus_parts):
#                 if i == 0:
#                     bot.send_message(chat_id, f"*–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ {readable_fuel_type}+:*\n\n\n{part}", parse_mode="Markdown")
#                 else:
#                     bot.send_message(chat_id, part, parse_mode="Markdown")

#         markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#         another_fuel_button = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–µ —Ç–æ–ø–ª–∏–≤–æ")
#         choose_another_city_button = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")
#         main_menu_button = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
#         markup.add(another_fuel_button)
#         markup.add(choose_another_city_button)
#         markup.add(main_menu_button)

#         user_state[chat_id] = "next_action"
#         sent = bot.send_message(chat_id, "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–µ —Ç–æ–ø–ª–∏–≤–æ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.", reply_markup=markup)
#         bot.register_next_step_handler(sent, process_next_action)

#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞: {e}")
#         bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω!\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞")
#         show_fuel_price_menu(chat_id, city_code, site_type)

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–æ–µ —Ç–æ–ø–ª–∏–≤–æ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥)
# #@log_user_actions
# def process_next_action(message):
#     chat_id = message.chat.id
#     text = message.text.strip().lower()

#     if text == "–≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥":
#         user_state[chat_id] = "choosing_city"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞

#         markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

#         # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         recent_cities = user_data.get(str(chat_id), {}).get('recent_cities', [])

#         # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
#         city_buttons = [types.KeyboardButton(city.capitalize()) for city in recent_cities]
#         if city_buttons:
#             markup.row(*city_buttons)

#         markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
#         bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö:", reply_markup=markup)

#         # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ process_city_selection –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
#         bot.register_next_step_handler(message, process_city_selection)
#     elif text == "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
#         return_to_menu(message)
#     elif text == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–µ —Ç–æ–ø–ª–∏–≤–æ":
#         city_code = user_data[str(chat_id)]['city_code']
#         site_type = user_data[str(chat_id)]['site_type']
#         show_fuel_price_menu(chat_id, city_code, site_type)
#     else:
#         bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.")
#         bot.register_next_step_handler(message, process_next_action)

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞ –∏ –∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
# #@log_user_actions
# def process_city_fuel_data(city_code, selected_fuel_type, site_type, actual_fuel_types):
#     print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è city_code: {city_code}")
#     city_info = None
#     for region_name, info in cities_dict.items():
#         if info[0] == city_code:
#             city_info = info
#             break
#     print(f"city_info –¥–ª—è city_code {city_code}: {city_info}")
#     if not city_info:
#         raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥ –¥–ª—è –∫–æ–¥–∞ {city_code}")

#     city_name = city_info[1]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
#     print(f"–ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥: {city_name}")
#     today = datetime.now().date()
#     saved_data = load_saved_data(city_name)

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Ñ–∞–π–ª–∞
#     filepath = os.path.join('data base', 'azs', f"{city_name}_table_azs_data.json")
#     if saved_data:
#         file_modification_time = datetime.fromtimestamp(os.path.getmtime(filepath)).date()
#         if file_modification_time < today:  # –ï—Å–ª–∏ —Ñ–∞–π–ª —É—Å—Ç–∞—Ä–µ–ª
#             # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
#             all_fuel_prices = []
#             try:
#                 fuel_prices = get_fuel_prices_from_site(city_code, site_type)
#                 print(f"–ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}: {fuel_prices}")
#             except ValueError as e:
#                 print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
#                 # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
#                 if saved_data:
#                     return [
#                         item for item in saved_data
#                         if any(ft.lower() == item[1].lower() for ft in actual_fuel_types)
#                     ]
#                 # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤—ã–∑—ã–≤–∞–µ–º —Ç—É –∂–µ –æ—à–∏–±–∫—É
#                 raise ValueError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω!\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞")

#             fuel_prices = remove_duplicate_prices(fuel_prices)
#             all_fuel_prices.extend(fuel_prices)

#             # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
#             save_fuel_data(city_name, all_fuel_prices)
#             saved_data = all_fuel_prices  # –û–±–Ω–æ–≤–ª—è–µ–º saved_data

#     # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∏—Ö –ø–æ–ª—É—á–∏—Ç—å
#     if not saved_data:
#         all_fuel_prices = []
#         try:
#             fuel_prices = get_fuel_prices_from_site(city_code, site_type)
#             print(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}: {fuel_prices}")
#         except ValueError as e:
#             print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
#             # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏ —Ñ–∞–π–ª–∞ —Ç–æ–∂–µ –Ω–µ—Ç, –≤—ã–∑—ã–≤–∞–µ–º —Ç—É –∂–µ –æ—à–∏–±–∫—É
#             raise ValueError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω!\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞")

#         fuel_prices = remove_duplicate_prices(fuel_prices)
#         all_fuel_prices.extend(fuel_prices)

#         save_fuel_data(city_name, all_fuel_prices)
#         saved_data = all_fuel_prices  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

#     # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É —Ç–æ–ø–ª–∏–≤–∞
#     filtered_prices = [
#         item for item in saved_data
#         if any(ft.lower() == item[1].lower() for ft in actual_fuel_types)
#     ]
#     print(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {selected_fuel_type}: {filtered_prices}")

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
#     if not filtered_prices:
#         raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ü–µ–Ω–∞–º.")

#     return remove_duplicate_prices(filtered_prices)


# # –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ü–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–π –ê–ó–° –∏ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞
# #@log_user_actions
# def remove_duplicate_prices(fuel_prices):
#     unique_prices = {}
#     for brand, fuel_type, price in fuel_prices:
#         price = float(price)
#         key = (brand, fuel_type)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –±—Ä–µ–Ω–¥–∞ –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
#         if key not in unique_prices or price < unique_prices[key]:
#             unique_prices[key] = price  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞
#     return [(brand, fuel_type, price) for (brand, fuel_type), price in unique_prices.items()]

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞
# #@log_user_actions
# def get_fuel_prices_from_site(city_code, site_type):
#     if site_type == 'region':
#         base_url = f'https://russiabase.ru/prices?region={city_code}&page='
#     elif site_type == 'city':
#         base_url = f'https://russiabase.ru/prices?city={city_code}&page='
#     elif site_type == 'raion':
#         base_url = f'https://russiabase.ru/prices?raion={city_code}&page='
#     else:
#         raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–∞–π—Ç–∞")

#     page = 1
#     all_fuel_prices = []

#     while True:
#         url = f'{base_url}{page}'
#         print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ URL: {url}")

#         response = requests.get(url)
#         print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")

#         if response.status_code != 200:
#             print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
#             break

#         # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON-–¥–∞–Ω–Ω—ã–µ –∏–∑ HTML
#         data_start = response.text.find('{"props":')
#         data_end = response.text.find('</script>', data_start)
#         if data_start == -1 or data_end == -1:
#             print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON-–¥–∞–Ω–Ω—ã–µ –≤ HTML")
#             break

#         json_data = response.text[data_start:data_end].strip()
#         print(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ JSON-–¥–∞–Ω–Ω—ã–µ: {json_data[:500]}...")  # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

#         try:
#             data = json.loads(json_data)
#         except json.JSONDecodeError as e:
#             print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {e}")
#             break

#         fuel_prices = []

#         print("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ...")
#         for station in data['props']['pageProps']['listing']['listing']:
#             prices = station['prices']
#             for fuel_type, price_info in prices.items():
#                 price = price_info['value']
#                 if price:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
#                     fuel_prices.append((station['name'], fuel_type, price))
#                     print(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞: {station['name']} - {fuel_type}: {price}")

#         if not fuel_prices:
#             print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
#             break

#         all_fuel_prices.extend(fuel_prices)
#         page += 1

#     print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_fuel_prices)} —Ü–µ–Ω –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ")
#     return all_fuel_prices

# # # –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
# # city_code = 11  # –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
# # try:
# #     fuel_prices = get_fuel_prices_from_site(city_code)
# #     print(f"–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ: {fuel_prices}")
# # except Exception as e:
# #     print(f"–û—à–∏–±–∫–∞: {e}")


# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ü–µ–Ω—ã
# #@log_user_actions
# def clean_price(price):
#     cleaned_price = ''.join([ch for ch in price if ch.isdigit() or ch == '.'])
#     return cleaned_price

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
# #@log_user_actions
# def parse_fuel_prices():
#     cities_to_parse = os.listdir(os.path.join('data base', 'azs'))  # –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
#     for city_code in cities_to_parse:
#         city_code = city_code.replace('_table_azs_data.json', '')  # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
#         saved_data = load_saved_data(city_code)

#         today = datetime.now().date()
#         if saved_data:
#             file_modification_time = datetime.fromtimestamp(os.path.getmtime(os.path.join('data base', 'azs', f"{city_code}_table_azs_data.json"))).date()
#             if file_modification_time >= today:
#                 print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
#                 continue

#         # –ï—Å–ª–∏ —Ñ–∞–π–ª —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
#         all_fuel_prices = []
#         for fuel_type in fuel_types:
#             fuel_prices = get_fuel_prices_from_site(fuel_type, city_code)
#             all_fuel_prices.extend(fuel_prices)

#         print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} —Å {len(all_fuel_prices)} –∑–∞–ø–∏—Å—è–º–∏.")
#         save_fuel_data(city_code, all_fuel_prices)
#         print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_code} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

# !!!!!!!!!!!!!!!!!!!–≠–¢–û –û–ë–©–ò–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ó–ê–î–ê–ß!!!!!!!!!!!!!!!!!!!!!
# –û–±—â–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
def schedule_tasks():
    while True:
        now = datetime.now()
        
        # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ –≤ 00:00
        if now.hour == 0 and now.minute == 0:
            parse_fuel_prices()
            time.sleep(60 * 5)  # –û–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≥–æ—Ä–æ–¥–æ–º

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ schedule)
        schedule.run_pending()
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        time.sleep(300)

# –ó–∞–ø—É—Å–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
threading.Thread(target=schedule_tasks, daemon=True).start()



# –í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class States:
    ADDING_TRANSPORT = 1
    CONFIRMING_DELETE = 2

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –≤ –ø–∞–º—è—Ç–∏
user_transport = {}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
def save_transport_data(user_id, user_data):
    folder_path = "data base/transport"  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥ transport
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
    with open(os.path.join(folder_path, f"{user_id}_transport.json"), "w", encoding="utf-8") as file:
        json.dump(user_data, file, ensure_ascii=False, indent=4)

def load_transport_data(user_id):
    folder_path = "data base/transport"  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥ transport
    try:
        with open(os.path.join(folder_path, f"{user_id}_transport.json"), "r", encoding="utf-8") as file:
            data = json.load(file)
    except FileNotFoundError:
        data = []
    return data

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
def load_all_transport():
    folder_path = "data base/transport"
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    users = os.listdir(folder_path)
    for user_file in users:
        if user_file.endswith("_transport.json"):
            user_id = user_file.split("_")[0]
            user_transport[user_id] = load_transport_data(user_id)

# –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
load_all_transport()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º
@bot.message_handler(func=lambda message: message.text == "–í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def manage_transport(message):
    user_id = str(message.chat.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É –∏ –¥–≤—É–º—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤—ã–π —Ä—è–¥
    keyboard.add("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    keyboard.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    keyboard.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
#@log_user_actions
def check_media(message, user_id, next_step_handler=None, *args):
    if (message.photo or message.video or message.document or message.animation or 
        message.sticker or message.location or message.audio or 
        message.contact or message.voice or message.video_note):
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        if next_step_handler:
            bot.register_next_step_handler(message, next_step_handler, *args)  # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        return True
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
#@log_user_actions
def create_transport_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    item_return_transport = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    markup.add(item_return_transport)
    markup.add(item_main_menu)
    return markup

@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def add_transport(message):
    user_id = str(message.chat.id)
    if check_media(message, user_id): return
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=create_transport_keyboard())
    bot.register_next_step_handler(message, process_brand)

#@log_user_actions
def format_brand_model(text):
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∫ —Ñ–æ—Ä–º–∞—Ç—É '–ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å –º–∞–ª–µ–Ω—å–∫–æ–π'."""
    return " ".join(word.capitalize() for word in text.split())

#@log_user_actions
def process_brand(message):
    user_id = str(message.chat.id)
    if check_media(message, user_id, process_brand): return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±—Ä–µ–Ω–¥
    brand = format_brand_model(message.text)
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=create_transport_keyboard())
    bot.register_next_step_handler(message, process_model, brand)

#@log_user_actions
def process_model(message, brand):
    user_id = str(message.chat.id)
    if check_media(message, user_id, process_model, brand): return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    model = format_brand_model(message.text)
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=create_transport_keyboard())
    bot.register_next_step_handler(message, process_year, brand, model)

#@log_user_actions
def process_year(message, brand, model):
    user_id = str(message.chat.id)
    if check_media(message, user_id, process_year, brand, model): return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≥–æ–¥–∞
    try:
        year = int(message.text)
        if year < 1960 or year > 3000:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            raise ValueError("–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1960 –≥. –¥–æ 3000 –≥.")
    except ValueError:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–æ—Ç 1960 –≥. –¥–æ 3000 –≥.). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=create_transport_keyboard())
        bot.register_next_step_handler(message, process_year, brand, model)
        return

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä:", reply_markup=create_transport_keyboard())
    bot.register_next_step_handler(message, process_license_plate, brand, model, year)

#@log_user_actions
def process_license_plate(message, brand, model, year):
    user_id = str(message.chat.id)
    if check_media(message, user_id, process_license_plate, brand, model, year): 
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≥–æ—Å–Ω–æ–º–µ—Ä–∞ –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    license_plate = message.text.upper()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≥–æ—Å–Ω–æ–º–µ—Ä–∞
    import re
    pattern = r'^[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•ABEKMHOPCTYX]\d{3}[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•ABEKMHOPCTYX]{2}\d{2,3}$'
    if not re.match(pattern, license_plate):
        bot.send_message(user_id, "–û—à–∏–±–∫–∞! –ì–æ—Å–Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É –≥–æ—Å–Ω–æ–º–µ—Ä–æ–≤ –†–§. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=create_transport_keyboard())
        bot.register_next_step_handler(message, process_license_plate, brand, model, year)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≥–æ—Å–Ω–æ–º–µ—Ä–∞
    if any(t["license_plate"] == license_plate for t in user_transport.get(user_id, [])):
        bot.send_message(user_id, "–û—à–∏–±–∫–∞! –¢–∞–∫–æ–π –≥–æ—Å–Ω–æ–º–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=create_transport_keyboard())
        bot.register_next_step_handler(message, process_license_plate, brand, model, year)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –ø–∞–º—è—Ç—å
    if user_id not in user_transport:
        user_transport[user_id] = []
    
    user_transport[user_id].append({"brand": brand, "model": model, "year": year, "license_plate": license_plate})
    save_transport_data(user_id, user_transport[user_id])  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ

    bot.send_message(user_id, f"üöó *–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω üöó*\n\n*{brand} - {model} - {year} - {license_plate}*", parse_mode="Markdown", reply_markup=create_transport_keyboard())

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é "–í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
    manage_transport(message)

#@log_user_actions
def delete_expenses_related_to_transport(user_id, transport, selected_transport=""):
    expenses_data = load_expense_data(user_id)
    if user_id in expenses_data:
        updated_expenses = []
        for expense in expenses_data[user_id]['expenses']:
            transport_data = expense.get('transport', {})
            if (transport_data.get('brand') != transport.get('brand') or
                transport_data.get('model') != transport.get('model') or
                transport_data.get('year') != transport.get('year')):
                updated_expenses.append(expense)

        expenses_data[user_id]['expenses'] = updated_expenses
        save_expense_data(user_id, expenses_data, selected_transport)

#@log_user_actions
def delete_repairs_related_to_transport(user_id, transport):
    repair_data = load_repair_data(user_id)
    if user_id in repair_data:
        updated_repairs = []
        for repair in repair_data[user_id].get("repairs", []):
            transport_data = repair.get('transport', {})
            if (transport_data.get('brand') != transport.get('brand') or
                transport_data.get('model') != transport.get('model') or
                transport_data.get('year') != transport.get('year')):
                updated_repairs.append(repair)

        repair_data[user_id]["repairs"] = updated_repairs
        save_repair_data(user_id, repair_data, selected_transport="")


# @bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
# @restricted
# @track_user_activity
# @check_chat_state
# @check_function_state_decorator('–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
# @track_usage('–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
# #@log_user_actions
# def edit_transport(message):
#     user_id = str(message.chat.id)
#     if user_id not in user_transport or not user_transport[user_id]:
#         bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.", reply_markup=create_transport_keyboard())
#         return

#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
#     transport_list = user_transport[user_id]
#     response = "\n".join([f"‚Ññ{index + 1}. {item['brand']} - {item['model']} - {item['year']} - {item['license_plate']}" for index, item in enumerate(transport_list)])
#     bot.send_message(user_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n\n{response}", reply_markup=create_transport_keyboard())
#     bot.register_next_step_handler(message, select_transport_for_editing)

# #@log_user_actions
# def select_transport_for_editing(message):
#     user_id = str(message.chat.id)
#     try:
#         index = int(message.text) - 1
#         if index < 0 or index >= len(user_transport[user_id]):
#             raise ValueError
#         selected_transport = user_transport[user_id][index]
#         bot.send_message(user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n{selected_transport['brand']} - {selected_transport['model']} - {selected_transport['year']} - {selected_transport['license_plate']}\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? (–ú–∞—Ä–∫–∞/–ú–æ–¥–µ–ª—å/–ì–æ–¥/–ì–æ—Å–Ω–æ–º–µ—Ä)", reply_markup=create_transport_keyboard())
#         bot.register_next_step_handler(message, edit_transport_field, index)
#     except ValueError:
#         bot.send_message(user_id, "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.", reply_markup=create_transport_keyboard())
#         bot.register_next_step_handler(message, select_transport_for_editing)

# #@log_user_actions
# def edit_transport_field(message, index):
#     user_id = str(message.chat.id)
#     field = message.text.lower()
#     valid_fields = {"–º–∞—Ä–∫–∞": "brand", "–º–æ–¥–µ–ª—å": "model", "–≥–æ–¥": "year", "–≥–æ—Å–Ω–æ–º–µ—Ä": "license_plate"}
#     if field not in valid_fields:
#         bot.send_message(user_id, "–û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑: –ú–∞—Ä–∫–∞, –ú–æ–¥–µ–ª—å, –ì–æ–¥, –ì–æ—Å–Ω–æ–º–µ—Ä.", reply_markup=create_transport_keyboard())
#         bot.register_next_step_handler(message, edit_transport_field, index)
#         return

#     bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field.capitalize()}':", reply_markup=create_transport_keyboard())
#     bot.register_next_step_handler(message, update_transport_field, index, valid_fields[field])

# #@log_user_actions
# def update_transport_field(message, index, field):
#     user_id = str(message.chat.id)
#     new_value = message.text.strip()

#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
#     if field == "license_plate":
#         # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≥–æ—Å–Ω–æ–º–µ—Ä–∞ –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
#         new_value = new_value.upper()

#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≥–æ—Å–Ω–æ–º–µ—Ä–∞
#         import re
#         pattern = r'^[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•ABEKMHOPCTYX]\d{3}[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•ABEKMHOPCTYX]{2}\d{2,3}$'
#         if not re.match(pattern, new_value):
#             bot.send_message(user_id, "–û—à–∏–±–∫–∞! –ì–æ—Å–Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É.", reply_markup=create_transport_keyboard())
#             bot.register_next_step_handler(message, update_transport_field, index, field)
#             return

#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≥–æ—Å–Ω–æ–º–µ—Ä–∞
#         if any(t["license_plate"] == new_value for t in user_transport[user_id] if t != user_transport[user_id][index]):
#             bot.send_message(user_id, "–û—à–∏–±–∫–∞! –¢–∞–∫–æ–π –≥–æ—Å–Ω–æ–º–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=create_transport_keyboard())
#             bot.register_next_step_handler(message, update_transport_field, index, field)
#             return

#     elif field == "year":
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≥–æ–¥–∞
#         try:
#             new_value = int(new_value)
#             if new_value < 1960 or new_value > 3000:
#                 raise ValueError
#         except ValueError:
#             bot.send_message(user_id, "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç 1960 –¥–æ 3000).", reply_markup=create_transport_keyboard())
#             bot.register_next_step_handler(message, update_transport_field, index, field)
#             return

#     # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
#     user_transport[user_id][index][field] = new_value
#     save_transport_data(user_id, user_transport[user_id])

#     bot.send_message(user_id, "–î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=create_transport_keyboard())

#     # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞—Ç–∞—Ö –∏ —Ä–µ–º–æ–Ω—Ç–∞—Ö
#     update_expense_repair_data(user_id, user_transport[user_id][index])

# #@log_user_actions
# def update_expense_repair_data(user_id, updated_transport):
#     # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞—Å—Ö–æ–¥–∞—Ö
#     expense_data = load_expense_data(user_id)
#     for expense in expense_data.get("expenses", []):
#         if expense.get("transport", {}).get("license_plate") == updated_transport["license_plate"]:
#             expense["transport"] = updated_transport
#     save_expense_data(user_id, expense_data)

#     # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–º–æ–Ω—Ç–∞—Ö
#     repair_data = load_repair_data(user_id)
#     for repair in repair_data.get("repairs", []):
#         if repair.get("transport", {}).get("license_plate") == updated_transport["license_plate"]:
#             repair["transport"] = updated_transport
#     save_repair_data(user_id, repair_data)

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def delete_transport(message):
    user_id = str(message.chat.id)
    if user_id in user_transport and user_transport[user_id]:
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        transport_list = user_transport[user_id]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        for index, item in enumerate(transport_list, start=1):
            keyboard.add(f"‚Ññ{index}. {item['brand']} - {item['model']} - {item['year']} - {item['license_plate']}")
        
        # –ö–Ω–æ–ø–∫–∏ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
        item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        item_return_transport = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        keyboard.add("–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        keyboard.add(item_return_transport)
        keyboard.add(item_main_menu)
        
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        bot.register_next_step_handler(message, process_transport_selection)
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!")

#@log_user_actions
def process_transport_selection(message):
    user_id = str(message.chat.id)
    selected_transport = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é
    if selected_transport == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if selected_transport == "–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        delete_all_transports(message)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    transport_list = user_transport.get(user_id, [])
    if transport_list:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        try:
            index = int(selected_transport.split('.')[0].replace("‚Ññ", "").strip()) - 1
            if 0 <= index < len(transport_list):
                transport_to_delete = transport_list[index]
                bot.send_message(
    user_id,
    f"*–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?\n\n{transport_to_delete['brand']} - {transport_to_delete['model']} - {transport_to_delete['year']} - {transport_to_delete['license_plate']}*\n\n"
    "–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤!\n\n"
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–î–ê* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–ù–ï–¢* –¥–ª—è –æ—Ç–º–µ–Ω—ã",
    parse_mode="Markdown",
    reply_markup=get_return_menu_keyboard()
)
                bot.register_next_step_handler(message, lambda msg: process_confirmation(msg, transport_to_delete))
            else:
                raise ValueError("–ò–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        except ValueError:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞")
            delete_transport(message)
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!")

#@log_user_actions
def process_confirmation(message, transport_to_delete):
    user_id = str(message.chat.id)
    confirmation = message.text.strip().upper()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏–ª–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ "–î–ê" –∏–ª–∏ "–ù–ï–¢"
    if confirmation == "–î–ê":
        if user_id in user_transport and transport_to_delete in user_transport[user_id]:
            user_transport[user_id].remove(transport_to_delete)
            delete_expenses_related_to_transport(user_id, transport_to_delete)
            delete_repairs_related_to_transport(user_id, transport_to_delete)
            save_transport_data(user_id, user_transport[user_id])
            update_excel_file(user_id)
            update_repairs_excel_file(user_id)
            bot.send_message(user_id, "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º —Ç—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
            manage_transport(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        else:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    elif confirmation == "–ù–ï–¢":
        bot.send_message(user_id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
        manage_transport(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    else:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–î–ê* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–ù–ï–¢* –¥–ª—è –æ—Ç–º–µ–Ω—ã", parse_mode="Markdown")
        bot.register_next_step_handler(message, lambda msg: process_confirmation(msg, transport_to_delete))

#@log_user_actions
def process_delete_all_confirmation(message):
    user_id = str(message.chat.id)
    confirmation = message.text.strip().upper()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏–ª–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ "–î–ê" –∏–ª–∏ "–ù–ï–¢"
    if confirmation == "–î–ê":
        if user_id in user_transport:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
            transports = user_transport[user_id]
            user_transport[user_id] = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            save_transport_data(user_id, user_transport[user_id])

            for transport in transports:
                delete_expenses_related_to_transport(user_id, transport)
                delete_repairs_related_to_transport(user_id, transport)

            bot.send_message(user_id, "–í–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º —Ç—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
            manage_transport(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        else:
            bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!")
    elif confirmation == "–ù–ï–¢":
        bot.send_message(user_id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
        manage_transport(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    else:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–î–ê* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–ù–ï–¢* –¥–ª—è –æ—Ç–º–µ–Ω—ã", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_delete_all_confirmation)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
#@log_user_actions
def get_return_menu_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    item_return_transport = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    markup.add(item_return_transport)
    markup.add(item_main_menu)
    return markup

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def delete_all_transports(message):
    user_id = str(message.chat.id)
    if user_id in user_transport and user_transport[user_id]:
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
        bot.send_message(
    user_id,
    "*–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?*\n\n"
    "–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤!\n\n"
    "–í–≤–µ–¥–∏—Ç–µ *–î–ê* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–ù–ï–¢* –¥–ª—è –æ—Ç–º–µ–Ω—ã",
    parse_mode="Markdown",
    reply_markup=get_return_menu_keyboard()
)
        bot.register_next_step_handler(message, process_delete_all_confirmation)
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!")

#@log_user_actions
def process_delete_all_confirmation(message):
    user_id = str(message.chat.id)
    confirmation = message.text.strip().upper()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏–ª–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ "–î–ê" –∏–ª–∏ "–ù–ï–¢"
    if confirmation == "–î–ê":
        if user_id in user_transport:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
            transports = user_transport[user_id]
            user_transport[user_id] = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            save_transport_data(user_id, user_transport[user_id])

            for transport in transports:
                delete_expenses_related_to_transport(user_id, transport)
                delete_repairs_related_to_transport(user_id, transport)

            bot.send_message(user_id, "–í–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º —Ç—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
            manage_transport(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        else:
            bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!")
    elif confirmation == "–ù–ï–¢":
        bot.send_message(user_id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
        manage_transport(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    else:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–î–ê* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–ù–ï–¢* –¥–ª—è –æ—Ç–º–µ–Ω—ã", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_delete_all_confirmation)

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def view_transport(message):
    user_id = str(message.chat.id)
    if user_id in user_transport and user_transport[user_id]:
        transport_list = user_transport[user_id]
        response = "\n\n".join([
            f"‚Ññ{index + 1}. {item['brand']} - {item['model']} - {item['year']} - `{item['license_plate']}`"
            for index, item in enumerate(transport_list)
        ])
        bot.send_message(
            user_id,
            f"üöô *–í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç* üöô\n\n{response}",
            parse_mode="Markdown"
        )
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ manage_transport
    manage_transport(message)

@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
#@log_user_actions
def return_to_transport_menu(message):
    manage_transport(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞


# –ê–ù–¢–ò-–†–ê–î–ê–† 


# üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–º–µ—Ä–∞—Ö –∏–∑ —Ñ–∞–π–ª–∞
camera_data = []
coordinates = []
try:
    with open('files/milestones.csv', mode='r', encoding='utf-8') as file:
        reader = csv.DictReader(file, delimiter=';')
        for row in reader:
            latitude = float(row['gps_y'])
            longitude = float(row['gps_x'])
            camera_data.append({
                'id': row['camera_id'],
                'latitude': latitude,
                'longitude': longitude,
                'description': row['camera_place'],
            })
            coordinates.append((latitude, longitude))
except Exception as e:
    pass

# üå≥ –°–æ–∑–¥–∞–Ω–∏–µ KD-–¥–µ—Ä–µ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –∫–∞–º–µ—Ä
camera_tree = cKDTree(coordinates)
user_tracking = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∞–Ω—Ç–∏-—Ä–∞–¥–∞—Ä–∞
@bot.message_handler(func=lambda message: message.text == "–ê–Ω—Ç–∏-—Ä–∞–¥–∞—Ä")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ê–Ω—Ç–∏-—Ä–∞–¥–∞—Ä')
@track_usage('–ê–Ω—Ç–∏-—Ä–∞–¥–∞—Ä')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def start_antiradar(message):
    user_id = message.chat.id
    user_tracking[user_id] = {'tracking': True, 'notification_ids': [], 'last_notified_camera': {}, 'location': None, 'started': False}

    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button_geo = telebot.types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)
    button_off_geo = telebot.types.KeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏-—Ä–∞–¥–∞—Ä")
    keyboard.add(button_geo)
    keyboard.add(button_off_geo)
    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω—Ç–∏-—Ä–∞–¥–∞—Ä–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", reply_markup=keyboard)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–º–µ—Ä–∞–º–∏
    message_text = "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ö–∞–º–µ—Ä—ã –≤–ø–µ—Ä–µ–¥–∏:\n\n"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    sent_message = bot.send_message(user_id, message_text, parse_mode="Markdown")
    
    # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.pin_chat_message(user_id, sent_message.message_id)  # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_tracking[user_id]['last_camera_message'] = sent_message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∞–Ω—Ç–∏-—Ä–∞–¥–∞—Ä–µ
@bot.message_handler(content_types=['location'])
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏')
@track_usage('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def handle_antiradar_location(message):
    user_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    if message.location:
        latitude = message.location.latitude
        longitude = message.location.longitude
    else:
        bot.send_message(user_id, "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –∞–Ω—Ç–∏-—Ä–∞–¥–∞—Ä –≤–∫–ª—é—á–µ–Ω
    if user_tracking.get(user_id, {}).get('tracking', False):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_tracking[user_id]['location'] = message.location
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫–∏–Ω–≥, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω
        if not user_tracking[user_id].get('started', False):
            user_tracking[user_id]['started'] = True
            track_user_location(user_id, message.location)
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –∞–Ω—Ç–∏-—Ä–∞–¥–∞—Ä–∞
@bot.message_handler(func=lambda message: message.text == "–í—ã–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏-—Ä–∞–¥–∞—Ä")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–í—ã–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏-—Ä–∞–¥–∞—Ä')
@track_usage('–í—ã–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏-—Ä–∞–¥–∞—Ä')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def stop_antiradar(message):
    user_id = message.chat.id
    if user_id in user_tracking:
        user_tracking[user_id]['tracking'] = False
        bot.send_message(user_id, "–ê–Ω—Ç–∏-—Ä–∞–¥–∞—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–º–µ—Ä–∞–º–∏
        if user_tracking[user_id].get('last_camera_message'):
            bot.unpin_chat_message(user_id, user_tracking[user_id]['last_camera_message'])  # –£–±–∏—Ä–∞–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ
            bot.delete_message(user_id, user_tracking[user_id]['last_camera_message'])  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return_to_menu(message)

    else:
        bot.send_message(user_id, "–ê–Ω—Ç–∏-—Ä–∞–¥–∞—Ä –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω")


def delete_messages(user_id, message_id):
    time.sleep(6)
    try:
        bot.delete_message(chat_id=user_id, message_id=message_id)
    except:
        pass


MAX_CAMERAS_IN_MESSAGE = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–µ—Ä –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
ALERT_DISTANCE = 150  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –∫–∞–º–µ—Ä–µ
EXIT_DISTANCE = 50  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –∑–æ–Ω—ã –∫–∞–º–µ—Ä—ã
IN_ZONE_DISTANCE = 15  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ "–≤ –∑–æ–Ω–µ –∫–∞–º–µ—Ä—ã"


def track_user_location(user_id, initial_location):
    def monitor():
        while user_tracking.get(user_id, {}).get('tracking', False):
            user_location = user_tracking[user_id]['location']
            user_position = (user_location.latitude, user_location.longitude)
            distances, indices = camera_tree.query(user_position, k=len(camera_data))
            nearest_cameras = []
            unique_addresses = set()

            for i, distance in enumerate(distances[:MAX_CAMERAS_IN_MESSAGE]):
                if distance <= 1000:
                    camera = camera_data[indices[i]]
                    actual_distance = int(geodesic(user_position, (camera['latitude'], camera['longitude'])).meters)
                    camera_address = camera['description']

                    if camera_address not in user_tracking[user_id]['last_notified_camera']:
                        nearest_cameras.append((actual_distance, camera))
                        unique_addresses.add(camera_address)
                        user_tracking[user_id]['last_notified_camera'][camera_address] = {
                            'entered': False,
                            'exited': False,
                            'in_zone': False
                        }

                    if actual_distance <= ALERT_DISTANCE and not user_tracking[user_id]['last_notified_camera'][camera_address]['entered']:
                        notification_message = (
                            f"‚ö†Ô∏è –í—ã –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç–µ—Å—å –∫ –∫–∞–º–µ—Ä–µ!\n\n"
                            f"üì∑ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ - *{actual_distance} –º.*\n"
                            f"üó∫Ô∏è *{camera_address}*"
                        )
                        try:
                            sent_message = bot.send_message(user_id, notification_message, parse_mode="Markdown")
                            user_tracking[user_id]['notification_ids'].append(sent_message.message_id)
                            user_tracking[user_id]['last_notified_camera'][camera_address]['entered'] = True
                        except:
                            pass

                    if actual_distance <= IN_ZONE_DISTANCE and not user_tracking[user_id]['last_notified_camera'][camera_address]['in_zone']:
                        in_zone_message = (
                            f"üìç –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∑–æ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞–º–µ—Ä—ã!\n\n"
                            f"üó∫Ô∏è *{camera_address}*"
                        )
                        try:
                            in_zone_sent = bot.send_message(user_id, in_zone_message, parse_mode="Markdown")
                            user_tracking[user_id]['notification_ids'].append(in_zone_sent.message_id)
                            user_tracking[user_id]['last_notified_camera'][camera_address]['in_zone'] = True
                        except:
                            pass

                    if actual_distance > EXIT_DISTANCE and user_tracking[user_id]['last_notified_camera'][camera_address]['entered']:
                        exit_message = (
                            f"üîî –í—ã –≤—ã—à–ª–∏ –∏–∑ –∑–æ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –∫–∞–º–µ—Ä—ã!\n\n"
                            f"üó∫Ô∏è *{camera_address}*"
                        )
                        try:
                            exit_sent_message = bot.send_message(user_id, exit_message, parse_mode="Markdown")
                            user_tracking[user_id]['notification_ids'].append(exit_sent_message.message_id)
                            user_tracking[user_id]['last_notified_camera'][camera_address]['exited'] = True
                        except:
                            pass

            message_text = "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ö–∞–º–µ—Ä—ã –≤–ø–µ—Ä–µ–¥–∏:\n\n"
            for distance, camera in nearest_cameras:
                message_text += f"üì∑ –ö–∞–º–µ—Ä–∞ —á–µ—Ä–µ–∑ *{distance} –º.*\nüó∫Ô∏è –ê–¥—Ä–µ—Å: *{camera['description']}*\n\n"

            if nearest_cameras:
                try:
                    if user_tracking[user_id].get('last_camera_message'):
                        bot.edit_message_text(chat_id=user_id, message_id=user_tracking[user_id]['last_camera_message'], text=message_text, parse_mode="Markdown")
                    else:
                        sent_message = bot.send_message(user_id, message_text, parse_mode="Markdown")
                        user_tracking[user_id]['last_camera_message'] = sent_message.message_id
                except:
                    pass

            time.sleep(3)

    threading.Thread(target=monitor, daemon=True).start()


# ----------------------------------–ö–û–î –î–õ–Ø –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô---------------------------------------

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_PATH = 'data base/reminders/reminders.json'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)

    if not os.path.exists(DB_PATH):
        with open(DB_PATH, 'w', encoding='utf-8') as file:
            json.dump({"users": {}}, file, indent=4, ensure_ascii=False)

    with open(DB_PATH, 'r', encoding='utf-8') as file:
        data = json.load(file)

    if 'users' not in data:
        data['users'] = {}

    return data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    if 'users' not in data:
        data['users'] = {}

    with open(DB_PATH, 'w', encoding='utf-8') as file:
        json.dump(data, file, indent=4, ensure_ascii=False)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
#@log_user_actions
def return_to_reminders_menu(message):
    reminders_menu(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@bot.message_handler(commands=['mainmenu'])
def return_to_menu(message):
    start(message)

def send_reminders():
    data = load_data()
    current_time = datetime.now()
    logging.info(f"Current time: {current_time}")

    for user_id, user_data in data["users"].items():
        reminders = user_data.get("reminders", [])
        for reminder in reminders:
            reminder_type = reminder.get("type")
            reminder_datetime = datetime.strptime(reminder["date"] + " " + reminder["time"], "%d.%m.%Y %H:%M")
            logging.info(f"Checking reminder: {reminder}")

            if reminder["status"] == "active":
                if reminder_type == "–æ–¥–∏–Ω —Ä–∞–∑":
                    if reminder_datetime <= current_time:
                        bot.send_message(user_id, f"‚è∞ *–£ –≤–∞—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!* ‚è∞\n\n\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ: {reminder['title']} \n\nüìÖ –î–∞—Ç–∞: {reminder['date']} \nüïí –í—Ä–µ–º—è: {reminder['time']} \nüîñ –¢–∏–ø: {reminder['type']}", parse_mode="Markdown")
                        reminder["status"] = "expired"
                elif reminder_type == "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ":
                    if current_time.date() == reminder_datetime.date() and current_time.time() >= reminder_datetime.time():
                        bot.send_message(user_id, f"‚è∞ *–£ –≤–∞—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!* ‚è∞\n\n\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ: {reminder['title']} \n\nüìÖ –î–∞—Ç–∞: {reminder['date']} \nüïí –í—Ä–µ–º—è: {reminder['time']} \nüîñ –¢–∏–ø: {reminder['type']}", parse_mode="Markdown")
                        reminder["date"] = (reminder_datetime + timedelta(days=1)).strftime("%d.%m.%Y")
                elif reminder_type == "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ":
                    if current_time.date() == reminder_datetime.date() and current_time.time() >= reminder_datetime.time():
                        bot.send_message(user_id, f"‚è∞ *–£ –≤–∞—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!* ‚è∞\n\n\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ: {reminder['title']} \n\nüìÖ –î–∞—Ç–∞: {reminder['date']} \nüïí –í—Ä–µ–º—è: {reminder['time']} \nüîñ –¢–∏–ø: {reminder['type']}", parse_mode="Markdown")
                        reminder["date"] = (reminder_datetime + timedelta(weeks=1)).strftime("%d.%m.%Y")
                elif reminder_type == "–µ–∂–µ–º–µ—Å—è—á–Ω–æ":
                    if current_time.date() == reminder_datetime.date() and current_time.time() >= reminder_datetime.time():
                        bot.send_message(user_id, f"‚è∞ *–£ –≤–∞—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!* ‚è∞\n\n\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ: {reminder['title']} \n\nüìÖ –î–∞—Ç–∞: {reminder['date']} \nüïí –í—Ä–µ–º—è: {reminder['time']} \nüîñ –¢–∏–ø: {reminder['type']}", parse_mode="Markdown")
                        next_month = reminder_datetime.month % 12 + 1
                        next_year = reminder_datetime.year + (reminder_datetime.month // 12)
                        reminder["date"] = reminder_datetime.replace(day=reminder_datetime.day, month=next_month, year=next_year).strftime("%d.%m.%Y")

        save_data(data)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def run_scheduler():
    while True:
        send_reminders()
        time.sleep(15)

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=run_scheduler, daemon=True).start()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
@bot.message_handler(func=lambda message: message.text == "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
@track_usage('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
#@log_user_actions
def reminders_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', '–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
@track_usage('–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def add_reminder(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_title_step)

#@log_user_actions
def process_title_step(message):
    user_id = str(message.from_user.id)
    data = load_data()

    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_title_step)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        reminders_menu(message)
        return

    if user_id not in data["users"]:
        data["users"][user_id] = {"reminders": []}

    reminder = {"title": message.text}
    data["users"][user_id]["current_reminder"] = reminder
    save_data(data)

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–û–¥–∏–Ω —Ä–∞–∑', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ')
    markup.add('–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_type_step)

#@log_user_actions
def process_type_step(message):
    user_id = str(message.from_user.id)
    data = load_data()
    reminder = data["users"][user_id]["current_reminder"]

    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_type_step)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        reminders_menu(message)
        return

    reminder_type = message.text.lower()
    if reminder_type in ["–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", "–µ–∂–µ–º–µ—Å—è—á–Ω–æ", "–æ–¥–∏–Ω —Ä–∞–∑"]:
        reminder["type"] = reminder_type
    else:
        msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        bot.register_next_step_handler(msg, process_type_step)
        return

    save_data(data)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_date_step_for_repairs)

#@log_user_actions
def process_date_step_for_repairs(message):
    user_id = str(message.from_user.id)
    data = load_data()
    reminder = data["users"][user_id]["current_reminder"]

    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_date_step_for_repairs)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        reminders_menu(message)
        return

    date_input = message.text

    if re.match(r"^\d{2}\.\d{2}\.\d{4}$", date_input):
        try:
            day, month, year = map(int, date_input.split('.'))
            if 1 <= month <= 12 and 1 <= day <= 31 and 2000 <= year <= 3000:
                reminder_date = datetime.strptime(date_input, "%d.%m.%Y")
                current_date = datetime.now()
                if reminder_date.date() >= current_date.date():
                    reminder["date"] = date_input
                else:
                    raise ValueError("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã.")
            else:
                raise ValueError
        except ValueError as e:
            msg = bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            bot.register_next_step_handler(msg, process_date_step_for_repairs)
            return
    else:
        msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(msg, process_date_step_for_repairs)
        return

    save_data(data)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_time_step)

#@log_user_actions
def process_time_step(message):
    user_id = str(message.from_user.id)
    data = load_data()
    reminder = data["users"][user_id]["current_reminder"]

    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_time_step)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        reminders_menu(message)
        return

    time_input = message.text

    if re.match(r"^\d{2}:\d{2}$", time_input):
        try:
            hour, minute = map(int, time_input.split(':'))
            if 0 <= hour <= 23 and 0 <= minute <= 59:
                reminder_time = datetime.strptime(time_input, "%H:%M").time()
                current_time = datetime.now().time()
                reminder_date = datetime.strptime(reminder["date"], "%d.%m.%Y").date()
                current_date = datetime.now().date()

                if reminder_date > current_date or (reminder_date == current_date and reminder_time >= current_time):
                    reminder["time"] = time_input
                    reminder["status"] = "active"
                else:
                    raise ValueError("–í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
            else:
                raise ValueError
        except ValueError as e:
            msg = bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
            bot.register_next_step_handler(msg, process_time_step)
            return
    else:
        msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
        bot.register_next_step_handler(msg, process_time_step)
        return

    data["users"][user_id]["reminders"].append(reminder)
    del data["users"][user_id]["current_reminder"]
    save_data(data)

    bot.send_message(message.chat.id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    reminders_menu(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def view_reminders(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ê–∫—Ç–∏–≤–Ω—ã–µ', '–ò—Å—Ç–µ–∫—à–∏–µ')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–ê–∫—Ç–∏–≤–Ω—ã–µ" –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == "–ê–∫—Ç–∏–≤–Ω—ã–µ")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ê–∫—Ç–∏–≤–Ω—ã–µ')
@track_usage('–ê–∫—Ç–∏–≤–Ω—ã–µ')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def view_active_reminders(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–û–¥–∏–Ω —Ä–∞–∑ (–∞–∫—Ç–∏–≤–Ω—ã–µ)', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)')
    markup.add('–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–ò—Å—Ç–µ–∫—à–∏–µ" –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == "–ò—Å—Ç–µ–∫—à–∏–µ")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ò—Å—Ç–µ–∫—à–∏–µ')
@track_usage('–ò—Å—Ç–µ–∫—à–∏–µ')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def view_expired_reminders(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–û–¥–∏–Ω —Ä–∞–∑ (–∏—Å—Ç–µ–∫—à–∏–µ)', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)')
    markup.add('–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏—Å—Ç–µ–∫—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@bot.message_handler(func=lambda message: message.text in ['–û–¥–∏–Ω —Ä–∞–∑ (–∞–∫—Ç–∏–≤–Ω—ã–µ)', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)', '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)'])
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–û–¥–∏–Ω —Ä–∞–∑ (–∞–∫—Ç–∏–≤–Ω—ã–µ)')
@check_function_state_decorator('–ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)')
@check_function_state_decorator('–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)')
@check_function_state_decorator('–ï–∂–µ–º–µ—Å—è—á–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)')
@track_usage('–û–¥–∏–Ω —Ä–∞–∑ (–∞–∫—Ç–∏–≤–Ω—ã–µ)')
@track_usage('–ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)')
@track_usage('–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)')
@track_usage('–ï–∂–µ–º–µ—Å—è—á–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)')
#@log_user_actions
def view_active_reminders_by_type(message):
    user_id = str(message.from_user.id)
    data = load_data()
    reminders = data["users"].get(user_id, {}).get("reminders", [])
    current_date = datetime.now()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    reminder_type = message.text.split(' ')[0].lower() + ' ' + message.text.split(' ')[1].lower()
    reminder_type = reminder_type.replace("(–∞–∫—Ç–∏–≤–Ω—ã–µ)", "").strip()

    active = []
    for reminder in reminders:
        reminder_datetime = datetime.strptime(reminder["date"] + ' ' + reminder["time"], "%d.%m.%Y %H:%M")

        if reminder["status"] == "active" and reminder["type"] == reminder_type:
            if reminder_type == "–æ–¥–∏–Ω —Ä–∞–∑" and reminder_datetime >= current_date:
                active.append(reminder)
            elif reminder_type == "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ" and reminder_datetime.date() >= current_date.date():
                active.append(reminder)
            elif reminder_type == "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ" and reminder_datetime.weekday() == current_date.weekday():
                active.append(reminder)
            elif reminder_type == "–µ–∂–µ–º–µ—Å—è—á–Ω–æ" and reminder_datetime.day == current_date.day:
                active.append(reminder)

    if active:
        response = f"*–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({reminder_type}):*\n\n"
        for i, reminder in enumerate(active, 1):
            response += (
                f"\n‚≠ê ‚Ññ{i} ‚≠ê\n\n\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {reminder['title']}\n\n"
                f"üìÖ –î–∞—Ç–∞: {reminder['date']}\n"
                f"üïí –í—Ä–µ–º—è: {reminder['time']}\n"
                f"‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–æ–µ\n"
                f"üîñ –¢–∏–ø: {reminder['type']}\n\n"
            )
    else:
        response = f"*–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({reminder_type}):*\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"

    bot.send_message(message.chat.id, response, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@bot.message_handler(func=lambda message: message.text in ['–û–¥–∏–Ω —Ä–∞–∑ (–∏—Å—Ç–µ–∫—à–∏–µ)', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)', '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)'])
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–û–¥–∏–Ω —Ä–∞–∑ (–∏—Å—Ç–µ–∫—à–∏–µ)')
@check_function_state_decorator('–ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)')
@check_function_state_decorator('–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)')
@check_function_state_decorator('–ï–∂–µ–º–µ—Å—è—á–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)')
@track_usage('–û–¥–∏–Ω —Ä–∞–∑ (–∏—Å—Ç–µ–∫—à–∏–µ)')
@track_usage('–ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)')
@track_usage('–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)')
@track_usage('–ï–∂–µ–º–µ—Å—è—á–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)')
#@log_user_actions
def view_expired_reminders_by_type(message):
    user_id = str(message.from_user.id)
    data = load_data()
    reminders = data["users"].get(user_id, {}).get("reminders", [])

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    reminder_type = message.text.split(' ')[0].lower() + ' ' + message.text.split(' ')[1].lower()
    reminder_type = reminder_type.replace("(–∏—Å—Ç–µ–∫—à–∏–µ)", "").strip()

    expired = []
    for reminder in reminders:
        if reminder["status"] == "expired" and reminder["type"] == reminder_type:
            expired.append(reminder)

    if expired:
        response = f"*–ò—Å—Ç–µ–∫—à–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({reminder_type}):*\n\n"
        for i, reminder in enumerate(expired, 1):
            response += (
                f"\n‚ùå ‚Ññ{i} ‚ùå\n\n\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {reminder['title']}\n\n"
                f"üìÖ –î–∞—Ç–∞: {reminder['date']}\n"
                f"üïí –í—Ä–µ–º—è: {reminder['time']}\n"
                f"‚úÖ –°—Ç–∞—Ç—É—Å: –ò—Å—Ç–µ–∫–ª–æ\n"
                f"üîñ –¢–∏–ø: {reminder['type']}\n\n"
            )
    else:
        response = f"*–ò—Å—Ç–µ–∫—à–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({reminder_type}):*\n\n–ù–µ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"

    bot.send_message(message.chat.id, response, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
@track_usage('–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def delete_reminder(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('Del –ê–∫—Ç–∏–≤–Ω—ã–µ', 'Del –ò—Å—Ç–µ–∫—à–∏–µ')
    markup.add('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "Del –ê–∫—Ç–∏–≤–Ω—ã–µ" –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == "Del –ê–∫—Ç–∏–≤–Ω—ã–µ")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('Del –ê–∫—Ç–∏–≤–Ω—ã–µ')
@track_usage('Del –ê–∫—Ç–∏–≤–Ω—ã–µ')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def delete_active_reminders(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('Del –û–¥–∏–Ω —Ä–∞–∑ (–∞–∫—Ç–∏–≤–Ω—ã–µ)', 'Del –ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)')
    markup.add('Del –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)', 'Del –ï–∂–µ–º–µ—Å—è—á–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "Del –ò—Å—Ç–µ–∫—à–∏–µ" –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == "Del –ò—Å—Ç–µ–∫—à–∏–µ")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('Del –ò—Å—Ç–µ–∫—à–∏–µ')
@track_usage('Del –ò—Å—Ç–µ–∫—à–∏–µ')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def delete_expired_reminders(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('Del –û–¥–∏–Ω —Ä–∞–∑ (–∏—Å—Ç–µ–∫—à–∏–µ)', 'Del –ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)')
    markup.add('Del –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)', 'Del –ï–∂–µ–º–µ—Å—è—á–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏—Å—Ç–µ–∫—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@bot.message_handler(func=lambda message: message.text in ['Del –û–¥–∏–Ω —Ä–∞–∑ (–∞–∫—Ç–∏–≤–Ω—ã–µ)', 'Del –ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)', 'Del –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)', 'Del –ï–∂–µ–º–µ—Å—è—á–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)'])
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('Del –û–¥–∏–Ω —Ä–∞–∑ (–∞–∫—Ç–∏–≤–Ω—ã–µ)')
@check_function_state_decorator('Del –ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)')
@check_function_state_decorator('Del –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)')
@check_function_state_decorator('Del –ï–∂–µ–º–µ—Å—è—á–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)')
@track_usage('Del –û–¥–∏–Ω —Ä–∞–∑ (–∞–∫—Ç–∏–≤–Ω—ã–µ)')
@track_usage('Del –ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)')
@track_usage('Del –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)')
@track_usage('Del –ï–∂–µ–º–µ—Å—è—á–Ω–æ (–∞–∫—Ç–∏–≤–Ω—ã–µ)')
#@log_user_actions
def delete_active_reminders_by_type(message):
    user_id = str(message.from_user.id)
    data = load_data()
    reminders = data["users"].get(user_id, {}).get("reminders", [])

    reminder_type = message.text.split(' ')[1].lower() + ' ' + message.text.split(' ')[2].lower()
    reminder_type = reminder_type.replace("(–∞–∫—Ç–∏–≤–Ω—ã–µ)", "").strip()

    active_reminders = [reminder for reminder in reminders if reminder["status"] == "active" and reminder["type"] == reminder_type]

    if not active_reminders:
        bot.send_message(
            message.chat.id,
            f"*–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({reminder_type}) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
            parse_mode="Markdown",
        )
        delete_active_reminders(message)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        return

    response = f"*–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({reminder_type}) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*\n\n"
    for i, reminder in enumerate(active_reminders, 1):
        response += (
            f"\n‚ùå ‚Ññ{i} ‚ùå\n\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {reminder['title']}\n\n"
            f"üìÖ –î–∞—Ç–∞: {reminder['date']}\n"
            f"üïí –í—Ä–µ–º—è: {reminder['time']}\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–æ–µ\n"
            f"üîñ –¢–∏–ø: {reminder['type']}\n\n"
        )

    bot.send_message(message.chat.id, response, parse_mode="Markdown")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    data["users"][user_id]["current_reminder_type"] = reminder_type
    data["users"][user_id]["current_reminders"] = active_reminders
    save_data(data)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, confirm_delete_active_step)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@bot.message_handler(func=lambda message: message.text in ['Del –û–¥–∏–Ω —Ä–∞–∑ (–∏—Å—Ç–µ–∫—à–∏–µ)', 'Del –ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)', 'Del –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)', 'Del –ï–∂–µ–º–µ—Å—è—á–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)'])
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('Del –û–¥–∏–Ω —Ä–∞–∑ (–∏—Å—Ç–µ–∫—à–∏–µ)')
@check_function_state_decorator('Del –ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)')
@check_function_state_decorator('Del –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)')
@check_function_state_decorator('Del –ï–∂–µ–º–µ—Å—è—á–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)')
@track_usage('Del –û–¥–∏–Ω —Ä–∞–∑ (–∏—Å—Ç–µ–∫—à–∏–µ)')
@track_usage('Del –ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)')
@track_usage('Del –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)')
@track_usage('Del –ï–∂–µ–º–µ—Å—è—á–Ω–æ (–∏—Å—Ç–µ–∫—à–∏–µ)')
#@log_user_actions
def delete_expired_reminders_by_type(message):
    user_id = str(message.from_user.id)
    data = load_data()
    reminders = data["users"].get(user_id, {}).get("reminders", [])

    reminder_type = message.text.split(' ')[1].lower() + ' ' + message.text.split(' ')[2].lower()
    reminder_type = reminder_type.replace("(–∏—Å—Ç–µ–∫—à–∏–µ)", "").strip()

    expired_reminders = [reminder for reminder in reminders if reminder["status"] == "expired" and reminder["type"] == reminder_type]

    if not expired_reminders:
        bot.send_message(
            message.chat.id,
            f"*–ò—Å—Ç–µ–∫—à–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({reminder_type}) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*\n\n–ù–µ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
            parse_mode="Markdown",
        )
        delete_expired_reminders(message)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        return

    response = f"*–ò—Å—Ç–µ–∫—à–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({reminder_type}) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*\n\n"
    for i, reminder in enumerate(expired_reminders, 1):
        response += (
            f"\n‚ùå ‚Ññ{i} ‚ùå\n\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {reminder['title']}\n\n"
            f"üìÖ –î–∞—Ç–∞: {reminder['date']}\n"
            f"üïí –í—Ä–µ–º—è: {reminder['time']}\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: –ò—Å—Ç–µ–∫–ª–æ\n"
            f"üîñ –¢–∏–ø: {reminder['type']}\n\n"
        )

    bot.send_message(message.chat.id, response, parse_mode="Markdown")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    data["users"][user_id]["current_reminder_type"] = reminder_type
    data["users"][user_id]["current_reminders"] = expired_reminders
    save_data(data)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, confirm_delete_expired_step)

#@log_user_actions
def confirm_delete_active_step(message):
    user_id = str(message.from_user.id)
    data = load_data()
    reminders = data["users"][user_id].get("current_reminders", [])
    reminder_type = data["users"][user_id].get("current_reminder_type")

    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, confirm_delete_active_step)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        reminders_menu(message)
        return

    try:
        reminder_index = int(message.text) - 1
        if 0 <= reminder_index < len(reminders) and reminders[reminder_index]["type"] == reminder_type:
            user_reminders = data["users"][user_id]["reminders"]
            user_reminders.remove(reminders[reminder_index])
            save_data(data)
            bot.send_message(message.chat.id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ *‚Ññ{reminder_index + 1}* —É–¥–∞–ª–µ–Ω–æ!", parse_mode="Markdown")
            reminders_menu(message)
        else:
            raise IndexError
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä")
        bot.register_next_step_handler(message, confirm_delete_active_step)

#@log_user_actions
def confirm_delete_expired_step(message):
    user_id = str(message.from_user.id)
    data = load_data()
    reminders = data["users"][user_id].get("current_reminders", [])
    reminder_type = data["users"][user_id].get("current_reminder_type")

    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, confirm_delete_expired_step)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        reminders_menu(message)
        return

    try:
        reminder_index = int(message.text) - 1
        if 0 <= reminder_index < len(reminders) and reminders[reminder_index]["type"] == reminder_type:
            user_reminders = data["users"][user_id]["reminders"]
            user_reminders.remove(reminders[reminder_index])
            save_data(data)
            bot.send_message(message.chat.id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ *‚Ññ{reminder_index + 1}* —É–¥–∞–ª–µ–Ω–æ!", parse_mode="Markdown")
            reminders_menu(message)
        else:
            raise IndexError
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä")
        bot.register_next_step_handler(message, confirm_delete_expired_step)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
@track_usage('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def delete_all_reminders(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è? –ù–∞–ø–∏—à–∏—Ç–µ *–î–ê* –∏–ª–∏ *–ù–ï–¢*", reply_markup=markup, parse_mode="Markdown")

    bot.register_next_step_handler(message, confirm_delete_all_step)

#@log_user_actions
def confirm_delete_all_step(message):
    user_id = str(message.from_user.id)
    data = load_data()

    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, confirm_delete_all_step)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        reminders_menu(message)
        return

    user_reminders = data["users"].get(user_id, {}).get("reminders", [])

    if message.text.strip().upper() == "–î–ê":
        if not user_reminders:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!", parse_mode="Markdown")
        else:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            data["users"][user_id]["reminders"] = []
            data["users"][user_id]["current_reminder_type"] = None
            data["users"][user_id]["current_reminders"] = []
            save_data(data)
            bot.send_message(message.chat.id, "–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")
        
        reminders_menu(message)
    elif message.text.strip().upper() == "–ù–ï–¢":
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω–æ!", parse_mode="Markdown")
        reminders_menu(message)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ *–î–ê* –∏–ª–∏ *–ù–ï–¢*", parse_mode="Markdown")
        bot.register_next_step_handler(message, confirm_delete_all_step)


#----------------------------------------- –ö–û–î–´ OBD2-------------------------------

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫ OBD-II –∏–∑ —Ñ–∞–π–ª–∞
def load_error_codes():
    error_codes = {}
    with open("files/codes_obd2.txt", "r", encoding="utf-8") as file:
        for line in file:
            parts = line.strip().split(" ", 1)
            if len(parts) == 2:
                code, description = parts
                error_codes[code] = description
    return error_codes

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–¥—ã –æ—à–∏–±–æ–∫
error_codes = load_error_codes()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "OBD2"
@bot.message_handler(func=lambda message: message.text == "–ö–æ–¥—ã OBD2")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ö–æ–¥—ã OBD2')
@track_usage('–ö–æ–¥—ã OBD2')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def obd2_request(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–µ —Ñ–∞–π–ª—ã
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥, –Ω–æ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –æ—à–∏–±–∫–∏ (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
        bot.register_next_step_handler(msg, process_error_codes)
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –∫–æ–¥–∞ –æ—à–∏–±–∫–∏
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –æ—à–∏–±–∫–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", reply_markup=markup)
    bot.register_next_step_handler(msg, process_error_codes)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫
#@log_user_actions
def process_error_codes(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–µ —Ñ–∞–π–ª—ã
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        bot.register_next_step_handler(message, process_error_codes)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏ –ø–æ–∏—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
    codes = [code.strip().upper() for code in message.text.split(",")]
    response = ""
    
    for code in codes:
        if code in error_codes:
            response += f"üîß *–ö–æ–¥ –æ—à–∏–±–∫–∏*: {code}\nüìã *–û–ø–∏—Å–∞–Ω–∏–µ*: {error_codes[code]}\n\n\n"
        else:
            response += f"üîß *–ö–æ–¥ –æ—à–∏–±–∫–∏*: {code}\n‚ùå *–û–ø–∏—Å–∞–Ω–∏–µ*: –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n\n\n"
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id, response, parse_mode="Markdown")

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –æ—à–∏–±–∫–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏"))
    markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏"
@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏')
#@log_user_actions
def another_error_request(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–µ —Ñ–∞–π–ª—ã
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        bot.register_next_step_handler(message, process_error_codes)
        return

    obd2_request(message)




# (ADMIN) ----------------------------------------------- –ö–û–î –î–õ–Ø "–ê–ù–ú–ò–ù-–ü–ê–ù–ï–õ–ò" ------------------------------------------------------

# (ADMIN 1) -------------------------------------------------"–í–•–û–î –î–õ–Ø –ê–î–ú–ò–ù–ê" --------------------------------------------------------

# (ADMIN 2) ---------------------------------------------- "–ú–ï–ù–Æ –î–õ–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò" ------------------------------------------------

# (ADMIN 3) --------------------------------- " –§–£–ù–ö–¶–ò–Ø "–ê–î–ú–ò–ù" " ---------------------------------------------

ADMIN_USERNAME = "EvgenyAlex21"
ADMIN_PASSWORD = "HH1515az!"

admin_sessions = set()

ADMIN_SESSIONS_PATH = 'data base/admin/admin_sessions.json'

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞
credentials_changed = False

admin_sessions = set()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –µ–¥–∏–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
# –í —Ñ—É–Ω–∫—Ü–∏–∏ load_admin_data –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
def load_admin_data():
    if os.path.exists(ADMIN_SESSIONS_PATH):
        with open(ADMIN_SESSIONS_PATH, 'r', encoding='utf-8') as file:
            data = json.load(file)
            return {
                "admin_sessions": set(data.get("admin_sessions", [])),  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
                "admins_data": data.get("admins_data", {}),
                "removed_admins": {k: v for k, v in data.get("removed_admins", {}).items()},
                "login_password_hash": data.get("login_password_hash", "")
            }
    return {
        "admin_sessions": set(),
        "admins_data": {},
        "removed_admins": {},
        "login_password_hash": ""
    }

def save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins=None):
    with open(ADMIN_SESSIONS_PATH, 'w', encoding='utf-8') as file:
        json.dump({
            "admin_sessions": list(admin_sessions),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫
            "admins_data": admins_data,
            "removed_admins": removed_admins or {},
            "login_password_hash": login_password_hash
        }, file, ensure_ascii=False, indent=4)


admin_sessions = set()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –µ–¥–∏–Ω–æ–π –±–∞–∑—ã
data = load_admin_data()
admin_sessions = data["admin_sessions"]
admins_data = data["admins_data"]
removed_admins = data["removed_admins"]
login_password_hash = data["login_password_hash"]


login_password_hash = hashlib.sha256(f"{ADMIN_USERNAME}:{ADMIN_PASSWORD}".encode()).hexdigest()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–µ—à–∞
#@log_user_actions
def get_login_password_hash():
    return hashlib.sha256(f"{ADMIN_USERNAME}:{ADMIN_PASSWORD}".encode()).hexdigest()

#@log_user_actions
def update_login_password(chat_id, new_username=None, new_password=None):
    global admins_data, login_password_hash

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è admin_id
    admin_id = str(chat_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID
    if admin_id not in admins_data:
        return f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_data = admins_data[admin_id]
    current_username = admin_data["admins_username"]
    current_password_hash = admin_data["login_password_hash_for_user_id"]

    # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω –∑–∞–¥–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    if new_username:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –ª–æ–≥–∏–Ω –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        old_username = current_username

        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏–Ω
        admin_data["admins_username"] = new_username

        # –ï—Å–ª–∏ –ª–æ–≥–∏–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ö—ç—à
        if old_username != new_username:
            admin_data["login_password_hash_for_user_id"] = hashlib.sha256(f"{new_username}:{new_password or current_password_hash}".encode()).hexdigest()

    # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ö—ç—à
    if new_password:
        new_hash = hashlib.sha256(f"{new_username or current_username}:{new_password}".encode()).hexdigest()
        admin_data["login_password_hash_for_user_id"] = new_hash
    else:
        # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ö—ç—à
        admin_data["login_password_hash_for_user_id"] = current_password_hash

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ö—ç—à
    login_password_hash = hashlib.sha256(f"{new_username or current_username}:{new_password or current_password_hash}".encode()).hexdigest()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    admins_data[admin_id] = admin_data

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ
    save_admin_data(admin_sessions, admins_data, login_password_hash)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if new_username and new_password:
        return f"–õ–æ–≥–∏–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {new_username}, –ø–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω."
    elif new_username:
        return f"–õ–æ–≥–∏–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {new_username}. –ü–∞—Ä–æ–ª—å –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º."
    elif new_password:
        return "–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω."
    else:
        return "–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ."

def verify_login_password_hash():
    global login_password_hash
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ö–µ—à
    current_hash = hashlib.sha256(f"{ADMIN_USERNAME}:{ADMIN_PASSWORD}".encode()).hexdigest()

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º —Ö–µ—à–µ–º
    if current_hash != login_password_hash:
        login_password_hash = current_hash
        save_admin_data(admin_sessions, admins_data, login_password_hash)

verify_login_password_hash()

# –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
#@log_user_actions
def change_admin_credentials(new_username=None, new_password=None):
    global ADMIN_USERNAME, ADMIN_PASSWORD, login_password_hash
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    current_username = ADMIN_USERNAME
    current_password = ADMIN_PASSWORD
    
    if new_username:
        ADMIN_USERNAME = new_username
        current_username = new_username  # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ª–æ–≥–∏–Ω
    if new_password:
        ADMIN_PASSWORD = new_password
        current_password = new_password  # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
    login_password_hash = hashlib.sha256(f"{current_username}:{current_password}".encode()).hexdigest()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    save_admin_data(admin_sessions, admins_data, login_password_hash)

# –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
#@log_user_actions
def add_admin(admin_id, username, permissions=None, initiator_chat_id=None):
    admin_id = str(admin_id)
    if permissions is None:
        permissions = ["–ê–¥–º–∏–Ω", "–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞", "–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", "–°–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π", "–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫", "–í–µ—Ä—Å–∏—è –∏ –∞–ø—Ç–∞–π–º"]  # –ü—Ä–∞–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    user_data = {
        "user_id": admin_id,
        "first_name": " ",
        "last_name": " ",
        "username": username,
        "phone": " ",
        "permissions": permissions,
        "is_new": True  # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–æ–≤—ã–π
    }
    admins_data[admin_id] = user_data
    admin_sessions.append(admin_id)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏
    save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins)
    bot.send_message(admin_id, "‚úÖ –í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –ø–æ –∫–æ–º–∞–Ω–¥–µ /admin –¥–æ—Å—Ç—É–ø–µ–Ω...")
    if initiator_chat_id:
        bot.send_message(initiator_chat_id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {escape_markdown(username)} - `{admin_id}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode="Markdown")

#@log_user_actions
def remove_admin(admin_id, initiator_chat_id):
    admin_id = str(admin_id)
    if admin_id in admins_data:
        admin_username = admins_data[admin_id]["username"]
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        removed_admins[admin_id] = {"username": admin_username}

        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        del admins_data[admin_id]
        if admin_id in admin_sessions:
            admin_sessions.remove(admin_id)  # –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Å—Å–∏–π

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        bot.send_message(admin_id, "üö´ –í–∞—Å —É–¥–∞–ª–∏–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
        bot.send_message(initiator_chat_id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {escape_markdown(admin_username)} - {admin_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    else:
        bot.send_message(initiator_chat_id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

#@log_user_actions
def check_permission(admin_id, permission):
    return permission in admins_data.get(str(admin_id), {}).get("permissions", [])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram
#@log_user_actions
def get_user_data(message):
    user = message.from_user
    return {
        "user_id": user.id,
        "first_name": user.first_name if user.first_name else " ",
        "last_name": user.last_name if user.last_name else " ",
        "username": f"@{user.username}" if user.username else " ",
        "phone": user.phone_number if hasattr(user, 'phone_number') else " "
    }

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ
#@log_user_actions
def update_admin_data(user_data):
    admin_id = str(user_data["user_id"])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ —Å–ø–∏—Å–∫–µ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö
    if admin_id in removed_admins:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {admin_id} –±—ã–ª —Ä–∞–Ω–µ–µ —É–¥–∞–ª—ë–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ!")
        return
    
    if admin_id in admins_data:
        existing_data = admins_data[admin_id]
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        if (existing_data.get("first_name") != user_data["first_name"] or
            existing_data.get("last_name") != user_data["last_name"] or
            existing_data.get("username") != user_data["username"] or
            existing_data.get("phone") != user_data["phone"]):
            admins_data[admin_id].update(user_data)
            save_admin_data(admin_sessions, admins_data, login_password_hash)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –∏ –æ–Ω –Ω–µ —É–¥–∞–ª—ë–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        admins_data[admin_id] = user_data
        save_admin_data(admin_sessions, admins_data, login_password_hash)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@bot.message_handler(commands=['admin'])
@check_chat_state
#@log_user_actions
def handle_admin_login(message):
    global credentials_changed
    user_data = get_user_data(message)
    admin_id = str(user_data["user_id"])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–µ—Å—Å–∏—è—Ö
    if admin_id in admin_sessions:  # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        if not credentials_changed:
            markup.add('–ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥')
        if credentials_changed:
            markup.add('–í–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(
            user_data["user_id"],
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞:",
            reply_markup=markup
        )
        bot.register_next_step_handler(message, process_login_choice)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–æ–≤—ã–º
        if is_new_admin(admin_id):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞')
            bot.send_message(message.chat.id, "–í—ã –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞:", reply_markup=markup)
            bot.register_next_step_handler(message, handle_change_credentials)
        else:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            markup.add(item_main)
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:", reply_markup=markup)
            bot.register_next_step_handler(message, verify_username)

#@log_user_actions
def is_new_admin(admin_id):
    return admins_data.get(admin_id, {}).get("is_new", False)

#@log_user_actions
def process_login_choice(message):
    global credentials_changed
    user_id = str(message.chat.id)

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥":
        if user_id in admin_sessions and not credentials_changed:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–æ–≤—ã–º
            if is_new_admin(user_id):
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add('–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞')
                bot.send_message(message.chat.id, "–í—ã –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞:", reply_markup=markup)
                bot.register_next_step_handler(message, handle_change_credentials)
            else:
                session_data = admins_data.get(user_id, {})
                bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {session_data.get('username', '–ê–¥–º–∏–Ω')}!")
                show_admin_panel(message)
        else:
            bot.send_message(message.chat.id, "–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ.")
            handle_admin_login(message)
    elif message.text == "–í–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item_main)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:", reply_markup=markup)
        bot.register_next_step_handler(message, verify_username)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        handle_admin_login(message)

#@log_user_actions
def verify_username(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    username = message.text
    is_valid, error_message = is_valid_username(username)
    if not is_valid:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {error_message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, verify_username)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_main)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=markup)
    bot.register_next_step_handler(message, verify_password, username)

#@log_user_actions
def verify_password(message, username):
    global credentials_changed

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    password = message.text
    admin_id = str(message.chat.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª—ë–Ω –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if admin_id in removed_admins:
        bot.send_message(message.chat.id, "–í–∞—à –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
    if username == ADMIN_USERNAME and password == ADMIN_PASSWORD:
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        admin_sessions.append(admin_id)
        save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ
        user_data = get_user_data(message)
        update_admin_data(user_data)

        session_data = admins_data.get(admin_id, {})
        bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {session_data.get('username', '–ê–¥–º–∏–Ω')}!")
        show_admin_panel(message)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞
        credentials_changed = False
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ö–µ—à
    admin_hash = admins_data.get(admin_id, {}).get("login_password_hash_for_user_id", "")
    if generate_login_password_hash(username, password) == admin_hash:
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        admin_sessions.append(admin_id)
        save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ
        user_data = get_user_data(message)
        update_admin_data(user_data)

        session_data = admins_data.get(admin_id, {})
        bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {session_data.get('username', '–ê–¥–º–∏–Ω')}!")
        show_admin_panel(message)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞
        credentials_changed = False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ö–µ—à
    admin_hash = admins_data.get(admin_id, {}).get("login_password_hash_for_user_id", "")
    if generate_login_password_hash(username, password) == admin_hash:
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        admin_sessions.append(admin_id)
        save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ
        user_data = get_user_data(message)
        update_admin_data(user_data)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞
        credentials_changed = False
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        handle_admin_login(message)

# –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@bot.message_handler(func=lambda message: message.text == '–í—ã—Ö–æ–¥' and str(message.chat.id) in admin_sessions)
#@log_user_actions
def admin_logout(message):
    # –ê–¥–º–∏–Ω-—Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ –≤—ã—Ö–æ–¥–µ
    bot.send_message(message.chat.id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!\n–ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    return_to_menu(message)

# (ADMIN 2) ---------------------------------------------- "–ú–ï–ù–Æ –î–õ–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò" ------------------------------------------------

# –ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
#@log_user_actions
def show_admin_panel(message):
    admin_id = str(message.chat.id)
    if is_new_admin(admin_id):
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞')
        bot.send_message(message.chat.id, "–í—ã –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, handle_change_credentials)
    else:
        markup = types.ReplyKeyboardMarkup(row_width=3)
        markup.add('–ê–¥–º–∏–Ω', '–ë–∞–Ω', '–§—É–Ω–∫—Ü–∏–∏')
        markup.add('–û–±—â–µ–Ω–∏–µ', '–†–µ–∫–ª–∞–º–∞', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        markup.add('–§–∞–π–ª—ã', '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è', '–†–µ–¥–∞–∫—Ü–∏—è')
        markup.add('–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞')
        markup.add('–í—ã—Ö–æ–¥')
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"
@bot.message_handler(func=lambda message: message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
#@log_user_actions
def handle_return_to_admin_panel(message):
    show_admin_panel(message)


# (ADMIN 3) --------------------------------- " –§–£–ù–ö–¶–ò–Ø "–ê–î–ú–ò–ù" " --------------------------------------------- 

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
#@log_user_actions
def get_root_admin_id():
    if admins_data:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–ª—é—á –∏–∑ —Å–ª–æ–≤–∞—Ä—è admins_data
        return next(iter(admins_data))
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä–Ω–µ–≤—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
#@log_user_actions
def is_root_admin(admin_id):
    return admin_id == get_root_admin_id()

#@log_user_actions
def check_permission(admin_id, permission):
    if is_root_admin(admin_id):
        return True  # –ö–æ—Ä–Ω–µ–≤–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
    return permission in admins_data.get(str(admin_id), {}).get("permissions", [])   


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–Ω–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
#@log_user_actions
def is_valid_username(username):
    if len(username) < 3:
        return False, "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤."
    if not re.search(r'[A-Z]', username):
        return False, "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É."
    if not re.search(r'[a-z]', username):
        return False, "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É."
    if not re.search(r'[0-9]', username):
        return False, "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É."
    return True, ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
#@log_user_actions
def is_valid_password(password):
    if len(password) < 8:
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤."
    if not re.search(r'[A-Z]', password):
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É."
    if not re.search(r'[a-z]', password):
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É."
    if not re.search(r'[0-9]', password):
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É."
    if not re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª."
    return True, ""

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–ê–¥–º–∏–Ω' and check_admin_access(message))
def show_settings_menu(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ê–¥–º–∏–Ω'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞')
    markup.add('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', '–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞', '–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
#@log_user_actions
def generate_login_password_hash(username, password):
    return hashlib.sha256(f"{username}:{password}".encode()).hexdigest()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ admin_id
#@log_user_actions
def update_admin_login_credentials(message, admin_id, new_username=None, new_password=None):
    global credentials_changed
    admin_id = str(admin_id)
    if admin_id not in admins_data:
        bot.send_message(admin_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    current_username = admins_data[admin_id].get("admins_username", "")
    current_password_hash = admins_data[admin_id].get("login_password_hash_for_user_id", "")

    # –ï—Å–ª–∏ –∑–∞–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    if new_username:
        current_username = new_username

    # –ï—Å–ª–∏ –∑–∞–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Ö–µ—à
    if new_password:
        current_password_hash = generate_login_password_hash(current_username, new_password)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    admins_data[admin_id]["admins_username"] = current_username
    admins_data[admin_id]["login_password_hash_for_user_id"] = current_password_hash
    admins_data[admin_id]["is_new"] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    save_admin_data(admin_sessions, admins_data, login_password_hash)
    bot.send_message(admin_id, "–î–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞
    credentials_changed = True

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø—Ä–æ—Å–∏–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ
    bot.send_message(admin_id, "–î–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω—ã!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /admin")
    return_to_menu(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–º–µ–Ω—ã –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞' and check_admin_access(message))
def handle_change_credentials(message):
    global credentials_changed
    admin_id = str(message.chat.id)
    admin_data = admins_data.get(admin_id, {})

    if not check_permission(admin_id, '–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –∞–¥–º–∏–Ω–∞ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
    has_credentials = admin_data.get("admins_username") and admin_data.get("login_password_hash_for_user_id")

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    if has_credentials:
        markup.add('–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å')
    markup.add('–°–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=markup)


#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å' and check_admin_access(message))
def handle_change_password(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    password_requirements = (
        "üîí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å\n\n"
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:\n"
        "- üî¢ –ù–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "- üî° –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞\n"
        "- üî† –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞\n"
        "- üî¢ –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞\n"
        "- üî£ –•–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, !@#$%^&*(),.?\":{}|<>)"
    )
    bot.send_message(message.chat.id, password_requirements, reply_markup=markup)
    bot.register_next_step_handler(message, process_new_password)

#@log_user_actions
def is_password_unique(new_password):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
    for admin_data in admins_data.values():
        current_password_hash = admin_data.get("login_password_hash_for_user_id", "")
        current_username = admin_data.get("admins_username", "")
        if generate_login_password_hash(current_username, new_password) == current_password_hash:
            return False
    return True

#@log_user_actions
def process_new_password(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_new_password)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    new_password = message.text
    is_valid, error_message = is_valid_password(new_password)
    if not is_valid:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {error_message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, process_new_password)
        return

    if not is_password_unique(new_password):
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
        bot.register_next_step_handler(message, process_new_password)
        return

    update_admin_login_credentials(message, message.chat.id, new_password=new_password)

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–°–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å' and check_admin_access(message))
def handle_change_login_and_password(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–°–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    login_requirements = (
        "üîí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω\n\n"
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ª–æ–≥–∏–Ω—É:\n"
        "- üî¢ –ù–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "- üî° –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞\n"
        "- üî† –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞\n"
        "- üî¢ –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞"
    )
    bot.send_message(message.chat.id, login_requirements, reply_markup=markup)
    bot.register_next_step_handler(message, process_new_login_and_password_step1)

#@log_user_actions
def process_new_login_and_password_step1(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_new_login_and_password_step1)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return
    new_login = message.text
    is_valid, error_message = is_valid_username(new_login)
    if not is_valid:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {error_message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(message, process_new_login_and_password_step1)
        return
    if any(admin.get("admins_username") == new_login for admin in admins_data.values()):
        bot.send_message(message.chat.id, "–õ–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π")
        bot.register_next_step_handler(message, process_new_login_and_password_step1)
        return
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    password_requirements = (
        "üîí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å\n\n"
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:\n"
        "- üî¢ –ù–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "- üî° –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞\n"
        "- üî† –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞\n"
        "- üî¢ –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞\n"
        "- üî£ –•–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, !@#$%^&*(),.?\":{}|<>)"
    )
    bot.send_message(message.chat.id, password_requirements, reply_markup=markup)
    bot.register_next_step_handler(message, process_new_login_and_password_step2, new_login)

#@log_user_actions
def process_new_login_and_password_step2(message, new_login):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_new_login_and_password_step2, new_login)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    new_password = message.text
    is_valid, error_message = is_valid_password(new_password)
    if not is_valid:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {error_message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, process_new_login_and_password_step2, new_login)
        return

    if not is_password_unique(new_password):
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π")
        bot.register_next_step_handler(message, process_new_login_and_password_step2, new_login)
        return

    update_admin_login_credentials(message, message.chat.id, new_username=new_login, new_password=new_password)

#@log_user_actions    
def escape_markdown(text):
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
#@log_user_actions
def list_admins_for_removal(message):
    admin_list = []
    for admin_id, data in admins_data.items():
        username = escape_markdown(data['username'])
        admin_list.append(f"‚Ññ{len(admin_list) + 1}. {username} - `{admin_id}`")

    if admin_list:
        response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n\n" + "\n\n".join(admin_list)
        if len(response_message) > 4096:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
        else:
            bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞, ID –∏–ª–∏ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

#@log_user_actions
def list_removed_admins(message):
    removed_admin_list = []
    for admin_id, data in removed_admins.items():
        username = escape_markdown(data['username'])
        removed_admin_list.append(f"‚Ññ{len(removed_admin_list) + 1}. {username} - `{admin_id}`")

    if removed_admin_list:
        response_message = "üìã –°–ø–∏—Å–æ–∫ *—É–¥–∞–ª—ë–Ω–Ω—ã—Ö* –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n\n" + "\n\n".join(removed_admin_list)
        if len(response_message) > 4096:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
        else:
            bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞, ID –∏–ª–∏ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)

#@log_user_actions
def add_admin(admin_id, username, permissions=None, initiator_chat_id=None):
    admin_id = str(admin_id)
    if permissions is None:
        permissions = ["–ê–¥–º–∏–Ω", "–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞", "–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", "–°–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π", "–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫", "–í–µ—Ä—Å–∏—è –∏ –∞–ø—Ç–∞–π–º"]  # –ü—Ä–∞–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    user_data = {
        "user_id": admin_id,
        "first_name": " ",
        "last_name": " ",
        "username": username,
        "phone": " ",
        "permissions": permissions,
        "is_new": True  # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–æ–≤—ã–π
    }
    admins_data[admin_id] = user_data
    admin_sessions.append(admin_id)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏
    save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins)
    bot.send_message(admin_id, "‚úÖ –í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –ø–æ –∫–æ–º–∞–Ω–¥–µ /admin –¥–æ—Å—Ç—É–ø–µ–Ω...")
    if initiator_chat_id:
        bot.send_message(initiator_chat_id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {escape_markdown(username)} - `{admin_id}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode="Markdown")

#@log_user_actions
def remove_admin(admin_id, initiator_chat_id):
    admin_id = str(admin_id)
    if admin_id in admins_data:
        admin_username = admins_data[admin_id]["username"]
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        removed_admins[admin_id] = {"username": admin_username}

        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        del admins_data[admin_id]
        if admin_id in admin_sessions:
            admin_sessions.remove(admin_id)  # –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Å—Å–∏–π

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        bot.send_message(admin_id, "üö´ –í–∞—Å —É–¥–∞–ª–∏–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
        bot.send_message(initiator_chat_id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {escape_markdown(admin_username)} - `{admin_id}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!", parse_mode="Markdown")
    else:
        bot.send_message(initiator_chat_id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID `{admin_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")

#@log_user_actions
def check_permission(admin_id, permission):
    if is_root_admin(admin_id):
        return True  # –ö–æ—Ä–Ω–µ–≤–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
    return permission in admins_data.get(str(admin_id), {}).get("permissions", [])

#@log_user_actions
def is_root_admin(admin_id):
    return admin_id == get_root_admin_id()

#@log_user_actions
def get_root_admin_id():
    if admins_data:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–ª—é—á –∏–∑ —Å–ª–æ–≤–∞—Ä—è admins_data
        return next(iter(admins_data))
    return None

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É users.json
users_db_path = os.path.join('data base', 'admin', 'users.json')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ users.json
def load_users_data():
    with open(users_db_path, 'r', encoding='utf-8') as file:
        return json.load(file)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ users.json
users_data = load_users_data()

@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞' and check_admin_access(message))
#@log_user_actions
def handle_remove_admin(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä–Ω–µ–≤—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    root_admin_id = get_root_admin_id()  # –ü–µ—Ä–≤—ã–π ID –≤ —Å–ø–∏—Å–∫–µ `admins_data`
    if str(message.chat.id) != root_admin_id:
        bot.send_message(message.chat.id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! –¢–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    list_admins_for_removal(message)
    bot.register_next_step_handler(message, process_remove_admin, root_admin_id, message.chat.id)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É admin_sessions.json
admin_sessions_db_path = os.path.join('data base', 'admin', 'admin_sessions.json')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ admin_sessions.json
def load_admin_sessions_data():
    with open(admin_sessions_db_path, 'r', encoding='utf-8') as file:
        return json.load(file)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ admin_sessions.json
admin_sessions_data = load_admin_sessions_data()

#@log_user_actions
def process_remove_admin(message, root_admin_id, initiator_chat_id):
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    input_data = message.text.strip()
    admin_ids = []

    # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞ —á–∞—Å—Ç–∏
    parts = input_data.split(',')
    for part in parts:
        part = part.strip()
        if part.isdigit() and len(part) < 5:  # –ï—Å–ª–∏ –≤–≤–æ–¥ - —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 5 —Å–∏–º–≤–æ–ª–æ–≤, —ç—Ç–æ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
            index = int(part) - 1  # –ù–æ–º–µ—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1
            if 0 <= index < len(admins_data):
                admin_id = list(admins_data.keys())[index]
                admin_ids.append(admin_id)
            else:
                bot.send_message(message.chat.id, f"–¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å *–Ω–æ–º–µ—Ä–æ–º* `{part}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", parse_mode="Markdown")
                bot.register_next_step_handler(message, process_remove_admin, root_admin_id, initiator_chat_id)
                return
        elif part.isdigit():  # –ï—Å–ª–∏ –≤–≤–æ–¥ - —ç—Ç–æ ID
            admin_id = part
            if admin_id not in admins_data:
                bot.send_message(message.chat.id, f"–¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å *ID* `{admin_id}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", parse_mode="Markdown")
                bot.register_next_step_handler(message, process_remove_admin, root_admin_id, initiator_chat_id)
                return
            admin_ids.append(admin_id)
        else:  # –ï—Å–ª–∏ –≤–≤–æ–¥ - —ç—Ç–æ username
            username = part
            admin_id = next(
                (user_id for user_id, data in admins_data.items() if data.get("username") == username),
                None
            )
            if not admin_id:
                bot.send_message(message.chat.id, f"–¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å *username* {escape_markdown(username)} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", parse_mode="Markdown")
                bot.register_next_step_handler(message, process_remove_admin, root_admin_id, initiator_chat_id)
                return
            admin_ids.append(admin_id)

    for admin_id in admin_ids:
        if str(message.chat.id) == admin_id:
            bot.send_message(message.chat.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
            continue
        if admin_id == root_admin_id:
            bot.send_message(message.chat.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            continue
        remove_admin(admin_id, initiator_chat_id)

    show_settings_menu(message)

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞' and check_admin_access(message))
def handle_add_admin(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä–Ω–µ–≤—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    root_admin_id = get_root_admin_id()  # –ü–µ—Ä–≤—ã–π ID –≤ —Å–ø–∏—Å–∫–µ `admins_data`
    if str(message.chat.id) != root_admin_id:
        bot.send_message(message.chat.id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! –¢–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_data = load_users_data()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'))
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`")

    if user_list:
        response_message = "üìã –°–ø–∏—Å–æ–∫ *–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*:\n\n\n" + "\n\n".join(user_list)
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if removed_admins:
        removed_admin_list = []
        for admin_id, data in removed_admins.items():
            username = escape_markdown(data['username'])
            removed_admin_list.append(f"‚Ññ{len(removed_admin_list) + 1}. {username} - `{admin_id}`")

        response_message = "üìã –°–ø–∏—Å–æ–∫ *—É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤*:\n\n" + "\n".join(removed_admin_list)
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞, ID –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, process_add_admin, root_admin_id, message.chat.id)

#@log_user_actions
def process_add_admin(message, root_admin_id, initiator_chat_id):
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    input_data = message.text.strip()
    admin_ids = []

    # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞ —á–∞—Å—Ç–∏
    parts = input_data.split(',')
    for part in parts:
        part = part.strip()
        if part.isdigit() and len(part) < 5:  # –ï—Å–ª–∏ –≤–≤–æ–¥ - —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 5 —Å–∏–º–≤–æ–ª–æ–≤, —ç—Ç–æ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
            index = int(part) - 1  # –ù–æ–º–µ—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1
            if 0 <= index < len(users_data):
                user_id = list(users_data.keys())[index]
                admin_ids.append(user_id)
            else:
                bot.send_message(message.chat.id, f"–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å *–Ω–æ–º–µ—Ä–æ–º* `{part}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", parse_mode="Markdown")
                bot.register_next_step_handler(message, process_add_admin, root_admin_id, initiator_chat_id)
                return
        elif part.isdigit():  # –ï—Å–ª–∏ –≤–≤–æ–¥ - —ç—Ç–æ ID
            user_id = part
            if user_id not in users_data and user_id not in removed_admins:
                bot.send_message(message.chat.id, f"–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å *ID* `{user_id}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", parse_mode="Markdown")
                bot.register_next_step_handler(message, process_add_admin, root_admin_id, initiator_chat_id)
                return
            admin_ids.append(user_id)
        else:  # –ï—Å–ª–∏ –≤–≤–æ–¥ - —ç—Ç–æ username
            username = part
            user_id = next(
                (user_id for user_id, data in users_data.items() if data.get("username") == username),
                None
            )
            if not user_id:
                bot.send_message(message.chat.id, f"–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å *username* {escape_markdown(username)} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", parse_mode="Markdown")
                bot.register_next_step_handler(message, process_add_admin, root_admin_id, initiator_chat_id)
                return
            admin_ids.append(user_id)

    for admin_id in admin_ids:
        if admin_id in admins_data:
            username = users_data.get(admin_id, {}).get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            bot.send_message(message.chat.id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å {escape_markdown(username)} - `{admin_id}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", parse_mode="Markdown")
            continue
        username = users_data[admin_id]["username"]
        add_admin(admin_id, username, permissions=["–ê–¥–º–∏–Ω", "–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞", "–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", "–°–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π", "–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫", "–í–µ—Ä—Å–∏—è –∏ –∞–ø—Ç–∞–π–º"], initiator_chat_id=initiator_chat_id)
        del removed_admins[admin_id]

    save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins)
    show_settings_menu(message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
#@log_user_actions
def check_permission(admin_id, permission):
    if is_root_admin(admin_id):
        return True  # –ö–æ—Ä–Ω–µ–≤–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    current_permissions = admins_data.get(str(admin_id), {}).get("permissions", [])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–æ –≤ —Å–ø–∏—Å–∫–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —á–∞—Å—Ç—å –¥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è
    for perm in current_permissions:
        if perm.split(':')[-1].strip() == permission.split(':')[-1].strip():
            return True
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
#@log_user_actions
def escape_markdown(text):
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
#@log_user_actions
def list_admins(message):
    admin_list = []
    for admin_id, data in admins_data.items():
        username = data['username']
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        escaped_username = escape_markdown(username)
        admin_list.append(f"‚Ññ{len(admin_list) + 1}. {escaped_username} - `{admin_id}`")

    if admin_list:
        response_message = "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n\n" + "\n\n".join(admin_list)
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, ID –∏–ª–∏ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ –ø—Ä–∞–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, process_admin_selection)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
#@log_user_actions
def process_admin_selection(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_admin_selection)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω":
        show_settings_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    input_data = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥: –Ω–æ–º–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, ID –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        if input_data.isdigit() and len(input_data) < 5:  # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ ID –º–µ–Ω—å—à–µ 5 —Å–∏–º–≤–æ–ª–æ–≤, —ç—Ç–æ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
            admin_number = int(input_data)
            if admin_number < 1 or admin_number > len(admins_data):
                raise ValueError
            admin_id = list(admins_data.keys())[admin_number - 1]
        elif input_data.isdigit():  # –ï—Å–ª–∏ –≤–≤–æ–¥ –¥–ª–∏–Ω–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤, —ç—Ç–æ ID
            admin_id = input_data
            if admin_id not in admins_data:
                bot.send_message(message.chat.id, f"–¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID `{admin_id}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="Markdown")
                bot.register_next_step_handler(message, process_admin_selection)
                return
        else:  # –ï—Å–ª–∏ –≤–≤–æ–¥ - —ç—Ç–æ username
            admin_id = next((key for key, data in admins_data.items() if data.get('username') == input_data), None)
            if not admin_id:
                bot.send_message(message.chat.id, f"–¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{input_data}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="Markdown")
                bot.register_next_step_handler(message, process_admin_selection)
                return

        admin_data = admins_data[admin_id]
        permissions = admin_data.get("permissions", [])

        if is_root_admin(admin_id):
            bot.send_message(message.chat.id, "*–ö–æ—Ä–Ω–µ–≤–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä* –æ–±–ª–∞–¥–∞–µ—Ç *–≤—Å–µ–º–∏ –ø—Ä–∞–≤–∞–º–∏*!", parse_mode="Markdown")
            show_settings_menu(message)
            return

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        escaped_username = escape_markdown(admin_data['username'])
        permissions_list = format_permissions_with_headers(permissions)  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {escaped_username} - `{admin_id}`:\n\n{permissions_list}", parse_mode="Markdown")

        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞', '–£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∞')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–∞–≤:", reply_markup=markup)
        bot.register_next_step_handler(message, process_permission_action, admin_id)

    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, ID –∏–ª–∏ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        bot.register_next_step_handler(message, process_admin_selection)

#@log_user_actions
def get_available_permissions(admin_id):
    all_permissions = [
        "–ê–¥–º–∏–Ω", "–ë–∞–Ω", "–§—É–Ω–∫—Ü–∏–∏", "–û–±—â–µ–Ω–∏–µ", "–†–µ–∫–ª–∞–º–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–§–∞–π–ª—ã", "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", "–†–µ–¥–∞–∫—Ü–∏—è", "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞",
        "–ê–¥–º–∏–Ω: –°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞", "–ê–¥–º–∏–Ω: –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", "–ê–¥–º–∏–Ω: –°–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å", "–ê–¥–º–∏–Ω: –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", "–ê–¥–º–∏–Ω: –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", "–ê–¥–º–∏–Ω: –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞", "–ê–¥–º–∏–Ω: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞", "–ê–¥–º–∏–Ω: –£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∞",
        "–ë–∞–Ω: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "–ë–∞–Ω: –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "–ë–∞–Ω: –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "–ë–∞–Ω: –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
		"–§—É–Ω–∫—Ü–∏–∏: –í–∫–ª—é—á–µ–Ω–∏–µ", "–§—É–Ω–∫—Ü–∏–∏: –í—ã–∫–ª—é—á–µ–Ω–∏–µ",
        "–û–±—â–µ–Ω–∏–µ: –ß–∞—Ç", "–û–±—â–µ–Ω–∏–µ: –ó–∞–ø—Ä–æ—Å—ã", "–û–±—â–µ–Ω–∏–µ: –û–ø–æ–≤–µ—â–µ–Ω–∏—è", "–û–±—â–µ–Ω–∏–µ: –î–∏–∞–ª–æ–≥–∏", 
		"–û–±—â–µ–Ω–∏–µ: –ü–æ –≤—Ä–µ–º–µ–Ω–∏", "–û–±—â–µ–Ω–∏–µ: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "–û–±—â–µ–Ω–∏–µ: –ü—Ä–æ—Å–º–æ—Ç—Ä (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)", "–û–±—â–µ–Ω–∏–µ: –£–¥–∞–ª–∏—Ç—å (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)", 
		"–û–±—â–µ–Ω–∏–µ: –í—Å–µ–º", "–û–±—â–µ–Ω–∏–µ: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", "–û–±—â–µ–Ω–∏–µ: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ", "–û–±—â–µ–Ω–∏–µ: –£–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ", 
		"–û–±—â–µ–Ω–∏–µ: –û—Ç–¥–µ–ª—å–Ω–æ", "–û–±—â–µ–Ω–∏–µ: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ", "–û–±—â–µ–Ω–∏–µ: –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ", "–û–±—â–µ–Ω–∏–µ: –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ", 
		"–û–±—â–µ–Ω–∏–µ: –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤", "–û–±—â–µ–Ω–∏–µ: –£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏", "–û–±—â–µ–Ω–∏–µ: –£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥", "–û–±—â–µ–Ω–∏–µ: –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏",
		"–†–µ–∫–ª–∞–º–∞: –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É", "–†–µ–∫–ª–∞–º–∞: –£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É",
		"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –í–µ—Ä—Å–∏—è –∏ –∞–ø—Ç–∞–π–º",
		"–§–∞–π–ª—ã: –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤", "–§–∞–π–ª—ã: –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ ID", "–§–∞–π–ª—ã: –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã", "–§–∞–π–ª—ã: –ó–∞–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤", "–§–∞–π–ª—ã: –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã",
		"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é", "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
		"–†–µ–¥–∞–∫—Ü–∏—è: –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å", "–†–µ–¥–∞–∫—Ü–∏—è: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å", "–†–µ–¥–∞–∫—Ü–∏—è: –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç—å", "–†–µ–¥–∞–∫—Ü–∏—è: –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å"
		"–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É", "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É", "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: –û—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    ]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    current_permissions = admins_data.get(admin_id, {}).get("permissions", [])

    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤
    unique_permissions = set()

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —á–∞—Å—Ç—å –¥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è
    for perm in current_permissions:
        unique_permissions.add(perm.split(':')[-1].strip())

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∞–≤–∞, –∏—Å–∫–ª—é—á–∞—è —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    available_permissions = [perm for perm in all_permissions if perm.split(':')[-1].strip() not in unique_permissions]
    return available_permissions

#@log_user_actions
def format_permissions_with_headers(permissions):
    main_functions = ["–ê–¥–º–∏–Ω", "–ë–∞–Ω", "–§—É–Ω–∫—Ü–∏–∏", "–û–±—â–µ–Ω–∏–µ", "–†–µ–∫–ª–∞–º–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–§–∞–π–ª—ã", "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", "–†–µ–¥–∞–∫—Ü–∏—è"]
    formatted_permissions = []
    counter = 1

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
    formatted_permissions.append("*–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∞:*")
    for main_func in main_functions:
        if any(perm.split(':')[-1].strip() == main_func for perm in permissions):
            formatted_permissions.append(f"‚Ññ{counter}. {main_func}")
            counter += 1
    formatted_permissions.append("")  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∞–±–∑–∞—Ü–∞

    for main_func in main_functions:
        sub_permissions = [perm.split(':')[-1].strip() for perm in permissions if perm.startswith(main_func) and perm.split(':')[-1].strip() != main_func]
        if sub_permissions:
            formatted_permissions.append(f"*–ü—Ä–∞–≤–∞ –≤ \"{main_func}\":*")
            for perm in sub_permissions:
                formatted_permissions.append(f"‚Ññ{counter}. {perm}")
                counter += 1
            formatted_permissions.append("")  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∞–±–∑–∞—Ü–∞

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    other_permissions = [perm.split(':')[-1].strip() for perm in permissions if not any(perm.startswith(main_func) for main_func in main_functions)]
    if other_permissions:
        formatted_permissions.append("*–î—Ä—É–≥–∏–µ –ø—Ä–∞–≤–∞:*")
        for perm in other_permissions:
            formatted_permissions.append(f"‚Ññ{counter}. {perm}")
            counter += 1

    return "\n".join(formatted_permissions)

#@log_user_actions
def format_permissions_as_list(permissions):
    formatted_permissions = []
    counter = 1

    for perm in permissions:
        formatted_permissions.append(f"‚Ññ{counter}. {perm}")
        counter += 1

    return "\n".join(formatted_permissions)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–∞–≤–∞–º–∏
#@log_user_actions
def process_permission_action(message, admin_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω":
        show_settings_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if message.text == '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞':
        if not check_permission(str(message.chat.id), '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞'):
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
            return

        available_permissions = get_available_permissions(admin_id)
        permissions_list = format_permissions_with_headers(available_permissions)
        bot.send_message(message.chat.id, f"*–î–æ—Å—Ç—É–ø–Ω—ã–µ* –ø—Ä–∞–≤–∞ –¥–ª—è *–¥–æ–±–∞–≤–ª–µ–Ω–∏—è*:\n\n{permissions_list}", parse_mode="Markdown")

        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è *–¥–æ–±–∞–≤–ª–µ–Ω–∏—è*:", parse_mode="Markdown", reply_markup=markup)
        bot.register_next_step_handler(message, process_add_permissions, admin_id, available_permissions)

    elif message.text == '–£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∞':
        if not check_permission(str(message.chat.id), '–£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∞'):
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
            return

        current_permissions = admins_data[admin_id].get("permissions", [])
        permissions_list = format_permissions_as_list(current_permissions)
        bot.send_message(message.chat.id, f"*–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞* –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{permissions_list}", parse_mode="Markdown")

        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è *—É–¥–∞–ª–µ–Ω–∏—è*:", parse_mode="Markdown", reply_markup=markup)
        bot.register_next_step_handler(message, process_remove_permissions, admin_id, current_permissions)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
#@log_user_actions
def format_permissions_with_main_functions(permissions):
    main_functions = ["–ê–¥–º–∏–Ω", "–ë–∞–Ω", "–§—É–Ω–∫—Ü–∏–∏", "–û–±—â–µ–Ω–∏–µ", "–†–µ–∫–ª–∞–º–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–§–∞–π–ª—ã", "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", "–†–µ–¥–∞–∫—Ü–∏—è"]
    formatted_permissions = []
    counter = 1

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
    formatted_permissions.append("*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*")
    for main_func in main_functions:
        formatted_permissions.append(f"‚Ññ{counter}. {main_func}")
        counter += 1
    formatted_permissions.append("")  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∞–±–∑–∞—Ü–∞

    for main_func in main_functions:
        sub_permissions = [perm for perm in permissions if perm.startswith(main_func) and perm != main_func]
        if sub_permissions:
            formatted_permissions.append(f"*{main_func}:*")
            for perm in sub_permissions:
                formatted_permissions.append(f"‚Ññ{counter}. {perm.split(': ')[1]}")
                counter += 1
            formatted_permissions.append("")  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∞–±–∑–∞—Ü–∞

    return "\n".join(formatted_permissions)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤
#@log_user_actions
def process_add_permissions(message, admin_id, available_permissions):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_add_permissions, admin_id, available_permissions)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω":
        show_settings_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        permission_numbers = [int(num.strip()) - 1 for num in message.text.split(',')]
        permissions_to_add = []

        for num in permission_numbers:
            if 0 <= num < len(available_permissions):
                permission = available_permissions[num].split(':')[-1].strip()
                if permission in admins_data[admin_id].get("permissions", []):
                    bot.send_message(message.chat.id, f"–ü—Ä–∞–≤–æ *{escape_markdown(permission)}* —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
                    bot.register_next_step_handler(message, process_add_permissions, admin_id, available_permissions)
                    return
                permissions_to_add.append(permission)
            else:
                bot.send_message(message.chat.id, f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∞: *{num + 1}*! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
                bot.register_next_step_handler(message, process_add_permissions, admin_id, available_permissions)
                return

        if permissions_to_add:
            admins_data[admin_id].setdefault("permissions", []).extend(permissions_to_add)
            save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins)

            admin_data = admins_data[admin_id]
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            escaped_username = escape_markdown(admin_data['username'])
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∞ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏—Ö
            escaped_permissions_to_add = [escape_markdown(permission.lower()) for permission in permissions_to_add]

            bot.send_message(message.chat.id, f"–ü—Ä–∞–≤–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ {escaped_username} - `{admin_id}` –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", parse_mode="Markdown")
            bot.send_message(admin_id, f"‚ö†Ô∏è –í–∞—à–∏ –ø—Ä–∞–≤–∞ –±—ã–ª–∏ *–∏–∑–º–µ–Ω–µ–Ω—ã*!\n\n‚ûï *–î–æ–±–∞–≤–ª–µ–Ω—ã* –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∞: _{', '.join(escaped_permissions_to_add)}_", parse_mode="Markdown")
            show_settings_menu(message)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, process_add_permissions, admin_id, available_permissions)

    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(message, process_add_permissions, admin_id, available_permissions)

#@log_user_actions
def process_remove_permissions(message, admin_id, current_permissions):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_remove_permissions, admin_id, current_permissions)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω":
        show_settings_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
        permission_numbers = [int(num.strip()) - 1 for num in message.text.split(',')]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–æ–≤
        if any(num < 0 or num >= len(current_permissions) for num in permission_numbers):
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤ –ø—Ä–∞–≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
            bot.register_next_step_handler(message, process_remove_permissions, admin_id, current_permissions)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        permissions_to_remove = [current_permissions[num] for num in permission_numbers]

        # –£–¥–∞–ª—è–µ–º –ø—Ä–∞–≤–∞ –∏–∑ —Ç–µ–∫—É—â–∏—Ö
        updated_permissions = [perm for perm in current_permissions if perm not in permissions_to_remove]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        admins_data[admin_id]["permissions"] = updated_permissions
        save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        escaped_username = escape_markdown(admins_data[admin_id]['username'])
        escaped_removed = ', '.join(escape_markdown(perm.lower()) for perm in permissions_to_remove)

        bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–∞–≤–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {escaped_username} - `{admin_id}` –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", parse_mode="Markdown")
        bot.send_message(admin_id, f"‚ö†Ô∏è –í–∞—à–∏ –ø—Ä–∞–≤–∞ –±—ã–ª–∏ *–∏–∑–º–µ–Ω–µ–Ω—ã*!\n\n‚ùå *–£–¥–∞–ª–µ–Ω—ã* –ø—Ä–∞–≤–∞: _{escaped_removed}_", parse_mode="Markdown")

        show_settings_menu(message)

    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_remove_permissions, admin_id, current_permissions)
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤
#@log_user_actions
def format_permissions(permissions):
    formatted_permissions = []
    counter = 1

    for perm in permissions:
        formatted_permissions.append(f"‚Ññ{counter}. {perm}")
        counter += 1

    return "\n".join(formatted_permissions)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞' and str(message.chat.id) in admin_sessions)
def handle_permissions(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    list_admins(message)

# (ADMIN 3) ------------------------------------------ "–ë–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ô –î–õ–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò" ---------------------------------------------------

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
TELEGRAM_MESSAGE_LIMIT = 4096

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
EXECUTABLE_FILE = '(93 update –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï25  ( (  )) CAR MANAGER TG BOT (official) v0924.py'
BASE_DIR = os.path.dirname(os.path.abspath(EXECUTABLE_FILE))

# –ü—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º –∏ —Ñ–∞–π–ª–∞–º
BACKUP_DIR = os.path.join(BASE_DIR, 'backups')
FILES_PATH = os.path.join(BASE_DIR, 'data base')
ADDITIONAL_FILES_PATH = os.path.join(BASE_DIR, 'files')
ADMIN_SESSIONS_FILE = os.path.join(BASE_DIR, 'data base', 'admin', 'admin_sessions.json')
USER_DATA_PATH = os.path.join(BASE_DIR, 'data base', 'admin', 'users.json')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_admin_sessions():
    with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
        data = json.load(file)
    return data['admin_sessions']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
def check_admin_access(message):
    admin_sessions = load_admin_sessions()
    if str(message.chat.id) in admin_sessions:
        return True
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç *–ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!", parse_mode="Markdown")
        return False

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
def restricted(func):
    def wrapper(message, *args, **kwargs):
        user_id = message.from_user.id
        if is_user_blocked(user_id):
            bot.send_message(message.chat.id, "üö´ –í—ã *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã* –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ!", parse_mode="Markdown")
            return
        if not check_admin_access(message):
            return
        return func(message, *args, **kwargs)
    return wrapper

def save_user_data(user_data):
    with open(USER_DATA_PATH, 'w', encoding='utf-8') as file:
        json.dump(user_data, file, ensure_ascii=False, indent=4)

def load_user_data():
    if os.path.exists(USER_DATA_PATH):
        with open(USER_DATA_PATH, 'r', encoding='utf-8') as file:
            return json.load(file)
    return {}

#@log_user_actions
def is_user_blocked(user_id):
    users_data = load_user_data()
    return users_data.get(str(user_id), {}).get('blocked', False)

#@log_user_actions
def block_user(user_id):
    users_data = load_user_data()
    if str(user_id) in users_data:
        users_data[str(user_id)]['blocked'] = True
        save_user_data(users_data)
        return users_data[str(user_id)]['username'], user_id
    return None, None

#@log_user_actions
def unblock_user(user_id):
    users_data = load_user_data()
    if str(user_id) in users_data:
        users_data[str(user_id)]['blocked'] = False
        save_user_data(users_data)
        return users_data[str(user_id)]['username'], user_id
    return None, None

#@log_user_actions
def get_user_id_by_username(username):
    users_data = load_user_data()
    for user_id, data in users_data.items():
        if data['username'] == f"@{username}":
            return user_id
    return None

#@log_user_actions
def escape_markdown(text):
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

#@log_user_actions
def get_root_admin():
    with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
        data = json.load(file)
    root_admin_id = data['admin_sessions'][0]
    return root_admin_id

#@log_user_actions
def list_users_for_ban(message):
    users_data = load_user_data()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
    markup.add("–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    markup.add("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
    bot.register_next_step_handler(message, choose_ban_action)

#@log_user_actions
def choose_ban_action(message):

    if message.text == "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å":

        admin_id = str(message.chat.id)
        if not check_permission(admin_id, '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'):
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
            return

        choose_block_method(message)

    elif message.text == "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å":

        admin_id = str(message.chat.id)
        if not check_permission(admin_id, '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'):
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
            return

        choose_unblock_method(message)

    elif message.text == "–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":

        admin_id = str(message.chat.id)
        if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'):
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
            return

        delete_user_data(message)

    elif message.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":

        admin_id = str(message.chat.id)
        if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'):
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
            return

        delete_user(message)

    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω":
        ban_user_prompt(message)       

    elif message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)


#@log_user_actions
def choose_block_method(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü–æ ID", "–ü–æ USERNAME")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω")
    markup.add("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, process_block_method)

#@log_user_actions
def process_block_method(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–ü–æ ID":
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω")
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ *id* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, block_user_by_id)
    elif message.text == "–ü–æ USERNAME":
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω")
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ *username* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, block_user_by_username)
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω":
        ban_user_prompt(message)       
    elif message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)

#@log_user_actions
def choose_unblock_method(message):
    
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü–æ ID", "–ü–æ USERNAME")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω")
    markup.add("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, process_unblock_method)

#@log_user_actions
def process_unblock_method(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–ü–æ ID":
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω")
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ *id* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, unblock_user_by_id)
    elif message.text == "–ü–æ USERNAME":
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω")
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ *username* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, unblock_user_by_username)
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω":
        ban_user_prompt(message)       
    elif message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)

#@log_user_actions
def block_user_by_username(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ –∏ —Å–º–∞–π–ª—ã
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, block_user_by_username)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω":
        ban_user_prompt(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    usernames = [username.strip().lstrip('@') for username in message.text.split(',')]
    success_users = []
    failed_users = []
    already_blocked_users = []

    root_admin_id = get_root_admin()
    admin_id = str(message.chat.id)

    for username in usernames:
        user_id = get_user_id_by_username(username)
        if user_id:
            if str(user_id) == root_admin_id:
                failed_users.append(username)
                continue
            if str(user_id) == admin_id:
                failed_users.append(username)
                continue
            if is_user_blocked(user_id):
                already_blocked_users.append(username)
            else:
                username, user_id = block_user(user_id)
                if username and user_id:
                    success_users.append((username, user_id))
                else:
                    failed_users.append(username)
        else:
            failed_users.append(username)

    if success_users:
        response_message = "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
        for username, user_id in success_users:
            escaped_username = escape_markdown(username)
            response_message += f"*USERNAME* - {escaped_username}\n*ID* - `{user_id}`\n\n"
            bot.send_message(user_id, "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", parse_mode="Markdown")
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    if failed_users:
        failed_users_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {', '.join([f'@{escape_markdown(username)}' for username in failed_users])}! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        bot.send_message(message.chat.id, failed_users_message, parse_mode="Markdown")

    if already_blocked_users:
        already_blocked_users_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: {', '.join([f'@{escape_markdown(username)}' for username in already_blocked_users])}! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        bot.send_message(message.chat.id, already_blocked_users_message, parse_mode="Markdown")

    if failed_users or already_blocked_users:
        bot.register_next_step_handler(message, block_user_by_username)
        return

    ban_user_prompt(message)

#@log_user_actions
def block_user_by_id(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ –∏ —Å–º–∞–π–ª—ã
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, block_user_by_id)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω":
        ban_user_prompt(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_ids = [user_id.strip() for user_id in message.text.split(',')]
    success_users = []
    failed_users = []
    already_blocked_users = []

    root_admin_id = get_root_admin()
    admin_id = str(message.chat.id)

    for user_id in user_ids:
        if user_id.isdigit():
            user_id = int(user_id)
            if str(user_id) == root_admin_id:
                failed_users.append(user_id)
                continue
            if str(user_id) == admin_id:
                failed_users.append(user_id)
                continue
            if is_user_blocked(user_id):
                already_blocked_users.append(user_id)
            else:
                username, user_id = block_user(user_id)
                if username and user_id:
                    success_users.append((username, user_id))
                else:
                    failed_users.append(user_id)
        else:
            failed_users.append(user_id)

    if success_users:
        response_message = "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
        for username, user_id in success_users:
            escaped_username = escape_markdown(username)
            response_message += f"*ID* - `{user_id}`\n*USERNAME* - {escaped_username}\n\n"
            bot.send_message(user_id, "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", parse_mode="Markdown")
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    if failed_users:
        failed_users_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {', '.join([f'`{user_id}`' for user_id in failed_users])}! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        bot.send_message(message.chat.id, failed_users_message, parse_mode="Markdown")

    if already_blocked_users:
        already_blocked_users_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: {', '.join([f'`{user_id}`' for user_id in already_blocked_users])}! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        bot.send_message(message.chat.id, already_blocked_users_message, parse_mode="Markdown")

    if failed_users or already_blocked_users:
        bot.register_next_step_handler(message, block_user_by_id)
        return

    ban_user_prompt(message)

#@log_user_actions
def unblock_user_by_username(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ –∏ —Å–º–∞–π–ª—ã
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, unblock_user_by_username)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω":
        ban_user_prompt(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    usernames = [username.strip().lstrip('@') for username in message.text.split(',')]
    success_users = []
    failed_users = []
    already_unblocked_users = []

    root_admin_id = get_root_admin()
    admin_id = str(message.chat.id)

    for username in usernames:
        user_id = get_user_id_by_username(username)
        if user_id:
            if str(user_id) == root_admin_id:
                failed_users.append(username)
                continue
            if str(user_id) == admin_id:
                failed_users.append(username)
                continue
            if not is_user_blocked(user_id):
                already_unblocked_users.append(username)
            else:
                username, user_id = unblock_user(user_id)
                if username and user_id:
                    success_users.append((username, user_id))
                else:
                    failed_users.append(username)
        else:
            failed_users.append(username)

    if success_users:
        response_message = "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
        for username, user_id in success_users:
            escaped_username = escape_markdown(username)
            response_message += f"*USERNAME* - {escaped_username}\n*ID* - `{user_id}`\n\n"
            bot.send_message(user_id, "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", parse_mode="Markdown")
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    if failed_users:
        failed_users_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {', '.join([f'@{escape_markdown(username)}' for username in failed_users])}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        bot.send_message(message.chat.id, failed_users_message, parse_mode="Markdown")

    if already_unblocked_users:
        already_unblocked_users_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: {', '.join([f'@{escape_markdown(username)}' for username in already_unblocked_users])}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        bot.send_message(message.chat.id, already_unblocked_users_message, parse_mode="Markdown")

    if failed_users or already_unblocked_users:
        bot.register_next_step_handler(message, unblock_user_by_username)
        return

    ban_user_prompt(message)

#@log_user_actions
def unblock_user_by_id(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ –∏ —Å–º–∞–π–ª—ã
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, unblock_user_by_id)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω":
        ban_user_prompt(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_ids = [user_id.strip() for user_id in message.text.split(',')]
    success_users = []
    failed_users = []
    already_unblocked_users = []

    root_admin_id = get_root_admin()
    admin_id = str(message.chat.id)

    for user_id in user_ids:
        if user_id.isdigit():
            user_id = int(user_id)
            if str(user_id) == root_admin_id:
                failed_users.append(user_id)
                continue
            if str(user_id) == admin_id:
                failed_users.append(user_id)
                continue
            if not is_user_blocked(user_id):
                already_unblocked_users.append(user_id)
            else:
                username, user_id = unblock_user(user_id)
                if username and user_id:
                    success_users.append((username, user_id))
                else:
                    failed_users.append(user_id)
        else:
            failed_users.append(user_id)

    if success_users:
        response_message = "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
        for username, user_id in success_users:
            escaped_username = escape_markdown(username)
            response_message += f"*ID* - `{user_id}`\n*USERNAME* - {escaped_username}\n\n"
            bot.send_message(user_id, "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", parse_mode="Markdown")
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    if failed_users:
        failed_users_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {', '.join([f'`{user_id}`' for user_id in failed_users])}! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        bot.send_message(message.chat.id, failed_users_message, parse_mode="Markdown")

    if already_unblocked_users:
        already_unblocked_users_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: {', '.join([f'`{user_id}`' for user_id in already_unblocked_users])}! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        bot.send_message(message.chat.id, already_unblocked_users_message, parse_mode="Markdown")

    if failed_users or already_unblocked_users:
        bot.register_next_step_handler(message, unblock_user_by_id)
        return

    ban_user_prompt(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞
@bot.message_handler(func=lambda message: message.text == '–ë–∞–Ω' and check_admin_access(message))
#@log_user_actions
def ban_user_prompt(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ë–∞–Ω'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    list_users_for_ban(message)

#@log_user_actions
def delete_user_data_by_id(message, user_id):
    if not os.path.exists(USER_DATA_PATH):
        bot.send_message(message.chat.id, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return

    users_data = load_user_data()
    if str(user_id) not in users_data:
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å *ID* `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
        return

    root_admin_id = get_root_admin()
    admin_id = str(message.chat.id)

    if str(user_id) == root_admin_id:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å *ID* `{user_id}`: –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", parse_mode="Markdown")
        return

    if str(user_id) == admin_id:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å *ID* `{user_id}`: –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∞–º–æ–≥–æ —Å–µ–±—è!", parse_mode="Markdown")
        return

    for root, dirs, files in os.walk(BASE_DIR):
        for file in files:
            if file.endswith('.json'):
                file_path = os.path.join(root, file)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if str(user_id) in file:
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            data = json.load(f)
                    except json.JSONDecodeError:
                        continue
                    except UnicodeDecodeError:
                        try:
                            with open(file_path, 'r', encoding='windows-1251') as f:
                                data = json.load(f)
                        except json.JSONDecodeError:
                            continue
                        except UnicodeDecodeError:
                            continue

                    if isinstance(data, list):
                        updated_data = [item for item in data if item != str(user_id)]
                        if len(updated_data) < len(data):
                            data = updated_data
                    elif isinstance(data, dict):
                        if 'admin_sessions' in data and str(user_id) in data['admin_sessions']:
                            data['admin_sessions'].remove(str(user_id))
                        if 'admins_data' in data and str(user_id) in data['admins_data']:
                            data['admins_data'].pop(str(user_id))
                    else:
                        continue

                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            data = json.load(f)
                    except json.JSONDecodeError:
                        continue
                    except UnicodeDecodeError:
                        try:
                            with open(file_path, 'r', encoding='windows-1251') as f:
                                data = json.load(f)
                        except json.JSONDecodeError:
                            continue
                        except UnicodeDecodeError:
                            continue

                    if isinstance(data, dict):
                        if str(user_id) in data:
                            data.pop(str(user_id), None)
                        else:
                            continue
                    elif isinstance(data, list):
                        updated_data = []
                        for item in data:
                            if isinstance(item, dict) and item.get('user_id') == user_id:
                                continue
                            else:
                                updated_data.append(item)
                        data = updated_data
                    else:
                        continue

                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=4)

    users_data.pop(str(user_id), None)
    save_user_data(users_data)

#@log_user_actions
def delete_user_from_users_db(message, user_id=None, username=None):
    if not os.path.exists(USER_DATA_PATH):
        bot.send_message(message.chat.id, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return

    try:
        with open(USER_DATA_PATH, 'r', encoding='utf-8') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        bot.send_message(message.chat.id, f"–§–∞–π–ª {USER_DATA_PATH} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        return
    except UnicodeDecodeError:
        try:
            with open(USER_DATA_PATH, 'r', encoding='windows-1251') as file:
                users_data = json.load(file)
        except json.JSONDecodeError:
            bot.send_message(message.chat.id, f"–§–∞–π–ª {USER_DATA_PATH} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
            return
        except UnicodeDecodeError:
            bot.send_message(message.chat.id, f"–§–∞–π–ª {USER_DATA_PATH} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É!")
            return

    if user_id:
        if str(user_id) not in users_data:
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
            return
        users_data.pop(str(user_id), None)
    elif username:
        username = username.lstrip('@')  # –£–±–∏—Ä–∞–µ–º @ –ø–µ—Ä–µ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
        found = False
        for user_id, data in users_data.items():
            if data.get('username') == f"@{username}":  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å @ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                users_data.pop(user_id, None)
                found = True
                break
        if not found:
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å *username* @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
            return

    with open(USER_DATA_PATH, 'w', encoding='utf-8') as file:
        json.dump(users_data, file, ensure_ascii=False, indent=4)

#@log_user_actions
def delete_user_data(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ *username* –∏–ª–∏ *id*  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_delete_user_data)

#@log_user_actions
def process_delete_user_data(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω":
        ban_user_prompt(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_inputs = message.text.strip().split(',')

    # Load user data if database exists
    if not os.path.exists(USER_DATA_PATH):
        bot.send_message(message.chat.id, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return

    users_data = load_user_data()

    for user_input in user_inputs:
        user_input = user_input.strip()

        # Determine if the input is an ID or username
        user_id = None
        if user_input.isdigit():
            user_id = int(user_input)
        else:
            for user_data in users_data.values():
                if 'username' in user_data and user_data['username'] == user_input:
                    user_id = user_data['user_id']
                    break

        if user_id is None:
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º *username* –∏–ª–∏ *id* –Ω–µ –Ω–∞–π–¥–µ–Ω: {user_input}!", parse_mode="Markdown")
            continue

        # Check access rights
        admin_id = str(message.chat.id)
        root_admin_id = get_root_admin()

        if str(user_id) == root_admin_id:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {escape_markdown(user_input)} - `{user_id}`!", parse_mode="Markdown")
            continue

        if str(user_id) == admin_id:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∞–º–æ–≥–æ —Å–µ–±—è {escape_markdown(user_input)} - `{user_id}`!", parse_mode="Markdown")
            continue

        # Delete user data
        for root, dirs, files in os.walk(BASE_DIR):
            for file in files:
                if file.endswith('.json'):
                    file_path = os.path.join(root, file)

                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            data = json.load(f)
                    except (json.JSONDecodeError, UnicodeDecodeError):
                        try:
                            with open(file_path, 'r', encoding='windows-1251') as f:
                                data = json.load(f)
                        except Exception as e:
                            continue

                    if isinstance(data, dict) and str(user_id) in data:
                        data.pop(str(user_id), None)
                    elif isinstance(data, list):
                        data = [item for item in data if item != str(user_id)]

                    with open(file_path, 'w', encoding='utf-8') as f:
                        json.dump(data, f, ensure_ascii=False, indent=4)

        # Update user data in users.json
        username = users_data[str(user_id)]['username']
        users_data.pop(str(user_id), None)
        save_user_data(users_data)

        bot.send_message(message.chat.id, f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {escape_markdown(username)} - `{user_id}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")

    ban_user_prompt(message)

#@log_user_actions
def delete_user(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ *id* –∏–ª–∏ *username* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_delete_user)

#@log_user_actions
def process_delete_user(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–Ω":
        ban_user_prompt(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_inputs = message.text.split(",")  # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∑–∞–ø—è—Ç–æ–π
    user_inputs = [input.strip() for input in user_inputs]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã

    root_admin_id = get_root_admin()
    admin_id = str(message.chat.id)

    for user_input in user_inputs:
        if user_input.isdigit():  # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω ID
            user_id = int(user_input)
            if str(user_id) == root_admin_id:
                bot.send_message(
                    message.chat.id,
                    f"–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å *ID* `{user_id}` —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä–Ω–µ–≤—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω!",
                    parse_mode="Markdown"
                )
                continue
            if str(user_id) == admin_id:
                bot.send_message(
                    message.chat.id,
                    f"–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –ø–æ ID: `{user_id}`!",
                    parse_mode="Markdown"
                )
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID
            users_data = load_user_data()
            if str(user_id) not in users_data:
                bot.send_message(
                    message.chat.id,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å *ID* `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤–≤–µ—Å—Ç–∏ –≤–µ—Ä–Ω—ã–π *id* –∏–ª–∏ *username*",
                    parse_mode="Markdown"
                )
                # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥
                bot.register_next_step_handler(message, process_delete_user)
                return

            delete_user_from_users_db(message, user_id=user_id)
            bot.send_message(
                message.chat.id,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å *ID* `{user_id}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                parse_mode="Markdown"
            )
        else:  # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username = user_input.lstrip('@')
            escaped_username = escape_markdown(username)  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º username
            user_id = get_user_id_by_username(username)
            if str(user_id) == root_admin_id:
                bot.send_message(
                    message.chat.id,
                    f"–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å *username* @{escaped_username} —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä–Ω–µ–≤—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω!",
                    parse_mode="Markdown"
                )
                continue
            if str(user_id) == admin_id:
                bot.send_message(
                    message.chat.id,
                    f"–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –ø–æ @{escaped_username}!",
                    parse_mode="Markdown"
                )
                continue
            if user_id is None:
                bot.send_message(
                    message.chat.id,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å *username* @{escaped_username} –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤–≤–µ—Å—Ç–∏ –≤–µ—Ä–Ω—ã–π *id* –∏–ª–∏ *username*",
                    parse_mode="Markdown"
                )
                # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥
                bot.register_next_step_handler(message, process_delete_user)
                return

            delete_user_from_users_db(message, username=username)
            bot.send_message(
                message.chat.id,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å *username* @{escaped_username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                parse_mode="Markdown"
            )

    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ ban_user_prompt(message)
    ban_user_prompt(message)

# (ADMIN 4) ------------------------------------------ "–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–õ–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò" ---------------------------------------------------

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_users = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
total_users = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ü—É—Ç–∏ –∫ JSON-—Ñ–∞–π–ª–∞–º
ADMIN_SESSIONS_FILE = 'data base/admin/admin_sessions.json'
USER_DATA_FILE = 'data base/admin/users.json'
STATS_FILE = 'data base/admin/stats.json'
ERRORS_LOG_FILE = 'data base/log/errors_log.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_admin_sessions():
    with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
        data = json.load(file)
    return data.get('admin_sessions', [])

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_user_data():
    try:
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_user_data(data):
    with open(USER_DATA_FILE, 'w', encoding='utf-8') as file:
        json.dump(data, file, indent=4, ensure_ascii=False)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
def load_statistics():
    try:
        with open(STATS_FILE, 'r', encoding='utf-8') as file:
            data = json.load(file)
            return {date: {'users': set(data[date]['users']), 'functions': data[date].get('functions', {})} for date in data}
    except FileNotFoundError:
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª
def save_statistics(data):
    with open(STATS_FILE, 'w', encoding='utf-8') as file:
        json.dump({date: {'users': list(data[date]['users']), 'functions': data[date]['functions']} for date in data}, file, indent=4, ensure_ascii=False)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
#@log_user_actions
def check_admin_access(message):
    admin_sessions = load_admin_sessions()
    if str(message.chat.id) in admin_sessions:
        return True
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return False

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º username
#@log_user_actions
def update_user_activity(user_id, username=None, first_name="", last_name="", phone="", function_name=None):
    active_users[user_id] = datetime.now()
    total_users.add(user_id)

    user_data = load_user_data()
    current_time = datetime.now().strftime('%d.%m.%Y –≤ %H:%M:%S')  # –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏

    if user_id in user_data:
        user_data[user_id]['username'] = f"@{username}" if username else ""
        user_data[user_id]['first_name'] = first_name
        user_data[user_id]['last_name'] = last_name
        user_data[user_id]['phone'] = phone
        user_data[user_id]['last_active'] = current_time
    else:
        user_data[user_id] = {
            'user_id': user_id,
            'first_name': first_name,
            'last_name': last_name,
            'username': f"@{username}" if username else "",
            'phone': phone,
            'last_active': current_time,
            'blocked': False,
            'actions': 0,  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
            'session_time': 0,  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏
            'returning': False  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        }
    save_user_data(user_data)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    statistics = load_statistics()
    today = datetime.now().strftime('%d.%m.%Y')
    if today not in statistics:
        statistics[today] = {'users': set(), 'functions': {}}
    statistics[today]['users'].add(user_id)
    if function_name:
        if function_name not in statistics[today]['functions']:
            statistics[today]['functions'][function_name] = 0
        statistics[today]['functions'][function_name] += 1
    save_statistics(statistics)

    
# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
#@log_user_actions
def is_user_active(last_active):
    try:
        last_active_time = datetime.strptime(last_active, '%d.%m.%Y –≤ %H:%M:%S')
    except ValueError:
        return False
    return (datetime.now() - last_active_time).total_seconds() < 1 * 60  # 5 –º–∏–Ω—É—Ç

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
#@log_user_actions
def get_aggregated_statistics(period='all'):
    statistics = load_statistics()
    today = datetime.now()
    user_result = defaultdict(int)
    function_result = defaultdict(int)

    for date_str, usage in statistics.items():
        record_date = datetime.strptime(date_str, '%d.%m.%Y')

        if period == 'day' and record_date.date() == today.date():
            user_result['users'] += len(usage['users'])
            if 'functions' in usage:
                for func_name, count in usage['functions'].items():
                    function_result[func_name] += count
        elif period == 'week' and today - timedelta(days=today.weekday()) <= record_date <= today:
            user_result['users'] += len(usage['users'])
            if 'functions' in usage:
                for func_name, count in usage['functions'].items():
                    function_result[func_name] += count
        elif period == 'month' and record_date.year == today.year and record_date.month == today.month:
            user_result['users'] += len(usage['users'])
            if 'functions' in usage:
                for func_name, count in usage['functions'].items():
                    function_result[func_name] += count
        elif period == 'year' and record_date.year == today.year:
            user_result['users'] += len(usage['users'])
            if 'functions' in usage:
                for func_name, count in usage['functions'].items():
                    function_result[func_name] += count
        elif period == 'all':
            user_result['users'] += len(usage['users'])
            if 'functions' in usage:
                for func_name, count in usage['functions'].items():
                    function_result[func_name] += count

    return dict(user_result), dict(function_result)


# –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#@log_user_actions
def get_statistics():
    users_data = load_user_data()
    online_users = len([user for user in users_data.values() if is_user_active(user["last_active"]) and not user['blocked']])
    total_users = len(users_data)

    statistics = load_statistics()
    today = datetime.now().strftime('%d.%m.%Y')
    week_start = (datetime.now() - timedelta(days=datetime.now().weekday())).strftime('%d.%m.%Y')
    month_start = datetime.now().replace(day=1).strftime('%d.%m.%Y')
    year_start = datetime.now().replace(month=1, day=1).strftime('%d.%m.%Y')

    users_today = len(statistics.get(today, {}).get('users', set()))
    users_week = len(set().union(*[data.get('users', set()) for date, data in statistics.items() if week_start <= date <= today]))
    users_month = len(set().union(*[data.get('users', set()) for date, data in statistics.items() if month_start <= date <= today]))
    users_year = len(set().union(*[data.get('users', set()) for date, data in statistics.items() if year_start <= date <= today]))

    return online_users, total_users, users_today, users_week, users_month, users_year


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
#@log_user_actions
def escape_markdown(text):
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#@log_user_actions
def list_active_users():
    users_data = load_user_data()
    active_users = [
        f"{index + 1}) `{user_id}`: {escape_markdown(user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))}"
        for index, (user_id, user) in enumerate(users_data.items())
        if is_user_active(user["last_active"]) and not user['blocked']
    ]
    return "\n".join(active_users) if active_users else None

# –ü–æ–ª—É—á–∏—Ç—å –¢–û–ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#@log_user_actions
def get_top_users(top_n=10):
    users_data = load_user_data()
    user_activity = {user_id: user['last_active'] for user_id, user in users_data.items() if not user['blocked']}
    sorted_users = sorted(user_activity.items(), key=lambda x: x[1], reverse=True)
    top_users = sorted_users[:top_n]
    return [f"{index + 1}) {user_id}: {escape_markdown(users_data[user_id].get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))}" for index, (user_id, _) in enumerate(top_users)]

# –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#@log_user_actions
def get_recent_actions(limit=10):
    users_data = load_user_data()
    recent_actions = sorted(users_data.items(), key=lambda x: x[1]['last_active'], reverse=True)
    return [f"{user_id}: {escape_markdown(user['username'])} - {user['last_active']}" for user_id, user in recent_actions[:limit]]

# –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
#@log_user_actions
def get_peak_usage_time():
    statistics = load_statistics()
    usage_times = defaultdict(int)

    for date_str, usage in statistics.items():
        record_date = datetime.strptime(date_str, '%d.%m.%Y')
        for func_name, count in usage.items():
            usage_times[record_date.hour] += count

    peak_hour = max(usage_times, key=usage_times.get)
    return peak_hour, usage_times[peak_hour]

# –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞
#@log_user_actions
def get_bot_version():
    return "1.0"  # –ü—Ä–∏–º–µ—Ä –≤–µ—Ä—Å–∏–∏

# –ü–æ–ª—É—á–∏—Ç—å –∞–ø—Ç–∞–π–º –±–æ—Ç–∞
#@log_user_actions
def get_uptime():
    start_time = datetime(2025, 1, 1)  # –ü—Ä–∏–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞
    uptime = datetime.now() - start_time
    days, seconds = uptime.days, uptime.seconds
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    return f"{days} –¥–Ω–µ–π, {hours}:{minutes} —á–∞—Å–æ–≤"

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ—à–∏–±–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞
def load_errors():
    with open(ERRORS_LOG_FILE, 'r', encoding='utf-8') as file:
        return json.load(file)

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫
#@log_user_actions
def get_error_list():
    errors = load_errors()
    error_list = []
    for index, error in enumerate(errors, start=1):
        error_details = error.get('error_details', '')
        error_details_more = "\n".join(error.get('error_details_more', []))
        error_list.append(f"üõë *–û–®–ò–ë–ö–ê ‚Ññ{index}* üõë\n\n{error_details}\n\n{error_details_more}")
    return error_list

# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—Ä–µ–º—è –∏—Ö –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
#@log_user_actions
def get_user_last_active():
    users_data = load_user_data()
    user_last_active = [
        f"üìå {index + 1}) `{user_id}`: {escape_markdown(user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))} - {user['last_active'][:-3]}"
        for index, (user_id, user) in enumerate(users_data.items())
        if not user['blocked']
    ]
    return "\n".join(user_last_active) if user_last_active else None

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥–º–µ–Ω—é
#@log_user_actions
def create_submenu_buttons():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        types.KeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
        types.KeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π"),
        types.KeyboardButton("–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫"),
        types.KeyboardButton("–í–µ—Ä—Å–∏—è –∏ –∞–ø—Ç–∞–π–º"),
        types.KeyboardButton("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    ]
    markup.row(buttons[0], buttons[1])
    markup.row(buttons[2], buttons[3])
    markup.row(buttons[4])
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@bot.message_handler(func=lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' and check_admin_access(message))
#@log_user_actions
def show_statistics(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if not check_admin_access(message):
        return

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=create_submenu_buttons())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
#@log_user_actions
def escape_markdown(text):
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

#@log_user_actions
@bot.message_handler(func=lambda message: message.text in ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–í–µ—Ä—Å–∏—è –∏ –∞–ø—Ç–∞–π–º", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π", "–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫", "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"])
def handle_submenu_buttons(message):
    if not check_admin_access(message):
        return

    if message.text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":

        admin_id = str(message.chat.id)
        if not check_permission(admin_id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'):
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
            return

        online_count, total_count, users_today, users_week, users_month, users_year = get_statistics()
        active_user_list = list_active_users()
        user_last_active_list = get_user_last_active()
        response_message = (
            f"*üåê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω:* {online_count}\n"
            f"*üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {total_count}\n\n"
            f"*üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –¥–µ–Ω—å:* {users_today}\n"
            f"*üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:* {users_week}\n"
            f"*üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –º–µ—Å—è—Ü:* {users_month}\n"
            f"*üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –≥–æ–¥:* {users_year}\n\n"
        )
        if active_user_list:
            response_message += "*üåê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω:*\n\n"
            for user in active_user_list.split('\n'):
                response_message += f"üë§ {user}\n"
        else:
            response_message += "*üåê –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"

        if user_last_active_list:
            response_message += "*\nüïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
            response_message += user_last_active_list
        else:
            response_message += "*\nüïí –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*"

        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")
    elif message.text == "–í–µ—Ä—Å–∏—è –∏ –∞–ø—Ç–∞–π–º":

        admin_id = str(message.chat.id)
        if not check_permission(admin_id, '–í–µ—Ä—Å–∏—è –∏ –∞–ø—Ç–∞–π–º'):
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
            return

        bot_version = get_bot_version()
        uptime = get_uptime()
        bot.send_message(message.chat.id, f"*ü§ñ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞:* {bot_version}\n\n*‚è≥ –ê–ø—Ç–∞–π–º –±–æ—Ç–∞:* {uptime}", parse_mode="Markdown")
    elif message.text == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π":

        admin_id = str(message.chat.id)
        if not check_permission(admin_id, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π'):
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
            return

        stats_day_users, stats_day_functions = get_aggregated_statistics('day')
        stats_week_users, stats_week_functions = get_aggregated_statistics('week')
        stats_month_users, stats_month_functions = get_aggregated_statistics('month')
        stats_year_users, stats_year_functions = get_aggregated_statistics('year')
        stats_all_users, stats_all_functions = get_aggregated_statistics('all')

        response_message = (
            "*üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π:*\n\n\n"
            "‚òÄÔ∏è *[–ó–∞ –¥–µ–Ω—å]* ‚òÄÔ∏è\n\n" +
            "\n".join([f"{escape_markdown(key)}: {value}" for key, value in stats_day_functions.items()]) +
            "\n\n7Ô∏è‚É£ *[–ó–∞ –Ω–µ–¥–µ–ª—é]* 7Ô∏è‚É£\n\n" +
            "\n".join([f"{escape_markdown(key)}: {value}" for key, value in stats_week_functions.items()]) +
            "\n\nüóìÔ∏è *[–ó–∞ –º–µ—Å—è—Ü]* üóìÔ∏è\n\n" +
            "\n".join([f"{escape_markdown(key)}: {value}" for key, value in stats_month_functions.items()]) +
            "\n\n‚åõ *[–ó–∞ –≥–æ–¥]* ‚åõ\n\n" +
            "\n".join([f"{escape_markdown(key)}: {value}" for key, value in stats_year_functions.items()]) +
            "\n\n‚ôæÔ∏è *[–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è]* ‚ôæÔ∏è\n\n" +
            "\n".join([f"{escape_markdown(key)}: {value}" for key, value in stats_all_functions.items()])
        )
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")
    elif message.text == "–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫":

        admin_id = str(message.chat.id)
        if not check_permission(admin_id, '–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫'):
            bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
            return

        error_list = get_error_list()
        if not error_list:
            bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!", parse_mode="Markdown")
        else:
            full_message = "\n\n".join(error_list)
            if len(full_message) > 4096:
                parts = [full_message[i:i + 4096] for i in range(0, len(full_message), 4096)]
                for part in parts:
                    bot.send_message(message.chat.id, part, parse_mode="Markdown")
            else:
                bot.send_message(message.chat.id, full_message, parse_mode="Markdown")
    elif message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=create_submenu_buttons())


# (ADMIN 5) ------------------------------------------ "–†–ï–ó–ï–†–í–ù–ê–Ø –ö–û–ü–ò–Ø –î–õ–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò" ---------------------------------------------------

import zipfile

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –∏ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
BACKUP_DIR = 'backups'
SOURCE_DIR = '.'
EXECUTABLE_FILE = '(104 update –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï34  ( ( )) CAR MANAGER TG BOT (official) v0924.py'

# –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ —Å–µ—Å—Å–∏—è–º–∏
ADMIN_SESSIONS_FILE = 'data base/admin/admin_sessions.json'

#@log_user_actions
def normalize_name(name):
    return re.sub(r'[<>:"/\\|?*]', '_', name)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_admin_sessions():
    with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
        data = json.load(file)
    return data['admin_sessions']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
#@log_user_actions
def check_admin_access(message):
    admin_sessions = load_admin_sessions()
    if str(message.chat.id) in admin_sessions:
        return True
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è"
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è' and check_admin_access(message))
def show_backup_menu(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é', '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é"
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é' and check_admin_access(message))
def handle_create_backup(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    backup_path = create_backup()
    if backup_path:
        backup_message = f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n\n–ü—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:\n{backup_path}"
    else:
        backup_message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏."
    bot.send_message(message.chat.id, backup_message)
    show_admin_panel(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' and check_admin_access(message))
def handle_restore_backup(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    success = restore_latest_backup()
    if success:
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!")
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    show_admin_panel(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
#@log_user_actions
def create_backup():
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_file = os.path.join(BACKUP_DIR, f'backup_{timestamp}.zip')

    os.makedirs(BACKUP_DIR, exist_ok=True)

    try:
        with zipfile.ZipFile(backup_file, 'w', zipfile.ZIP_STORED) as zipf:
            for root, dirs, files in os.walk(SOURCE_DIR):
                if 'backups' in dirs:
                    dirs.remove('backups')  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–∞–ø–∫—É backups

                for file in files:
                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, SOURCE_DIR)

                    if EXECUTABLE_FILE in file:
                        continue

                    if len(file_path) > 260:
                        continue

                    try:
                        zipf.write(file_path, arcname)
                    except Exception:
                        pass

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏–≤–∞
        with zipfile.ZipFile(backup_file, 'r') as zipf:
            if zipf.testzip() is not None:
                return None

        return backup_file
    except Exception:
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞
#@log_user_actions
def restore_latest_backup():
    backups = sorted(os.listdir(BACKUP_DIR), reverse=True)
    if not backups:
        return False

    latest_backup = os.path.join(BACKUP_DIR, backups[0])

    if not os.path.exists(latest_backup):
        return False

    with zipfile.ZipFile(latest_backup, 'r') as zipf:
        zipf.extractall(SOURCE_DIR)

    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
#@log_user_actions
def notify_admin(backup_path):
    admin_sessions = load_admin_sessions()
    current_time = datetime.now().strftime('%d.%m.%Y –≤ %H:%M')
    for admin_id in admin_sessions:
        bot.send_message(admin_id, f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n\n–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {current_time}\n\n–ü—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:\n{backup_path}", parse_mode="Markdown")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
#@log_user_actions
def scheduled_backup():
    backup_path = create_backup()
    notify_admin(backup_path)

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
schedule.every().day.at("00:00").do(scheduled_backup)


# (ADMIN n) ------------------------------------------ "–í–ö–õ/–í–´–ö–õ –§–£–£–ù–ö–¶–ò–ô –î–õ–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò" ---------------------------------------------------

# –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ —Å–µ—Å—Å–∏—è–º–∏
ADMIN_SESSIONS_FILE = 'data base/admin/admin_sessions.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_admin_sessions():
    with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
        data = json.load(file)
    return data['admin_sessions']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
def check_admin_access(message):
    admin_sessions = load_admin_sessions()
    if str(message.chat.id) in admin_sessions:
        return True
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!")
        return False

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π
FUNCTIONS_STATE_PATH = 'data base/admin/functions_state.json'

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞
def load_function_states():
    if os.path.exists(FUNCTIONS_STATE_PATH):
        with open(FUNCTIONS_STATE_PATH, 'r', encoding='utf-8') as file:
            data = json.load(file)
            if data:
                return data
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    save_function_states({})
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ñ–∞–π–ª
def save_function_states(states):
    with open(FUNCTIONS_STATE_PATH, 'w', encoding='utf-8') as file:
        json.dump(states, file, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function_states = load_function_states()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
new_functions = {
    "–û–±—â–µ–µ –º–µ–Ω—é": [
        "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞", "–¢—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã", "–í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ü–æ–∏—Å–∫ –º–µ—Å—Ç",
        "–ü–æ–≥–æ–¥–∞", "–¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ", "–ö–æ–¥" "–ê–Ω—Ç–∏-—Ä–∞–¥–∞—Ä", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "–ö–æ–¥—ã OBD2", "–ü—Ä–æ—á–µ–µ", "–°–∞–π—Ç"
    ],
    "–ö–Ω–æ–ø–∫–∏": [
        "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤",
        "–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏",
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–µ—â–µ –Ω–æ–≤–æ—Å—Ç–∏"
    ],
    "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞": [
        "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–µ–∑–¥–∫–∏",
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ Excel", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–µ–∑–¥–∫–∏", "–£–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫—É"
    ],
    "–ú–µ–Ω—é —Ç—Ä–∞—Ç": [
        "–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã", "–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã", "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
    ],
    "–ú–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞—Ç": [
        "–¢—Ä–∞—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)", "–¢—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)", "–¢—Ä–∞—Ç—ã (–≥–æ–¥)", "–¢—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)",
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã –≤ EXCEL"
    ],
    "–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç": [
        "Del —Ç—Ä–∞—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)", "Del —Ç—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)", "Del —Ç—Ä–∞—Ç—ã (–≥–æ–¥)", "Del —Ç—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)"
    ],
    "–ú–µ–Ω—é –∑–∞–ø–∏—Å–∏ —Ä–µ–º–æ–Ω—Ç–æ–≤": [
        "–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–º–æ–Ω—Ç", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã", "–£–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã"
    ],
    "–ú–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤": [
        "–†–µ–º–æ–Ω—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)", "–†–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)", "–†–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)", "–†–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)",
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –≤ EXCEL"
    ],
    "–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤": [
        "Del —Ä–µ–º–æ–Ω—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)", "Del —Ä–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)", "Del —Ä–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)", "Del —Ä–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)"
    ],
    "–ú–µ–Ω—é –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": [
        "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
    ],
    "–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": [
        "–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
    ],
    "–ú–µ–Ω—é –ø–æ–∏—Å–∫ –º–µ—Å—Ç": [
        "–ê–ó–°", "–ê–≤—Ç–æ–º–æ–π–∫–∏", "–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã", "–ü–∞—Ä–∫–æ–≤–∫–∏", "–≠–≤–∞–∫—É–∞—Ü–∏—è", "–ì–ò–ë–î–î", "–ö–æ–º–∏—Å—Å–∞—Ä—ã", "–®—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–∞"
    ],
    "–ú–µ–Ω—é –ø–æ–≥–æ–¥—ã": [
        "–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ"
    ],
    "–ú–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π": [
        "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "–ê–∫—Ç–∏–≤–Ω—ã–µ", "–ò—Å—Ç–µ–∫—à–∏–µ"
    ],
    "–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π": [
        "–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    ],
    "–î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏": [
        "–í—ã–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏-—Ä–∞–¥–∞—Ä", "–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏"
    ],
    "–ü—Ä–æ—á–µ–µ": [
        "–ß–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º", "–î–ª—è —Ä–µ–∫–ª–∞–º—ã", "–ù–æ–≤–æ—Å—Ç–∏"
    ],
    "–ú–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–∏": ['3 –Ω–æ–≤–æ—Å—Ç–∏', '5 –Ω–æ–≤–æ—Å—Ç–µ–π', '7 –Ω–æ–≤–æ—Å—Ç–µ–π', '10 –Ω–æ–≤–æ—Å—Ç–µ–π', '15 –Ω–æ–≤–æ—Å—Ç–µ–π'],
    "–î–ª—è —Ä–µ–∫–ª–∞–º—ã": [
        "–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É", "–í–∞—à–∏ –∑–∞—è–≤–∫–∏"
    ],
        "–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞": [
        "–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞"
    ]
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
def update_function_states():
    global function_states
    for category, functions in new_functions.items():
        for function_name in functions:
            if function_name not in function_states:
                function_states[function_name] = {"state": True, "deactivation_time": None}
    save_function_states(function_states)

# –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
update_function_states()

for category, functions in new_functions.items():
    for function_name in functions:
        if function_name not in function_states:
            function_states[function_name] = {"state": True, "deactivation_time": None}

save_function_states(function_states)  # –ü–µ—Ä–µ–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç function_states

#@log_user_actions
def set_function_state(function_name, state, deactivation_time=None):
    if function_name in function_states:
        function_states[function_name]['state'] = state
        if deactivation_time:
            function_states[function_name]['deactivation_time'] = deactivation_time
        else:
            function_states[function_name]['deactivation_time'] = None
        save_function_states(function_states)  # –ü–µ—Ä–µ–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç function_states
        return f"–§—É–Ω–∫—Ü–∏—è *{function_name}* —É—Å–ø–µ—à–Ω–æ {'–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' if state else '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'}!"
    else:
        return "–û—à–∏–±–∫–∞: —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"

#@log_user_actions
def activate_function(function_name):
    return set_function_state(function_name, True)

#@log_user_actions
def deactivate_function(function_name, deactivation_time):
    return set_function_state(function_name, False, deactivation_time)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
def activate_function_later(function_name, delay):
    threading.Timer(delay.total_seconds(), lambda: notify_admin_and_activate(function_name)).start()

#@log_user_actions
def notify_admin_and_activate(function_name):
    deactivation_time = function_states[function_name]['deactivation_time']
    date_part, time_part = deactivation_time.split('; ')
    admin_sessions = load_admin_sessions()
    for admin_id in admin_sessions:
        if len([fn for fn, data in function_states.items() if not data['state']]) == 1:
            bot.send_message(admin_id, f"–§—É–Ω–∫—Ü–∏—è *{function_name.lower()}* –±—ã–ª–∞ *–≤–∫–ª—é—á–µ–Ω–∞* –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ (–¥–æ {date_part} –≤ {time_part})!", parse_mode="Markdown")
        else:
            bot.send_message(admin_id, f"–§—É–Ω–∫—Ü–∏–∏ *{function_name.lower()}* –±—ã–ª–∞ *–≤–∫–ª—é—á–µ–Ω–∞* –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ (–¥–æ {date_part} –≤ {time_part})!", parse_mode="Markdown")
    activate_function(function_name)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
#@log_user_actions
def is_valid_date_time(date_str, time_str):
    try:
        date = datetime.strptime(date_str, "%d.%m.%Y")
        time = datetime.strptime(time_str, "%H:%M")
        if 2000 <= date.year <= 3000 and 1 <= date.month <= 12 and 1 <= date.day <= 31:
            if 0 <= time.hour <= 23 and 0 <= time.minute <= 59:
                return True
        return False
    except ValueError:
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
#@log_user_actions
def handle_time_deactivation(time_spec, function_names, message):
    try:
        end_time = datetime.strptime(time_spec, "%d.%m.%Y; %H:%M")
        now = datetime.now()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if end_time > now:
            for function_name in function_names:
                deactivate_function(function_name, time_spec)  # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
                delay = end_time - now  # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                activate_function_later(function_name, delay)  # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–∑–∂–µ
            date_part, time_part = time_spec.split('; ')
            if len(function_names) == 1:
                bot.send_message(message.chat.id, f"–§—É–Ω–∫—Ü–∏—è *{', '.join(function_names).lower()}* *–æ—Ç–∫–ª—é—á–µ–Ω–∞* –¥–æ {date_part} –≤ {time_part}!", parse_mode="Markdown")
            else:
                bot.send_message(message.chat.id, f"–§—É–Ω–∫—Ü–∏–∏ *{', '.join(function_names).lower()}* *–æ—Ç–∫–ª—é—á–µ–Ω—ã* –¥–æ {date_part} –≤ {time_part}!", parse_mode="Markdown")
            toggle_functions(message)  
        else:
            bot.send_message(message.chat.id, "–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, process_disable_function_date_step, function_names)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(message, process_disable_function_date_step, function_names)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–§—É–Ω–∫—Ü–∏–∏"
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–§—É–Ω–∫—Ü–∏–∏' and check_admin_access(message))
def toggle_functions(message): 

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–§—É–Ω–∫—Ü–∏–∏'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if check_admin_access(message):
        if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
            bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, toggle_functions)
            return
        
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton('–í–∫–ª—é—á–µ–Ω–∏–µ'), types.KeyboardButton('–í—ã–∫–ª—é—á–µ–Ω–∏–µ'))
    markup.add(types.KeyboardButton('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–∫–ª—é—á–µ–Ω–∏–µ"
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–í–∫–ª—é—á–µ–Ω–∏–µ' and check_admin_access(message))
def enable_function(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–í–∫–ª—é—á–µ–Ω–∏–µ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if check_admin_access(message):
        if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
            bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, enable_function)
            return
        disabled_functions = [(name, data['deactivation_time']) for name, data in function_states.items() if not data['state']]
        if disabled_functions:
            response = "*–í—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ* —Ñ—É–Ω–∫—Ü–∏–∏:\n\n\n"
            index = 1
            for category, functions in new_functions.items():
                response += f"*{category}*:\n"
                for function in functions:
                    if function in [name for name, _ in disabled_functions]:
                        deactivation_time = next((data for name, data in disabled_functions if name == function), None)
                        if deactivation_time:
                            date_part, time_part = deactivation_time.split('; ')
                            response += f"‚ùå {index}. *{function}* (–¥–æ {date_part} –≤ {time_part})\n"
                        else:
                            response += f"‚ùå {index}. *{function}*\n"
                        index += 1
                response += "\n"
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏'))
            markup.add(types.KeyboardButton('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'))
            bot.send_message(message.chat.id, response, parse_mode="Markdown", reply_markup=markup)
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è:")
            bot.register_next_step_handler(message, process_enable_function_step)
        else:
            bot.send_message(message.chat.id, "*–í—Å–µ* —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ *–≤–∫–ª—é—á–µ–Ω—ã*!", parse_mode="Markdown")
            toggle_functions(message) 

#@log_user_actions
def process_enable_function_step(message):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏":
        toggle_functions(message) 
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_enable_function_step)
        return

    try:
        function_indices = [int(index.strip()) - 1 for index in message.text.split(',')]
        disabled_functions = [name for name, data in function_states.items() if not data['state']]
        valid_indices = [i for i in function_indices if 0 <= i < len(disabled_functions)]
        if valid_indices:
            function_names = [disabled_functions[i] for i in valid_indices]
            for function_name in function_names:
                activate_function(function_name)
            bot.send_message(message.chat.id, f"–§—É–Ω–∫—Ü–∏–∏ *{', '.join(function_names).lower()}* —É—Å–ø–µ—à–Ω–æ *–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã*!", parse_mode="Markdown")
            toggle_functions(message) 
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π!")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–∫–ª—é—á–µ–Ω–∏–µ"
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–í—ã–∫–ª—é—á–µ–Ω–∏–µ' and check_admin_access(message))
def disable_function(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–í—ã–∫–ª—é—á–µ–Ω–∏–µ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if check_admin_access(message):
        if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
            bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, disable_function)
            return
        enabled_functions = [name for name, data in function_states.items() if data['state']]
        if enabled_functions:
            response = "*–í–∫–ª—é—á–µ–Ω–Ω—ã–µ* —Ñ—É–Ω–∫—Ü–∏–∏:\n\n\n"
            index = 1
            for category, functions in new_functions.items():
                response += f"*{category}*:\n"
                for function in functions:
                    if function in enabled_functions:
                        response += f"‚úÖ {index}. *{function}*\n"
                        index += 1
                response += "\n"
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏'))
            markup.add(types.KeyboardButton('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'))
            bot.send_message(message.chat.id, response, parse_mode="Markdown", reply_markup=markup)
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è:")
            bot.register_next_step_handler(message, process_disable_function_step)
        else:
            bot.send_message(message.chat.id, "*–í—Å–µ* —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ *–≤—ã–∫–ª—é—á–µ–Ω—ã*!", parse_mode="Markdown")
            toggle_functions(message)

#@log_user_actions
def process_disable_function_step(message):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏":
        toggle_functions(message) 
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_disable_function_step)
        return

    try:
        function_indices = [int(index.strip()) - 1 for index in message.text.split(',')]
        enabled_functions = [name for name, data in function_states.items() if data['state']]
        valid_indices = [i for i in function_indices if 0 <= i < len(enabled_functions)]
        if valid_indices:
            function_names = [enabled_functions[i] for i in valid_indices]
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏'))
            markup.add(types.KeyboardButton('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'))
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=markup)
            bot.register_next_step_handler(message, process_disable_function_date_step, function_names)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π!")
            bot.register_next_step_handler(message, process_disable_function_step)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        bot.register_next_step_handler(message, process_disable_function_step)

#@log_user_actions
def process_disable_function_date_step(message, function_names):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏":
        toggle_functions(message) 
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_disable_function_date_step, function_names)
        return

    date_str = message.text
    if is_valid_date_time(date_str, "00:00"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏'))
        markup.add(types.KeyboardButton('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'))
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, process_disable_function_time_step, function_names, date_str, message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(message, process_disable_function_date_step, function_names)

#@log_user_actions
def process_disable_function_time_step(message, function_names, date_str, original_message):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏":
        toggle_functions(message) 
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_disable_function_time_step, function_names, date_str, original_message)
        return

    time_str = message.text
    if is_valid_date_time(date_str, time_str):
        time_spec = f"{date_str}; {time_str}"
        handle_time_deactivation(time_spec, function_names, original_message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(message, process_disable_function_time_step, function_names, date_str, original_message)

# (ADMIN n) ------------------------------------------ "–û–ü–û–í–ï–©–ï–ù–ò–Ø –î–õ–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò" ---------------------------------------------------

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
DATABASE_PATH = 'data base/admin/chats/alerts.json'
ADMIN_SESSIONS_FILE = 'data base/admin/admin_sessions.json'
USER_DATA_PATH = 'data base/admin/users.json'  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
alerts = {"sent_messages": {}, "notifications": {}}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã alerts
admin_sessions = []

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if os.path.exists(USER_DATA_PATH):
        with open(USER_DATA_PATH, 'r', encoding='utf-8') as file:
            return json.load(file)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def save_database():
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ datetime –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∏
    for key, value in alerts['notifications'].items():
        if 'time' in value and isinstance(value['time'], datetime):
            value['time'] = value['time'].strftime("%d.%m.%Y –≤ %H:%M")
    for key, value in alerts['sent_messages'].items():
        if 'time' in value and isinstance(value['time'], datetime):
            value['time'] = value['time'].strftime("%d.%m.%Y –≤ %H:%M")

    # –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(os.path.dirname(DATABASE_PATH), exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
    try:
        with open(DATABASE_PATH, 'w', encoding='utf-8') as file:
            json.dump(alerts, file, ensure_ascii=False, indent=4)
    except Exception as e:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏

    # –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ datetime
    for key, value in alerts['notifications'].items():
        if 'time' in value and isinstance(value['time'], str):
            value['time'] = datetime.strptime(value['time'], "%d.%m.%Y –≤ %H:%M")
    for key, value in alerts['sent_messages'].items():
        if 'time' in value and isinstance(value['time'], str):
            value['time'] = datetime.strptime(value['time'], "%d.%m.%Y –≤ %H:%M")

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_database():
    if os.path.exists(DATABASE_PATH):
        try:
            with open(DATABASE_PATH, 'r', encoding='utf-8') as file:
                data = json.load(file)

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            for key, value in data['notifications'].items():
                if 'time' in value and value['time']:
                    value['time'] = datetime.strptime(value['time'], "%d.%m.%Y –≤ %H:%M")

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ sent_messages –≤ —Å–ª–æ–≤–∞—Ä—å (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if isinstance(data['sent_messages'], list):
                sent_messages_dict = {}
                for i, msg in enumerate(data['sent_messages']):
                    msg_id = str(i + 1)
                    sent_messages_dict[msg_id] = msg
                    if 'time' in msg and msg['time']:
                        msg['time'] = datetime.strptime(msg['time'], "%d.%m.%Y –≤ %H:%M")
                data['sent_messages'] = sent_messages_dict
            else:
                for key, value in data['sent_messages'].items():
                    if 'time' in value and value['time']:
                        value['time'] = datetime.strptime(value['time'], "%d.%m.%Y –≤ %H:%M")

            return data
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏

    return {"sent_messages": {}, "notifications": {}}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
alerts = load_database()

def check_notifications():
    while True:
        now = datetime.now()
        for key, n in alerts['notifications'].items():
            if n['status'] == 'active' and 'time' in n and n['time'] <= now:
                user_id = n.get('user_id')
                if user_id:
                    user_ids = [user_id]
                else:
                    user_ids = load_users().keys()

                for user_id in user_ids:
                    if n.get('text'):
                        bot.send_message(user_id, n['text'])
                    else:
                        for file in n.get('files', []):
                            if file['type'] == 'photo':
                                bot.send_photo(user_id, file['file_id'], caption=file.get('caption'))
                            elif file['type'] == 'video':
                                bot.send_video(user_id, file['file_id'], caption=file.get('caption'))
                            elif file['type'] == 'document':
                                bot.send_document(user_id, file['file_id'], caption=file.get('caption'))
                            elif file['type'] == 'animation':
                                bot.send_animation(user_id, file['file_id'], caption=file.get('caption'))
                            elif file['type'] == 'sticker':
                                bot.send_sticker(user_id, file['file_id'])
                            elif file['type'] == 'audio':
                                bot.send_audio(user_id, file['file_id'], caption=file.get('caption'))
                            elif file['type'] == 'voice':
                                bot.send_voice(user_id, file['file_id'], caption=file.get('caption'))
                            elif file['type'] == 'video_note':
                                bot.send_video_note(user_id, file['file_id'])
                n['status'] = 'sent'
        save_database()
        time.sleep(60)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=check_notifications, daemon=True).start()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_admin_sessions():
    if os.path.exists(ADMIN_SESSIONS_FILE):
        with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
            data = json.load(file)
        return data.get('admin_sessions', [])
    return []

admin_sessions = load_admin_sessions()

#@log_user_actions
def check_admin_access(message):
    if str(message.chat.id) in admin_sessions:
        return True
    else:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return False

# –ü–æ–∫–∞–∑ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–û–ø–æ–≤–µ—â–µ–Ω–∏—è' and check_admin_access(message))
def show_notifications_menu(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û–ø–æ–≤–µ—â–µ–Ω–∏—è'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('–í—Å–µ–º', '–ü–æ –≤—Ä–µ–º–µ–Ω–∏', '–û—Ç–¥–µ–ª—å–Ω–æ')
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ü–æ –≤—Ä–µ–º–µ–Ω–∏"
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–ü–æ –≤—Ä–µ–º–µ–Ω–∏' and check_admin_access(message))
def handle_time_notifications(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü–æ –≤—Ä–µ–º–µ–Ω–∏'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏')
    markup.add('–ü—Ä–æ—Å–º–æ—Ç—Ä (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)', '–£–¥–∞–ª–∏—Ç—å (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)')
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:", reply_markup=markup)

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏' and check_admin_access(message))
def schedule_notification(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ')
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, choose_send_action)

@check_user_blocked
#@log_user_actions
def choose_send_action(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, choose_send_action)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return

    if message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º':
        markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, set_theme_for_notification)
    elif message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ':
        list_users_for_time_notification(message)

@check_user_blocked
#@log_user_actions
def set_theme_for_notification(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, set_theme_for_notification)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    notification_theme = message.text
    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª:", reply_markup=markup)
    bot.register_next_step_handler(message, set_time_for_notification, notification_theme)

#@log_user_actions
@check_user_blocked
def set_time_for_notification(message, notification_theme):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    notification_text = message.text or message.caption
    content_type = message.content_type
    file_id = None
    caption = message.caption

    if content_type == 'photo':
        file_id = message.photo[-1].file_id
    elif content_type == 'video':
        file_id = message.video.file_id
    elif content_type == 'document':
        file_id = message.document.file_id
    elif content_type == 'animation':
        file_id = message.animation.file_id
    elif content_type == 'sticker':
        file_id = message.sticker.file_id
    elif content_type == 'audio':
        file_id = message.audio.file_id
    elif content_type == 'voice':
        file_id = message.voice.file_id
    elif content_type == 'video_note':
        file_id = message.video_note.file_id

    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_notification_date, notification_theme, notification_text, content_type, file_id, caption)

#@log_user_actions
@check_user_blocked
def process_notification_date(message, notification_theme, notification_text, content_type, file_id, caption):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_notification_date, notification_theme, notification_text, content_type, file_id, caption)
        return

    date_str = message.text

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if not validate_date_format(date_str):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, process_notification_date, notification_theme, notification_text, content_type, file_id, caption)
        return

    try:
        notification_date = datetime.strptime(date_str, "%d.%m.%Y")
        if notification_date.date() < datetime.now().date():
            bot.send_message(message.chat.id, "–í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É")
            bot.register_next_step_handler(message, process_notification_date, notification_theme, notification_text, content_type, file_id, caption)
            return
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, process_notification_date, notification_theme, notification_text, content_type, file_id, caption)
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_notification_time, notification_theme, notification_text, date_str, content_type, file_id, caption)

@check_user_blocked
#@log_user_actions
def validate_date_format(date_str):
    try:
        datetime.strptime(date_str, "%d.%m.%Y")
        return True
    except ValueError:
        return False

@check_user_blocked
#@log_user_actions
def process_notification_time(message, notification_theme, notification_text, date_str, content_type, file_id, caption):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_notification_time, notification_theme, notification_text, date_str, content_type, file_id, caption)
        return

    time_str = message.text

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if not validate_time_format(time_str):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        bot.register_next_step_handler(message, process_notification_time, notification_theme, notification_text, date_str, content_type, file_id, caption)
        return

    try:
        notification_time = datetime.strptime(f"{date_str}, {time_str}", "%d.%m.%Y, %H:%M")
        if notification_time < datetime.now():
            bot.send_message(message.chat.id, "–í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
            bot.register_next_step_handler(message, process_notification_time, notification_theme, notification_text, date_str, content_type, file_id, caption)
            return
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        bot.register_next_step_handler(message, process_notification_time, notification_theme, notification_text, date_str, content_type, file_id, caption)
        return

    notification_id = str(len(alerts['notifications']) + 1)
    alerts['notifications'][notification_id] = {
        'theme': notification_theme,
        'text': notification_text if content_type == 'text' else None,
        'time': notification_time,
        'status': 'active',
        'category': 'time',
        'user_id': None,
        'files': [
            {
                'type': content_type,
                'file_id': file_id,
                'caption': caption if content_type != 'text' else None
            }
        ],
        'content_type': content_type
    }
    save_database()
    bot.send_message(message.chat.id, f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ *{notification_theme.lower()}* –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {notification_time.strftime('%d.%m.%Y –≤ %H:%M')}!", parse_mode="Markdown")
    show_communication_menu(message)

@check_user_blocked  
#@log_user_actions
def validate_time_format(time_str):
    try:
        datetime.strptime(time_str, "%H:%M")
        return True
    except ValueError:
        return False

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)' and check_admin_access(message))
def show_view_notifications(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü—Ä–æ—Å–º–æ—Ç—Ä (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–ê–∫—Ç–∏–≤–Ω—ã–µ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)', '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)')
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:", reply_markup=markup)

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–ê–∫—Ç–∏–≤–Ω—ã–µ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)' and check_admin_access(message))
def show_active_notifications(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ê–∫—Ç–∏–≤–Ω—ã–µ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if alerts['notifications']:
        active_notifications = [
            f"‚≠ê ‚Ññ{i + 1} ‚≠ê\n\nüìù *–¢–µ–º–∞*: {n['theme'].lower() if n['theme'] else '–±–µ–∑ —Ç–µ–º—ã'}\nüìÖ *–î–∞—Ç–∞*: {n['time'].strftime('%d.%m.%Y')}\nüïí *–í—Ä–µ–º—è*: {n['time'].strftime('%H:%M')}\nüîÑ *–°—Ç–∞—Ç—É—Å*: {'–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if n['status'] == 'sent' else '–æ—Ç–ª–æ–∂–µ–Ω–æ'}\n"
            for i, n in enumerate([n for n in alerts['notifications'].values() if n['status'] == 'active' and n['category'] == 'time'])
        ]
        if active_notifications:
            bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ *–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)*:\n\n\n" + "\n\n".join(active_notifications), parse_mode="Markdown")

            markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
            markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=markup)
            bot.register_next_step_handler(message, show_notification_details, 'active')
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π!")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)' and check_admin_access(message))
def show_stopped_notifications(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    stopped_notifications = [
        f"‚≠ê ‚Ññ{i + 1} ‚≠ê\n\nüìù *–¢–µ–º–∞*: {n['theme'].lower() if n['theme'] else '–±–µ–∑ —Ç–µ–º—ã'}\nüìÖ *–î–∞—Ç–∞*: {n['time'].strftime('%d.%m.%Y')}\nüïí *–í—Ä–µ–º—è*: {n['time'].strftime('%H:%M')}\nüîÑ *–°—Ç–∞—Ç—É—Å*: {'–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if n['status'] == 'sent' else '–æ—Ç–ª–æ–∂–µ–Ω–æ'}\n"
        for i, n in enumerate([n for n in alerts['notifications'].values() if n['status'] == 'sent' and n['category'] == 'time'])
    ]
    if stopped_notifications:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ *–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)*:\n\n\n" + "\n\n".join(stopped_notifications), parse_mode="Markdown")

        markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')

        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=markup)
        bot.register_next_step_handler(message, show_notification_details, 'sent')
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π!")

#@log_user_actions
def show_notification_details(message, status):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, show_notification_details, status)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        indices = [int(index.strip()) - 1 for index in message.text.split(',')]
        notifications = [n for n in alerts['notifications'].values() if n['status'] == status and n['category'] == 'time']
        valid_indices = [index for index in indices if 0 <= index < len(notifications)]

        if len(valid_indices) != len(indices):
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, show_notification_details, status)
            return

        for index in valid_indices:
            notification = notifications[index]
            theme = notification['theme'].lower() if notification['theme'] else '–±–µ–∑ —Ç–µ–º—ã'
            content_type = notification.get('content_type', '—Ç–µ–∫—Å—Ç')
            status_text = '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if notification['status'] == 'sent' else '–∞–∫—Ç–∏–≤–Ω–æ'

            notification_details = (
                f"*–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*:\n\n"
                f"üìù *–¢–µ–º–∞*: {theme}\n"
                f"üìÅ *–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞*: {content_type}\n"
                f"üìÖ *–î–∞—Ç–∞*: {notification['time'].strftime('%d.%m.%Y')}\n"
                f"üïí *–í—Ä–µ–º—è*: {notification['time'].strftime('%H:%M')}\n"
                f"üîÑ *–°—Ç–∞—Ç—É—Å*: {status_text}\n"
            )

            if content_type == 'text':
                notification_details += f"\n*–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è*:\n\n{notification['text']}\n"

            bot.send_message(message.chat.id, notification_details, parse_mode="Markdown")

            if content_type != 'text':
                for file in notification.get('files', []):
                    if file['type'] == 'photo':
                        bot.send_photo(message.chat.id, file['file_id'], caption=file.get('caption'))
                    elif file['type'] == 'video':
                        bot.send_video(message.chat.id, file['file_id'], caption=file.get('caption'))
                    elif file['type'] == 'document':
                        bot.send_document(message.chat.id, file['file_id'], caption=file.get('caption'))
                    elif file['type'] == 'animation':
                        bot.send_animation(message.chat.id, file['file_id'], caption=file.get('caption'))
                    elif file['type'] == 'sticker':
                        bot.send_sticker(message.chat.id, file['file_id'])
                    elif file['type'] == 'audio':
                        bot.send_audio(message.chat.id, file['file_id'], caption=file.get('caption'))
                    elif file['type'] == 'voice':
                        bot.send_voice(message.chat.id, file['file_id'], caption=file.get('caption'))
                    elif file['type'] == 'video_note':
                        bot.send_video_note(message.chat.id, file['file_id'])

        show_communication_menu(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è!")
        bot.register_next_step_handler(message, show_notification_details, status)

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)' and check_admin_access(message))
def delete_notification(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    notifications_list = [
        f"‚≠ê *‚Ññ{i + 1}* ‚≠ê\n\nüìù *–¢–µ–º–∞*: {n['theme'].lower() if n['theme'] else '–±–µ–∑ —Ç–µ–º—ã'}\nüìÖ *–î–∞—Ç–∞*: {n['time'].strftime('%d.%m.%Y')}\nüïí *–í—Ä–µ–º—è*: {n['time'].strftime('%H:%M')}\nüîÑ *–°—Ç–∞—Ç—É—Å*: {'–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if n['status'] == 'sent' else '–∞–∫—Ç–∏–≤–Ω–æ'}"
        for i, n in enumerate([n for n in alerts['notifications'].values() if n['category'] == 'time'])
    ]
    if notifications_list:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –¥–ª—è *—É–¥–∞–ª–µ–Ω–∏—è (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)*:\n\n\n" + "\n\n".join(notifications_list), parse_mode="Markdown")

        markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')

        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=markup)
        bot.register_next_step_handler(message, process_delete_notification)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")

#@log_user_actions
def process_delete_notification(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_delete_notification)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        indices = [int(index.strip()) - 1 for index in message.text.split(',')]
        notifications = list(alerts['notifications'].values())
        valid_indices = [index for index in indices if 0 <= index < len(notifications)]

        if len(valid_indices) != len(indices):
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, process_delete_notification)
            return

        deleted_notifications = []
        for index in sorted(valid_indices, reverse=True):
            notification_id = list(alerts['notifications'].keys())[index]
            deleted_notification = alerts['notifications'].pop(notification_id)
            deleted_notifications.append(deleted_notification)

        # –ü–µ—Ä–µ–Ω—É–º–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
        new_notifications = {}
        for i, (notification_id, notification) in enumerate(alerts['notifications'].items(), start=1):
            new_notifications[str(i)] = notification

        alerts['notifications'] = new_notifications
        save_database()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–Ω—É–º–µ—Ä–∞—Ü–∏–∏

        deleted_themes = ", ".join([f"*{msg['theme'].lower()}*" for msg in deleted_notifications])
        bot.send_message(message.chat.id, f"–û–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ —Ç–µ–º–∞–º {deleted_themes} –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")

        show_communication_menu(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
        bot.register_next_step_handler(message, process_delete_notification)

#@log_user_actions
def list_users_for_time_notification(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, list_users_for_time_notification)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, choose_user_for_time_notification)

#@log_user_actions
def choose_user_for_time_notification(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, choose_user_for_time_notification)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return

    try:
        index = int(message.text) - 1
        users_data = load_users()
        user_list = list(users_data.keys())
        if 0 <= index < len(user_list):
            user_id = user_list[index]
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:")
            bot.register_next_step_handler(message, set_theme_for_time_notification, user_id)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, choose_user_for_time_notification)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        bot.register_next_step_handler(message, choose_user_for_time_notification)

#@log_user_actions
def set_theme_for_time_notification(message, user_id):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, set_theme_for_time_notification, user_id)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    individual_theme = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª:")
    bot.register_next_step_handler(message, set_time_for_time_notification, user_id, individual_theme)

#@log_user_actions
def set_time_for_time_notification(message, user_id, individual_theme):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    notification_text = message.text or message.caption
    content_type = message.content_type
    file_id = None
    caption = message.caption

    if content_type == 'photo':
        file_id = message.photo[-1].file_id
    elif content_type == 'video':
        file_id = message.video.file_id
    elif content_type == 'document':
        file_id = message.document.file_id
    elif content_type == 'animation':
        file_id = message.animation.file_id
    elif content_type == 'sticker':
        file_id = message.sticker.file_id
    elif content_type == 'audio':
        file_id = message.audio.file_id
    elif content_type == 'voice':
        file_id = message.voice.file_id
    elif content_type == 'video_note':
        file_id = message.video_note.file_id

    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_time_notification_date, user_id, individual_theme, notification_text, content_type, file_id, caption)

#@log_user_actions
def process_time_notification_date(message, user_id, individual_theme, notification_text, content_type, file_id, caption):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_time_notification_date, user_id, individual_theme, notification_text, content_type, file_id, caption)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    date_str = message.text
    if not validate_date_format(date_str):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, process_time_notification_date, user_id, individual_theme, notification_text, content_type, file_id, caption)
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_time_notification_time, user_id, individual_theme, notification_text, date_str, content_type, file_id, caption)

#@log_user_actions
def process_time_notification_time(message, user_id, individual_theme, notification_text, date_str, content_type, file_id, caption):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_time_notification_time, user_id, individual_theme, notification_text, date_str, content_type, file_id, caption)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    time_str = message.text
    if not validate_time_format(time_str):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        bot.register_next_step_handler(message, process_time_notification_time, user_id, individual_theme, notification_text, date_str, content_type, file_id, caption)
        return

    try:
        notification_time = datetime.strptime(f"{date_str}, {time_str}", "%d.%m.%Y, %H:%M")
        if notification_time < datetime.now():
            bot.send_message(message.chat.id, "–í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
            bot.register_next_step_handler(message, process_time_notification_time, user_id, individual_theme, notification_text, date_str, content_type, file_id, caption)
            return
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        bot.register_next_step_handler(message, process_time_notification_time, user_id, individual_theme, notification_text, date_str, content_type, file_id, caption)
        return

    notification_id = str(len(alerts['notifications']) + 1)
    alerts['notifications'][notification_id] = {
        'theme': individual_theme,
        'text': notification_text if content_type == 'text' else None,
        'time': notification_time,
        'status': 'active',
        'category': 'time',
        'user_id': user_id,
        'files': [
            {
                'type': content_type,
                'file_id': file_id,
                'caption': caption if content_type != 'text' else None
            }
        ],
        'content_type': content_type
    }
    save_database()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_data = load_users()
    username = escape_markdown(users_data.get(user_id, {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'))

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–º–æ–π –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –µ—ë –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
    theme = individual_theme.lower()
    formatted_time = notification_time.strftime("%d.%m.%Y –≤ %H:%M")
    bot.send_message(message.chat.id, f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ *{theme.lower()}* –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {formatted_time} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} - `{user_id}`!", parse_mode="Markdown")
    show_communication_menu(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–í—Å–µ–º"
#@log_user_actions
@check_user_blocked
@bot.message_handler(func=lambda message: message.text == '–í—Å–µ–º' and check_admin_access(message))
def handle_broadcast_notifications(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–í—Å–µ–º'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
    markup.add('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ', '–£–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ')
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö:", reply_markup=markup)

@check_user_blocked
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' and check_admin_access(message))
def send_message_to_all(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, send_message_to_all)
        return

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, set_theme_for_broadcast)

@check_user_blocked
#@log_user_actions
def set_theme_for_broadcast(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, set_theme_for_broadcast)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    broadcast_theme = message.text
    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª:", reply_markup=markup)
    bot.register_next_step_handler(message, process_broadcast_message, broadcast_theme)

@check_user_blocked
#@log_user_actions
def process_broadcast_message(message, broadcast_theme):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    broadcast_text = message.text or message.caption
    content_type = message.content_type
    file_id = None
    caption = message.caption

    if content_type == 'photo':
        file_id = message.photo[-1].file_id
    elif content_type == 'video':
        file_id = message.video.file_id
    elif content_type == 'document':
        file_id = message.document.file_id
    elif content_type == 'animation':
        file_id = message.animation.file_id
    elif content_type == 'sticker':
        file_id = message.sticker.file_id
    elif content_type == 'audio':
        file_id = message.audio.file_id
    elif content_type == 'voice':
        file_id = message.voice.file_id
    elif content_type == 'video_note':
        file_id = message.video_note.file_id

    users = load_users()
    user_ids = []
    for user_id in users.keys():
        if content_type == 'text':
            bot.send_message(user_id, broadcast_text)
        elif content_type == 'photo':
            bot.send_photo(user_id, file_id, caption=caption)
        elif content_type == 'video':
            bot.send_video(user_id, file_id, caption=caption)
        elif content_type == 'document':
            bot.send_document(user_id, file_id, caption=caption)
        elif content_type == 'animation':
            bot.send_animation(user_id, file_id, caption=caption)
        elif content_type == 'sticker':
            bot.send_sticker(user_id, file_id)
        elif content_type == 'audio':
            bot.send_audio(user_id, file_id, caption=caption)
        elif content_type == 'voice':
            bot.send_voice(user_id, file_id, caption=caption)
        elif content_type == 'video_note':
            bot.send_video_note(user_id, file_id)
        user_ids.append(user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    notification_id = str(len(alerts['sent_messages']) + 1)
    alerts['sent_messages'][notification_id] = {
        'theme': broadcast_theme,
        'text': broadcast_text if content_type == 'text' else None,
        'time': datetime.now().strftime("%d.%m.%Y –≤ %H:%M"),
        'status': 'sent',
        'category': 'all',
        'user_ids': user_ids,
        'files': [
            {
                'type': content_type,
                'file_id': file_id,
                'caption': caption if content_type != 'text' else None
            }
        ]
    }
    save_database()
    bot.send_message(message.chat.id, "–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
    show_communication_menu(message)

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ' and check_admin_access(message))
def show_sent_messages(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if alerts['sent_messages']:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        sent_messages_list = [
            f"‚≠ê *‚Ññ{i + 1}* ‚≠ê\n\nüìù *–¢–µ–º–∞*: {msg['theme'].lower()}\nüë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*: {', '.join(msg.get('user_ids', []))}\nüìÖ *–î–∞—Ç–∞*: {msg['time'].strftime('%d.%m.%Y')}\nüïí *–í—Ä–µ–º—è*: {msg['time'].strftime('%H:%M')}\n"
            for i, msg in enumerate(alerts['sent_messages'].values()) if msg['category'] == 'all'
        ]

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        header = "–°–ø–∏—Å–æ–∫ *–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö* –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:\n\n"
        max_length = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        message_text = header

        for sent_message in sent_messages_list:
            if len(message_text) + len(sent_message) > max_length:
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                message_text = sent_message
            else:
                message_text += sent_message + "\n\n"

        if message_text:
            bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"
        markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')

        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, show_sent_message_details)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π!")

#@log_user_actions
def show_sent_message_details(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        indices = [int(index.strip()) - 1 for index in message.text.split(',')]
        sent_messages = list(alerts['sent_messages'].values())
        valid_indices = [index for index in indices if 0 <= index < len(sent_messages)]

        if len(valid_indices) != len(indices):
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, show_sent_message_details)
            return

        for index in valid_indices:
            sent_message = sent_messages[index]
            theme = sent_message['theme'].lower() if sent_message['theme'] else '–±–µ–∑ —Ç–µ–º—ã'
            content_type = sent_message.get('content_type', '—Ç–µ–∫—Å—Ç')
            status_text = '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
            formatted_time = sent_message['time'].strftime("%d.%m.%Y –≤ %H:%M")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
            message_text = sent_message.get('text', '')

            sent_message_details = (
                f"*–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*:\n\n"
                f"üìù *–¢–µ–º–∞*: {theme}\n"
                f"üìÅ *–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞*: {content_type}\n"
                f"üìÖ *–î–∞—Ç–∞*: {formatted_time}\n"
                f"üîÑ *–°—Ç–∞—Ç—É—Å*: {status_text}\n"
            )

            if message_text:
                sent_message_details += f"\n*–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è*:\n\n{message_text}\n"

            bot.send_message(message.chat.id, sent_message_details, parse_mode="Markdown")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            for file in sent_message.get('files', []):
                if file['type'] == 'photo':
                    bot.send_photo(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'video':
                    bot.send_video(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'document':
                    bot.send_document(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'animation':
                    bot.send_animation(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'sticker':
                    bot.send_sticker(message.chat.id, file['file_id'])
                elif file['type'] == 'audio':
                    bot.send_audio(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'voice':
                    bot.send_voice(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'video_note':
                    bot.send_video_note(message.chat.id, file['file_id'])

        show_communication_menu(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!")
        bot.register_next_step_handler(message, show_sent_message_details)
    except IndexError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(message, show_sent_message_details)

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ' and check_admin_access(message))
def delete_sent_messages(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if alerts['sent_messages']:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        sent_messages_list = [
            f"‚≠ê *‚Ññ{i + 1}* ‚≠ê\n\nüìù *–¢–µ–º–∞*: {msg['theme'].lower()}\nüë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*: {', '.join(msg.get('user_ids', []))}\nüìÖ *–î–∞—Ç–∞*: {msg['time'].strftime('%d.%m.%Y')}\nüïí *–í—Ä–µ–º—è*: {msg['time'].strftime('%H:%M')}\n"
            for i, msg in enumerate(alerts['sent_messages'].values()) if msg['category'] == 'all'
        ]

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        header = "–°–ø–∏—Å–æ–∫ *–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö* –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:\n\n"
        max_length = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        message_text = header

        for sent_message in sent_messages_list:
            if len(message_text) + len(sent_message) > max_length:
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                message_text = sent_message
            else:
                message_text += sent_message + "\n\n"

        if message_text:
            bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"
        markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')

        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, process_delete_sent_message)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π!")

#@log_user_actions
def process_delete_sent_message(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        indices = [int(index.strip()) - 1 for index in message.text.split(',')]
        sent_messages = list(alerts['sent_messages'].values())
        valid_indices = [index for index in indices if 0 <= index < len(sent_messages)]

        if len(valid_indices) != len(indices):
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, process_delete_sent_message)
            return

        deleted_messages = []
        for index in sorted(valid_indices, reverse=True):
            notification_id = list(alerts['sent_messages'].keys())[index]
            deleted_message = alerts['sent_messages'].pop(notification_id)
            deleted_messages.append(deleted_message)

        # –ü–µ—Ä–µ–Ω—É–º–µ—Ä–∞—Ü–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        new_sent_messages = {}
        for i, (key, value) in enumerate(alerts['sent_messages'].items(), start=1):
            new_sent_messages[str(i)] = value
        alerts['sent_messages'] = new_sent_messages

        save_database()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–º—ã —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        deleted_themes = ", ".join([f"*{msg['theme'].lower()}*" for msg in deleted_messages])
        bot.send_message(message.chat.id, f"–û–ø–æ–≤–µ—â–µ–Ω–∏—è (–≤—Å–µ–º) –ø–æ —Ç–µ–º–∞–º {deleted_themes} –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")

        show_communication_menu(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!")
        bot.register_next_step_handler(message, process_delete_sent_message)
    except IndexError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(message, process_delete_sent_message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–û—Ç–¥–µ–ª—å–Ω–æ"
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–û—Ç–¥–µ–ª—å–Ω–æ' and check_admin_access(message))
def handle_individual_notifications(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û—Ç–¥–µ–ª—å–Ω–æ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ')
    markup.add('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ', '–£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ')
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=markup)

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ' and check_admin_access(message))
def send_message_to_individual(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    list_users(message)

#@log_user_actions
def list_users(message):
    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ" if not data.get('blocked', False) else " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, choose_user_for_send)

#@log_user_actions
def choose_user_for_send(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, choose_user_for_send)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        index = int(message.text) - 1
        users_data = load_users()
        user_list = list(users_data.keys())
        if 0 <= index < len(user_list):
            user_id = user_list[index]
            send_individual_message(message, user_id)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, choose_user_for_send)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        bot.register_next_step_handler(message, choose_user_for_send)

#@log_user_actions
def send_individual_message(message, user_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, set_theme_for_individual_broadcast, user_id)

#@log_user_actions
def set_theme_for_individual_broadcast(message, user_id):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, set_theme_for_individual_broadcast, user_id)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    broadcast_theme = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª:")
    bot.register_next_step_handler(message, process_individual_broadcast_message, user_id, broadcast_theme)

#@log_user_actions
def process_individual_broadcast_message(message, user_id, broadcast_theme):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    broadcast_text = message.text or message.caption
    content_type = message.content_type
    file_id = None
    caption = message.caption

    if content_type == 'photo':
        file_id = message.photo[-1].file_id
    elif content_type == 'video':
        file_id = message.video.file_id
    elif content_type == 'document':
        file_id = message.document.file_id
    elif content_type == 'animation':
        file_id = message.animation.file_id
    elif content_type == 'sticker':
        file_id = message.sticker.file_id
    elif content_type == 'audio':
        file_id = message.audio.file_id
    elif content_type == 'voice':
        file_id = message.voice.file_id
    elif content_type == 'video_note':
        file_id = message.video_note.file_id

    if content_type == 'text':
        bot.send_message(user_id, broadcast_text)
    elif content_type == 'photo':
        bot.send_photo(user_id, file_id, caption=caption)
    elif content_type == 'video':
        bot.send_video(user_id, file_id, caption=caption)
    elif content_type == 'document':
        bot.send_document(user_id, file_id, caption=caption)
    elif content_type == 'animation':
        bot.send_animation(user_id, file_id, caption=caption)
    elif content_type == 'sticker':
        bot.send_sticker(user_id, file_id)
    elif content_type == 'audio':
        bot.send_audio(user_id, file_id, caption=caption)
    elif content_type == 'voice':
        bot.send_voice(user_id, file_id, caption=caption)
    elif content_type == 'video_note':
        bot.send_video_note(user_id, file_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    notification_id = str(len(alerts['sent_messages']) + 1)
    alerts['sent_messages'][notification_id] = {
        'theme': broadcast_theme,
        'text': broadcast_text if content_type == 'text' else None,
        'time': datetime.now().strftime("%d.%m.%Y –≤ %H:%M"),
        'status': 'sent',
        'category': 'individual',
        'user_id': [user_id],
        'files': [
            {
                'type': content_type,
                'file_id': file_id,
                'caption': caption if content_type != 'text' else None
            }
        ]
    }
    save_database()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_data = load_users()
    username = escape_markdown(users_data.get(user_id, {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'))

    bot.send_message(message.chat.id, f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} - `{user_id}`!", parse_mode="Markdown")
    show_communication_menu(message)

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ' and check_admin_access(message))
def show_individual_messages(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ" if not data.get('blocked', False) else " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, choose_user_for_view)

#@log_user_actions
def choose_user_for_view(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, choose_user_for_view)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        indices = [int(index.strip()) - 1 for index in message.text.split(',')]
        users_data = load_users()
        user_list = list(users_data.keys())
        valid_indices = [index for index in indices if 0 <= index < len(user_list)]

        if len(valid_indices) != len(indices):
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, choose_user_for_view)
            return

        for index in valid_indices:
            user_id = user_list[index]
            view_individual_messages_for_user(message, user_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        bot.register_next_step_handler(message, choose_user_for_view)

#@log_user_actions
def view_individual_messages_for_user(message, user_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    sent_messages = [msg for msg in alerts['sent_messages'].values() if msg['category'] == 'individual' and user_id in msg.get('user_id', [])]
    if sent_messages:
        sent_messages_list = [
            f"‚≠ê ‚Ññ{i + 1} ‚≠ê\n\nüìù *–¢–µ–º–∞*: {msg['theme'].lower()}\nüë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*: {', '.join(msg.get('user_id', []))}\nüìÖ *–î–∞—Ç–∞*: {msg['time'].strftime('%d.%m.%Y')}\nüïí *–í—Ä–µ–º—è*: {msg['time'].strftime('%H:%M')}\n"
            for i, msg in enumerate(sent_messages)
        ]

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        header = "–°–ø–∏—Å–æ–∫ *–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö* –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:\n\n"
        max_length = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        message_text = header

        for sent_message in sent_messages_list:
            if len(message_text) + len(sent_message) > max_length:
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                message_text = sent_message
            else:
                message_text += sent_message + "\n\n"

        if message_text:
            bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

        markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, show_individual_message_details, user_id)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        show_communication_menu(message)

#@log_user_actions
def show_individual_message_details(message, user_id):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, show_individual_message_details, user_id)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        indices = [int(index.strip()) - 1 for index in message.text.split(',')]
        sent_messages = [msg for msg in alerts['sent_messages'].values() if msg['category'] == 'individual' and user_id in msg.get('user_id', [])]
        valid_indices = [index for index in indices if 0 <= index < len(sent_messages)]

        if len(valid_indices) != len(indices):
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, show_individual_message_details, user_id)
            return

        for index in valid_indices:
            sent_message = sent_messages[index]
            theme = sent_message['theme'].lower() if sent_message['theme'] else '–±–µ–∑ —Ç–µ–º—ã'
            content_type = sent_message.get('content_type', '—Ç–µ–∫—Å—Ç')
            status_text = '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if sent_message.get('status') == 'sent' else '–∞–∫—Ç–∏–≤–Ω–æ'

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
            formatted_time = sent_message['time'].strftime("%d.%m.%Y –≤ %H:%M")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
            message_text = sent_message.get('text', '')

            sent_message_details = (
                f"*–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*:\n\n"
                f"üìù *–¢–µ–º–∞*: {theme}\n"
                f"üìÅ *–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞*: {content_type}\n"
                f"üìÖ *–î–∞—Ç–∞*: {formatted_time}\n"
                f"üîÑ *–°—Ç–∞—Ç—É—Å*: {status_text}\n"
            )

            if message_text:
                sent_message_details += f"\n*–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è*:\n\n{message_text}\n"

            bot.send_message(message.chat.id, sent_message_details, parse_mode="Markdown")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            for file in sent_message.get('files', []):
                if file['type'] == 'photo':
                    bot.send_photo(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'video':
                    bot.send_video(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'document':
                    bot.send_document(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'animation':
                    bot.send_animation(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'sticker':
                    bot.send_sticker(message.chat.id, file['file_id'])
                elif file['type'] == 'audio':
                    bot.send_audio(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'voice':
                    bot.send_voice(message.chat.id, file['file_id'], caption=file.get('caption'))
                elif file['type'] == 'video_note':
                    bot.send_video_note(message.chat.id, file['file_id'])

        show_communication_menu(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è!")
        bot.register_next_step_handler(message, show_individual_message_details, user_id)

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ' and check_admin_access(message))
def delete_individual_messages(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ" if not data.get('blocked', False) else " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, choose_user_for_delete)

#@log_user_actions
def choose_user_for_delete(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, choose_user_for_delete)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        index = int(message.text) - 1
        users_data = load_users()
        user_list = list(users_data.keys())
        if 0 <= index < len(user_list):
            user_id = user_list[index]
            delete_individual_messages_for_user(message, user_id)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, choose_user_for_delete)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        bot.register_next_step_handler(message, choose_user_for_delete)

#@log_user_actions
def delete_individual_messages_for_user(message, user_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    sent_messages = [msg for msg in alerts['sent_messages'].values() if msg['category'] == 'individual' and user_id in msg.get('user_id', [])]
    if sent_messages:
        sent_messages_list = [
            f"‚≠ê ‚Ññ{i + 1} ‚≠ê\n\nüìù *–¢–µ–º–∞*: {msg['theme'].lower()}\nüë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*: {', '.join(msg.get('user_id', []))}\nüìÖ *–î–∞—Ç–∞*: {msg['time'].strftime('%d.%m.%Y')}\nüïí *–í—Ä–µ–º—è*: {msg['time'].strftime('%H:%M')}\n"
            for i, msg in enumerate(sent_messages)
        ]

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        header = "–°–ø–∏—Å–æ–∫ *–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö* –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:\n\n"
        max_length = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        message_text = header

        for sent_message in sent_messages_list:
            if len(message_text) + len(sent_message) > max_length:
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                message_text = sent_message
            else:
                message_text += sent_message + "\n\n"

        if message_text:
            bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, process_delete_individual_message, user_id)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        show_communication_menu(message)

#@log_user_actions
def process_delete_individual_message(message, user_id):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_delete_individual_message, user_id)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        indices = [int(index.strip()) - 1 for index in message.text.split(',')]
        sent_messages = [msg for msg in alerts['sent_messages'].values() if msg['category'] == 'individual' and user_id in msg.get('user_id', [])]
        valid_indices = [index for index in indices if 0 <= index < len(sent_messages)]

        if len(valid_indices) != len(indices):
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, process_delete_individual_message, user_id)
            return

        deleted_messages = []
        for index in sorted(valid_indices, reverse=True):
            notification_id = list(alerts['sent_messages'].keys())[index]
            deleted_message = alerts['sent_messages'].pop(notification_id)
            deleted_messages.append(deleted_message)

        # –ü–µ—Ä–µ–Ω—É–º–µ—Ä–∞—Ü–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        new_sent_messages = {}
        for i, (key, value) in enumerate(alerts['sent_messages'].items(), start=1):
            new_sent_messages[str(i)] = value
        alerts['sent_messages'] = new_sent_messages

        save_database()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–º—ã —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        deleted_themes = ", ".join([f"*{msg['theme'].lower()}*" for msg in deleted_messages])
        bot.send_message(message.chat.id, f"–û–ø–æ–≤–µ—â–µ–Ω–∏—è (–≤—Å–µ–º) –ø–æ —Ç–µ–º–∞–º {deleted_themes} –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")

        show_communication_menu(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è!")
        bot.register_next_step_handler(message, process_delete_individual_message, user_id)





# -----------------–î–õ–Ø –†–ï–ö–õ–ê–ú–´------------


# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
ADVERTISEMENT_PATH = 'data base/admin/chats/advertisement.json'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
advertisements = {}
temp_advertisement = {
    'text': None,
    'caption': None,
    'files': [],
    'chat_id': None
}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º—ã
def save_advertisements():
    with open(ADVERTISEMENT_PATH, 'w', encoding='utf-8') as file:
        json.dump(advertisements, file, ensure_ascii=False, indent=4)

def load_advertisements():
    if os.path.exists(ADVERTISEMENT_PATH):
        with open(ADVERTISEMENT_PATH, 'r', encoding='utf-8') as file:
            data = json.load(file)
            for adv in data['advertisements'].values():
                if 'expected_date' in adv and 'expected_time' in adv:
                    adv['expected_date'] = datetime.strptime(adv['expected_date'], "%d.%m.%Y").strftime("%d.%m.%Y")
                    adv['expected_time'] = datetime.strptime(adv['expected_time'], "%H:%M").strftime("%H:%M")
                if 'end_date' in adv and 'end_time' in adv:
                    adv['end_date'] = datetime.strptime(adv['end_date'], "%d.%m.%Y").strftime("%d.%m.%Y")
                    adv['end_time'] = datetime.strptime(adv['end_time'], "%H:%M").strftime("%H:%M")
            return data
    return {"advertisements": {}}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
advertisements = load_advertisements()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É"
@bot.message_handler(func=lambda message: message.text == '–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É')
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É')
@track_usage('–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def handle_advertisement_request(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Ä–µ–∫–ª–∞–º—ã –∏ –∫—Ä–∞—Ç–∫–æ –æ —á–µ–º –æ–Ω–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, set_advertisement_theme)

#@log_user_actions
def set_advertisement_theme(message):

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        view_add_menu(message)
        return

    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        return_to_menu(message)
        return

    if message.content_type != 'text':
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, set_advertisement_theme)
        return

    advertisement_theme = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É:")
    bot.register_next_step_handler(message, set_advertisement_date, advertisement_theme)

#@log_user_actions
def set_advertisement_date(message, advertisement_theme):

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        view_add_menu(message)
        return

    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        return_to_menu(message)
        return

    if message.content_type != 'text':
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, set_advertisement_date, advertisement_theme)
        return

    expected_date = message.text
    if expected_date is None or not validate_date_format(expected_date):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, set_advertisement_date, advertisement_theme)
        return

    if not validate_future_date(expected_date):
        bot.send_message(message.chat.id, "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
        bot.register_next_step_handler(message, set_advertisement_date, advertisement_theme)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É:")
    bot.register_next_step_handler(message, set_advertisement_time, advertisement_theme, expected_date)

#@log_user_actions
def set_advertisement_time(message, advertisement_theme, expected_date):

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        view_add_menu(message)
        return

    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        return_to_menu(message)
        return

    if message.content_type != 'text':
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, set_advertisement_time, advertisement_theme, expected_date)
        return

    expected_time = message.text
    if not validate_time_format(expected_time):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        bot.register_next_step_handler(message, set_advertisement_time, advertisement_theme, expected_date)
        return

    if not validate_future_time(expected_date, expected_time):
        bot.send_message(message.chat.id, "–í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è:")
        bot.register_next_step_handler(message, set_advertisement_time, advertisement_theme, expected_date)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–∫–ª–∞–º—ã:")
    bot.register_next_step_handler(message, set_advertisement_end_date, advertisement_theme, expected_date, expected_time)

#@log_user_actions
def set_advertisement_end_date(message, advertisement_theme, expected_date, expected_time):
    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        return_to_menu(message)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        view_add_menu(message)
        return

    if message.content_type != 'text':
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, set_advertisement_end_date, advertisement_theme, expected_date, expected_time)
        return

    end_date = message.text
    if not validate_date_format(end_date):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, set_advertisement_end_date, advertisement_theme, expected_date, expected_time)
        return

    if not validate_future_date(end_date):
        bot.send_message(message.chat.id, "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
        bot.register_next_step_handler(message, set_advertisement_end_date, advertisement_theme, expected_date, expected_time)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–∫–ª–∞–º—ã:")
    bot.register_next_step_handler(message, set_advertisement_end_time, advertisement_theme, expected_date, expected_time, end_date)

#@log_user_actions
def set_advertisement_end_time(message, advertisement_theme, expected_date, expected_time, end_date):
    
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        view_add_menu(message)
        return    
    
    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        return_to_menu(message)
        return

    if message.content_type != 'text':
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, set_advertisement_end_time, advertisement_theme, expected_date, expected_time, end_date)
        return

    end_time = message.text
    if not validate_time_format(end_time):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        bot.register_next_step_handler(message, set_advertisement_end_time, advertisement_theme, expected_date, expected_time, end_date)
        return

    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã:")
    bot.register_next_step_handler(message, collect_advertisement_text, advertisement_theme, expected_date, expected_time, end_date, end_time)

#@log_user_actions
def collect_advertisement_text(message, advertisement_theme, expected_date, expected_time, end_date, end_time):

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        view_add_menu(message)
        return

    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return_to_menu(message)
        return

    if message.content_type != 'text':
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, collect_advertisement_text, advertisement_theme, expected_date, expected_time, end_date, end_time)
        return

    temp_advertisement['text'] = message.text
    temp_advertisement['chat_id'] = message.chat.id

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å):", reply_markup=markup)
    bot.register_next_step_handler(message, collect_advertisement_media, advertisement_theme, expected_date, expected_time, end_date, end_time)

#@log_user_actions
def collect_advertisement_media(message, advertisement_theme, expected_date, expected_time, end_date, end_time):
 
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        view_add_menu(message)
        return

    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        return_to_menu(message)
        return

    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã":
        temp_advertisement['files'] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º 'files' –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
        save_advertisement_request(message, advertisement_theme, expected_date, expected_time, end_date, end_time)
        return

    content_type = message.content_type
    file_id = None

    if content_type == 'photo':
        file_id = message.photo[-1].file_id
    elif content_type == 'video':
        file_id = message.video.file_id
    elif content_type == 'document':
        file_id = message.document.file_id
    elif content_type == 'animation':
        file_id = message.animation.file_id
    elif content_type == 'sticker':
        file_id = message.sticker.file_id
    elif content_type == 'audio':
        file_id = message.audio.file_id
    elif content_type == 'voice':
        file_id = message.voice.file_id
    elif content_type == 'video_note':
        file_id = message.video_note.file_id

    if file_id:
        if 'files' not in temp_advertisement:
            temp_advertisement['files'] = []
        temp_advertisement['files'].append({
            'type': content_type,
            'file_id': file_id,
            'caption': temp_advertisement.get('text', '')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        })

        if len(temp_advertisement['files']) >= 10:
            save_advertisement_request(message, advertisement_theme, expected_date, expected_time, end_date, end_time)
            return

        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(message.chat.id, "–ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_advertisement_media_options, advertisement_theme, expected_date, expected_time, end_date, end_time)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª!")
        bot.register_next_step_handler(message, collect_advertisement_media, advertisement_theme, expected_date, expected_time, end_date, end_time)

#@log_user_actions
def handle_advertisement_media_options(message, advertisement_theme, expected_date, expected_time, end_date, end_time):
    
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        view_add_menu(message)
        return   
    
    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        return_to_menu(message)
        return

    if message.text == "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ":
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª:", reply_markup=markup)
        bot.register_next_step_handler(message, collect_advertisement_media, advertisement_theme, expected_date, expected_time, end_date, end_time)
    elif message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É":
        save_advertisement_request(message, advertisement_theme, expected_date, expected_time, end_date, end_time)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!")
        bot.register_next_step_handler(message, handle_advertisement_media_options, advertisement_theme, expected_date, expected_time, end_date, end_time)

#@log_user_actions
def save_advertisement_request(message, advertisement_theme, expected_date, expected_time, end_date, end_time):
    user_id = message.chat.id
    username = message.from_user.username
    advertisement_id = str(len(advertisements['advertisements']) + 1)
    advertisements['advertisements'][advertisement_id] = {
        'user_id': user_id,
        'username': username,
        'theme': advertisement_theme,
        'expected_date': expected_date,
        'expected_time': expected_time,
        'end_date': end_date,
        'end_time': end_time,
        'text': temp_advertisement['text'],
        'files': temp_advertisement['files'],
        'status': 'pending',
        'user_ids': [],
        'message_ids': []
    }

    save_advertisements()
    bot.send_message(message.chat.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
    with open('data base/admin/admin_sessions.json', 'r', encoding='utf-8') as file:
        admin_data = json.load(file)
        admin_ids = admin_data['admin_sessions']

    for admin_id in admin_ids:
        bot.send_message(admin_id, f"–£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}` –ø–æ —Ç–µ–º–µ *{advertisement_theme.lower()}* –Ω–∞ {expected_date} –≤ {expected_time} –¥–æ {end_date} –≤ {end_time}!", parse_mode="Markdown")

    temp_advertisement.clear()  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    return_to_menu(message)

#@log_user_actions
def schedule_advertisement_deletion(advertisement_id, end_date, end_time):
    end_datetime = datetime.strptime(f"{end_date} {end_time}", "%d.%m.%Y %H:%M")
    delay = (end_datetime - datetime.now()).total_seconds()
    threading.Timer(delay, delete_advertisement_messages, [advertisement_id]).start()

#@log_user_actions
def delete_advertisement_messages(advertisement_id):
    advertisement = advertisements['advertisements'][advertisement_id]
    user_ids = advertisement['user_ids']
    message_ids = advertisement['message_ids']

    for user_id, message_id in zip(user_ids, message_ids):
        try:
            bot.delete_message(user_id, message_id)
        except ApiTelegramException as e:
            if e.result.status_code == 400 and 'message to delete not found' in str(e.result):
                pass  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            else:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏

    del advertisements['advertisements'][advertisement_id]
    save_advertisements()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
#@log_user_actions
def validate_date_format(date_str):
    if date_str is None:
        return False
    try:
        datetime.strptime(date_str, "%d.%m.%Y")
        return True
    except ValueError:
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥—É—â–µ–π –¥–∞—Ç—ã
#@log_user_actions
def validate_future_date(date_str):
    today = datetime.now().date()
    input_date = datetime.strptime(date_str, "%d.%m.%Y").date()
    return input_date >= today

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
#@log_user_actions
def validate_time_format(time_str):
    try:
        datetime.strptime(time_str, "%H:%M")
        return True
    except ValueError:
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
#@log_user_actions
def validate_future_time(date_str, time_str):
    now = datetime.now()
    input_datetime = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
    return input_datetime >= now

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞
#@log_user_actions
def validate_duration(duration_str):
    try:
        duration = int(duration_str)
        return 1 <= duration <= 7
    except ValueError:
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–µ–∫–ª–∞–º—É –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
#@log_user_actions
def handle_admin_advertisement_requests(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É', '–£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:", reply_markup=markup)

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É' and check_admin_access(message))
def show_advertisement_requests(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É":
        show_advertisement_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    pending_advertisements = [adv for adv in advertisements['advertisements'].values() if adv['status'] == 'pending']
    current_time = datetime.now()

    for adv in pending_advertisements:
        end_datetime = datetime.strptime(f"{adv['end_date']} {adv['end_time']}", "%d.%m.%Y %H:%M")
        if current_time >= end_datetime:
            advertisement_id = next(key for key, value in advertisements['advertisements'].items() if value == adv)
            user_id = adv['user_id']
            theme = adv['theme']
            del advertisements['advertisements'][advertisement_id]
            save_advertisements()
            bot.send_message(user_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ —Ç–µ–º–µ *{theme.lower()}* –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫!", parse_mode="Markdown")

    pending_advertisements = [adv for adv in advertisements['advertisements'].values() if adv['status'] == 'pending']
    if pending_advertisements:
        advertisement_list = [
            f"‚≠ê *‚Ññ{i + 1}*\n\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*: `{adv['user_id']}`\n"
            f"üìù *–¢–µ–º–∞*: {adv['theme'].lower()}\n"
            f"üìÖ *–ù–∞—á–∞–ª–æ*: {adv['expected_date']} –≤ {adv['expected_time']}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü*: {adv.get('end_date', 'N/A')} –≤ {adv.get('end_time', 'N/A')}\n\n"
            for i, adv in enumerate(pending_advertisements)
        ]
        full_message = "*–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤* –Ω–∞ —Ä–µ–∫–ª–∞–º—É:\n\n" + "\n\n".join(advertisement_list)

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        max_length = 4096
        if len(full_message) > max_length:
            parts = [full_message[i:i + max_length] for i in range(0, len(full_message), max_length)]
            for part in parts:
                bot.send_message(message.chat.id, part, parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, full_message, parse_mode="Markdown")

        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, show_advertisement_request_details)
    else:
        bot.send_message(message.chat.id, "*–ê–∫—Ç–∏–≤–Ω—ã—Ö* –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–µ–∫–ª–∞–º—É –Ω–µ—Ç!", parse_mode="Markdown")

#@log_user_actions
def show_advertisement_request_details(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É":
        show_advertisement_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        index = int(message.text) - 1
        advertisement_list = list(advertisements['advertisements'].values())
        if 0 <= index < len(advertisement_list):
            advertisement = advertisement_list[index]
            text = advertisement['text']

            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∫–ª–∞–º–µ
            info_message = (
                f"‚≠ê *–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∫–ª–∞–º–µ*:\n\n"
                f"üìù *–¢–µ–º–∞*: {advertisement['theme'].lower()}\n"
                f"üìÖ *–ù–∞—á–∞–ª–æ*: {advertisement['expected_date']} –≤ {advertisement['expected_time']}\n"
                f"‚åõ *–ö–æ–Ω–µ—Ü*: {advertisement.get('end_date', 'N/A')} –≤ {advertisement.get('end_time', 'N/A')}\n\n"
            )

            bot.send_message(message.chat.id, info_message, parse_mode="Markdown")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
            if text and text != 'None':
                message_text = f"üìù –¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã üìù\n\n{text}"
            else:
                message_text = ""

            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º
            if 'files' in advertisement and advertisement['files']:
                media_group = []
                first_file = True
                for file in advertisement['files']:
                    if first_file:
                        caption = message_text
                    else:
                        caption = None
                    if file['type'] == 'photo':
                        media_group.append(telebot.types.InputMediaPhoto(file['file_id'], caption=caption))
                    elif file['type'] == 'video':
                        media_group.append(telebot.types.InputMediaVideo(file['file_id'], caption=caption))
                    elif file['type'] == 'document':
                        media_group.append(telebot.types.InputMediaDocument(file['file_id'], caption=caption))
                    elif file['type'] == 'animation':
                        media_group.append(telebot.types.InputMediaAnimation(file['file_id'], caption=caption))
                    elif file['type'] == 'sticker':
                        bot.send_sticker(message.chat.id, file['file_id'])
                    elif file['type'] == 'audio':
                        media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
                    elif file['type'] == 'voice':
                        media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
                    elif file['type'] == 'video_note':
                        bot.send_video_note(message.chat.id, file['file_id'])
                    first_file = False

                if media_group:
                    bot.send_media_group(message.chat.id, media_group)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                if message_text:
                    bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

            markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            markup.add('–ü—Ä–∏–Ω—è—Ç—å —Ä–µ–∫–ª–∞–º—É', '–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Ä–µ–∫–ª–∞–º—É')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É')
            markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:", reply_markup=markup)
            bot.register_next_step_handler(message, handle_advertisement_request_action, index)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, show_advertisement_request_details)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞!")
        bot.register_next_step_handler(message, show_advertisement_request_details)

#@log_user_actions
def handle_advertisement_request_action(message, index):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É":
        show_advertisement_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    advertisement_id = list(advertisements['advertisements'].keys())[index]
    advertisement = advertisements['advertisements'][advertisement_id]
    current_time = datetime.now()
    end_datetime = datetime.strptime(f"{advertisement['end_date']} {advertisement['end_time']}", "%d.%m.%Y %H:%M")

    if current_time >= end_datetime:
        user_id = advertisement['user_id']
        theme = advertisement['theme']
        del advertisements['advertisements'][advertisement_id]
        save_advertisements()
        bot.send_message(message.chat.id, "–†–µ–∫–ª–∞–º–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫!")
        bot.send_message(user_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ —Ç–µ–º–µ *{theme.lower()}* –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫!", parse_mode="Markdown")
        show_advertisement_menu(message)
        return

    if message.text == '–ü—Ä–∏–Ω—è—Ç—å —Ä–µ–∫–ª–∞–º—É':
        advertisements['advertisements'][advertisement_id]['status'] = 'accepted'
        save_advertisements()
        bot.send_message(message.chat.id, "–†–µ–∫–ª–∞–º–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
        choose_send_advertisement_action(message, advertisement_id)
    elif message.text == '–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Ä–µ–∫–ª–∞–º—É':
        user_id = advertisement['user_id']
        theme = advertisement['theme']
        del advertisements['advertisements'][advertisement_id]
        save_advertisements()
        bot.send_message(message.chat.id, "–†–µ–∫–ª–∞–º–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
        bot.send_message(user_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ —Ç–µ–º–µ *{theme.lower()}* –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", parse_mode="Markdown")
        show_advertisement_menu(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        show_advertisement_request_details(message)

#@log_user_actions
def schedule_advertisement(message, advertisement_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É":
        show_advertisement_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    advertisement = advertisements['advertisements'][advertisement_id]
    bot.send_message(message.chat.id, f"–¢–µ–º–∞: {advertisement['theme']}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
    if advertisement['text'] and advertisement['text'] != 'None':
        message_text = f"üìù –¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã üìù\n\n{advertisement['text']}"
    else:
        message_text = ""

    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    if 'files' in advertisement and advertisement['files']:
        media_group = []
        first_file = True
        for file in advertisement['files']:
            if first_file:
                caption = message_text
            else:
                caption = None
            if file['type'] == 'photo':
                media_group.append(telebot.types.InputMediaPhoto(file['file_id'], caption=caption))
            elif file['type'] == 'video':
                media_group.append(telebot.types.InputMediaVideo(file['file_id'], caption=caption))
            elif file['type'] == 'document':
                media_group.append(telebot.types.InputMediaDocument(file['file_id'], caption=caption))
            elif file['type'] == 'animation':
                media_group.append(telebot.types.InputMediaAnimation(file['file_id'], caption=caption))
            elif file['type'] == 'sticker':
                bot.send_sticker(message.chat.id, file['file_id'])
            elif file['type'] == 'audio':
                media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
            elif file['type'] == 'voice':
                media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
            elif file['type'] == 'video_note':
                bot.send_video_note(message.chat.id, file['file_id'])
            first_file = False

        if media_group:
            bot.send_media_group(message.chat.id, media_group)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        if message_text:
            bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, choose_send_advertisement_action, advertisement_id)


#@log_user_actions
def choose_send_advertisement_action(message, advertisement_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É":
        show_advertisement_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_send_advertisement_action, advertisement_id)

#@log_user_actions
def handle_send_advertisement_action(message, advertisement_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É":
        show_advertisement_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏':
        schedule_notification(message, advertisement_id)
    elif message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º':
        send_advertisement_to_all(message, advertisement_id)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        choose_send_advertisement_action(message, advertisement_id)

#@log_user_actions
def schedule_notification(message, advertisement_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É":
        show_advertisement_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    advertisement = advertisements['advertisements'][advertisement_id]
    expected_datetime = datetime.strptime(f"{advertisement['expected_date']} {advertisement['expected_time']}", "%d.%m.%Y %H:%M")
    current_time = datetime.now()

    if current_time >= expected_datetime:
        send_advertisement_to_all(message, advertisement_id)
    else:
        delay = (expected_datetime - current_time).total_seconds()
        threading.Timer(delay, send_advertisement_to_all, [message, advertisement_id]).start()
        bot.send_message(message.chat.id, f"–†–µ–∫–ª–∞–º–∞ *{advertisement['theme'].lower()}* –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {advertisement['expected_date']} –≤ {advertisement['expected_time']}!", parse_mode="Markdown")
        show_advertisement_menu(message)

#@log_user_actions
def send_advertisement_to_all(message, advertisement_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É":
        show_advertisement_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    advertisement = advertisements['advertisements'][advertisement_id]
    users = load_users()
    user_ids = []
    message_ids = []

    for user_id in users.keys():
        media_group = []
        first_file = True
        for file in advertisement['files']:
            if first_file:
                caption = advertisement['text']
            else:
                caption = None
            if file['type'] == 'photo':
                media_group.append(telebot.types.InputMediaPhoto(file['file_id'], caption=caption))
            elif file['type'] == 'video':
                media_group.append(telebot.types.InputMediaVideo(file['file_id'], caption=caption))
            elif file['type'] == 'document':
                media_group.append(telebot.types.InputMediaDocument(file['file_id'], caption=caption))
            elif file['type'] == 'animation':
                media_group.append(telebot.types.InputMediaAnimation(file['file_id'], caption=caption))
            elif file['type'] == 'sticker':
                bot.send_sticker(user_id, file['file_id'])
            elif file['type'] == 'audio':
                media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
            elif file['type'] == 'voice':
                media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
            elif file['type'] == 'video_note':
                bot.send_video_note(user_id, file['file_id'])
            first_file = False

        if media_group:
            try:
                sent_messages = bot.send_media_group(user_id, media_group)
                for sent_message in sent_messages:
                    message_ids.append(sent_message.message_id)
                    user_ids.append(user_id)
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞
        else:
            try:
                sent_message = bot.send_message(user_id, advertisement['text'])
                message_ids.append(sent_message.message_id)
                user_ids.append(user_id)
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞

    advertisement['user_ids'] = user_ids
    advertisement['message_ids'] = message_ids
    advertisement['status'] = 'accepted'  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'accepted'
    save_advertisements()

    bot.send_message(message.chat.id, "–†–µ–∫–ª–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
    show_advertisement_menu(message)

def check_advertisement_expiration():
    while True:
        now = datetime.now()
        for adv_id, adv in list(advertisements['advertisements'].items()):
            if adv['status'] == 'accepted':
                end_datetime = datetime.strptime(f"{adv['end_date']} {adv['end_time']}", "%d.%m.%Y %H:%M")
                if now >= end_datetime:
                    delete_advertisement_messages(adv_id)
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
threading.Thread(target=check_advertisement_expiration, daemon=True).start()

def check_pending_advertisement_expiration():
    while True:
        current_time = datetime.now()
        for adv_id, adv in list(advertisements['advertisements'].items()):
            if adv['status'] == 'pending':
                end_datetime = datetime.strptime(f"{adv['end_date']} {adv['end_time']}", "%d.%m.%Y %H:%M")
                if current_time >= end_datetime:
                    user_id = adv['user_id']
                    theme = adv['theme']
                    del advertisements['advertisements'][adv_id]
                    save_advertisements()
                    bot.send_message(user_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ —Ç–µ–º–µ *{theme.lower()}* –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫!", parse_mode="Markdown")
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
threading.Thread(target=check_pending_advertisement_expiration, daemon=True).start()

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É' and check_admin_access(message))
def delete_advertisement(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É":
        show_advertisement_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if advertisements['advertisements']:
        advertisement_list = [
            f"‚≠êÔ∏è ‚Ññ{i + 1}\n\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*: `{adv['user_id']}`\n"
            f"üìù *–¢–µ–º–∞*: {adv['theme'].lower()}\n"
            f"üìÖ *–ù–∞—á–∞–ª–æ*: {adv['expected_date']} –≤ {adv['expected_time']}\n"
            f"‚åõÔ∏è *–ö–æ–Ω–µ—Ü*: {adv.get('end_date', 'N/A')} –≤ {adv.get('end_time', 'N/A')}\n"
            for i, adv in enumerate(advertisements['advertisements'].values()) if adv['status'] == 'accepted'
        ]
        if advertisement_list:
            full_message = "*–°–ø–∏—Å–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º*:\n\n" + "\n\n".join(advertisement_list)

            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            max_length = 4096
            if len(full_message) > max_length:
                parts = [full_message[i:i + max_length] for i in range(0, len(full_message), max_length)]
                for part in parts:
                    bot.send_message(message.chat.id, part, parse_mode="Markdown")
            else:
                bot.send_message(message.chat.id, full_message, parse_mode="Markdown")

            markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É')
            markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∫–ª–∞–º—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
            bot.register_next_step_handler(message, process_delete_advertisement)
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç *–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö* —Ä–µ–∫–ª–∞–º!", parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç *–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö* —Ä–µ–∫–ª–∞–º!", parse_mode="Markdown")

#@log_user_actions
def process_delete_advertisement(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∫–ª–∞–º—É":
        show_advertisement_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        index = int(message.text) - 1
        advertisement_list = list(advertisements['advertisements'].values())
        if 0 <= index < len(advertisement_list):
            advertisement_id = list(advertisements['advertisements'].keys())[index]
            delete_advertisement_messages(advertisement_id)
            bot.send_message(message.chat.id, f"–†–µ–∫–ª–∞–º–∞ —É–¥–∞–ª–µ–Ω–∞!")
            show_advertisement_menu(message)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–∫–ª–∞–º—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            delete_advertisement(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–∫–ª–∞–º—ã!")
        delete_advertisement(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–ï–ö–õ–ê–ú–ê"
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–†–µ–∫–ª–∞–º–∞' and check_admin_access(message))
def show_advertisement_menu(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–†–µ–∫–ª–∞–º–∞'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    handle_admin_advertisement_requests(message)


@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–í–∞—à–∏ –∑–∞—è–≤–∫–∏')
@track_usage('–í–∞—à–∏ –∑–∞—è–≤–∫–∏')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–í–∞—à–∏ –∑–∞—è–≤–∫–∏')
def show_user_advertisement_requests(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        sent = bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(sent, show_user_advertisement_requests)
        return

    user_id = message.chat.id
    user_advertisements = [adv for adv in advertisements['advertisements'].values() if adv['user_id'] == user_id]

    if user_advertisements:
        advertisement_list = [
            f"‚≠ê ‚Ññ{i + 1}\n\n"
            f"üìù *–¢–µ–º–∞*: {adv['theme'].lower()}\n"
            f"üìÖ *–ù–∞—á–∞–ª–æ*: {adv['expected_date']} –≤ {adv['expected_time']}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü*: {adv.get('end_date', 'N/A')} –≤ {adv.get('end_time', 'N/A')}\n"
            for i, adv in enumerate(user_advertisements)
        ]
        full_message = "*–í–∞—à–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–∫–ª–∞–º—É*:\n\n" + "\n\n".join(advertisement_list)

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        max_length = 4096
        if len(full_message) > max_length:
            parts = [full_message[i:i + max_length] for i in range(0, len(full_message), max_length)]
            for part in parts:
                bot.send_message(message.chat.id, part, parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, full_message, parse_mode="Markdown")

        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, show_user_advertisement_request_details)
    else:
        bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–∫–ª–∞–º—É!*", parse_mode="Markdown")

#@log_user_actions
def show_user_advertisement_request_details(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        sent = bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(sent, show_user_advertisement_request_details)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã":
        view_add_menu(message)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    try:
        index = int(message.text) - 1
        user_id = message.chat.id
        user_advertisements = [adv for adv in advertisements['advertisements'].values() if adv['user_id'] == user_id]

        if 0 <= index < len(user_advertisements):
            advertisement = user_advertisements[index]
            text = advertisement['text']

            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∫–ª–∞–º–µ
            info_message = (
                f"‚≠ê *–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∫–ª–∞–º–µ*:\n\n"
                f"üìù *–¢–µ–º–∞*: {advertisement['theme'].lower()}\n"
                f"üìÖ *–ù–∞—á–∞–ª–æ*: {advertisement['expected_date']} –≤ {advertisement['expected_time']}\n"
                f"‚åõ *–ö–æ–Ω–µ—Ü*: {advertisement.get('end_date', 'N/A')} –≤ {advertisement.get('end_time', 'N/A')}\n\n"
            )

            bot.send_message(message.chat.id, info_message, parse_mode="Markdown")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
            if text and text != 'None':
                message_text = f"üìù –¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã üìù\n\n{text}"
            else:
                message_text = ""

            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º
            if 'files' in advertisement and advertisement['files']:
                media_group = []
                first_file = True
                for file in advertisement['files']:
                    if first_file:
                        caption = message_text
                    else:
                        caption = None
                    if file['type'] == 'photo':
                        media_group.append(telebot.types.InputMediaPhoto(file['file_id'], caption=caption))
                    elif file['type'] == 'video':
                        media_group.append(telebot.types.InputMediaVideo(file['file_id'], caption=caption))
                    elif file['type'] == 'document':
                        media_group.append(telebot.types.InputMediaDocument(file['file_id'], caption=caption))
                    elif file['type'] == 'animation':
                        media_group.append(telebot.types.InputMediaAnimation(file['file_id'], caption=caption))
                    elif file['type'] == 'sticker':
                        bot.send_sticker(message.chat.id, file['file_id'])
                    elif file['type'] == 'audio':
                        media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
                    elif file['type'] == 'voice':
                        media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
                    elif file['type'] == 'video_note':
                        bot.send_video_note(message.chat.id, file['file_id'])
                    first_file = False

                if media_group:
                    bot.send_media_group(message.chat.id, media_group)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                if message_text:
                    bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

            markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            markup.add('–û—Ç–æ–∑–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å –∑–∞—è–≤–∫—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=markup)
            bot.register_next_step_handler(message, handle_user_advertisement_request_action, index)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            show_user_advertisement_requests(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏!")
        show_user_advertisement_requests(message)

#@log_user_actions
def handle_user_advertisement_request_action(message, index):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        sent = bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(sent, handle_user_advertisement_request_action, index)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã":
        view_add_menu(message)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    user_id = message.chat.id
    user_advertisements = [adv for adv in advertisements['advertisements'].values() if adv['user_id'] == user_id]
    advertisement_id = list(advertisements['advertisements'].keys())[index]
    advertisement = user_advertisements[index]

    if message.text == '–û—Ç–æ–∑–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É':
        del advertisements['advertisements'][advertisement_id]
        save_advertisements()
        bot.send_message(message.chat.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω–∞!")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
        with open('data base/admin/admin_sessions.json', 'r', encoding='utf-8') as file:
            admin_data = json.load(file)
            admin_ids = admin_data['admin_sessions']

        for admin_id in admin_ids:
            bot.send_message(admin_id, f"–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}` –ø–æ —Ç–µ–º–µ *{advertisement['theme'].lower()}* –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞!", parse_mode="Markdown")

        return_to_menu(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        show_user_advertisement_request_details(message)





@bot.message_handler(func=lambda message: message.text == "–î–ª—è —Ä–µ–∫–ª–∞–º—ã")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–î–ª—è —Ä–µ–∫–ª–∞–º—ã')
@track_usage('–î–ª—è —Ä–µ–∫–ª–∞–º—ã')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def view_add_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É', '–í–∞—à–∏ –∑–∞—è–≤–∫–∏')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–µ–∫–ª–∞–º–æ–π:", reply_markup=markup)




@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—á–µ–µ")
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ü—Ä–æ—á–µ–µ')
@track_usage('–ü—Ä–æ—á–µ–µ')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#@log_user_actions
def view_reminders(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ß–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º', '–î–ª—è —Ä–µ–∫–ª–∞–º—ã', '–ù–æ–≤–æ—Å—Ç–∏')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–æ—á–µ–≥–æ:", reply_markup=markup)





# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
NEWS_DATABASE_PATH = 'data base/admin/chats/news.json'
ADMIN_SESSIONS_FILE = 'data base/admin/admin_sessions.json'
USER_DATA_PATH = 'data base/admin/users.json'  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
news = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
admin_sessions = []

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if os.path.exists(USER_DATA_PATH):
        with open(USER_DATA_PATH, 'r') as file:
            return json.load(file)
    return {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
def save_news_database():
    for key, value in news.items():
        if 'time' in value and isinstance(value['time'], datetime):
            value['time'] = value['time'].strftime("%d.%m.%Y –≤ %H:%M")
    with open(NEWS_DATABASE_PATH, 'w', encoding='utf-8') as file:
        json.dump(news, file, ensure_ascii=False, indent=4)
    for key, value in news.items():
        if 'time' in value and isinstance(value['time'], str):
            value['time'] = datetime.strptime(value['time'], "%d.%m.%Y –≤ %H:%M")

def load_news_database():
    if os.path.exists(NEWS_DATABASE_PATH):
        with open(NEWS_DATABASE_PATH, 'r', encoding='utf-8') as file:
            data = json.load(file)
            for key, value in data.items():
                if 'time' in value and value['time']:
                    value['time'] = datetime.strptime(value['time'], "%d.%m.%Y –≤ %H:%M")
            return data
    return {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
news = load_news_database()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_admin_sessions():
    if os.path.exists(ADMIN_SESSIONS_FILE):
        with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
            data = json.load(file)
        return data.get('admin_sessions', [])
    return []

admin_sessions = load_admin_sessions()

#@log_user_actions
def check_admin_access(message):
    if str(message.chat.id) in admin_sessions:
        return True
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!")
        return False

# –ü–æ–∫–∞–∑ –º–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.text == '–ù–æ–≤–æ—Å—Ç–∏')
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–ù–æ–≤–æ—Å—Ç–∏')
@track_usage('–ù–æ–≤–æ—Å—Ç–∏')
#@log_user_actions
def show_news_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('3 –Ω–æ–≤–æ—Å—Ç–∏', '5 –Ω–æ–≤–æ—Å—Ç–µ–π', '7 –Ω–æ–≤–æ—Å—Ç–µ–π')
    markup.add('10 –Ω–æ–≤–æ—Å—Ç–µ–π', '15 –Ω–æ–≤–æ—Å—Ç–µ–π')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
@bot.message_handler(func=lambda message: message.text in ['3 –Ω–æ–≤–æ—Å—Ç–∏', '5 –Ω–æ–≤–æ—Å—Ç–µ–π', '7 –Ω–æ–≤–æ—Å—Ç–µ–π', '10 –Ω–æ–≤–æ—Å—Ç–µ–π', '15 –Ω–æ–≤–æ—Å—Ç–µ–π'])
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('3 –Ω–æ–≤–æ—Å—Ç–∏')
@check_function_state_decorator('5 –Ω–æ–≤–æ—Å—Ç–µ–π')
@check_function_state_decorator('7 –Ω–æ–≤–æ—Å—Ç–µ–π')
@check_function_state_decorator('10 –Ω–æ–≤–æ—Å—Ç–µ–π')
@check_function_state_decorator('15 –Ω–æ–≤–æ—Å—Ç–µ–π')
@track_usage('3 –Ω–æ–≤–æ—Å—Ç–∏')
@track_usage('5 –Ω–æ–≤–æ—Å—Ç–µ–π')
@track_usage('7 –Ω–æ–≤–æ—Å—Ç–µ–π')
@track_usage('10 –Ω–æ–≤–æ—Å—Ç–µ–π')
@track_usage('15 –Ω–æ–≤–æ—Å—Ç–µ–π')
#@log_user_actions
def handle_news_selection(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, handle_news_selection)
        return

    count = int(message.text.split()[0])
    news_list = sorted(news.values(), key=lambda x: x['time'], reverse=True)

    if len(news_list) == 0:
        bot.send_message(message.chat.id, "–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç!")
        return_to_menu(message)
        return

    for i in range(min(count, len(news_list))):
        news_item = news_list[i]
        if 'files' in news_item and news_item['files']:
            media_group = []
            caption = None
            for file in news_item['files']:
                if file.get('caption'):
                    caption = file['caption']
                    break

            first_file = True
            for file in news_item['files']:
                if file['type'] == 'photo':
                    media_group.append(telebot.types.InputMediaPhoto(file['file_id'], caption=caption if first_file else None))
                elif file['type'] == 'video':
                    media_group.append(telebot.types.InputMediaVideo(file['file_id'], caption=caption if first_file else None))
                elif file['type'] == 'document':
                    media_group.append(telebot.types.InputMediaDocument(file['file_id'], caption=caption if first_file else None))
                elif file['type'] == 'animation':
                    media_group.append(telebot.types.InputMediaAnimation(file['file_id'], caption=caption if first_file else None))
                elif file['type'] == 'sticker':
                    bot.send_sticker(message.chat.id, file['file_id'])
                elif file['type'] == 'audio':
                    media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption if first_file else None))
                elif file['type'] == 'voice':
                    media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption if first_file else None))
                elif file['type'] == 'video_note':
                    bot.send_video_note(message.chat.id, file['file_id'])
                first_file = False
            if media_group:
                bot.send_media_group(message.chat.id, media_group)
        if news_item['text']:
            bot.send_message(message.chat.id, news_item['text'])

    if len(news_list) > count:
        markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–ï—â–µ –Ω–æ–≤–æ—Å—Ç–∏')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ï—â–µ –Ω–æ–≤–æ—Å—Ç–∏?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_more_news, count)
    else:
        bot.send_message(message.chat.id, "–ù–æ–≤–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!")
        return_to_menu(message)

#@log_user_actions
def handle_more_news(message, start_index):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, handle_more_news, start_index)
        return

    if message.text == '–ï—â–µ –Ω–æ–≤–æ—Å—Ç–∏':
        news_list = sorted(news.values(), key=lambda x: x['time'], reverse=True)
        if start_index >= len(news_list):
            bot.send_message(message.chat.id, "–ù–æ–≤–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!")
            return_to_menu(message)
            return

        end_index = min(start_index + 3, len(news_list))
        for i in range(start_index, end_index):
            news_item = news_list[i]
            if 'files' in news_item and news_item['files']:
                media_group = []
                for file in news_item['files']:
                    if file['type'] == 'photo':
                        media_group.append(telebot.types.InputMediaPhoto(file['file_id'], caption=file.get('caption', "")))
                    elif file['type'] == 'video':
                        media_group.append(telebot.types.InputMediaVideo(file['file_id'], caption=file.get('caption', "")))
                    elif file['type'] == 'document':
                        media_group.append(telebot.types.InputMediaDocument(file['file_id'], caption=file.get('caption', "")))
                    elif file['type'] == 'animation':
                        media_group.append(telebot.types.InputMediaAnimation(file['file_id'], caption=file.get('caption', "")))
                    elif file['type'] == 'sticker':
                        bot.send_sticker(message.chat.id, file['file_id'])
                    elif file['type'] == 'audio':
                        media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=file.get('caption', "")))
                    elif file['type'] == 'voice':
                        media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=file.get('caption', "")))
                    elif file['type'] == 'video_note':
                        bot.send_video_note(message.chat.id, file['file_id'])
                if media_group:
                    bot.send_media_group(message.chat.id, media_group)
            if news_item['text']:
                bot.send_message(message.chat.id, news_item['text'])

        if end_index < len(news_list):
            markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            markup.add('–ï—â–µ –Ω–æ–≤–æ—Å—Ç–∏')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ï—â–µ –Ω–æ–≤–æ—Å—Ç–∏?", reply_markup=markup)
            bot.register_next_step_handler(message, handle_more_news, end_index)
        else:
            bot.send_message(message.chat.id, "–ù–æ–≤–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!")
            return_to_menu(message)
    else:
        return_to_menu(message)

# –ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–†–µ–¥–∞–∫—Ü–∏—è' and check_admin_access(message))
def show_editorial_menu(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–†–µ–¥–∞–∫—Ü–∏—è'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å', '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç—å', '–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Ä–µ–¥–∞–∫—Ü–∏–∏:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–∏
temp_news = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å"
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å' and check_admin_access(message))
def publish_news(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, set_news_title)

#@log_user_actions
def set_news_title(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, set_news_title)
        return

    if message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    news_title = message.text.capitalize()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
    temp_news['title'] = news_title
    temp_news['files'] = []
    temp_news['chat_id'] = message.chat.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, collect_news_caption)

#@log_user_actions
def collect_news_caption(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, collect_news_caption)
        return

    if message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    caption = message.text
    temp_news['caption'] = caption

    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã')
    markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:", reply_markup=markup)
    bot.register_next_step_handler(message, collect_news_media)

#@log_user_actions
def collect_news_media(message):
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã":
        temp_news['text'] = temp_news['caption']
        temp_news['caption'] = None
        save_news(message)
        return

    content_type = message.content_type
    file_id = None

    if content_type == 'photo':
        file_id = message.photo[-1].file_id
    elif content_type == 'video':
        file_id = message.video.file_id
    elif content_type == 'document':
        file_id = message.document.file_id
    elif content_type == 'animation':
        file_id = message.animation.file_id
    elif content_type == 'sticker':
        file_id = message.sticker.file_id
    elif content_type == 'audio':
        file_id = message.audio.file_id
    elif content_type == 'voice':
        file_id = message.voice.file_id
    elif content_type == 'video_note':
        file_id = message.video_note.file_id

    if file_id:
        temp_news['files'].append({
            'type': content_type,
            'file_id': file_id,
            'caption': temp_news['caption']
        })

        if len(temp_news['files']) >= 10:
            save_news(message)
            return

        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É')
        markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_media_options)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª!")
        bot.register_next_step_handler(message, collect_news_media)

#@log_user_actions
def handle_media_options(message):
    if message.text == "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ":
        markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª:", reply_markup=markup)
        bot.register_next_step_handler(message, collect_news_media)
    elif message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É":
        save_news(message)
    elif message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
    elif message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!")
        bot.register_next_step_handler(message, handle_media_options)

#@log_user_actions
def save_news(message):
    news_id = str(len(news) + 1)
    news[news_id] = {
        'title': temp_news['title'],
        'text': temp_news.get('text'),
        'time': datetime.now(),
        'files': temp_news['files']
    }
    save_news_database()
    bot.send_message(temp_news['chat_id'], "–ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
    temp_news.clear()
    show_editorial_menu(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å"

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å' and check_admin_access(message))
def edit_news(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    news_list = [
        f"üì∞ ‚Ññ{i + 1}. *{n['title']}* - {n['time'].strftime('%d.%m.%Y –≤ %H:%M')}"
        for i, n in enumerate(news.values())
    ]

    if news_list:
        news_text = "\n\n".join(news_list)
        chunks = split_text(news_text)
        for chunk in chunks:
            markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
            markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
            bot.send_message(message.chat.id, "üìú *–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π*:\n\n\n" + chunk, parse_mode="Markdown", reply_markup=markup)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, choose_news_to_edit)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")

#@log_user_actions
def choose_news_to_edit(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, choose_news_to_edit)
        return

    if message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        index = int(message.text) - 1
        news_list = list(news.values())
        if 0 <= index < len(news_list):
            news_id = list(news.keys())[index]
            news_item = news[news_id]

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            caption = news_item['files'][0]['caption'] if 'files' in news_item and news_item['files'] else None

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
            if caption:
                message_text = f"üìå –ó–ê–ì–û–õ–û–í–û–ö –ù–û–í–û–°–¢–ò üìå\n\n\n{news_item['title']}\n\n\nüì¢ –ü–û–î–ü–ò–°–¨ –ù–û–í–û–°–¢–ò üì¢\n\n\n{caption}"
            elif news_item.get('text'):
                message_text = f"üìå –ó–ê–ì–û–õ–û–í–û–ö –ù–û–í–û–°–¢–ò üìå\n\n\n{news_item['title']}\n\n\nüìù –¢–ï–ö–°–¢ –ù–û–í–û–°–¢–ò üìù\n\n\n{news_item['text']}"
            else:
                message_text = f"üìå –ó–ê–ì–û–õ–û–í–û–ö –ù–û–í–û–°–¢–ò üìå\n\n\n{news_item['title']}"

            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º
            if 'files' in news_item and news_item['files']:
                media_group = []
                first_file = True
                for file in news_item['files']:
                    if first_file:
                        caption = message_text
                    else:
                        caption = None
                    if file['type'] == 'photo':
                        media_group.append(telebot.types.InputMediaPhoto(file['file_id'], caption=caption))
                    elif file['type'] == 'video':
                        media_group.append(telebot.types.InputMediaVideo(file['file_id'], caption=caption))
                    elif file['type'] == 'document':
                        media_group.append(telebot.types.InputMediaDocument(file['file_id'], caption=caption))
                    elif file['type'] == 'animation':
                        media_group.append(telebot.types.InputMediaAnimation(file['file_id'], caption=caption))
                    elif file['type'] == 'sticker':
                        bot.send_sticker(message.chat.id, file['file_id'])
                    elif file['type'] == 'audio':
                        media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
                    elif file['type'] == 'voice':
                        media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
                    elif file['type'] == 'video_note':
                        bot.send_video_note(message.chat.id, file['file_id'])
                    first_file = False

                if media_group:
                    bot.send_media_group(message.chat.id, media_group)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            edit_list = []
            edit_list.append(f"‚Ññ1. –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏")
            if news_item['text']:
                edit_list.append(f"‚Ññ2. –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏")
            if 'files' in news_item and news_item['files']:
                edit_list.append(f"‚Ññ3. –ü–æ–¥–ø–∏—Å—å –∫ –Ω–æ–≤–æ—Å—Ç–∏")
                edit_list.append("‚Ññ4. –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã")

            edit_text = "\n".join(edit_list)
            bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?\n\n" + edit_text)

            markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
            markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
            bot.register_next_step_handler(message, edit_news_item, news_id)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, choose_news_to_edit)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏!")
        bot.register_next_step_handler(message, choose_news_to_edit)

#@log_user_actions
def edit_news_item(message, news_id):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, edit_news_item, news_id)
        return

    if message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        choice = int(message.text)
        news_item = news[news_id]

        if choice == 1:
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏
            markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
            markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:", reply_markup=markup)
            bot.register_next_step_handler(message, edit_news_title, news_id)
        elif choice == 2:
            if 'text' in news_item and news_item['text']:
                # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏
                markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
                markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
                markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:", reply_markup=markup)
                bot.register_next_step_handler(message, edit_news_text, news_id)
            else:
                bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—É–Ω–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
                bot.register_next_step_handler(message, edit_news_item, news_id)
        elif choice == 3:
            if 'files' in news_item and news_item['files']:
                # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –∫ –Ω–æ–≤–æ—Å—Ç–∏
                markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
                markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
                markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å –∫ –Ω–æ–≤–æ—Å—Ç–∏:", reply_markup=markup)
                bot.register_next_step_handler(message, edit_news_caption, news_id)
            else:
                bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å—å –∫ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—É–Ω–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
                bot.register_next_step_handler(message, edit_news_item, news_id)
        elif choice == 4:
            if 'files' in news_item and news_item['files']:
                # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
                markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
                markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
                markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
                bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã:", reply_markup=markup)
                bot.register_next_step_handler(message, edit_news_media, news_id)
            else:
                bot.send_message(message.chat.id, "–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—É–Ω–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
                bot.register_next_step_handler(message, edit_news_item, news_id)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, edit_news_item, news_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞!")
        bot.register_next_step_handler(message, edit_news_item, news_id)

#@log_user_actions
def edit_news_title(message, news_id):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, edit_news_title, news_id)
        return

    if message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    news_title = message.text
    news[news_id]['title'] = news_title
    save_news_database()
    bot.send_message(message.chat.id, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!")
    show_editorial_menu(message)

#@log_user_actions
def edit_news_text(message, news_id):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, edit_news_text, news_id)
        return

    if message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    news_text = message.text
    news[news_id]['text'] = news_text
    save_news_database()
    bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!")
    show_editorial_menu(message)

#@log_user_actions
def edit_news_caption(message, news_id):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, edit_news_caption, news_id)
        return

    if message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    caption = message.text
    for file in news[news_id]['files']:
        file['caption'] = caption
    save_news_database()
    bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å—å –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
    show_editorial_menu(message)

#@log_user_actions
def edit_news_media(message, news_id):
    if message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    content_type = message.content_type
    file_id = None

    if content_type == 'photo':
        file_id = message.photo[-1].file_id
    elif content_type == 'video':
        file_id = message.video.file_id
    elif content_type == 'document':
        file_id = message.document.file_id
    elif content_type == 'animation':
        file_id = message.animation.file_id
    elif content_type == 'sticker':
        file_id = message.sticker.file_id
    elif content_type == 'audio':
        file_id = message.audio.file_id
    elif content_type == 'voice':
        file_id = message.voice.file_id
    elif content_type == 'video_note':
        file_id = message.video_note.file_id

    if file_id:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å—å
        caption = news[news_id]['files'][0]['caption'] if 'files' in news[news_id] and news[news_id]['files'] else None

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        if not news[news_id].get('new_files'):
            news[news_id]['new_files'] = []
            news[news_id]['files'] = []

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ–¥–ø–∏—Å—å
        news[news_id]['new_files'].append({
            'type': content_type,
            'file_id': file_id,
            'caption': caption
        })

        if len(news[news_id]['new_files']) >= 10:
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            news[news_id]['files'] = news[news_id].get('new_files', [])
            del news[news_id]['new_files']
            save_news_database()
            bot.send_message(message.chat.id, "–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
            show_editorial_menu(message)
            return

        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É')
        markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_edit_media_options, news_id)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª!")
        bot.register_next_step_handler(message, edit_news_media, news_id)

#@log_user_actions
def handle_edit_media_options(message, news_id):
    if message.text == "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ":
        markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª:", reply_markup=markup)
        bot.register_next_step_handler(message, edit_news_media, news_id)
    elif message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É":
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        news[news_id]['files'] = news[news_id].get('new_files', [])
        del news[news_id]['new_files']
        save_news_database()
        bot.send_message(message.chat.id, "–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
        show_editorial_menu(message)
    elif message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
    elif message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!")
        bot.register_next_step_handler(message, handle_edit_media_options, news_id)

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞

#@log_user_actions
def split_text(text, chunk_size=4096):
    return [text[i:i + chunk_size] for i in range(0, len(text), chunk_size)]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç—å"

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç—å' and check_admin_access(message))
def view_news(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç—å'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    news_list = [
        f"üì∞ ‚Ññ{i + 1}. *{n['title']}* - {n['time'].strftime('%d.%m.%Y –≤ %H:%M')}"
        for i, n in enumerate(news.values())
    ]

    if news_list:
        news_text = "\n\n".join(news_list)
        chunks = split_text(news_text)
        for chunk in chunks:
            markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
            markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
            bot.send_message(message.chat.id, "üìú *–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π*:\n\n\n" + chunk, parse_mode="Markdown", reply_markup=markup)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, choose_news_to_view)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!")

#@log_user_actions
def choose_news_to_view(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, choose_news_to_view)
        return

    if message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        indices = [int(x.strip()) - 1 for x in message.text.split(',')]
        news_list = list(news.values())
        invalid_indices = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        for index in indices:
            if not (0 <= index < len(news_list)):
                invalid_indices.append(index + 1)

        if invalid_indices:
            bot.send_message(message.chat.id, f"–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {', '.join(map(str, invalid_indices))}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
            bot.register_next_step_handler(message, choose_news_to_view)
        else:
            # –ï—Å–ª–∏ –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –≤–µ—Ä–Ω—ã, –≤—ã–≤–æ–¥–∏–º –Ω–æ–≤–æ—Å—Ç–∏
            for index in indices:
                news_item = news_list[index]

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                caption = news_item['files'][0]['caption'] if 'files' in news_item and news_item['files'] else None

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
                if caption:
                    message_text = f"üìå –ó–ê–ì–û–õ–û–í–û–ö –ù–û–í–û–°–¢–ò üìå\n\n\n{news_item['title']}\n\n\nüì¢ –ü–û–î–ü–ò–°–¨ –ù–û–í–û–°–¢–ò üì¢\n\n\n{caption}"
                elif news_item.get('text'):
                    message_text = f"üìå –ó–ê–ì–û–õ–û–í–û–ö –ù–û–í–û–°–¢–ò üìå\n\n\n{news_item['title']}\n\n\nüìù –¢–ï–ö–°–¢ –ù–û–í–û–°–¢–ò üìù\n\n\n{news_item['text']}"
                else:
                    message_text = f"üìå –ó–ê–ì–û–õ–û–í–û–ö –ù–û–í–û–°–¢–ò üìå\n\n\n{news_item['title']}"

                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º
                if 'files' in news_item and news_item['files']:
                    media_group = []
                    first_file = True
                    for file in news_item['files']:
                        if first_file:
                            caption = message_text
                        else:
                            caption = None
                        if file['type'] == 'photo':
                            media_group.append(telebot.types.InputMediaPhoto(file['file_id'], caption=caption))
                        elif file['type'] == 'video':
                            media_group.append(telebot.types.InputMediaVideo(file['file_id'], caption=caption))
                        elif file['type'] == 'document':
                            media_group.append(telebot.types.InputMediaDocument(file['file_id'], caption=caption))
                        elif file['type'] == 'animation':
                            media_group.append(telebot.types.InputMediaAnimation(file['file_id'], caption=caption))
                        elif file['type'] == 'sticker':
                            bot.send_sticker(message.chat.id, file['file_id'])
                        elif file['type'] == 'audio':
                            media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
                        elif file['type'] == 'voice':
                            media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
                        elif file['type'] == 'video_note':
                            bot.send_video_note(message.chat.id, file['file_id'])
                        first_file = False

                    if media_group:
                        bot.send_media_group(message.chat.id, media_group)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

            show_editorial_menu(message)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π!")
        bot.register_next_step_handler(message, choose_news_to_view)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å"

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å' and check_admin_access(message))
def delete_news(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    news_list = [
        f"üì∞ ‚Ññ{i + 1}. *{n['title']}* - {n['time'].strftime('%d.%m.%Y –≤ %H:%M')}"
        for i, n in enumerate(news.values())
    ]

    if news_list:
        news_text = "\n\n".join(news_list)
        chunks = split_text(news_text)
        for chunk in chunks:
            markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            markup.add('–í —Ä–µ–¥–∞–∫—Ü–∏—é')
            markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
            bot.send_message(message.chat.id, "üìú *–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π*:\n\n\n" + chunk, parse_mode="Markdown", reply_markup=markup)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=markup)
        bot.register_next_step_handler(message, choose_news_to_delete)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")

#@log_user_actions
def choose_news_to_delete(message):
    if message.photo or message.video or message.document or message.animation or message.sticker or message.location or message.audio or message.contact or message.voice or message.video_note:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, choose_news_to_delete)
        return

    if message.text == "–í —Ä–µ–¥–∞–∫—Ü–∏—é":
        show_editorial_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        indices = [int(x.strip()) - 1 for x in message.text.split(',')]
        news_list = list(news.values())
        deleted_news_titles = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(news_list):
                news_id = list(news.keys())[index]
                deleted_news = news.pop(news_id)
                deleted_news_titles.append(deleted_news['title'])
            else:
                invalid_indices.append(index + 1)

        if invalid_indices:
            bot.send_message(message.chat.id, f"–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {', '.join(map(str, invalid_indices))}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
            bot.register_next_step_handler(message, choose_news_to_delete)
        else:
            if deleted_news_titles:
                # –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                new_news = {}
                for i, (key, value) in enumerate(news.items(), start=1):
                    new_news[str(i)] = value
                news.clear()
                news.update(new_news)

                save_news_database()
                deleted_news_titles_lower = [title.lower() for title in deleted_news_titles]
                bot.send_message(message.chat.id, f"–ù–æ–≤–æ—Å—Ç–∏ (*{', '.join(deleted_news_titles_lower)}*) —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")
            else:
                bot.send_message(message.chat.id, "–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")

            show_editorial_menu(message)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π!")
        bot.register_next_step_handler(message, choose_news_to_delete)

# (ADMIN n) ------------------------------------------ "–ß–ê–¢ –ê–î–ú–ò–ù–ê –ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –§–£–£–ù–ö–¶–ò–ô –î–õ–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò" ---------------------------------------------------

# –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ —Å–µ—Å—Å–∏—è–º–∏
ADMIN_SESSIONS_FILE = 'data base/admin/admin_sessions.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_admin_sessions():
    with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
        data = json.load(file)
    return data['admin_sessions']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
#@log_user_actions
def check_admin_access(message):
    admin_sessions = load_admin_sessions()
    if str(message.chat.id) in admin_sessions:
        return True
    else:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return False

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
USER_DB_PATH = 'data base/admin/users.json'
ADMIN_DB_PATH = 'data base/admin/admin_sessions.json'
ACTIVE_CHATS_PATH = 'data base/admin/chats/active_chats.json'
CHAT_HISTORY_PATH = 'data base/admin/chats/chat_history.json'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
active_chats = {}
user_requests = {}
dialog_states = {}  # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
current_dialogs = {}  # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_active_chats():
    global active_chats, user_requests
    if os.path.exists(ACTIVE_CHATS_PATH):
        with open(ACTIVE_CHATS_PATH, 'r', encoding='utf-8') as file:
            data = json.load(file)
            active_chats = data.get("active_chats", {})
            user_requests = data.get("user_requests", {})

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –≤ –æ–±—ä–µ–∫—Ç—ã datetime
            for user_id, requests in user_requests.items():
                user_requests[user_id] = {datetime.strptime(date_str, "%d.%m.%Y").date(): count for date_str, count in requests.items()}
    else:
        active_chats = {}
        user_requests = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
load_active_chats()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
def save_active_chats():
    with open(ACTIVE_CHATS_PATH, 'w', encoding='utf-8') as file:
        data = {
            "active_chats": active_chats,
            "user_requests": {user_id: {date.strftime("%d.%m.%Y"): count for date, count in requests.items()} for user_id, requests in user_requests.items()}
        }
        json.dump(data, file, ensure_ascii=False, indent=4)

#@log_user_actions
def add_user_request(user_id, date, count):
    if user_id not in user_requests:
        user_requests[user_id] = {}
    if date not in user_requests[user_id]:
        user_requests[user_id][date] = 0
    user_requests[user_id][date] += count
    save_active_chats()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
def load_chat_history():
    if os.path.exists(CHAT_HISTORY_PATH):
        with open(CHAT_HISTORY_PATH, 'r', encoding='utf-8') as file:
            return json.load(file)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
def save_message_to_history(admin_id, user_id, message_content, message_type, caption=None):
    chat_history = load_chat_history()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è —á–∞—Ç–∞
    chat_key = f"{admin_id}_{user_id}"
    if chat_key not in chat_history:
        chat_history[chat_key] = []  # –ï—Å–ª–∏ —á–∞—Ç–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ
    timestamp = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
    if chat_key not in current_dialogs:
        current_dialogs[chat_key] = []  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
    current_dialogs[chat_key].append({
        "type": message_type,  # 'admin' –∏–ª–∏ 'user'
        "content": message_content,
        "timestamp": timestamp,  # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        "caption": caption.lower() if caption else None  # –ü–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –µ—Å—Ç—å
    })

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–∞–π–ª
    with open(CHAT_HISTORY_PATH, 'w', encoding='utf-8') as file:
        json.dump(chat_history, file, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if os.path.exists(USER_DB_PATH):
        with open(USER_DB_PATH, 'r', encoding='utf-8') as file:
            return json.load(file)
    return {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
def load_admins():
    if os.path.exists(ADMIN_DB_PATH):
        with open(ADMIN_DB_PATH, 'r', encoding='utf-8') as file:
            return json.load(file)
    return []

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
#@log_user_actions
def is_admin(user_id):
    admins = load_admins()
    return user_id in admins

# –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
#@log_user_actions
def escape_markdown(text):
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#@log_user_actions
def list_users_for_chat(message):
    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'))

    bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ *–æ–¥–∏–Ω* –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞:\n\n\n"
        "1. *ID* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `/chat id`\n\n"
        "2. *USERNAME* –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `/chat @username`\n\n",
        parse_mode="Markdown",
        reply_markup=markup
    )

# –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
active_user_chats = {}  # –•—Ä–∞–Ω–∏—Ç, –∫–∞–∫–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—â–∞–µ—Ç—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
active_admin_chats = {}  # –•—Ä–∞–Ω–∏—Ç, —Å –∫–∞–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–±—â–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é "–û–±—â–µ–Ω–∏–µ"
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–û–±—â–µ–Ω–∏–µ' and check_admin_access(message))
def show_communication_menu(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û–±—â–µ–Ω–∏–µ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–ß–∞—Ç', '–ó–∞–ø—Ä–æ—Å—ã')
    markup.add('–û–ø–æ–≤–µ—â–µ–Ω–∏—è', '–î–∏–∞–ª–æ–≥–∏')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –æ–±—â–µ–Ω–∏—è:", reply_markup=markup)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ save_last_bot_message

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == "–ß–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º")
@restricted
@track_user_activity
@check_function_state_decorator('–ß–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º')
@track_usage('–ß–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º')
def request_chat_with_admin(message):
    global active_chats
    if active_chats is None:
        active_chats = {}

    user_id = message.from_user.id
    today = datetime.now().date()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç —Å —Å—Ç–∞—Ç—É—Å–æ–º "pending"
    if any(chat_data.get("user_id") == user_id and chat_data.get("status") == "pending" for chat_data in active_chats.values()):
        bot.send_message(user_id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    user_requests_today = user_requests.get(user_id, {}).get(today, 0)
    if user_requests_today >= 3:
        bot.send_message(user_id, "–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞...")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–º—É –¥–ª—è –æ–±—â–µ–Ω–∏—è
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=markup)
    active_chats[user_id] = {"user_id": user_id, "status": "waiting_for_topic", "awaiting_response": False}
    save_active_chats()

#@log_user_actions
@bot.message_handler(func=lambda message: any(chat_data.get("user_id") == message.from_user.id and chat_data.get("status") == "waiting_for_topic" for chat_data in active_chats.values()))
def handle_chat_topic(message):
    user_id = message.from_user.id
    topic = message.text
    today = datetime.now().date()

    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å —Å —Å—Ç–∞—Ç—É—Å–æ–º "waiting_for_topic"
    if user_id in active_chats and active_chats[user_id].get("status") == "waiting_for_topic":
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        add_user_request(user_id, today, 1)

        active_chats[user_id] = {
            "user_id": user_id,
            "status": "pending",
            "topic": topic,
            "awaiting_response": False
        }
        save_active_chats()

        bot.send_message(user_id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞...")
        return_to_menu(message)  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é
        return

    bot.send_message(user_id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ!")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–ß–∞—Ç' and check_admin_access(message))
@bot.message_handler(commands=['chat'])
def initiate_chat(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ß–∞—Ç'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if not check_admin_access(message):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        return

    command_parts = message.text.split()
    if len(command_parts) == 2:
        user_input = command_parts[1]
        users_data = load_users()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_input.isdigit():
            user_id = int(user_input)
            if str(user_id) not in users_data:
                bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º *ID* - `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
                return
            username = users_data[str(user_id)]['username']
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ username
        elif user_input.startswith('@'):
            username = user_input
            user_id = None
            for uid, data in users_data.items():
                if data.get('username') == username:
                    user_id = int(uid)
                    break
            if user_id is None:
                bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º *USERNAME* - {escape_markdown(username)} –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
                return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–æ–º –∏–∑ —Å–ø–∏—Å–∫–∞
        else:
            try:
                user_number = int(user_input)
                if user_number < 1 or user_number > len(users_data):
                    bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                    return
                user_id = list(users_data.keys())[user_number - 1]
                username = users_data[user_id]['username']
            except ValueError:
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —á–∞—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω
        if user_id in active_chats:
            if active_chats[user_id].get("admin_id") is None:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
                active_chats[user_id]["admin_id"] = message.chat.id
                save_active_chats()
            else:
                bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ —Å –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
                return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('–ü—Ä–∏–Ω—è—Ç—å', '–û—Ç–∫–ª–æ–Ω–∏—Ç—å')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(user_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏!\n\n–í—ã–±–µ—Ä–∏—Ç–µ *–ü–†–ò–ù–Ø–¢–¨* –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ *–û–¢–ö–õ–û–ù–ò–¢–¨* –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è!", parse_mode="Markdown", reply_markup=markup)
        bot.send_message(message.chat.id, f"–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {escape_markdown(username)} - `{user_id}`! –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞...", parse_mode="Markdown")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ active_chats
        active_chats[user_id] = {"admin_id": message.chat.id, "status": "pending", "awaiting_response": True}
        save_active_chats()

    else:
        list_users_for_chat(message)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —á–∞—Ç
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–ó–∞–ø—Ä–æ—Å—ã' and check_admin_access(message))
def list_chat_requests(message):
    admin_id = message.from_user.id

    # admin_id = str(message.chat.id)
    # if not check_permission(admin_id, '–ó–∞–ø—Ä–æ—Å—ã'):
    #     bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
    #     return

    # if not check_admin_access(message):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    #     return

    requests = [(user_id, data.get("topic", "–ë–µ–∑ —Ç–µ–º—ã")) for user_id, data in active_chats.items() if data["status"] == "pending"]

    if not requests:
        bot.send_message(admin_id, "*–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö* –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —á–∞—Ç!", parse_mode="Markdown")
        return

    users_data = load_users()
    request_list = []
    for i, (user_id, topic) in enumerate(requests):
        username = users_data.get(str(user_id), {}).get('username', 'Unknown')
        escaped_username = escape_markdown(username)
        request_list.append(f"üîπ *‚Ññ{i + 1}.* –ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\nüë§ {escaped_username} - `{user_id}`\nüì® *–¢–µ–º–∞*: {topic.lower()}")

    request_list_message = "–°–ø–∏—Å–æ–∫ *–∑–∞–ø—Ä–æ—Å–æ–≤* –Ω–∞ —á–∞—Ç:\n\n" + "\n\n".join(request_list) + "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞:"

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    parts = [request_list_message[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(request_list_message), MAX_MESSAGE_LENGTH)]

    for part in parts:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ'))
        markup.add(types.KeyboardButton('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'))

        bot.send_message(admin_id, part, parse_mode="Markdown", reply_markup=markup)

    active_chats[admin_id] = {"status": "select_request", "requests": requests}
    save_active_chats()

#@log_user_actions
@bot.message_handler(func=lambda message: message.from_user.id in active_chats and active_chats[message.from_user.id]["status"] == "select_request")
def handle_request_selection(message):
    admin_id = message.from_user.id

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    try:
        selected_index = int(message.text) - 1
        requests = active_chats[admin_id]["requests"]
        if selected_index < 0 or selected_index >= len(requests):
            raise IndexError("–ù–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞!")

        selected_user_id, topic = requests[selected_index]
        users_data = load_users()
        username = users_data.get(str(selected_user_id), {}).get('username', 'Unknown')

        if selected_user_id in active_chats:
            if active_chats[selected_user_id].get("admin_id") is None:
                active_chats[selected_user_id]["admin_id"] = admin_id
                save_active_chats()
            else:
                admin_id_in_chat = active_chats[selected_user_id]["admin_id"]
                bot.send_message(admin_id, f"–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ *–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ* —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º `{admin_id_in_chat}`!", parse_mode="Markdown")
                show_communication_menu(message)  
                return

        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('–ü—Ä–∏–Ω—è—Ç—å', '–û—Ç–∫–ª–æ–Ω–∏—Ç—å')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

        bot.send_message(selected_user_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏!\n\n–í—ã–±–µ—Ä–∏—Ç–µ *–ü–†–ò–ù–Ø–¢–¨* –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ *–û–¢–ö–õ–û–ù–ò–¢–¨* –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è!", parse_mode="Markdown", reply_markup=markup)
        bot.send_message(admin_id, f"–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {escape_markdown(username)} - `{selected_user_id}`! –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞...", parse_mode="Markdown")

        active_chats[selected_user_id] = {"admin_id": admin_id, "status": "pending", "awaiting_response": True}
        save_active_chats()

        del active_chats[admin_id]["requests"][selected_index]
        save_active_chats()

        del active_chats[admin_id]
        save_active_chats()

    except (ValueError, IndexError) as e:
        bot.send_message(admin_id, f"–û—à–∏–±–∫–∞: {e}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞")

#@log_user_actions
def return_admin_to_menu(admin_id):
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    bot.send_message(admin_id, "–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±—ã–ª *–∑–∞–≤–µ—Ä—à–µ–Ω*!", parse_mode="Markdown")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ê–¥–º–∏–Ω', '–ë–∞–Ω', '–§—É–Ω–∫—Ü–∏–∏')
    markup.add('–û–±—â–µ–Ω–∏–µ', '–†–µ–∫–ª–∞–º–∞', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    markup.add('–§–∞–π–ª—ã', '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è', '–†–µ–¥–∞–∫—Ü–∏—è')
    markup.add('–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞')
    markup.add('–í—ã—Ö–æ–¥')
    bot.send_message(admin_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–ø—Ä–æ—Å —á–∞—Ç–∞

#@log_user_actions
@bot.message_handler(func=lambda message: message.text.lower() in ["–ø—Ä–∏–Ω—è—Ç—å", "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å"] and message.from_user.id in active_chats and active_chats[message.from_user.id]["status"] == "pending")
def handle_chat_response(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in active_chats and active_chats[user_id]["status"] == "pending" and active_chats[user_id]["awaiting_response"]:
        admin_id = active_chats[user_id]["admin_id"]
        users_data = load_users()
        username = users_data[str(user_id)]['username']

        if message.text.lower() == "–ø—Ä–∏–Ω—è—Ç—å":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton('–°—Ç–æ–ø'))
            bot.send_message(user_id, "–í—ã *–Ω–∞ —Å–≤—è–∑–∏* —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", parse_mode="Markdown", reply_markup=markup)
            bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {escape_markdown(username)} - `{user_id}` *–ø—Ä–∏–Ω—è–ª* –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç!", parse_mode="Markdown", reply_markup=markup)
            active_chats[user_id]["status"] = "active"
            active_chats[user_id]["awaiting_response"] = False
            active_user_chats[user_id] = admin_id  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            active_admin_chats[admin_id] = user_id  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            save_active_chats()
        else:
            bot.send_message(user_id, "–í—ã *–æ—Ç–∫–ª–æ–Ω–∏–ª–∏* –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç!", parse_mode="Markdown", reply_markup=types.ReplyKeyboardRemove())
            bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {escape_markdown(username)} - `{user_id}` *–æ—Ç–∫–ª–æ–Ω–∏–ª* –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç!", parse_mode="Markdown")
            del active_chats[user_id]
            if admin_id in active_chats:
                del active_chats[admin_id]
            save_active_chats()
            return_to_menu(message)  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é
            return_admin_to_menu(admin_id)  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –º–µ–Ω—é
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —á–∞—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@restricted
@track_user_activity
@check_chat_state
@check_function_state_decorator('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@bot.message_handler(commands=['mainmenu'])
def return_to_menu(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç
    if user_id in active_chats and active_chats[user_id].get("status") == "waiting_for_topic":
        del active_chats[user_id]  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_active_chats()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–µ–∑–¥–∫–µ
    if user_id in temporary_trip_data:
        temporary_trip_data[user_id] = []

    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç–∞—Ä—Ç–∞
    start(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –µ–≥–æ user_id
#@log_user_actions
def send_message_to_user(user_id, text, reply_markup=None):
    bot.send_message(user_id, text, reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–°—Ç–æ–ø')
@bot.message_handler(commands=['stopchat'])
def stop_chat(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    if user_id in active_user_chats:
        admin_id = active_user_chats[user_id]
        users_data = load_users()
        username = users_data.get(str(user_id), {}).get('username', 'Unknown')
        escaped_username = escape_markdown(username)

        bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {escaped_username} - `{user_id}` –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç!", parse_mode="Markdown")
        bot.send_message(user_id, "–ß–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±—ã–ª *–∑–∞–≤–µ—Ä—à–µ–Ω*!", parse_mode="Markdown", reply_markup=types.ReplyKeyboardRemove())
        del active_user_chats[user_id]
        del active_admin_chats[admin_id]
        if user_id in active_chats:
            del active_chats[user_id]
        save_active_chats()
        start_menu(user_id)  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_key = f"{admin_id}_{user_id}"
        if chat_key in current_dialogs:
            chat_history = load_chat_history()
            chat_history[chat_key].append(current_dialogs[chat_key])
            del current_dialogs[chat_key]
            with open(CHAT_HISTORY_PATH, 'w', encoding='utf-8') as file:
                json.dump(chat_history, file, ensure_ascii=False, indent=4)

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        return_admin_to_menu(admin_id)

    elif user_id in active_admin_chats:
        target_user_id = active_admin_chats[user_id]
        bot.send_message(target_user_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä *–∑–∞–≤–µ—Ä—à–∏–ª* —á–∞—Ç!", parse_mode="Markdown")
        del active_admin_chats[user_id]
        del active_user_chats[target_user_id]
        if target_user_id in active_chats:
            del active_chats[target_user_id]
        save_active_chats()
        start_menu(target_user_id)  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_key = f"{user_id}_{target_user_id}"
        if chat_key in current_dialogs:
            chat_history = load_chat_history()
            chat_history[chat_key].append(current_dialogs[chat_key])
            del current_dialogs[chat_key]
            with open(CHAT_HISTORY_PATH, 'w', encoding='utf-8') as file:
                json.dump(chat_history, file, ensure_ascii=False, indent=4)

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        return_admin_to_menu(user_id)

    else:
        bot.send_message(user_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
#@log_user_actions
def start_menu(user_id):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_data = load_user_data()
    username = user_data.get(user_id, {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item2 = types.KeyboardButton("–¢—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã")
    item3 = types.KeyboardButton("–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    item4 = types.KeyboardButton("–ü–æ–∏—Å–∫ –º–µ—Å—Ç")
    item5 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞")
    item6 = types.KeyboardButton("–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞")
    item7 = types.KeyboardButton("–¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ")
    item8 = types.KeyboardButton("–ê–Ω—Ç–∏-—Ä–∞–¥–∞—Ä")
    item9 = types.KeyboardButton("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    item10 = types.KeyboardButton("–ö–æ–¥—ã OBD2")
    item11 = types.KeyboardButton("–ü—Ä–æ—á–µ–µ")

    markup.add(item1, item2)
    markup.add(item3, item4)
    markup.add(item5, item7)
    markup.add(item6, item8)
    markup.add(item9, item10)
    markup.add(item11)

    welcome_message = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{escape_markdown(username)}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"
    send_message_to_user(user_id, welcome_message, parse_mode="Markdown", reply_markup=markup)

#@log_user_actions
def check_admin_access(message):
    admin_sessions = load_admin_sessions()
    if str(message.chat.id) in admin_sessions:
        return True
    else:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return False



# (ADMIN N) ------------------------------------------ "–§–ê–ô–õ–´ –î–õ–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò" ---------------------------------------------------
    
# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
TELEGRAM_MESSAGE_LIMIT = 4096

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
EXECUTABLE_FILE = '(93 update –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï25  ( (  )) CAR MANAGER TG BOT (official) v0924.py'
BASE_DIR = os.path.dirname(os.path.abspath(EXECUTABLE_FILE))

# –ü—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º –∏ —Ñ–∞–π–ª–∞–º
BACKUP_DIR = os.path.join(BASE_DIR, 'backups')
FILES_PATH = os.path.join(BASE_DIR, 'data base')
ADDITIONAL_FILES_PATH = os.path.join(BASE_DIR, 'files')
ADMIN_SESSIONS_FILE = os.path.join(BASE_DIR, 'data base', 'admin', 'admin_sessions.json')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∞–π–ª–∞—Ö –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
bot_data = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_admin_sessions():
    with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
        data = json.load(file)
    return data['admin_sessions']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
#@log_user_actions
def check_admin_access(message):
    admin_sessions = load_admin_sessions()
    if str(message.chat.id) in admin_sessions:
        return True
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return False

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–§–∞–π–ª—ã"
#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–§–∞–π–ª—ã' and check_admin_access(message))
def show_files_menu(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–§–∞–π–ª—ã'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤', '–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ ID')
    markup.add('–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã', '–ó–∞–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤', '–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–∞–π–ª–∞–º–∏:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤' and check_admin_access(message))
def view_files(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    files_list = []
    extensions = set()

    # –°–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for file_name in os.listdir(BASE_DIR):
        file_path = os.path.join(BASE_DIR, file_name)
        if os.path.isfile(file_path):
            files_list.append(file_path)
            extension = os.path.splitext(file_name)[1]
            extensions.add(extension)

    # –°–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –∏–∑ FILES_PATH
    for root, dirs, files in os.walk(FILES_PATH):
        for file_name in files:
            files_list.append(os.path.join(root, file_name))
            extension = os.path.splitext(file_name)[1]
            extensions.add(extension)

    # –°–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –∏–∑ ADDITIONAL_FILES_PATH
    for root, dirs, files in os.walk(ADDITIONAL_FILES_PATH):
        for file_name in files:
            files_list.append(os.path.join(root, file_name))
            extension = os.path.splitext(file_name)[1]
            extensions.add(extension)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
    if not files_list:
        bot.send_message(message.chat.id, "–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    sorted_extensions = sorted(extensions)
    response = "*–°–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤:*\n\n"
    response += "üìÅ 1. *–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤*\n\n"
    response += "\n".join([f"üìÑ {i + 2}. *{ext[1:]}*" for i, ext in enumerate(sorted_extensions)])

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ bot_data
    bot_data[message.chat.id] = {
        "files_list": files_list,
        "extensions": sorted_extensions
    }

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
    for start in range(0, len(response), TELEGRAM_MESSAGE_LIMIT):
        bot.send_message(message.chat.id, response[start:start + TELEGRAM_MESSAGE_LIMIT], parse_mode="Markdown")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é —Ñ–∞–π–ª—ã')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_extension_selection)

# @log_user_actions
def process_extension_selection(message):
    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        sent = bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(sent, process_extension_selection)
        return

    try:
        selection = int(message.text.strip())
        if selection == 1:
            files_list = bot_data[message.chat.id]["files_list"]
            selected_extension = None  # –î–ª—è —Å–ª—É—á–∞—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        else:
            extensions = bot_data[message.chat.id]["extensions"]
            if 1 < selection <= len(extensions) + 1:
                selected_extension = extensions[selection - 2]
                files_list = [file for file in bot_data[message.chat.id]["files_list"] if file.endswith(selected_extension)]
            else:
                bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!")
                bot.register_next_step_handler(message, process_extension_selection)
                return

        if files_list:
            if selected_extension:  # –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                response = f"–ü–æ–∫–∞–∑–∞–Ω—ã —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º {selected_extension[1:]}:\n\n"
            else:  # –î–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
                response = "–ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ —Ñ–∞–π–ª—ã:\n\n"

            response += "\n".join([f"üìÑ {i + 1}. {os.path.basename(file_path)}" for i, file_path in enumerate(files_list)])
            for start in range(0, len(response), TELEGRAM_MESSAGE_LIMIT):
                bot.send_message(message.chat.id, response[start:start + TELEGRAM_MESSAGE_LIMIT])
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
            bot.register_next_step_handler(message, process_file_selection, files_list)
        else:
            bot.send_message(message.chat.id, "–§–∞–π–ª—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä!")
        bot.register_next_step_handler(message, process_extension_selection)

# @log_user_actions
def process_file_selection(message, matched_files):
    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        sent = bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(sent, process_file_selection, matched_files)
        return

    try:
        file_numbers = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_files = [matched_files[num] for num in file_numbers if 0 <= num < len(matched_files)]

        if valid_files:
            for file_path in valid_files:
                with open(file_path, 'rb') as file:
                    bot.send_document(message.chat.id, file)
            show_files_menu(message)
        else:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤!")
            bot.register_next_step_handler(message, process_file_selection, matched_files)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!")
        bot.register_next_step_handler(message, process_file_selection, matched_files)

# –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
@bot.message_handler(func=lambda message: message.text == '–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ ID' and check_admin_access(message))
#@log_user_actions
def search_files_by_id(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ ID'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é —Ñ–∞–π–ª—ã')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    list_users_for_files(message)

#@log_user_actions
def search_id_in_json(data, user_id):
    if isinstance(data, dict):
        for key, value in data.items():
            if key == user_id or (isinstance(value, str) and user_id in value):
                return True
            if search_id_in_json(value, user_id):
                return True
    elif isinstance(data, list):
        for item in data:
            if search_id_in_json(item, user_id):
                return True
    return False

USER_DATA_PATH = 'data base/admin/users.json'

#@log_user_actions
def escape_markdown(text):
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

def load_user_data():
    with open(USER_DATA_PATH, 'r', encoding='utf-8') as file:
        return json.load(file)

#@log_user_actions
def list_users_for_files(message):
    users_data = load_user_data()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é —Ñ–∞–π–ª—ã')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, username –∏–ª–∏ ID –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, process_user_input_for_file_search)

#@log_user_actions
def process_user_input_for_file_search(message):
    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        sent = bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(sent, process_user_input_for_file_search)
        return

    user_input = message.text.strip()
    users_data = load_user_data()

    user_id = None
    username = None

    if user_input.isdigit():
        # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –≤–≤–æ–¥–∞ –º–µ–Ω—å—à–µ 4 —Å–∏–º–≤–æ–ª–æ–≤, —ç—Ç–æ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
        if len(user_input) < 4:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–Ω–¥–µ–∫—Å –∏–∑ —Å–ø–∏—Å–∫–∞)
            user_index = int(user_input) - 1
            if 0 <= user_index < len(users_data):
                user_id = list(users_data.keys())[user_index]
                username = users_data[user_id]['username']  # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
            else:
                bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                bot.register_next_step_handler(message, process_user_input_for_file_search)
                return
        else:
            # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –≤–≤–æ–¥–∞ >= 4 —Å–∏–º–≤–æ–ª–æ–≤, —ç—Ç–æ ID
            if user_input in users_data:
                user_id = user_input
                username = users_data[user_id]['username']  # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
            else:
                bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º *ID* –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
                bot.register_next_step_handler(message, process_user_input_for_file_search)
                return
    elif user_input.startswith('@'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ username
        username = user_input
        user_id = next((user_id for user_id, data in users_data.items() if data['username'].lower() == username.lower()), None)
        if not user_id:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º *username* –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
            bot.register_next_step_handler(message, process_user_input_for_file_search)
            return
    else:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, username –∏–ª–∏ ID")
        bot.register_next_step_handler(message, process_user_input_for_file_search)
        return

    bot.send_message(message.chat.id, f"–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {escape_markdown(username)} - `{user_id}` ...", parse_mode="Markdown")
    process_file_search(message, user_id)

#@log_user_actions
def process_file_search(message, user_id):
    matched_files = []

    search_paths = [BASE_DIR, BACKUP_DIR, FILES_PATH, ADDITIONAL_FILES_PATH]

    for search_path in search_paths:
        for root, dirs, files in os.walk(search_path):
            for file_name in files:
                file_path = os.path.join(root, file_name)
                if user_id in file_name:
                    matched_files.append(file_path)
                else:
                    if file_name.endswith('.json'):
                        try:
                            with open(file_path, 'r', encoding='utf-8') as f:
                                content = json.load(f)
                                if search_id_in_json(content, user_id):
                                    matched_files.append(file_path)
                        except (json.JSONDecodeError, UnicodeDecodeError):
                            pass  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è
                    elif file_name.endswith(('.txt', '.log', '.csv')):
                        try:
                            with open(file_path, 'r', encoding='utf-8') as f:
                                content = f.read()
                                if re.search(rf'\b{user_id}\b', content):
                                    matched_files.append(file_path)
                        except UnicodeDecodeError:
                            pass  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è

    if matched_files:
        response = "\n".join([f"üìÑ {i + 1}. {os.path.basename(path)}" for i, path in enumerate(matched_files)])
        for start in range(0, len(response), TELEGRAM_MESSAGE_LIMIT):
            bot.send_message(message.chat.id, response[start:start + TELEGRAM_MESSAGE_LIMIT])
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
        bot.register_next_step_handler(message, process_file_selection, matched_files)
    else:
        bot.send_message(message.chat.id, "–§–∞–π–ª—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

# –ó–∞–º–µ–Ω–∞ —Ñ–∞–π–ª–∞
@bot.message_handler(func=lambda message: message.text == '–ó–∞–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤' and check_admin_access(message))
#@log_user_actions
def handle_file_replacement(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ó–∞–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é —Ñ–∞–π–ª—ã')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–º–µ–Ω—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, process_file_replacement)

#@log_user_actions
def process_file_replacement(message):
    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    if message.document:
        file_name = message.document.file_name
        file_path = None

        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö BACKUP_DIR, FILES_PATH –∏ ADDITIONAL_FILES_PATH
        search_paths = [BASE_DIR, FILES_PATH, ADDITIONAL_FILES_PATH, BACKUP_DIR]

        for search_path in search_paths:
            for root, dirs, files in os.walk(search_path):
                if file_name in files:
                    file_path = os.path.join(root, file_name)
                    break
            if file_path:
                break

        if file_path:
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            with open(file_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            bot.send_message(message.chat.id, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω!")
            show_files_menu(message)
        else:
            bot.send_message(message.chat.id, "–§–∞–π–ª –¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª")
            bot.register_next_step_handler(message, process_file_replacement)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        bot.register_next_step_handler(message, process_file_replacement)

@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã' and check_admin_access(message))
#@log_user_actions
def add_files(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    directories = [BASE_DIR, FILES_PATH, ADDITIONAL_FILES_PATH, BACKUP_DIR]
    response = "*–°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:*\n\n\n"
    response += "\n\n".join([f"üìÅ {i + 1}. {escape_markdown(dir)}" for i, dir in enumerate(directories)])
    bot.send_message(message.chat.id, response, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é —Ñ–∞–π–ª—ã')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, process_add_file_directory_selection)

#@log_user_actions
def process_add_file_directory_selection(message):
    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        sent = bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(sent, process_add_file_directory_selection)
        return

    try:
        selection = int(message.text.strip())
        if 1 <= selection <= 4:  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            selected_directory = [BASE_DIR, FILES_PATH, ADDITIONAL_FILES_PATH, BACKUP_DIR][selection - 1]
            bot_data[message.chat.id] = {"selected_directory": selected_directory}
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
            bot.register_next_step_handler(message, process_add_file)
        else:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!")
            bot.register_next_step_handler(message, process_add_file_directory_selection)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä!")
        bot.register_next_step_handler(message, process_add_file_directory_selection)

#@log_user_actions
def process_add_file(message):
    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    if message.document:
        file_name = message.document.file_name
        selected_directory = bot_data[message.chat.id]["selected_directory"]
        file_path = os.path.join(selected_directory, file_name)

        if os.path.exists(file_path):
            bot.send_message(message.chat.id, "–§–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –¥—Ä—É–≥–∏–º –∏–º–µ–Ω–µ–º")
            bot.register_next_step_handler(message, process_add_file)
        else:
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            with open(file_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            bot.send_message(message.chat.id, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            show_files_menu(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        bot.register_next_step_handler(message, process_add_file)

@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã' and check_admin_access(message))
#@log_user_actions
def delete_files(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    directories = [BASE_DIR, FILES_PATH, ADDITIONAL_FILES_PATH, BACKUP_DIR]
    response = "*–°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:*\n\n\n"
    response += "\n\n".join([f"üìÅ {i + 1}. {escape_markdown(dir)}" for i, dir in enumerate(directories)])
    bot.send_message(message.chat.id, response, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í –º–µ–Ω—é —Ñ–∞–π–ª—ã')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, process_delete_file_directory_selection)

#@log_user_actions
def process_delete_file_directory_selection(message):
    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        sent = bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(sent, process_delete_file_directory_selection)
        return

    try:
        selection = int(message.text.strip())
        if 1 <= selection <= 4:  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            selected_directory = [BASE_DIR, FILES_PATH, ADDITIONAL_FILES_PATH, BACKUP_DIR][selection - 1]
            files_list = [os.path.join(selected_directory, file) for file in os.listdir(selected_directory) if os.path.isfile(os.path.join(selected_directory, file))]
            response = "\n\n".join([f"üìÑ {i + 1}. {os.path.basename(file_path)}" for i, file_path in enumerate(files_list)])
            bot_data[message.chat.id] = {"files_list": files_list}

            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            for start in range(0, len(response), TELEGRAM_MESSAGE_LIMIT):
                bot.send_message(message.chat.id, response[start:start + TELEGRAM_MESSAGE_LIMIT])

            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            bot.register_next_step_handler(message, process_delete_file_selection)
        else:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!")
            bot.register_next_step_handler(message, process_delete_file_directory_selection)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä!")
        bot.register_next_step_handler(message, process_delete_file_directory_selection)

#@log_user_actions
def process_delete_file_selection(message):
    if message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        show_admin_panel(message)
        return
    if message.text == '–í –º–µ–Ω—é —Ñ–∞–π–ª—ã':
        show_files_menu(message)
        return

    if message.photo or message.video or message.document or message.animation or message.sticker or message.audio or message.contact or message.voice or message.video_note:
        sent = bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(sent, process_delete_file_selection)
        return

    try:
        file_numbers = [int(num.strip()) - 1 for num in message.text.split(',')]
        files_list = bot_data[message.chat.id]["files_list"]
        valid_files = [files_list[num] for num in file_numbers if 0 <= num < len(files_list)]

        if valid_files:
            for file_path in valid_files:
                os.remove(file_path)
            bot.send_message(message.chat.id, "–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
            show_files_menu(message)
        else:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤!")
            bot.register_next_step_handler(message, process_delete_file_selection)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!")
        bot.register_next_step_handler(message, process_delete_file_selection)

#----------------------------------------------------------(–î–ò–ê–õ–û–ì–ò)-----------------------------------------------------

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–î–∏–∞–ª–æ–≥–∏' and check_admin_access(message))
def show_dialogs_menu(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–î–∏–∞–ª–æ–≥–∏'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤", "–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ") 
    markup.add("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤:", reply_markup=markup)

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤' and check_admin_access(message))
def show_user_dialogs(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    chat_history = load_chat_history()
    users = load_users()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å –∫–µ–º –±—ã–ª–∏ –¥–∏–∞–ª–æ–≥–∏
    user_ids = [user_id.split('_')[1] for user_id in chat_history.keys()]
    user_ids = list(set(user_ids))  # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã

    user_list = "\n\n".join(
        f"‚Ññ{i + 1}. {escape_markdown(users.get(user_id, {}).get('username', 'N/A'))} - `{user_id}`"
        for i, user_id in enumerate(user_ids)
    )

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ"))
    keyboard.add(KeyboardButton("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"))

    bot.send_message(
        message.chat.id,
        f"*–°–ø–∏—Å–æ–∫* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π *–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞* –¥–∏–∞–ª–æ–≥–æ–≤:\n\n{user_list}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

    dialog_states[message.chat.id] = {"state": "select_user", "user_ids": user_ids}
    save_dialog_states()

#@log_user_actions
@bot.message_handler(func=lambda message: message.chat.id in dialog_states and dialog_states[message.chat.id].get("state") == "select_user")
def handle_user_selection(message):

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        dialog_states.pop(message.chat.id, None)
        save_dialog_states()
        return


    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return
        
    if message.text == "–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏":
        dialog_states.pop(message.chat.id, None)
        save_dialog_states()
        show_delete_dialogs_menu(message)
        return


    user_ids = dialog_states[message.chat.id]["user_ids"]
    users = load_users()

    try:
        selected_index = int(message.text) - 1
        if selected_index < 0 or selected_index >= len(user_ids):
            raise IndexError  # –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å

        selected_user_id = user_ids[selected_index]
        selected_username = users.get(selected_user_id, {}).get("username", "N/A")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤
        chat_key = f"{message.chat.id}_{selected_user_id}"
        chat_history = load_chat_history().get(chat_key, [])

        if not chat_history:
            bot.send_message(message.chat.id, "*–ò—Å—Ç–æ—Ä–∏—è* –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º *–ø—É—Å—Ç–∞*!", parse_mode="Markdown")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        dialog_list = []
        for i, dialog in enumerate(chat_history):
            if dialog:
                timestamps = [entry['timestamp'] for entry in dialog]
                start_time = timestamps[0].split(" –≤ ")[1]
                end_time = timestamps[-1].split(" –≤ ")[1]
                date = timestamps[0].split(" –≤ ")[0]
                dialog_list.append(f"‚Ññ{i + 1}. *{date}* (—Å {start_time} –¥–æ {end_time})")
            else:
                dialog_list.append(f"‚Ññ{i + 1}. (–ü—É—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥)")

        dialog_text = "\n".join(dialog_list)
        bot.send_message(
            message.chat.id,
            f"*–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥* —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {escape_markdown(selected_username)} - `{selected_user_id}`:\n\n{dialog_text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞:",
            parse_mode="Markdown"
        )

        dialog_states[message.chat.id] = {
            "state": "select_dialog",
            "selected_user_id": selected_user_id,
            "chat_history": chat_history,
        }
        save_dialog_states()

    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

#@log_user_actions
@bot.message_handler(func=lambda message: message.chat.id in dialog_states and dialog_states[message.chat.id].get("state") == "select_dialog")
def handle_dialog_selection(message):
    selected_user_id = dialog_states[message.chat.id]["selected_user_id"]
    chat_key = f"{message.chat.id}_{selected_user_id}"
    chat_history = load_chat_history().get(chat_key, [])

    if not chat_history:
        bot.send_message(message.chat.id, "*–ò—Å—Ç–æ—Ä–∏—è* –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º *–ø—É—Å—Ç–∞*!", parse_mode="Markdown")
        show_communication_menu(message)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    try:
        selected_dialog_index = int(message.text) - 1
        if selected_dialog_index < 0 or selected_dialog_index >= len(chat_history):
            raise IndexError  # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞

        selected_dialog = chat_history[selected_dialog_index]

        if not selected_dialog:
            bot.send_message(message.chat.id, "–í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –ø—É—Å—Ç!")
            show_communication_menu(message)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        for entry in selected_dialog:
            timestamp = entry['timestamp']
            sender = entry['type']
            content = entry['content']
            caption = entry.get('caption')  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å

            if caption is not None:
                caption = caption.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

            if content.startswith("photo:"):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                photo_id = content.replace("photo:", "").strip()
                message_text = f"üë§ *{sender.upper()}* - [–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è]"
                if caption:
                    message_text += f"\n‚úç –ü–æ–¥–ø–∏—Å—å - {caption}"
                message_text += f"\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                bot.send_photo(message.chat.id, photo_id)

            elif content.startswith("sticker:"):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
                sticker_id = content.replace("sticker:", "").strip()
                message_text = f"üë§ *{sender.upper()}* - [–°—Ç–∏–∫–µ—Ä]"
                message_text += f"\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                bot.send_sticker(message.chat.id, sticker_id)

            elif content.startswith("voice:"):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                voice_id = content.replace("voice:", "").strip()
                message_text = f"üë§ *{sender.upper()}* - [–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]"
                message_text += f"\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                bot.send_voice(message.chat.id, voice_id)

            elif content.startswith("video:"):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
                video_id = content.replace("video:", "").strip()
                message_text = f"üë§ *{sender.upper()}* - [–í–∏–¥–µ–æ]"
                if caption:
                    message_text += f"\n‚úç –ü–æ–¥–ø–∏—Å—å - {caption}"
                message_text += f"\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                bot.send_video(message.chat.id, video_id)

            elif content.startswith("document:"):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                document_id = content.replace("document:", "").strip()
                message_text = f"üë§ *{sender.upper()}* - [–î–æ–∫—É–º–µ–Ω—Ç]"
                if caption:
                    message_text += f"\n‚úç –ü–æ–¥–ø–∏—Å—å - {caption}"
                message_text += f"\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                bot.send_document(message.chat.id, document_id)

            elif content.startswith("animation:"):
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
                animation_id = content.replace("animation:", "").strip()
                message_text = f"üë§ *{sender.upper()}* - [–ê–Ω–∏–º–∞—Ü–∏—è]"
                if caption:
                    message_text += f"\n‚úç –ü–æ–¥–ø–∏—Å—å - {escape_markdown(caption)}"
                message_text += f"\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                bot.send_animation(message.chat.id, animation_id)

            elif content.startswith("audio:"):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
                audio_id = content.replace("audio:", "").strip()
                message_text = f"üë§ *{sender.upper()}* - [–ê—É–¥–∏–æ]"
                if caption:
                    message_text += f"\n‚úç –ü–æ–¥–ø–∏—Å—å - {caption}"
                message_text += f"\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                bot.send_audio(message.chat.id, audio_id)

            elif content.startswith("location:"):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
                location_data = content.replace("location:", "").strip()
                lat, lon = map(float, location_data.split(","))
                message_text = f"üë§ *{sender.upper()}* - [–õ–æ–∫–∞—Ü–∏—è]"
                message_text += f"\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                bot.send_location(message.chat.id, latitude=lat, longitude=lon)

            elif content.startswith("contact:"):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
                contact_data = content.replace("contact:", "").strip()
                phone, first_name, last_name = contact_data.split(",", maxsplit=2)
                message_text = f"üë§ *{sender.upper()}* - [–ö–æ–Ω—Ç–∞–∫—Ç]"
                message_text += f"\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                bot.send_contact(message.chat.id, phone_number=phone, first_name=first_name, last_name=last_name)

            elif content.startswith("gif:"):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF
                gif_id = content.replace("gif:", "").strip()
                message_text = f"üë§ *{sender.upper()}* - [GIF]"
                if caption:
                    message_text += f"\n‚úç –ü–æ–¥–ø–∏—Å—å - {caption}"
                message_text += f"\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
                bot.send_document(message.chat.id, gif_id)

            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = f"üë§ *{sender.upper()}* - [–¢–µ–∫—Å—Ç]\nüìù –¢–µ–∫—Å—Ç - {content}\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: _{timestamp}_"
                bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
        del dialog_states[message.chat.id]
        save_dialog_states()

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
        show_communication_menu(message)

    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞")

def save_dialog_states():
    with open('data base/admin/chats/dialog_states.json', 'w', encoding='utf-8') as file:
        json.dump(dialog_states, file, ensure_ascii=False, indent=4)


#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏' and check_admin_access(message))
def show_delete_dialogs_menu(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ")
    markup.add("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤:", reply_markup=markup)

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥' and check_admin_access(message))
def delete_dialog(message):

    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    chat_history = load_chat_history()
    users = load_users()

    user_ids = [user_id.split('_')[1] for user_id in chat_history.keys()]
    user_ids = list(set(user_ids))

    user_list = "\n\n".join(
        f"‚Ññ{i + 1}. {escape_markdown(users.get(user_id, {}).get('username', 'N/A'))} - `{user_id}`"
        for i, user_id in enumerate(user_ids)
    )

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ"))
    keyboard.add(KeyboardButton("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"))

    bot.send_message(
        message.chat.id,
        f"*–°–ø–∏—Å–æ–∫* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π *–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è* –¥–∏–∞–ª–æ–≥–æ–≤:\n\n{user_list}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

    dialog_states[message.chat.id] = {"state": "delete_dialog_select_user", "user_ids": user_ids}
    save_dialog_states()

#@log_user_actions
@bot.message_handler(func=lambda message: message.chat.id in dialog_states and dialog_states[message.chat.id].get("state") == "delete_dialog_select_user")
def handle_delete_dialog_user_selection(message):

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        dialog_states.pop(message.chat.id, None)
        save_dialog_states()
        return show_admin_panel(message)

    user_ids = dialog_states[message.chat.id]["user_ids"]
    users = load_users()

    try:
        selected_index = int(message.text) - 1
        if selected_index < 0 or selected_index >= len(user_ids):
            raise IndexError

        selected_user_id = user_ids[selected_index]
        selected_username = users.get(selected_user_id, {}).get("username", "N/A")

        chat_key = f"{message.chat.id}_{selected_user_id}"
        chat_history = load_chat_history().get(chat_key, [])

        if not chat_history:
            bot.send_message(message.chat.id, "*–ò—Å—Ç–æ—Ä–∏—è* –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º *–ø—É—Å—Ç–∞*!", parse_mode="Markdown")
            return show_admin_panel(message)

        dialog_list = []
        for i, dialog in enumerate(chat_history):
            if dialog:
                timestamps = [entry['timestamp'] for entry in dialog]
                start_time = timestamps[0].split(" –≤ ")[1]
                end_time = timestamps[-1].split(" –≤ ")[1]
                date = timestamps[0].split(" –≤ ")[0]
                dialog_list.append(f"‚Ññ{i + 1}. *{date}* (—Å {start_time} –¥–æ {end_time})")
            else:
                dialog_list.append(f"‚Ññ{i + 1}. (–ü—É—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥)")

        dialog_text = "\n".join(dialog_list)
        bot.send_message(
            message.chat.id,
            f"*–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥* –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {escape_markdown(selected_username)} - `{selected_user_id}`:\n\n{dialog_text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞:",
            parse_mode="Markdown"
        )

        dialog_states[message.chat.id] = {
            "state": "delete_dialog_select_dialog",
            "selected_user_id": selected_user_id,
            "chat_history": chat_history,
        }
        save_dialog_states()

    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

#@log_user_actions
@bot.message_handler(func=lambda message: message.chat.id in dialog_states and dialog_states[message.chat.id].get("state") == "delete_dialog_select_dialog")
def handle_delete_dialog_selection(message):
    selected_user_id = dialog_states[message.chat.id]["selected_user_id"]
    chat_key = f"{message.chat.id}_{selected_user_id}"
    chat_history = load_chat_history().get(chat_key, [])

    if not chat_history:
        bot.send_message(message.chat.id, "*–ò—Å—Ç–æ—Ä–∏—è* –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º *–ø—É—Å—Ç–∞*!", parse_mode="Markdown")
        return show_communication_menu(message)

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    try:
        selected_dialog_index = int(message.text) - 1
        if selected_dialog_index < 0 or selected_dialog_index >= len(chat_history):
            raise IndexError

        del chat_history[selected_dialog_index]

        chat_history_data = load_chat_history()
        chat_history_data[chat_key] = chat_history

        with open(CHAT_HISTORY_PATH, 'w', encoding='utf-8') as file:
            json.dump(chat_history_data, file, ensure_ascii=False, indent=4)

        bot.send_message(message.chat.id, "–î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ *—É–¥–∞–ª–µ–Ω*!", parse_mode="Markdown")
        return show_communication_menu(message)

    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞")

#@log_user_actions
@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏' and check_admin_access(message))
def delete_all_dialogs(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    chat_history = load_chat_history()
    users = load_users()

    user_ids = [user_id.split('_')[1] for user_id in chat_history.keys()]
    user_ids = list(set(user_ids))

    user_list = "\n\n".join(
        f"‚Ññ{i + 1}. {escape_markdown(users.get(user_id, {}).get('username', 'N/A'))} - `{user_id}`"
        for i, user_id in enumerate(user_ids)
    )

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ"))
    keyboard.add(KeyboardButton("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"))

    bot.send_message(
        message.chat.id,
        f"*–°–ø–∏—Å–æ–∫* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π *–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è* –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤:\n\n{user_list}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

    dialog_states[message.chat.id] = {"state": "delete_all_dialogs_select_user", "user_ids": user_ids}
    save_dialog_states()

#@log_user_actions
@bot.message_handler(func=lambda message: message.chat.id in dialog_states and dialog_states[message.chat.id].get("state") == "delete_all_dialogs_select_user")
def handle_delete_all_dialogs_user_selection(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        show_communication_menu(message)
        return

    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        dialog_states.pop(message.chat.id, None)
        save_dialog_states()
        return show_admin_panel(message)

    user_ids = dialog_states[message.chat.id]["user_ids"]
    users = load_users()

    try:
        selected_index = int(message.text) - 1
        if selected_index < 0 or selected_index >= len(user_ids):
            raise IndexError

        selected_user_id = user_ids[selected_index]
        selected_username = users.get(selected_user_id, {}).get("username", "N/A")

        bot.send_message(
            message.chat.id,
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ *—É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏* —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {escape_markdown(selected_username)} - `{selected_user_id}`?\n\n–í–≤–µ–¥–∏—Ç–µ *–î–ê* –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ *–ù–ï–¢* –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è",
            parse_mode="Markdown"
        )

        dialog_states[message.chat.id] = {
            "state": "confirm_delete_all_dialogs",
            "selected_user_id": selected_user_id,
        }
        save_dialog_states()

    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

#@log_user_actions
@bot.message_handler(func=lambda message: message.chat.id in dialog_states and dialog_states[message.chat.id].get("state") == "confirm_delete_all_dialogs")
def handle_confirm_delete_all_dialogs(message):
    if message.text.lower() not in ["–¥–∞", "–Ω–µ—Ç"]:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–î–ê* –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ *–ù–ï–¢* –¥–ª—è –æ—Ç–º–µ–Ω—ã", parse_mode="Markdown")
        return

    if message.text.lower() == "–¥–∞":
        selected_user_id = dialog_states[message.chat.id]["selected_user_id"]
        chat_key = f"{message.chat.id}_{selected_user_id}"

        chat_history_data = load_chat_history()
        if chat_key in chat_history_data:
            del chat_history_data[chat_key]

        with open(CHAT_HISTORY_PATH, 'w', encoding='utf-8') as file:
            json.dump(chat_history_data, file, ensure_ascii=False, indent=4)

        bot.send_message(message.chat.id, "*–í—Å–µ –¥–∏–∞–ª–æ–≥–∏* —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É—Å–ø–µ—à–Ω–æ *—É–¥–∞–ª–µ–Ω—ã*!", parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ *–≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤* —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º *–æ—Ç–º–µ–Ω–µ–Ω–æ*!", parse_mode="Markdown")

    return show_communication_menu(message)

# –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_chat_messages –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏—é

#@log_user_actions
@bot.message_handler(content_types=['text', 'photo', 'video', 'document', 'animation', 'sticker', 'audio', 'contact', 'voice', 'video_note', 'gif'])
@check_chat_state
def handle_chat_messages(message):
    user_id = message.from_user.id

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–ª–∏—Å—å –≤ —á–∞—Ç–µ
    if message.text and (message.text.startswith('/') or message.text.startswith('–°—Ç–æ–ø')):
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if user_id in active_chats:
        active_chats[user_id]["last_activity_time"] = time.time()
        save_active_chats()

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id in active_admin_chats:
        target_user_id = active_admin_chats[user_id]
        if message.content_type == 'text':
            bot.send_message(target_user_id, f"{message.text}")
            save_message_to_history(user_id, target_user_id, message.text, 'admin')  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.content_type == 'photo':
            media_group = []
            media_group.append(types.InputMediaPhoto(message.photo[-1].file_id, caption=message.caption))
            bot.send_media_group(target_user_id, media_group)
            save_message_to_history(user_id, target_user_id, f"photo: {message.photo[-1].file_id}", 'admin', caption=message.caption)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.content_type == 'video':
            media_group = []
            media_group.append(types.InputMediaVideo(message.video.file_id, caption=message.caption))
            bot.send_media_group(target_user_id, media_group)
            save_message_to_history(user_id, target_user_id, f"video: {message.video.file_id}", 'admin', caption=message.caption)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.content_type == 'document':
            media_group = []
            media_group.append(types.InputMediaDocument(message.document.file_id, caption=message.caption))
            bot.send_media_group(target_user_id, media_group)
            save_message_to_history(user_id, target_user_id, f"document: {message.document.file_id}", 'admin', caption=message.caption)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.content_type == 'animation':
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
            bot.send_animation(target_user_id, message.animation.file_id, caption=message.caption)
            save_message_to_history(user_id, target_user_id, f"animation: {message.animation.file_id}", 'admin', caption=message.caption)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.content_type == 'sticker':
            bot.send_sticker(target_user_id, message.sticker.file_id)
            save_message_to_history(user_id, target_user_id, f"sticker: {message.sticker.file_id}", 'admin')  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.content_type == 'audio':
            bot.send_audio(target_user_id, message.audio.file_id, caption=message.caption)
            save_message_to_history(user_id, target_user_id, f"audio: {message.audio.file_id}", 'admin', caption=message.caption)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.content_type == 'contact':
            bot.send_contact(target_user_id, message.contact.phone_number, message.contact.first_name)
            save_message_to_history(user_id, target_user_id, f"contact: {message.contact.phone_number}", 'admin')  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.content_type == 'voice':
            bot.send_voice(target_user_id, message.voice.file_id, caption=message.caption)
            save_message_to_history(user_id, target_user_id, f"voice: {message.voice.file_id}", 'admin', caption=message.caption)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.content_type == 'video_note':
            bot.send_video_note(target_user_id, message.video_note.file_id)
            save_message_to_history(user_id, target_user_id, f"video_note: {message.video_note.file_id}", 'admin')  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.content_type == 'gif':
            bot.send_document(target_user_id, message.document.file_id, caption=message.caption)
            save_message_to_history(user_id, target_user_id, f"gif: {message.document.file_id}", 'admin', caption=message.caption)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif user_id in active_user_chats:
        target_admin_id = active_user_chats[user_id]
        if message.content_type == 'text':
            bot.send_message(target_admin_id, f"{message.text}")
            save_message_to_history(target_admin_id, user_id, message.text, 'user')  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.content_type == 'photo':
            media_group = []
            media_group.append(types.InputMediaPhoto(message.photo[-1].file_id, caption=message.caption))
            bot.send_media_group(target_admin_id, media_group)
            save_message_to_history(target_admin_id, user_id, f"photo: {message.photo[-1].file_id}", 'user', caption=message.caption)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.content_type == 'video':
            media_group = []
            media_group.append(types.InputMediaVideo(message.video.file_id, caption=message.caption))
            bot.send_media_group(target_admin_id, media_group)
            save_message_to_history(target_admin_id, user_id, f"video: {message.video.file_id}", 'user', caption=message.caption)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.content_type == 'document':
            media_group = []
            media_group.append(types.InputMediaDocument(message.document.file_id, caption=message.caption))
            bot.send_media_group(target_admin_id, media_group)
            save_message_to_history(target_admin_id, user_id, f"document: {message.document.file_id}", 'user', caption=message.caption)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.content_type == 'animation':
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
            bot.send_animation(target_admin_id, message.animation.file_id, caption=message.caption)
            save_message_to_history(target_admin_id, user_id, f"animation: {message.animation.file_id}", 'user', caption=message.caption)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.content_type == 'sticker':
            bot.send_sticker(target_admin_id, message.sticker.file_id)
            save_message_to_history(target_admin_id, user_id, f"sticker: {message.sticker.file_id}", 'user')  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.content_type == 'audio':
            bot.send_audio(target_admin_id, message.audio.file_id, caption=message.caption)
            save_message_to_history(target_admin_id, user_id, f"audio: {message.audio.file_id}", 'user', caption=message.caption)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.content_type == 'contact':
            bot.send_contact(target_admin_id, message.contact.phone_number, message.contact.first_name)
            save_message_to_history(target_admin_id, user_id, f"contact: {message.contact.phone_number}", 'user')  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.content_type == 'voice':
            bot.send_voice(target_admin_id, message.voice.file_id, caption=message.caption)
            save_message_to_history(target_admin_id, user_id, f"voice: {message.voice.file_id}", 'user', caption=message.caption)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.content_type == 'video_note':
            bot.send_video_note(target_admin_id, message.video_note.file_id)
            save_message_to_history(target_admin_id, user_id, f"video_note: {message.video_note.file_id}", 'user')  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.content_type == 'gif':
            bot.send_document(target_admin_id, message.document.file_id, caption=message.caption)
            save_message_to_history(target_admin_id, user_id, f"gif: {message.document.file_id}", 'user', caption=message.caption)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è


def check_chat_activity():
    while True:
        current_time = time.time()
        for user_id, chat_data in list(active_chats.items()):
            if chat_data["status"] == "active":
                last_activity_time = chat_data.get("last_activity_time", current_time)
                if current_time - last_activity_time > 65:  # 5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥
                    admin_id = chat_data.get("admin_id")
                    users_data = load_users()
                    username = users_data.get(str(user_id), {}).get('username', 'Unknown')
                    escaped_username = escape_markdown(username)

                    if admin_id:
                        bot.send_message(admin_id, f"–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {escaped_username} - `{user_id}` –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ *–∑–∞–≤–µ—Ä—à–µ–Ω* –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!", parse_mode="Markdown")
                        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
                        return_admin_to_menu(admin_id)

                    bot.send_message(user_id, "–ß–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ *–∑–∞–≤–µ—Ä—à–µ–Ω* –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!", parse_mode="Markdown")
                    start_menu(user_id)  # –ü–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –≤ –∏—Å—Ç–æ—Ä–∏—é
                    chat_key = f"{admin_id}_{user_id}"
                    if chat_key in current_dialogs:
                        chat_history = load_chat_history()
                        chat_history[chat_key].append(current_dialogs[chat_key])
                        del current_dialogs[chat_key]
                        with open(CHAT_HISTORY_PATH, 'w', encoding='utf-8') as file:
                            json.dump(chat_history, file, ensure_ascii=False, indent=4)

                    del active_chats[user_id]
                    save_active_chats()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–æ–≤
threading.Thread(target=check_chat_activity, daemon=True).start()




# (ADMIN 6) ------------------------------------------ "–í–´–•–û–î –î–õ–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò" ---------------------------------------------------

# –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@bot.message_handler(func=lambda message: message.text == '–í—ã—Ö–æ–¥' and message.chat.id in admin_sessions)
#@log_user_actions
def admin_logout(message):
    try:
        bot.send_message(message.chat.id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!\n–ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        return_to_menu(message)
    except telebot.apihelper.ApiTelegramException as e:
        if e.result_json['description'] == 'Bad Request: chat not found':
            print(f"–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É user_id: {message.chat.id}")
        else:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            
# (16) --------------- –ö–û–î –î–õ–Ø "–§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–ô –û–¢ TG" ---------------

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
def start_bot_with_retries(retries=10000000, delay=5):
    attempt = 0
    while attempt < retries:
        try:
            print(f"–ó–∞–ø—É—Å–∫ –ø–æ–ø—ã—Ç–∫–∏ #{attempt + 1}")
            bot.polling(none_stop=True, interval=1, timeout=120, long_polling_timeout=120)
        except (ReadTimeout, ConnectionError) as e:
            print(f"–û—à–∏–±–∫–∞: {e}. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {retries}")
            attempt += 1
            if attempt < retries:
                print(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(delay)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            else:
                print("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫! –ë–æ—Ç –Ω–µ —Å–º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è!")
        except Exception as e:
            print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            break

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
start_bot_with_retries()

@bot.message_handler(func=lambda message: True)
@restricted
@track_user_activity
@check_chat_state
#@log_user_actions
def echo_all(message):
    bot.reply_to(message, message.text)

# (17) --------------- –ö–û–î –î–õ–Ø "–ó–ê–ü–£–°–ö –ë–û–¢–ê" ---------------
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot_thread = threading.Thread(target=lambda: bot.polling(none_stop=True, interval=1, timeout=120, long_polling_timeout=120), daemon=True)
    bot_thread.start()

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    while True:
        schedule.run_pending()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥