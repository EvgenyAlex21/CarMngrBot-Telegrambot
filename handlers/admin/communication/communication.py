from core.imports import wraps, telebot, types, os, json, re, time, threading, datetime, ApiTelegramException, ReplyKeyboardMarkup, KeyboardButton
from core.bot_instance import bot, BASE_DIR
from handlers.admin.admin_main_menu import check_permission, show_admin_panel
from handlers.user.others.others_chat_with_admin import check_and_create_file, DB_PATH, start_menu
from decorators.blocked_user import load_blocked_users
from handlers.admin.utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha,
)

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–û–±—â–µ–Ω–∏–µ')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_communication_menu(message):
    if not check_admin_access(message):
        return
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–û–±—â–µ–Ω–∏–µ'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('–ß–∞—Ç', '–ó–∞–ø—Ä–æ—Å—ã')
    markup.add('–û–ø–æ–≤–µ—â–µ–Ω–∏—è', '–î–∏–∞–ª–æ–≥–∏')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –æ–±—â–µ–Ω–∏—è:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def return_to_communication(message):
    show_communication_menu(message)

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–ß–ê–¢ ---------------------------------------------------

ADMIN_SESSIONS_FILE = os.path.join(BASE_DIR, 'data', 'admin', 'admin_user_payments', 'admin_sessions.json')
USER_DB_PATH = os.path.join(BASE_DIR, 'data', 'admin', 'admin_user_payments', 'users.json')
ADMIN_DB_PATH = os.path.join(BASE_DIR, 'data', 'admin', 'admin_user_payments', 'admin_sessions.json')
ACTIVE_CHATS_PATH = os.path.join(BASE_DIR, 'data', 'admin', 'chats', 'active_chats.json')
CHAT_HISTORY_PATH = os.path.join(BASE_DIR, 'data', 'admin', 'chats', 'chat_history.json')
MAX_MESSAGE_LENGTH = 4096

active_chats = {}
user_requests_chat = {}
active_user_chats = {}
active_admin_chats = {}

def check_admin_access(message):
    admin_sessions = load_admin_sessions()
    if str(message.chat.id) in admin_sessions:
        return True
    else:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return False

def load_admin_sessions():
    with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
        data = json.load(file)
    return data['admin_sessions']

def load_active_chats():
    global active_chats, user_requests_chat
    if os.path.exists(ACTIVE_CHATS_PATH):
        with open(ACTIVE_CHATS_PATH, 'r', encoding='utf-8') as file:
            data = json.load(file)
            active_chats = {int(k): v for k, v in data.get("active_chats", {}).items()}
            user_requests_chat_data = data.get("user_requests_chat", {})
            user_requests_chat = {
                int(k): v if isinstance(v, dict) else {}
                for k, v in user_requests_chat_data.items()
            }
    else:
        active_chats = {}
        user_requests_chat = {}

load_active_chats()

def save_active_chats():
    with open(ACTIVE_CHATS_PATH, 'w', encoding='utf-8') as file:
        data = {
            "active_chats": {str(k): v for k, v in active_chats.items()},
            "user_requests_chat": {str(k): v for k, v in user_requests_chat.items()}
        }
        json.dump(data, file, ensure_ascii=False, indent=4)

def load_users():
    check_and_create_file()
    try:
        with open(DB_PATH, 'r', encoding='utf-8') as file:
            return json.load(file)
    except UnicodeDecodeError as e:
        with open(DB_PATH, 'r', encoding='cp1251') as file:
            content = file.read()
            with open(DB_PATH, 'w', encoding='utf-8') as outfile:
                json.dump(json.loads(content), outfile, ensure_ascii=False, indent=4)
            return json.loads(content)
    except json.JSONDecodeError as e:
        return {}

def load_admins():
    if os.path.exists(ADMIN_DB_PATH):
        with open(ADMIN_DB_PATH, 'r', encoding='utf-8') as file:
            return json.load(file)
    return []

def is_admin(user_id):
    admins = load_admins()
    return user_id in admins

def escape_markdown(text):
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

@bot.message_handler(func=lambda message: message.text == '–ß–∞—Ç' and check_admin_access(message))
@bot.message_handler(commands=['chat'])
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def initiate_chat(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ß–∞—Ç'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    if not check_admin_access(message):
        return

    if admin_id in active_admin_chats:
        existing_user_id = active_admin_chats[admin_id]
        bot.send_message(admin_id, f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{existing_user_id}`!", parse_mode="Markdown")
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ":
        return_to_communication(message)
        return

    command_parts = message.text.split()
    if len(command_parts) == 2:
        user_input = command_parts[1]
        users_data = load_users()
        blocked_users = load_blocked_users()

        if len(user_input) <= 5 and user_input.isdigit():
            try:
                user_number = int(user_input)
                if user_number < 1 or user_number > len(users_data):
                    bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä `{user_number}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", parse_mode="Markdown")
                    return
                user_id = list(users_data.keys())[user_number - 1]
                username = users_data[user_id]['username']
                if user_id in blocked_users:
                    bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º `{user_number}` –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", parse_mode="Markdown")
                    return
            except ValueError:
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                return
        elif user_input.isdigit():
            user_id = int(user_input)
            if str(user_id) not in users_data:
                bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id - `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
                return
            if user_id in blocked_users:
                bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id - `{user_id}` –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", parse_mode="Markdown")
                return
            username = users_data[str(user_id)]['username']
        elif user_input.startswith('@'):
            username = user_input
            user_id = None
            for uid, data in users_data.items():
                if data.get('username') == username:
                    user_id = int(uid)
                    break
            if user_id is None:
                bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username - {escape_markdown(username)} –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
                return
            if user_id in blocked_users:
                bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username - {escape_markdown(username)} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", parse_mode="Markdown")
                return
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞!")
            return

        if str(user_id) == admin_id:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!", parse_mode="Markdown")
            return

        if user_id in active_chats:
            if active_chats[user_id].get("admin_id") is None:
                active_chats[user_id]["admin_id"] = message.chat.id
                save_active_chats()
            else:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ —Å –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
                return

        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('–ü—Ä–∏–Ω—è—Ç—å', '–û—Ç–∫–ª–æ–Ω–∏—Ç—å')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(user_id, "üö® –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏!\n\n–í—ã–±–µ—Ä–∏—Ç–µ *–ü–†–ò–ù–Ø–¢–¨* –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ *–û–¢–ö–õ–û–ù–ò–¢–¨* –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è!", parse_mode="Markdown", reply_markup=markup)
        bot.send_message(message.chat.id, f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {escape_markdown(username)} - `{user_id}`! –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞...", parse_mode="Markdown")

        active_chats[user_id] = {"admin_id": message.chat.id, "status": "pending", "awaiting_response": True}
        save_active_chats()

        def check_response_timeout(user_id):
            load_active_chats()
            chat = active_chats.get(user_id)
            if chat and chat.get("status") == "pending":
                admin_id = chat.get("admin_id")
                bot.send_message(admin_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {escape_markdown(username)} - `{user_id}` –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∑–∞–ø—Ä–æ—Å! –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω...", parse_mode="Markdown")
                bot.send_message(user_id, "‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —á–∞—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ, –æ–Ω –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω!")
                active_chats.pop(user_id, None)
                save_active_chats()
                start_menu(user_id)

        timer = threading.Timer(30.0, check_response_timeout, [user_id])
        timer.start()

    else:
        list_users_for_chat(message)

def list_users_for_chat(message):
    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ'))
    markup.add(types.KeyboardButton('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'))

    bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞:\n\n"
        "1. –ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `/chat 0`\n"
        "2. Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `/chat id`\n"
        "3. Username –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `/chat @username`\n",
        parse_mode="Markdown",
        reply_markup=markup
    )

# -------------------------------------------------- –û–ë–©–ï–ù–ò–ï_–ó–ê–ü–†–û–°–´ ---------------------------------------------------

admin_request_selection = {}

@bot.message_handler(func=lambda message: message.text == '–ó–∞–ø—Ä–æ—Å—ã' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def list_chat_requests(message):
    admin_id = message.from_user.id

    load_active_chats()

    requests = [
        (user_id, data.get("topic", "–ë–µ–∑ —Ç–µ–º—ã"))
        for user_id, data in active_chats.items()
        if isinstance(data, dict) and data.get("status") == "pending"
    ]

    if not requests:
        bot.send_message(admin_id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —á–∞—Ç!", parse_mode="Markdown")
        return

    users_data = load_users()
    request_list = []
    for i, (user_id, topic) in enumerate(requests):
        username = users_data.get(str(user_id), {}).get('username', 'Unknown')
        escaped_username = escape_markdown(username)
        request_list.append(f"üîπ *‚Ññ{i + 1}.* –ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\nüë§ {escaped_username} - `{user_id}`\nüì® *–¢–µ–º–∞*: {topic.lower()}")

    request_list_message = "*–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —á–∞—Ç:*\n\n" + "\n\n".join(request_list) + "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞:\n\n_P.S. –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –≤—ã–±–∏—Ä–∞—Ç—å –∑–∞–ø—Ä–æ—Å, —Ç–æ –æ–±—ä—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤!_"

    parts = [request_list_message[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(request_list_message), MAX_MESSAGE_LENGTH)]

    for part in parts:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤'))
        markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ'))
        markup.add(types.KeyboardButton('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'))

        bot.send_message(admin_id, part, parse_mode="Markdown", reply_markup=markup)

    admin_request_selection[admin_id] = True

@bot.message_handler(func=lambda message: admin_request_selection.get(message.from_user.id, False))
def handle_request_selection(message):
    admin_id = message.from_user.id

    load_active_chats()

    if message.text.lower() == '–≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤':
        del admin_request_selection[admin_id]
        bot.send_message(admin_id, "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤!")
        return_to_communication(message)
        return

    if not message.text.isdigit() or int(message.text) <= 0:
        bot.send_message(admin_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞!")
        return

    requests = [
        (user_id, data.get("topic", "–ë–µ–∑ —Ç–µ–º—ã"))
        for user_id, data in active_chats.items()
        if isinstance(data, dict) and data.get("status") == "pending"
    ]

    if not requests:
        bot.send_message(admin_id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞!")
        return

    try:
        selected_index = int(message.text) - 1

        if selected_index < 0 or selected_index >= len(requests):
            bot.send_message(admin_id, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞")
            return

        selected_user_id, topic = requests[selected_index]
        users_data = load_users()
        username = users_data.get(str(selected_user_id), {}).get('username', 'Unknown')

        if selected_user_id in active_chats:
            if active_chats[selected_user_id].get("admin_id") is None:
                active_chats[selected_user_id]["admin_id"] = admin_id
                save_active_chats()
            else:
                admin_id_in_chat = active_chats[selected_user_id]["admin_id"]
                bot.send_message(admin_id, f"‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º `{admin_id_in_chat}`!", parse_mode="Markdown")
                show_communication_menu(message)
                return

        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('–ü—Ä–∏–Ω—è—Ç—å', '–û—Ç–∫–ª–æ–Ω–∏—Ç—å')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

        bot.send_message(selected_user_id, "üö® –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏!\n\n–í—ã–±–µ—Ä–∏—Ç–µ *–ü–†–ò–ù–Ø–¢–¨* –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ *–û–¢–ö–õ–û–ù–ò–¢–¨* –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è!", parse_mode="Markdown", reply_markup=markup)
        bot.send_message(admin_id, f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {escape_markdown(username)} - `{selected_user_id}`! –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞...", parse_mode="Markdown")

        active_chats[selected_user_id] = {"admin_id": admin_id, "status": "pending", "awaiting_response": True}
        save_active_chats()

        def check_response_timeout(user_id):
            load_active_chats()
            chat = active_chats.get(user_id)
            if chat and chat.get("status") == "pending":
                admin_id = chat.get("admin_id")
                bot.send_message(admin_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {escape_markdown(username)} - `{user_id}` –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∑–∞–ø—Ä–æ—Å! –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω...", parse_mode="Markdown")
                bot.send_message(user_id, "‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —á–∞—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ, –æ–Ω –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω!")
                active_chats.pop(user_id, None)
                save_active_chats()
                start_menu(user_id)

        timer = threading.Timer(30.0, check_response_timeout, [selected_user_id])
        timer.start()

        del admin_request_selection[admin_id]

    except ValueError:
        pass

def return_admin_to_menu(admin_id):
    bot.send_message(admin_id, "‚úÖ –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω!", parse_mode="Markdown")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–ê–¥–º–∏–Ω', '–ë–∞–Ω', '–§—É–Ω–∫—Ü–∏–∏')
    markup.add('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–§–∞–π–ª—ã', '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è')
    markup.add('–û–±—â–µ–Ω–∏–µ', '–†–µ–∫–ª–∞–º–∞', '–†–µ–¥–∞–∫—Ü–∏—è')
    markup.add('–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞')
    markup.add('–í—ã—Ö–æ–¥')
    bot.send_message(admin_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:", reply_markup=markup)