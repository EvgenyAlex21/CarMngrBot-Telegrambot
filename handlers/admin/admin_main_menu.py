from core.imports import wraps, telebot, types, os, json, re, hashlib, time
from core.bot_instance import bot, BASE_DIR
from core.config import ADMIN_USERNAME, ADMIN_PASSWORD
from decorators.blocked_user import load_blocked_users, save_blocked_users
from .utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha
)

def return_to_menu(message):
    from handlers.user.user_main_menu import return_to_menu as _f
    return _f(message)

def handle_change_credentials(message):
    from handlers.admin.admin.admin import handle_change_credentials as _f
    return _f(message)

def is_valid_username(username):
    from handlers.admin.admin.admin import is_valid_username as _f
    return _f(username)

def generate_login_password_hash(username, password):
    from handlers.admin.admin.admin import generate_login_password_hash as _f
    return _f(username, password)

# ------------------------------------------------------ –í–•–û–î –í –ê–î–ú–ò–ù–ö–£ ------------------------------------------------------

ADMIN_SESSIONS_PATH = os.path.join(BASE_DIR, 'data', 'admin', 'admin_user_payments', 'admin_sessions.json')
credentials_changed = False
admin_sessions = []
admin_logout_times = {}
blocked_users = load_blocked_users()

def load_admin_data():
    if os.path.exists(ADMIN_SESSIONS_PATH):
        with open(ADMIN_SESSIONS_PATH, 'r', encoding='utf-8') as file:
            data = json.load(file)
            return {
        "admin_sessions": data.get("admin_sessions", []),
                "admins_data": data.get("admins_data", {}),
        "removed_admins": {k: v for k, v in data.get("removed_admins", {}).items()},
                "login_password_hash": data.get("login_password_hash", "")
            }
    return {
    "admin_sessions": [],
        "admins_data": {},
        "removed_admins": {},
        "login_password_hash": ""
    }

def save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins=None):
    with open(ADMIN_SESSIONS_PATH, 'w', encoding='utf-8') as file:
        json.dump({
            "admin_sessions": list(admin_sessions),
            "admins_data": admins_data,
            "removed_admins": removed_admins or {},
            "login_password_hash": login_password_hash
        }, file, ensure_ascii=False, indent=4)

admin_sessions = []

data = load_admin_data()
admin_sessions = data["admin_sessions"]
admins_data = data["admins_data"]
removed_admins = data["removed_admins"]

login_password_hash = data["login_password_hash"]
login_password_hash = hashlib.sha256(f"{ADMIN_USERNAME}:{ADMIN_PASSWORD}".encode()).hexdigest()

# -------------------------------------------------- –í–•–û–î –í –ê–î–ú–ò–ù–ö–£ (—Ñ—É–Ω–∫—Ü–∏–∏) ---------------------------------------------------

def get_login_password_hash():
    return hashlib.sha256(f"{ADMIN_USERNAME}:{ADMIN_PASSWORD}".encode()).hexdigest()

def _normalize(text: str) -> str:
    return str(text or '').strip()

def get_root_admin_id():
    return next(iter(admins_data)) if admins_data else None

def is_root_admin(admin_id) -> bool:
    return str(admin_id) == str(get_root_admin_id())

def check_permission(admin_id, permission):

    if is_root_admin(admin_id):
        return True

    requested = _normalize(permission)
    current_permissions = admins_data.get(str(admin_id), {}).get("permissions", []) or []

    if requested in current_permissions:
        return True

    req_suffix = requested.split(':')[-1].strip()
    for perm in current_permissions:
        perm_norm = _normalize(perm)
        if perm_norm.split(':')[-1].strip() == req_suffix:
            return True

    for perm in current_permissions:
        if perm.startswith(f"{requested}:"):
            return True

    return False  

def get_user_data(message):
    user = message.from_user
    return {
        "user_id": user.id,
        "first_name": user.first_name if user.first_name else " ",
        "last_name": user.last_name if user.last_name else " ",
        "username": f"@{user.username}" if user.username else " ",
        "phone": user.phone_number if hasattr(user, 'phone_number') else " "
    }

def is_new_admin(admin_id):
    return admins_data.get(admin_id, {}).get("is_new", False)

def process_login_choice(message):
    global credentials_changed
    user_id = str(message.chat.id)

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥":
        if user_id in admin_sessions and not credentials_changed:
            if is_new_admin(user_id):
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add('–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞')
                bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞:", reply_markup=markup)
                bot.register_next_step_handler(message, handle_change_credentials)
            else:
                session_data = admins_data.get(user_id, {})
                bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {session_data.get('username', '–∞–¥–º–∏–Ω')}!")
                show_admin_panel(message)
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ...")
            handle_admin_login(message)
    elif message.text == "–í–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item_main)
        msg = bot.send_message(message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:", reply_markup=markup)
        bot.register_next_step_handler(msg, verify_username)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        handle_admin_login(message)

def verify_username(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    username = message.text
    is_valid, error_message = is_valid_username(username)
    if not is_valid:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {error_message}! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(message, verify_username)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_main)
    msg = bot.send_message(message.chat.id, "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=markup)
    bot.register_next_step_handler(msg, verify_password, username)
    bot.delete_message(message.chat.id, message.message_id)  

def verify_password(message, username):
    global credentials_changed

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    password = message.text
    admin_id = str(message.chat.id)

    if admin_id in removed_admins:
        bot.send_message(message.chat.id, "üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return

    if username == ADMIN_USERNAME and password == ADMIN_PASSWORD:
        if admin_id not in admin_sessions:
            admin_sessions.append(admin_id)
        save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins)

        user_data = get_user_data(message)
        update_admin_data(user_data)

        session_data = admins_data.get(admin_id, {})
        bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {session_data.get('username', '–∞–¥–º–∏–Ω')}!")
        show_admin_panel(message)

        credentials_changed = False
        bot.delete_message(message.chat.id, message.message_id)   
        return

    admin_hash = admins_data.get(admin_id, {}).get("login_password_hash_for_user_id", "")
    if generate_login_password_hash(username, password) == admin_hash:
        if admin_id not in admin_sessions:
            admin_sessions.append(admin_id)
        save_admin_data(admin_sessions, admins_data, login_password_hash, removed_admins)

        user_data = get_user_data(message)
        update_admin_data(user_data)

        session_data = admins_data.get(admin_id, {})
        bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {session_data.get('username', '–∞–¥–º–∏–Ω')}!")
        show_admin_panel(message)

        credentials_changed = False
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞...")
        handle_admin_login(message)

    bot.delete_message(message.chat.id, message.message_id) 

def update_admin_data(user_data):
    admin_id = str(user_data["user_id"])

    if admin_id in removed_admins:
        return

    if admin_id in admins_data:
        existing_data = admins_data[admin_id]
        if (existing_data.get("first_name") != user_data["first_name"] or
            existing_data.get("last_name") != user_data["last_name"] or
            existing_data.get("username") != user_data["username"] or
            existing_data.get("phone") != user_data["phone"]):
            admins_data[admin_id].update(user_data)
            save_admin_data(admin_sessions, admins_data, login_password_hash)
    else:
        admins_data[admin_id] = user_data
        save_admin_data(admin_sessions, admins_data, login_password_hash)

def update_login_password(chat_id, new_username=None, new_password=None):
    global admins_data, login_password_hash

    admin_id = str(chat_id)

    if admin_id not in admins_data:
        return f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å id {admin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!"

    admin_data = admins_data[admin_id]
    current_username = admin_data["admins_username"]
    current_password_hash = admin_data["login_password_hash_for_user_id"]

    if new_username:
        old_username = current_username
        admin_data["admins_username"] = new_username
        if old_username != new_username:
            admin_data["login_password_hash_for_user_id"] = hashlib.sha256(f"{new_username}:{new_password or current_password_hash}".encode()).hexdigest()

    if new_password:
        new_hash = hashlib.sha256(f"{new_username or current_username}:{new_password}".encode()).hexdigest()
        admin_data["login_password_hash_for_user_id"] = new_hash
    else:
        admin_data["login_password_hash_for_user_id"] = current_password_hash

    login_password_hash = hashlib.sha256(f"{new_username or current_username}:{new_password or current_password_hash}".encode()).hexdigest()

    admins_data[admin_id] = admin_data

    save_admin_data(admin_sessions, admins_data, login_password_hash)

    if new_username and new_password:
        return f"–õ–æ–≥–∏–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {new_username}, –ø–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!"
    elif new_username:
        return f"–õ–æ–≥–∏–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {new_username}. –ü–∞—Ä–æ–ª—å –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º!"
    elif new_password:
        return "–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!"
    else:
        return "–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ..."

def verify_login_password_hash():
    global login_password_hash
    current_hash = hashlib.sha256(f"{ADMIN_USERNAME}:{ADMIN_PASSWORD}".encode()).hexdigest()

    if current_hash != login_password_hash:
        login_password_hash = current_hash
        save_admin_data(admin_sessions, admins_data, login_password_hash)

verify_login_password_hash()

def change_admin_credentials(new_username=None, new_password=None):
    global ADMIN_USERNAME, ADMIN_PASSWORD, login_password_hash

    current_username = ADMIN_USERNAME
    current_password = ADMIN_PASSWORD

    if new_username:
        ADMIN_USERNAME = new_username
        current_username = new_username
    if new_password:
        ADMIN_PASSWORD = new_password
        current_password = new_password

    login_password_hash = hashlib.sha256(f"{current_username}:{current_password}".encode()).hexdigest()

    save_admin_data(admin_sessions, admins_data, login_password_hash)

# -------------------------------------------------- –í–•–û–î –í –ê–î–ú–ò–ù–ö–£ (–æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /admin) ------------------------------------------------

@bot.message_handler(commands=['admin'])
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_admin_login(message):
    global credentials_changed
    user_data = get_user_data(message)
    admin_id = str(user_data["user_id"])

    if admin_id in blocked_users:
        bot.send_message(admin_id, "‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    current_time = time.time()
    last_logout_time = admin_logout_times.get(admin_id)

    admin_sessions[:] = [
        session_id for session_id in admin_sessions
        if (current_time - admin_logout_times.get(session_id, 0)) <= 300
    ]

    if last_logout_time and (current_time - last_logout_time) <= 300:
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        if not credentials_changed:
            markup.add('–ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥')
        if credentials_changed:
            markup.add('–í–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(
            user_data["user_id"],
            "üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞:",
            reply_markup=markup
        )
        bot.register_next_step_handler(message, process_login_choice)
    else:
        if admin_id not in admin_sessions:
            if is_new_admin(admin_id):
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add('–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞')
                bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞:", reply_markup=markup)
                bot.register_next_step_handler(message, handle_change_credentials)
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                markup.add(item_main)
                msg = bot.send_message(message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:", reply_markup=markup)
                bot.register_next_step_handler(msg, verify_username)
        else:
            admin_logout_times[admin_id] = time.time()
            bot.send_message(message.chat.id, "‚úÖ –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É... –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!")
            show_admin_panel(message)

def show_admin_panel(message):
    admin_id = str(message.chat.id)
    if is_new_admin(admin_id):
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞')
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, handle_change_credentials)
    else:
        markup = types.ReplyKeyboardMarkup(row_width=3)
        markup.add('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
        markup.add('–ê–¥–º–∏–Ω', '–ë–∞–Ω', '–§—É–Ω–∫—Ü–∏–∏')
        markup.add('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–§–∞–π–ª—ã', '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è')
        markup.add('–û–±—â–µ–Ω–∏–µ', '–†–µ–∫–ª–∞–º–∞', '–†–µ–¥–∞–∫—Ü–∏—è')
        markup.add('–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞')
        markup.add('–í—ã—Ö–æ–¥')
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_return_to_admin_panel(message):
    show_admin_panel(message)

# -------------------------------------------------- –í–•–û–î –í –ê–î–ú–ò–ù–ö–£ (–≤—ã—Ö–æ–¥) ------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–í—ã—Ö–æ–¥' and str(message.chat.id) in admin_sessions)
@restricted
@track_user_activity
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def admin_logout(message):
    admin_id = str(message.chat.id)

    if admin_id in blocked_users:
        bot.send_message(admin_id, "‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return

    admin_logout_times[admin_id] = time.time()
    bot.send_message(message.chat.id, "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!\nüîê –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç...")
    return_to_menu(message)