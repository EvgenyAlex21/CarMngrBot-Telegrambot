from core.imports import wraps, telebot, types, os, json, re, time, threading, datetime, timedelta, uuid
from core.bot_instance import bot
from handlers.admin.admin_main_menu import check_permission, show_admin_panel
from handlers.admin.system_management.system_management import manage_system
from handlers.admin.statistics.statistics import check_admin_access, escape_markdown
from handlers.user.user_main_menu import load_payment_data, save_payments_data, load_users_data as load_users
from handlers.user.subscription.buy_subscription import SUBSCRIPTION_PLANS, STORE_ITEMS
from handlers.user.subscription.gifts import split_message
from handlers.admin.utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha
)

# ------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def manage_discounts(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥','–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–∫–∏–¥–∫—É') 
    markup.add('–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', '–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∏–¥–∫–∞–º–∏:", reply_markup=markup)

# ------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ö–ò–î–ö–ê–ú–ò (—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def create_promo_code(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, process_create_promo_code_discount)

@text_only_handler
def process_create_promo_code_discount(message):
    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏":
            manage_discounts(message)
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
            manage_system(message)
        else:
            show_admin_panel(message)
        return

    try:
        discount = float(message.text.replace(',', '.').strip())
        if discount <= 0 or discount > 100:
            raise ValueError("–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100!")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=markup)
        bot.register_next_step_handler(message, process_create_promo_code_uses, discount)
    except ValueError as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_create_promo_code_discount)

@text_only_handler
def process_create_promo_code_uses(message, discount):
    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏":
            manage_discounts(message)
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
            manage_system(message)
        else:
            show_admin_panel(message)
        return

    try:
        uses = int(message.text.strip())
        if uses < 1:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >1!")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í—Å–µ —Ç–æ–≤–∞—Ä—ã', '–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏', '–í–µ—Å—å –º–∞–≥–∞–∑–∏–Ω')
        markup.add('–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, 
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫ —á–µ–º—É –ø—Ä–∏–º–µ–Ω–∏–º –ø—Ä–æ–º–æ–∫–æ–¥:\n\n"
            "üí≥ - –í—Å–µ —Ç–æ–≤–∞—Ä—ã: –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –º–∞–≥–∞–∑–∏–Ω\n"
            "üéÅ - –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏: —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∫–∏\n"
            "üõí - –í–µ—Å—å –º–∞–≥–∞–∑–∏–Ω: —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞\n"
            "üè∑Ô∏è - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã: –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã/–ø–æ–¥–ø–∏—Å–∫–∏", 
            reply_markup=markup)
        bot.register_next_step_handler(message, process_create_promo_code_category, discount, uses)
    except ValueError as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_create_promo_code_uses, discount)

@text_only_handler
def process_create_promo_code_category(message, discount, uses):
    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏":
            manage_discounts(message)
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
            manage_system(message)
        else:
            show_admin_panel(message)
        return

    applicable_category = None
    applicable_items = []

    if message.text == "–í—Å–µ —Ç–æ–≤–∞—Ä—ã":
        applicable_category = None
    elif message.text == "–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏":
        applicable_category = "subscriptions"
    elif message.text == "–í–µ—Å—å –º–∞–≥–∞–∑–∏–Ω":
        applicable_category = "store"
    elif message.text == "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã":
        available_items = list(SUBSCRIPTION_PLANS.keys()) + list(STORE_ITEMS.keys())
        items_display_lines = []
        
        for idx, item in enumerate(available_items, 1):
            label = SUBSCRIPTION_PLANS.get(item, STORE_ITEMS.get(item, {'label': item}))['label']
            emoji = "üí≥" if item in SUBSCRIPTION_PLANS else "üõí"
            items_display_lines.append(f"{emoji} ‚Ññ{idx}. {label}")

        items_display = "üíé –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Ç–æ–≤–∞—Ä–æ–≤:\n\n" + "\n".join(items_display_lines) + "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–æ–∫:"
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        
        bot.send_message(message.chat.id, items_display, reply_markup=markup)
        bot.register_next_step_handler(message, process_create_promo_code_items, discount, uses)
        return
    else:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_create_promo_code_category, discount, uses)
        return

    data = load_payment_data()
    promo_code = f"PROMO{uuid.uuid4().hex[:8].upper()}"
    data.setdefault('promo_codes', {})[promo_code] = {
        'discount': discount,
        'uses': uses,
        'used': False,
        'active': True,
        'user_id': None,
        'used_by': [],
        'created_at': datetime.now().strftime("%d.%m.%Y –≤ %H:%M"),
        'source': 'admin',
        'applicable_category': applicable_category,
        'applicable_items': applicable_items
    }

    save_payments_data(data)
    discount_str = f"{int(discount)}%" if isinstance(discount, int) or float(discount).is_integer() else f"{float(discount):.2f}%".replace(".00%", "%")
    applicability_str = ("–≤—Å–µ —Ç–æ–≤–∞—Ä—ã" if applicable_category is None else 
                        "–≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏" if applicable_category == "subscriptions" else 
                        "–≤–µ—Å—å –º–∞–≥–∞–∑–∏–Ω")
    bot.send_message(message.chat.id, 
        f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥:\n\n"
        f"üéÅ *–ü—Ä–æ–º–æ–∫–æ–¥:* `{promo_code}`\n"
        f"üè∑Ô∏è *–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:* {discount_str}\n"
        f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* {uses}\n"
        f"üõí *–ü—Ä–∏–º–µ–Ω–∏–º –∫:* {applicability_str}", 
        parse_mode="Markdown")
    manage_discounts(message)

@text_only_handler
def process_create_promo_code_items(message, discount, uses):
    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏":
            manage_discounts(message)
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
            manage_system(message)
        else:
            show_admin_panel(message)
        return

    available_items = [
        "trial_subscription_3", "weekly_subscription_7", "monthly_subscription_30",
        "quarterly_subscription_90", "semiannual_subscription_180", "yearly_subscription_365",
        "points_5", "points_10", "points_15", "points_25", "points_30", "points_50",
        "points_75", "points_100", "points_150", "points_200", "points_250", "points_350",
        "points_500", "points_750", "points_1000",
        "time_1day", "time_2days", "time_4days", "time_5days", "time_8days", "time_10days",
        "time_14days", "time_15days", "time_21days", "time_45days", "time_60days", "time_120days"
    ]    
    applicable_items = []

    try:
        indices = [int(idx.strip()) - 1 for idx in message.text.split(',')]
        for idx in indices:
            if 0 <= idx < len(available_items):
                applicable_items.append(available_items[idx])
            else:
                raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {idx + 1}")
    except ValueError as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_create_promo_code_items, discount, uses)
        return

    data = load_payment_data()
    promo_code = f"PROMO{uuid.uuid4().hex[:8].upper()}"
    data.setdefault('promo_codes', {})[promo_code] = {
        'discount': discount,
        'uses': uses,
        'used': False,
        'active': True,
        'user_id': None,
        'used_by': [],
        'created_at': datetime.now().strftime("%d.%m.%Y –≤ %H:%M"),
        'source': 'admin',
        'applicable_category': None,
        'applicable_items': applicable_items
    }

    save_payments_data(data)
    discount_str = f"{int(discount)}%" if isinstance(discount, int) or float(discount).is_integer() else f"{float(discount):.2f}%".replace(".00%", "%")
    items_str = ", ".join([SUBSCRIPTION_PLANS.get(item, STORE_ITEMS.get(item, {'label': item}))['label'] + (" –≤ –º–∞–≥–∞–∑–∏–Ω–µ" if item.startswith("points_") or item.startswith("time_") else "") for item in applicable_items])
    bot.send_message(message.chat.id, 
        f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥:\n\n"
        f"üéÅ *–ü—Ä–æ–º–æ–∫–æ–¥:* `{promo_code}`\n"
        f"üè∑Ô∏è *–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:* {discount_str}\n"
        f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* {uses}\n"
        f"üõí *–ü—Ä–∏–º–µ–Ω–∏–º –∫:* {items_str}", 
        parse_mode="Markdown")
    manage_discounts(message)

# ------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ö–ò–î–ö–ê–ú–ò (–Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–∫–∏–¥–∫—É) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–∫–∏–¥–∫—É' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def assign_discount(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–∫–∏–¥–∫—É'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, process_assign_discount)

@text_only_handler
def process_assign_discount(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏":
        manage_discounts(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    user_id = None

    users_data = load_users()
    if user_input.isdigit():
        if len(user_input) >= 5:
            user_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(users_data):
                user_id = list(users_data.keys())[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:] 
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@')  
            if db_username.lower() == username.lower():  
                user_id = uid
                break

    if not user_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_assign_discount)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, process_assign_discount_amount, user_id)

@text_only_handler
def process_assign_discount_amount(message, user_id):
    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏":
            manage_discounts(message)
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
            manage_system(message)
        else:
            show_admin_panel(message)
        return

    try:
        discount = float(message.text.replace(',', '.').strip())
        if discount <= 0 or discount > 100:
            raise ValueError("–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100!")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í—Å–µ —Ç–æ–≤–∞—Ä—ã', '–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏', '–í–µ—Å—å –º–∞–≥–∞–∑–∏–Ω')
        markup.add('–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, 
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫ —á–µ–º—É –ø—Ä–∏–º–µ–Ω–∏–º–∞ —Å–∫–∏–¥–∫–∞:\n\n"
            "üí≥ - –í—Å–µ —Ç–æ–≤–∞—Ä—ã: –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –º–∞–≥–∞–∑–∏–Ω\n"
            "üéÅ - –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏: —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∫–∏\n"
            "üõí - –í–µ—Å—å –º–∞–≥–∞–∑–∏–Ω: —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞\n"
            "üè∑Ô∏è - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã: –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã/–ø–æ–¥–ø–∏—Å–∫–∏", 
            reply_markup=markup)
        bot.register_next_step_handler(message, process_assign_discount_category, user_id, discount)
    except ValueError as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_assign_discount_amount, user_id)

@text_only_handler
def process_assign_discount_category(message, user_id, discount):
    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏":
            manage_discounts(message)
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
            manage_system(message)
        else:
            show_admin_panel(message)
        return

    applicable_category = None
    applicable_items = []

    if message.text == "–í—Å–µ —Ç–æ–≤–∞—Ä—ã":
        applicable_category = None
    elif message.text == "–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏":
        applicable_category = "subscriptions"
    elif message.text == "–í–µ—Å—å –º–∞–≥–∞–∑–∏–Ω":
        applicable_category = "store"
    elif message.text == "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã":
        available_items = list(SUBSCRIPTION_PLANS.keys()) + list(STORE_ITEMS.keys())
        items_display_lines = []
        for idx, item in enumerate(available_items, 1):
            label = SUBSCRIPTION_PLANS.get(item, STORE_ITEMS.get(item, {'label': item}))['label']
            if item in SUBSCRIPTION_PLANS:
                emoji = "üí≥"  
            else:
                emoji = "üõí"  
            items_display_lines.append(f"{emoji} ‚Ññ{idx}. {label}")
        
        items_display = "üíé –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Ç–æ–≤–∞—Ä–æ–≤:\n\n" + "\n".join(items_display_lines) + "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–æ–∫:"
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
        markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        bot.send_message(message.chat.id, items_display, reply_markup=markup)
        bot.register_next_step_handler(message, process_assign_discount_items, user_id, discount)
        return
    else:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π.", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_assign_discount_category, user_id, discount)
        return

    data = load_payment_data()
    users_data = load_users()
    username = escape_markdown(users_data.get(str(user_id), {}).get('username', f"@{user_id}"))
    if not username.startswith('@'):
        username = f"@{username}"

    now = datetime.now()
    for code, promo in list(data.get('promo_codes', {}).items()):
        created_at_str = promo.get('created_at', now.strftime("%d.%m.%Y –≤ %H:%M"))
        created_at = datetime.strptime(created_at_str, "%d.%m.%Y –≤ %H:%M")
        if (now - created_at).days > 30 and not promo.get('used', False):
            promo['used'] = True
            promo['active'] = False
            promo['deactivated_at'] = now.strftime("%d.%m.%Y –≤ %H:%M")
            promo['deactivation_reason'] = "–∏—Å—Ç—ë–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è"

    promo_code = f"DISC{uuid.uuid4().hex[:8].upper()}"
    data.setdefault('promo_codes', {})[promo_code] = {
        'discount': discount,
        'uses': 1,
        'used': False,
        'active': True,
        'user_id': str(user_id),
        'used_by': [],
        'created_at': now.strftime("%d.%m.%Y –≤ %H:%M"),
        'source': 'admin',
        'applicable_category': applicable_category,
        'applicable_items': applicable_items
    }

    save_payments_data(data)
    discount_str = f"{int(discount)}%" if isinstance(discount, int) or float(discount).is_integer() else f"{float(discount):.2f}%".replace(".00%", "%")
    applicability_str = ("–≤—Å–µ —Ç–æ–≤–∞—Ä—ã" if applicable_category is None else 
                        "–≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏" if applicable_category == "subscriptions" else 
                        "–≤–µ—Å—å –º–∞–≥–∞–∑–∏–Ω")
    admin_message = (
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} - `{user_id}` –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å–∫–∏–¥–∫–∞:\n\n"
        f"üéÅ *–ü—Ä–æ–º–æ–∫–æ–¥:* `{promo_code}`\n"
        f"üè∑Ô∏è *–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:* {discount_str}\n"
        f"üõí *–ü—Ä–∏–º–µ–Ω–∏–º –∫:* {applicability_str}\n"
        f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π"
    )
    user_message = (
        f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞–º —Å–∫–∏–¥–∫—É:\n\n"
        f"üéÅ *–ü—Ä–æ–º–æ–∫–æ–¥:* `{promo_code}`\n"
        f"üè∑Ô∏è *–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:* {discount_str}\n"
        f"üõí *–ü—Ä–∏–º–µ–Ω–∏–º –∫:* {applicability_str}\n"
        f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π\n\n"
        f"_P.S. —Å–∫–∏–¥–∫–∞ —Å–≥–æ—Ä–∏—Ç, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ!_"
    )
    bot.send_message(message.chat.id, admin_message, parse_mode="Markdown")
    bot.send_message(user_id, user_message, parse_mode="Markdown")

    manage_discounts(message)

@text_only_handler
def process_assign_discount_items(message, user_id, discount):
    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏":
            manage_discounts(message)
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
            manage_system(message)
        else:
            show_admin_panel(message)
        return

    available_items = [
        "trial_subscription_3", "weekly_subscription_7", "monthly_subscription_30",
        "quarterly_subscription_90", "semiannual_subscription_180", "yearly_subscription_365",
        "points_5", "points_10", "points_15", "points_25", "points_30", "points_50",
        "points_75", "points_100", "points_150", "points_200", "points_250", "points_350",
        "points_500", "points_750", "points_1000",
        "time_1day", "time_2days", "time_4days", "time_5days", "time_8days", "time_10days",
        "time_14days", "time_15days", "time_21days", "time_45days", "time_60days", "time_120days"
    ]  
    applicable_items = []

    try:
        indices = [int(idx.strip()) - 1 for idx in message.text.split(',')]
        for idx in indices:
            if 0 <= idx < len(available_items):
                applicable_items.append(available_items[idx])
            else:
                raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {idx + 1}")
    except ValueError as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_assign_discount_items, user_id, discount)
        return

    data = load_payment_data()
    users_data = load_users()
    username = escape_markdown(users_data.get(str(user_id), {}).get('username', f"@{user_id}"))
    if not username.startswith('@'):
        username = f"@{username}"

    now = datetime.now()
    for code, promo in list(data.get('promo_codes', {}).items()):
        created_at_str = promo.get('created_at', now.strftime("%d.%m.%Y –≤ %H:%M"))
        created_at = datetime.strptime(created_at_str, "%d.%m.%Y –≤ %H:%M")
        if (now - created_at).days > 30 and not promo.get('used', False):
            promo['used'] = True
            promo['active'] = False
            promo['deactivated_at'] = now.strftime("%d.%m.%Y –≤ %H:%M")
            promo['deactivation_reason'] = "–∏—Å—Ç—ë–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è"

    promo_code = f"DISC{uuid.uuid4().hex[:8].upper()}"
    data.setdefault('promo_codes', {})[promo_code] = {
        'discount': discount,
        'uses': 1,
        'used': False,
        'active': True,
        'user_id': str(user_id),
        'used_by': [],
        'created_at': now.strftime("%d.%m.%Y –≤ %H:%M"),
        'source': 'admin',
        'applicable_category': None,
        'applicable_items': applicable_items
    }

    save_payments_data(data)
    discount_str = f"{int(discount)}%" if isinstance(discount, int) or float(discount).is_integer() else f"{float(discount):.2f}%".replace(".00%", "%")
    items_str = ", ".join([SUBSCRIPTION_PLANS.get(item, STORE_ITEMS.get(item, {'label': item}))['label'] + (" –≤ –º–∞–≥–∞–∑–∏–Ω–µ" if item.startswith("points_") or item.startswith("time_") else "") for item in applicable_items])
    admin_message = (
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} - `{user_id}` –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å–∫–∏–¥–∫–∞:\n\n"
        f"üéÅ *–ü—Ä–æ–º–æ–∫–æ–¥:* `{promo_code}`\n"
        f"üè∑Ô∏è *–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:* {discount_str}\n"
        f"üõí *–ü—Ä–∏–º–µ–Ω–∏–º –∫:* {items_str}\n"
        f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π"
    )
    user_message = (
        f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞–º —Å–∫–∏–¥–∫—É:\n\n"
        f"üéÅ *–ü—Ä–æ–º–æ–∫–æ–¥:* `{promo_code}`\n"
        f"üè∑Ô∏è *–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:* {discount_str}\n"
        f"üõí *–ü—Ä–∏–º–µ–Ω–∏–º –∫:* {items_str}\n"
        f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π\n\n"
        f"_P.S. —Å–∫–∏–¥–∫–∞ —Å–≥–æ—Ä–∏—Ç, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ!_"
    )
    bot.send_message(message.chat.id, admin_message, parse_mode="Markdown")
    bot.send_message(user_id, user_message, parse_mode="Markdown")

    manage_discounts(message)

# ------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ö–ò–î–ö–ê–ú–ò (–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_promo_codes(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    data = load_payment_data()
    promo_codes = data.get('promo_codes', {})
    if not promo_codes:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!", parse_mode="Markdown")
        manage_discounts(message)
        return

    now = datetime.now()
    promo_summary = "*–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:*\n\n"
    for idx, (code, details) in enumerate(promo_codes.items(), 1):
        used = details.get('used', False)
        active = details.get('active', not used)
        status = "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω" if used or not active else "–∞–∫—Ç–∏–≤–µ–Ω"
        if not used and active:
            created_at_str = details.get('created_at', now.strftime("%d.%m.%Y –≤ %H:%M"))
            created_at = datetime.strptime(created_at_str, "%d.%m.%Y –≤ %H:%M")
            if (now - created_at).days > 30:
                status = "–∏—Å—Ç—ë–∫"
                details['used'] = True
                details['active'] = False
                details['deactivated_at'] = now.strftime("%d.%m.%Y –≤ %H:%M")
                details['deactivation_reason'] = "–∏—Å—Ç—ë–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (30 –¥–Ω–µ–π)"

        source = details.get('source', 'system')
        user_id = details.get('user_id')
        if user_id:
            user_display = f"`{escape_markdown(str(user_id))}`"
        elif source == 'admin':
            user_display = "–∞–¥–º–∏–Ω—Å–∫–∏–π"
        else:
            user_display = "–æ–±—â–∏–π"

        created_at_display = details.get('created_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        uses = details.get('uses', '–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ')
        discount = details['discount']
        if isinstance(discount, int):
            discount_str = f"{discount}%"
        else:
            discount_f = float(discount)
            discount_str = f"{int(discount_f)}%" if discount_f.is_integer() else f"{discount_f:.2f}%".replace(".00%", "%")

        applicable_category = details.get('applicable_category')
        applicable_items = details.get('applicable_items', [])
        applicability_str = ("–≤—Å–µ —Ç–æ–≤–∞—Ä—ã" if applicable_category is None and not applicable_items else 
                            "–≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏" if applicable_category == "subscriptions" else 
                            "–≤–µ—Å—å –º–∞–≥–∞–∑–∏–Ω" if applicable_category == "store" else 
                            ", ".join([SUBSCRIPTION_PLANS.get(item, STORE_ITEMS.get(item, {'label': item}))['label'] + (" –≤ –º–∞–≥–∞–∑–∏–Ω–µ" if item.startswith("points_") or item.startswith("time_") else "") for item in applicable_items]))

        promo_summary += (
            f"üéÅ *‚Ññ{idx}.* `{escape_markdown(code)}`\n"
            f"üè∑Ô∏è *–°–∫–∏–¥–∫–∞:* {discount_str}\n"
            f"üìÖ *–°–æ–∑–¥–∞–Ω:* {created_at_display}\n"
            f"üë• *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:* {uses}\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_display}\n"
            f"üõí *–ü—Ä–∏–º–µ–Ω–∏–º –∫:* {applicability_str}\n"
            f"üìã *–°—Ç–∞—Ç—É—Å:* {status}\n"
        )
        if details.get('deactivated_at'):
            promo_summary += f"‚è≥ *–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:* {details['deactivated_at']} ({details['deactivation_reason'].lower()})\n"
        if details.get('used_by'):
            for used_entry in details['used_by']:
                username = escape_markdown(used_entry['username'])
                if not username.startswith('@'):
                    username = f"@{username}"
                promo_summary += f"üë§ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω:* {username} (`{escape_markdown(str(used_entry['user_id']))}`) –≤ {used_entry['used_at']}\n"
        promo_summary += "\n"

    message_parts = split_message(promo_summary)
    for part in message_parts:
        bot.send_message(message.chat.id, part, parse_mode="Markdown")

    save_payments_data(data)
    manage_discounts(message)

# ------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ö–ò–î–ö–ê–ú–ò (—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_promo_code(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    data = load_payment_data()
    promo_codes = data.get('promo_codes', {})
    if not promo_codes:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!", parse_mode="Markdown")
        manage_discounts(message)
        return

    now = datetime.now()
    promo_summary = "*–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*\n\n"
    promo_list = []
    idx = 0
    for code, details in promo_codes.items():
        source = details.get('source', 'system')
        if source not in ('admin', 'admin_exchange'):
            continue

        idx += 1
        used = details.get('used', False)
        active = details.get('active', not used)
        status = "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω" if used or not active else "–∞–∫—Ç–∏–≤–µ–Ω"
        if not used and active:
            created_at_str = details.get('created_at', now.strftime("%d.%m.%Y –≤ %H:%M"))
            created_at = datetime.strptime(created_at_str, "%d.%m.%Y –≤ %H:%M")
            if (now - created_at).days > 30:
                status = "–∏—Å—Ç—ë–∫"
                details['used'] = True
                details['active'] = False
                details['deactivated_at'] = now.strftime("%d.%m.%Y –≤ %H:%M")
                details['deactivation_reason'] = "–∏—Å—Ç—ë–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è"

        user_id = details.get('user_id')
        if user_id:
            user_display = f"`{escape_markdown(str(user_id))}`"
        elif source == 'admin':
            user_display = "–∞–¥–º–∏–Ω—Å–∫–∏–π"
        else:
            user_display = "–æ–±—â–∏–π"

        created_at_display = details.get('created_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        uses = details.get('uses', '–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ')
        discount = details['discount']
        discount_str = f"{int(discount)}%" if isinstance(discount, int) or float(discount).is_integer() else f"{float(discount):.2f}%".replace(".00%", "%")
        applicable_category = details.get('applicable_category')
        applicable_items = details.get('applicable_items', [])
        applicability_str = ("–≤—Å–µ —Ç–æ–≤–∞—Ä—ã" if applicable_category is None and not applicable_items else 
                    "–≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏" if applicable_category == "subscriptions" else 
                    "–≤–µ—Å—å –º–∞–≥–∞–∑–∏–Ω" if applicable_category == "store" else 
                    ", ".join([SUBSCRIPTION_PLANS.get(item, STORE_ITEMS.get(item, {'label': item}))['label'] + (" –≤ –º–∞–≥–∞–∑–∏–Ω–µ" if item.startswith("points_") or item.startswith("time_") else "") for item in applicable_items]))

        promo_summary += (
            f"üéÅ *‚Ññ{idx}.* `{escape_markdown(code)}`\n"
            f"üè∑Ô∏è *–°–∫–∏–¥–∫–∞:* {discount_str}\n"
            f"üìÖ *–°–æ–∑–¥–∞–Ω:* {created_at_display}\n"
            f"üë• *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:* {uses}\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_display}\n"
            f"üõí *–ü—Ä–∏–º–µ–Ω–∏–º –∫:* {applicability_str}\n"
            f"üìã *–°—Ç–∞—Ç—É—Å:* {status}\n"
        )
        if details.get('deactivated_at'):
            promo_summary += f"‚è≥ *–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:* {details['deactivated_at']} ({details['deactivation_reason']})\n"
        if details.get('used_by'):
            for used_entry in details['used_by']:
                username = escape_markdown(used_entry['username'])
                if not username.startswith('@'):
                    username = f"@{username}"
                promo_summary += f"üë§ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω:* {username} (`{escape_markdown(str(used_entry['user_id']))}`) –≤ {used_entry['used_at']}\n"
        promo_summary += "\n"
        promo_list.append(code)

    if not promo_list:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", parse_mode="Markdown")
        manage_discounts(message)
        return

    message_parts = split_message(promo_summary)
    for part in message_parts:
        bot.send_message(message.chat.id, part, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_delete_promo_code, promo_list)

@text_only_handler
def process_delete_promo_code(message, promo_list):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏":
        manage_discounts(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        indices = message.text.strip().split(',')
        valid_indices = []
        invalid_indices = []
        deleted_codes = []

        for idx in indices:
            idx = idx.strip()
            try:
                index = int(idx) - 1
                if 0 <= index < len(promo_list):
                    valid_indices.append(index)
                else:
                    invalid_indices.append(idx)
            except ValueError:
                invalid_indices.append(idx)

        if invalid_indices:
            invalid_str = ", ".join(invalid_indices)
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")

        if valid_indices:
            data = load_payment_data()
            for index in valid_indices:
                promo_code = promo_list[index]
                if promo_code in data['promo_codes']:
                    del data['promo_codes'][promo_code]
                    deleted_codes.append(promo_code)
            save_payments_data(data)

            if deleted_codes:
                deleted_str = ", ".join([f"`{escape_markdown(code)}`" for code in deleted_codes])
                bot.send_message(message.chat.id, f"üö´ –ü—Ä–æ–º–æ–∫–æ–¥—ã: {deleted_str} —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")
            else:
                bot.send_message(message.chat.id, "‚ùå –ù–∏ –æ–¥–∏–Ω –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω!", parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤!", parse_mode="Markdown")

        manage_discounts(message)
    except Exception as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_delete_promo_code, promo_list)