from core.imports import wraps, telebot, types, os, json, re, time, threading, datetime, timedelta
from core.bot_instance import bot
from handlers.admin.admin_main_menu import check_permission, show_admin_panel
from handlers.admin.system_management.system_management import manage_system
from handlers.admin.statistics.statistics import check_admin_access, escape_markdown
from handlers.user.subscription.gifts import split_message, format_time, format_number
from handlers.user.user_main_menu import PAID_FEATURES
from handlers.admin.utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha
)

def load_users():
    from handlers.user.user_main_menu import load_users_data as _load
    return _load()

def load_payment_data():
    from handlers.user.user_main_menu import load_payment_data as _load
    return _load()

def save_payments_data(data):
    from handlers.user.user_main_menu import save_payments_data as _save
    return _save(data)

# --------------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô (—É–ø—Ä–∞–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def manage_points(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤', '–°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤')
    markup.add('–ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–ª–æ–≤', '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–ª–æ–≤')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–∞–º–∏:", reply_markup=markup)

# --------------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–õ–ê–ú–ò (–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def add_points(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, process_add_points)

@text_only_handler
def process_add_points(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏":
        manage_points(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    user_id = None

    users_data = load_users()
    if user_input.isdigit():
        if len(user_input) >= 5:
            user_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(users_data):
                user_id = list(users_data.keys())[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:]  
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@')  
            if db_username.lower() == username.lower(): 
                user_id = uid
                break

    if not user_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_add_points)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_add_points_amount, user_id)

@text_only_handler
def process_add_points_amount(message, user_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏":
        manage_points(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        input_text = message.text.strip().replace(',', '.')
        points = float(input_text)
        if points <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")

        points_display = f"{int(float(points))}" if float(points).is_integer() else f"{float(points):.2f}"

        data = load_payment_data()
        user_data = data['subscriptions']['users'].setdefault(str(user_id), {
            'plans': [], 'total_amount': 0, 'referral_points': 0
        })

        users_data = load_users()
        username = escape_markdown(users_data.get(str(user_id), {}).get('username', f"@{user_id}"))

        user_data['referral_points'] = user_data.get('referral_points', 0) + points
        user_data.setdefault('points_history', []).append({
            'action': 'earned',
            'points': points,
            'reason': '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
            'date': datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })

        save_payments_data(data)
        admin_message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} - `{user_id}` –Ω–∞—á–∏—Å–ª–µ–Ω–æ *{points_display} –±–∞–ª–ª–æ–≤*!"
        user_message = f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º *{points_display} –±–∞–ª–ª–æ–≤*!"
        bot.send_message(message.chat.id, admin_message, parse_mode="Markdown")
        bot.send_message(user_id, user_message, parse_mode="Markdown")
        manage_points(message)
    except ValueError as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_add_points_amount, user_id)

# --------------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–õ–ê–ú–ò (–ø—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–ª–æ–≤) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–ª–æ–≤' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_points(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–ª–æ–≤'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–ª–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, process_view_points)

@text_only_handler
def process_view_points(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏":
        manage_points(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    user_id = None

    users_data = load_users()
    if user_input.isdigit():
        if len(user_input) >= 5:
            user_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(users_data):
                user_id = list(users_data.keys())[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:]  
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@') 
            if db_username.lower() == username.lower():  
                user_id = uid
                break

    if not user_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_view_points)
        return

    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(str(user_id), {})
    points = user_data.get('referral_points', 0)
    username = users_data.get(str(user_id), {}).get('username', f"@{user_id}")

    history = user_data.get('points_history', [])
    total_earned = sum(entry['points'] for entry in history if entry['action'] == 'earned')
    total_spent = sum(entry['points'] for entry in history if entry['action'] == 'spent')

    earned_daily = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'] == '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥')
    earned_admin = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'].startswith('–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'))
    earned_gifts = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'].startswith('–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç'))
    earned_first_purchase = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'].startswith('–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏'))
    earned_points_purchase = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'].startswith('–ü–æ–∫—É–ø–∫–∞') and '–±–∞–ª–ª–æ–≤' in entry['reason'])
    earned_referrals = sum(entry['points'] for entry in history if entry['action'] == 'earned' and '–†–µ—Ñ–µ—Ä–∞–ª' in entry['reason'])
    earned_top_referrals = sum(entry['points'] for entry in history if entry['action'] == 'earned' and '–¢–æ–ø-10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤' in entry['reason'])
    earned_purchases = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'].startswith('–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏'))

    spent_gifts = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'].lower().startswith('–ø–æ–¥–∞—Ä–æ–∫'))
    spent_time = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'].startswith('–û–±–º–µ–Ω –Ω–∞') and any(unit in entry['reason'] for unit in ['–¥–Ω.', '—á.', '–º–∏–Ω.']))
    spent_discounts = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'].startswith('–û–±–º–µ–Ω –Ω–∞') and '%' in entry['reason'])
    spent_features = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'].startswith('–û–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é'))
    spent_admin_delete = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'] == '—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
    spent_admin = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'].lower() == '—Å–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')

    gifted_time_minutes = 0
    received_time_minutes = 0
    for entry in history:
        time_str = None
        if entry['reason'].startswith('–û–±–º–µ–Ω –Ω–∞') and any(unit in entry['reason'] for unit in ['–¥–Ω.', '—á.', '–º–∏–Ω.']):
            time_str = entry['reason'].split('–û–±–º–µ–Ω –Ω–∞ ')[1]
        elif entry['reason'].lower().startswith('–ø–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏') and any(unit in entry['reason'] for unit in ['–¥–Ω.', '—á.', '–º–∏–Ω.', '–º–∏–Ω—É—Ç']):
            time_str = entry['reason'].split(': ')[1]
        
        if time_str:
            days = hours = minutes = 0
            if '–¥–Ω.' in time_str:
                days_match = re.search(r'(\d+\.?\d*)\s*–¥–Ω\.', time_str)
                if days_match:
                    days = float(days_match.group(1))
            if '—á.' in time_str:
                hours_match = re.search(r'(\d+\.?\d*)\s*—á\.', time_str)
                if hours_match:
                    hours = float(hours_match.group(1))
            if '–º–∏–Ω.' in time_str or '–º–∏–Ω—É—Ç' in time_str:
                minutes_match = re.search(r'(\d+\.?\d*)\s*(–º–∏–Ω\.|–º–∏–Ω—É—Ç)', time_str)
                if minutes_match:
                    minutes = float(minutes_match.group(1))
            total_minutes = days * 24 * 60 + hours * 60 + minutes
            if entry['action'] == 'spent':
                gifted_time_minutes += total_minutes
            elif entry['action'] == 'earned':
                received_time_minutes += total_minutes

    points_summary = (
        f"üí∞ *–ë–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* {username} - `{str(user_id)}`:\n\n"
        f"üéÅ *–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã:* {format_number(points)}\n\n"
        f"üî• *–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* {format_number(total_earned)}\n"
        f"  ‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥: {format_number(earned_daily)}\n"
        f"  ‚Ä¢ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {format_number(earned_admin)}\n"
        f"  ‚Ä¢ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –¥—Ä—É–≥–∏—Ö: {format_number(earned_gifts)}\n"
        f"  ‚Ä¢ –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {format_number(earned_first_purchase)}\n"
        f"  ‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –±–∞–ª–ª–æ–≤: {format_number(earned_points_purchase)}\n"
        f"  ‚Ä¢ –ó–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {format_number(earned_referrals)}\n"
        f"  ‚Ä¢ –ó–∞ —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {format_number(earned_top_referrals)}\n"
        f"  ‚Ä¢ –ó–∞ –ø–æ–∫—É–ø–∫–∏: {format_number(earned_purchases)}\n\n"
        f"üí∏ *–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:* {format_number(total_spent)}\n"
        f"  ‚Ä¢ –ü–æ–¥–∞—Ä–æ–∫ –¥—Ä—É–≥–∏–º: {format_number(spent_gifts)}\n"
        f"  ‚Ä¢ –û–±–º–µ–Ω –Ω–∞ –≤—Ä–µ–º—è: {format_number(spent_time)}\n"
        f"  ‚Ä¢ –û–±–º–µ–Ω –Ω–∞ —Å–∫–∏–¥–∫–∏: {format_number(spent_discounts)}\n"
        f"  ‚Ä¢ –û–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏: {format_number(spent_features)}\n"
        f"  ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {format_number(spent_admin_delete)}\n"
        f"  ‚Ä¢ –°–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {format_number(spent_admin)}\n\n"
        f"‚è≥ *–ü–æ–¥–∞—Ä–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:* {format_time(gifted_time_minutes)}\n"
        f"‚è≥ *–ü–æ–ª—É—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:* {format_time(received_time_minutes)}"
    )

    message_parts = split_message(points_summary)
    for part in message_parts:
        bot.send_message(message.chat.id, part, parse_mode="Markdown")

    manage_points(message)

# --------------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–õ–ê–ú–ò (—Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def remove_points(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, process_remove_points)

@text_only_handler
def process_remove_points(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏":
        manage_points(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    user_id = None

    users_data = load_users()
    if user_input.isdigit():
        if len(user_input) >= 5:
            user_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(users_data):
                user_id = list(users_data.keys())[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:]  
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@')  
            if db_username.lower() == username.lower():  
                user_id = uid
                break

    if not user_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_remove_points)
        return

    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(str(user_id), {})
    points = user_data.get('referral_points', 0)
    if points == 0:
        bot.send_message(message.chat.id, "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è!", parse_mode="Markdown")
        manage_points(message)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_remove_points_amount, user_id)

@text_only_handler
def process_remove_points_amount(message, user_id):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏":
        manage_points(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    try:
        input_text = message.text.strip().replace(',', '.')
        points = float(input_text)
        if points <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")

        points_display = f"{int(float(points))}" if float(points).is_integer() else f"{float(points):.2f}"

        data = load_payment_data()
        user_data = data['subscriptions']['users'].get(str(user_id), {})
        current_points = user_data.get('referral_points', 0)
        if points > current_points:
            raise ValueError("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è!")

        users_data = load_users()
        username = users_data.get(str(user_id), {}).get('username', f"@{user_id}")
        if not username.startswith('@'):
            username = f"@{username}"

        user_data['referral_points'] = max(0, current_points - points)
        user_data.setdefault('points_history', []).append({
            'action': 'spent',
            'points': points,
            'reason': '—Å–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
            'date': datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })

        save_payments_data(data)
        admin_message = f"üö´ –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} - `{user_id}` —Å–ø–∏—Å–∞–Ω–æ *{points_display} –±–∞–ª–ª–æ–≤*!"
        user_message = f"üö´ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∞–ª *{points_display} –±–∞–ª–ª–æ–≤*!"
        bot.send_message(message.chat.id, admin_message, parse_mode="Markdown")
        bot.send_message(user_id, user_message, parse_mode="Markdown")
        manage_points(message)
    except ValueError as e:
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_remove_points_amount, user_id)

# ------------------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô_–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–õ–ê–ú–ò (–ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–ª–æ–≤) -------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–ª–æ–≤' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_points_history(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–ª–æ–≤'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    users_data = load_users()
    user_list = []
    for user_id, data in users_data.items():
        username = escape_markdown(data['username'])
        status = " - *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üö´" if data.get('blocked', False) else " - *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* ‚úÖ"
        user_list.append(f"‚Ññ{len(user_list) + 1}. {username} - `{user_id}`{status}")

    response_message = "üìã –°–ø–∏—Å–æ–∫ *–≤—Å–µ—Ö* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(user_list)
    if len(response_message) > 4096:
        bot.send_message(message.chat.id, "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
    else:
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π')
    markup.add('–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–ª–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, process_view_points_history)

@text_only_handler
def process_view_points_history(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏":
        manage_points(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π":
        manage_system(message)
        return
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    user_input = message.text.strip()
    user_id = None

    users_data = load_users()
    if user_input.isdigit():
        if len(user_input) >= 5:
            user_id = user_input
        else:
            idx = int(user_input)
            if 1 <= idx <= len(users_data):
                user_id = list(users_data.keys())[idx - 1]
    elif user_input.startswith('@'):
        username = user_input[1:] 
        for uid, data in users_data.items():
            db_username = data['username'].lstrip('@')  
            if db_username.lower() == username.lower():  
                user_id = uid
                break

    if not user_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_view_points_history)
        return

    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(str(user_id), {})
    history = user_data.get('points_history', [])
    if not history:
        bot.send_message(message.chat.id, "‚ùå –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–ª–∞–º–∏ –ø—É—Å—Ç–∞!", parse_mode="Markdown")
        manage_points(message)
        return

    username = users_data.get(str(user_id), {}).get('username', f"@{user_id}")
    if not username.startswith('@'):
        username = f"@{username}"

    def format_date(date_str):
        return re.sub(r'(\d{2}\.\d{2}\.\d{4} –≤ \d{2}:\d{2}):\d{2}', r'\1', date_str)

    history_summary = f"*–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* {escape_markdown(username)} - `{user_id}`:\n\n"
    for idx, entry in enumerate(history, 1):
        action = "–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ" if entry['action'] == 'earned' else "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ"
        points = format_number(entry['points'])
        date = format_date(entry['date'])
        reason = escape_markdown(entry['reason'].lower())
        history_summary += (
            f"üìù *‚Ññ{idx}. {action}:*\n\n"
            f"üí∞ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {points} –±–∞–ª–ª–æ–≤\n"
            f"üìÖ *–î–∞—Ç–∞:* {date}\n"
            f"üìã *–ü—Ä–∏—á–∏–Ω–∞:* {reason}\n\n"
        )

    message_parts = split_message(history_summary)
    for part in message_parts:
        bot.send_message(message.chat.id, part, parse_mode="Markdown")

    manage_points(message)