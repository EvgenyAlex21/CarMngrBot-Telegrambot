from core.imports import wraps, telebot, types, os, sys, json, re, threading
from core.bot_instance import bot, BASE_DIR
from handlers.admin.admin_main_menu import check_permission, show_admin_panel
from handlers.admin.utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha,
)

# -------------------------------------------------- –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê ----------------------------------------------

ADMIN_SESSIONS_FILE = os.path.join(BASE_DIR, 'data', 'admin', 'admin_user_payments', 'admin_sessions.json')

def load_admin_sessions():
    with open(ADMIN_SESSIONS_FILE, 'r', encoding='utf-8') as file:
        data = json.load(file)
    return data.get('admin_sessions', [])

def check_admin_access(message):
    admin_sessions = load_admin_sessions()
    if str(message.chat.id) in admin_sessions:
        return True
    else:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return False

@bot.message_handler(func=lambda message: message.text == '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞' and check_admin_access(message))
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_emergency_stop(message):
    emergency_stop(message)

@log_user_actions
def emergency_stop(message):
    admin_id = str(message.chat.id)
    if not check_permission(admin_id, '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞'):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å *–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞* –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", parse_mode="Markdown")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É", "–û—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    markup.add("–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞?", reply_markup=markup)
    bot.register_next_step_handler(message, confirm_emergency_stop)

def stop_bot_after_delay():
    threading.Timer(5.0, stop_bot).start()

def stop_bot():
    bot.stop_polling()
    os._exit(0) 
    
@log_user_actions
def confirm_emergency_stop(message):
    if message.text == "–í –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        show_admin_panel(message)
        return

    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É":
        bot.send_message(message.chat.id, "üõë –ë–æ—Ç –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        stop_bot_after_delay()
        show_admin_panel(message)
    elif message.text == "–û—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏":
        bot.send_message(message.chat.id, "‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
        show_admin_panel(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        bot.register_next_step_handler(message, confirm_emergency_stop)