from core.imports import wraps, telebot, types, os, json, re
from core.bot_instance import bot, BASE_DIR
from handlers.user.user_main_menu import return_to_menu
from ..utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha, check_function_state_decorator, track_usage, check_subscription
)

# --------------------------------------------------- –ö–û–î–´ OBD2 ---------------------------------------------------------

FILES_FOR_OBD2_DIR = os.path.join(BASE_DIR, "files", "files_for_obd2")

def load_error_codes():
    error_codes = {}
    try:
        with open(os.path.join(FILES_FOR_OBD2_DIR, "codes_obd2.txt"), "r", encoding="utf-8") as file:
            for line in file:
                parts = line.strip().split(" ", 1)
                if len(parts) == 2:
                    code, description = parts
                    error_codes[code] = description
    except FileNotFoundError:
        pass
    return error_codes

error_codes = load_error_codes()

@bot.message_handler(func=lambda message: message.text == "–ö–æ–¥—ã OBD2")
@check_function_state_decorator('–ö–æ–¥—ã OBD2')
@track_usage('–ö–æ–¥—ã OBD2')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def obd2_request(message, show_description=True):

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    help_text = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —á—Ç–µ–Ω–∏—é –∫–æ–¥–æ–≤ OBD2*\n\n"
        "üìå *–ü–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è:*\n"
        "*P* - –∫–æ–¥ —Å–≤—è–∑–∞–Ω —Å —Ä–∞–±–æ—Ç–æ–π –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏/–∏–ª–∏ –ê–ö–ü–ü\n"
        "*B* - –∫–æ–¥ —Å–≤—è–∑–∞–Ω —Å —Ä–∞–±–æ—Ç–æ–π \"–∫—É–∑–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º\" (–ø–æ–¥—É—à–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∑–∞–º–æ–∫, —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–µ–∫–ª–æ–ø–æ–¥—ä–µ–º–Ω–∏–∫–∏)\n"
        "*C* - –∫–æ–¥ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ —à–∞—Å—Å–∏ (—Ö–æ–¥–æ–≤–æ–π —á–∞—Å—Ç–∏)\n"
        "*U* - –∫–æ–¥ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º–∏ –±–ª–æ–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫ —à–∏–Ω–µ CAN)\n\n"
        "üìå *–í—Ç–æ—Ä–∞—è –ø–æ–∑–∏—Ü–∏—è:*\n"
        "*0* - –æ–±—â–∏–π –¥–ª—è OBD2 –∫–æ–¥\n"
        "*1 –∏ 2* - –∫–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è\n"
        "*3* - —Ä–µ–∑–µ—Ä–≤\n\n"
        "üìå *–¢—Ä–µ—Ç—å—è –ø–æ–∑–∏—Ü–∏—è* - —Ç–∏–ø –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏:\n"
        "*1* - —Ç–æ–ø–ª–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–ª–∏ –≤–æ–∑–¥—É—Ö–æ–ø–æ–¥–∞—á–∞\n"
        "*2* - —Ç–æ–ø–ª–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–ª–∏ –≤–æ–∑–¥—É—Ö–æ–ø–æ–¥–∞—á–∞\n"
        "*3* - —Å–∏—Å—Ç–µ–º–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è\n"
        "*4* - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å\n"
        "*5* - —Ö–æ–ª–æ—Å—Ç–æ–π —Ö–æ–¥\n"
        "*6* - ECU –∏–ª–∏ –µ–≥–æ —Ü–µ–ø–∏\n"
        "*7* - —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è\n"
        "*8* - —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è\n\n"
        "üìå *–ß–µ—Ç–≤–µ—Ä—Ç–∞—è –∏ –ø—è—Ç–∞—è –ø–æ–∑–∏—Ü–∏–∏* - –ø–æ—Ä—è–¥–∫–æ–≤—ã–π *–Ω–æ–º–µ—Ä* –æ—à–∏–±–∫–∏\n\n"
    )

    if show_description:
        bot.send_message(message.chat.id, help_text, parse_mode="Markdown")

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥—ã –æ—à–∏–±–æ–∫ OBD2:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_error_codes)

@text_only_handler
def process_error_codes(message):

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    codes = [code.strip().upper() for code in message.text.split(",")]
    response = ""

    code_pattern = re.compile(r'^[PBCU][0-3]\d{3}$')

    valid_codes = []
    invalid_codes = []

    for code in codes:
        if code_pattern.match(code):
            valid_codes.append(code)
        else:
            invalid_codes.append(code)

    for code in valid_codes:
        if code in error_codes:
            response += f"üîß *–ö–æ–¥ –æ—à–∏–±–∫–∏*: `{code}`\nüìã *–û–ø–∏—Å–∞–Ω–∏–µ*: {error_codes[code]}\n\n"
        else:
            response += f"üîß *–ö–æ–¥ –æ—à–∏–±–∫–∏*: `{code}`\n‚ùå *–û–ø–∏—Å–∞–Ω–∏–µ*: –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"

    for code in invalid_codes:
        response += f"üîß *–ö–æ–¥ –æ—à–∏–±–∫–∏*: `{code}`\n‚ùå *–û–ø–∏—Å–∞–Ω–∏–µ*: –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"

    bot.send_message(message.chat.id, response, parse_mode="Markdown")

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–¥—ã –æ—à–∏–±–æ–∫ OBD2 —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_error_codes)