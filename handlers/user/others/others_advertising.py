from core.imports import wraps, telebot, types, os, json, re, datetime, timedelta, time, threading, ApiTelegramException
from core.bot_instance import bot, BASE_DIR
from decorators.blocked_user import load_blocked_users, save_blocked_users
from handlers.admin.advertisement.advertisement import advertisements, temp_advertisement, save_advertisements, validate_date_format, validate_future_date, validate_time_format, validate_future_time
from .others_main import view_others
from ..user_main_menu import return_to_menu
from ..utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha, check_function_state_decorator, track_usage, check_subscription
)

# --------------------------------------------- –ü–†–û–ß–ï–ï (–¥–ª—è —Ä–µ–∫–ª–∞–º—ã) -----------------------------------------------

blocked_users = load_blocked_users()

@bot.message_handler(func=lambda message: message.text == "–î–ª—è —Ä–µ–∫–ª–∞–º—ã")
@check_function_state_decorator('–î–ª—è —Ä–µ–∫–ª–∞–º—ã')
@track_usage('–î–ª—è —Ä–µ–∫–ª–∞–º—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_add_menu(message, show_description=True):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É', '–í–∞—à–∏ –∑–∞—è–≤–∫–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–µ–∫–ª–∞–º–µ*\n\n"
        "üìå *–ó–∞—è–≤–∫–∞:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–∫–ª–∞–º—É –≤ –±–æ—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ, –≥–¥–µ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è\n\n"
        "üìå *–í–∞—à–∏ –∑–∞—è–≤–∫–∏:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–∫–ª–∞–º—É, –∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, —Ç–æ –∏ –æ—Ç–æ–∑–≤–∞—Ç—å\n\n"
        "üìå *–û–ø–ª–∞—Ç–∞ –∏ –≤–æ–ø—Ä–æ—Å—ã:*\n"
        "–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–∫–ª–∞–º—É –∏ –æ–ø–ª–∞—Ç—É –ø—Ä–∏–Ω–∏–º–∞–µ—Ç *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫)* - [@x_evgenyalex_x](https://t.me/x_evgenyalex_x). –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–µ–º—É!\n\n"
    )

    if show_description:
        bot.send_message(message.chat.id, description, parse_mode="Markdown")

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–µ–∫–ª–∞–º–æ–π:", reply_markup=markup)

# --------------------------------------------- –ü–†–û–ß–ï–ï (–∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É) -----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É')
@check_function_state_decorator('–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É')
@track_usage('–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_advertisement_request(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Ä–µ–∫–ª–∞–º—ã –∏ –∫—Ä–∞—Ç–∫–æ –æ —á–µ–º –æ–Ω–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, set_advertisement_theme)

@text_only_handler
def set_advertisement_theme(message):

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()
        view_add_menu(message, show_description=False)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        temp_advertisement.clear()
        view_others(message)
        return

    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()
        return_to_menu(message)
        return

    advertisement_theme = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É:")
    bot.register_next_step_handler(message, set_advertisement_date, advertisement_theme)

@text_only_handler
def set_advertisement_date(message, advertisement_theme):

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()
        view_add_menu(message, show_description=False)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        temp_advertisement.clear()
        view_others(message)
        return

    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()
        return_to_menu(message)
        return

    expected_date = message.text
    if expected_date is None or not validate_date_format(expected_date):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, set_advertisement_date, advertisement_theme)
        return

    if not validate_future_date(expected_date):
        bot.send_message(message.chat.id, "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É")
        bot.register_next_step_handler(message, set_advertisement_date, advertisement_theme)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É:")
    bot.register_next_step_handler(message, set_advertisement_time, advertisement_theme, expected_date)

@text_only_handler
def set_advertisement_time(message, advertisement_theme, expected_date):

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()
        view_add_menu(message, show_description=False)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        temp_advertisement.clear()
        view_others(message)
        return

    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()
        return_to_menu(message)
        return

    expected_time = message.text
    if not validate_time_format(expected_time):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        bot.register_next_step_handler(message, set_advertisement_time, advertisement_theme, expected_date)
        return

    if not validate_future_time(expected_date, expected_time):
        bot.send_message(message.chat.id, "–í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
        bot.register_next_step_handler(message, set_advertisement_time, advertisement_theme, expected_date)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–∫–ª–∞–º—ã:")
    bot.register_next_step_handler(message, set_advertisement_end_date, advertisement_theme, expected_date, expected_time)

@text_only_handler
def set_advertisement_end_date(message, advertisement_theme, expected_date, expected_time):
    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()
        return_to_menu(message)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        temp_advertisement.clear()
        view_others(message)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()
        view_add_menu(message, show_description=False)
        return

    end_date = message.text
    if not validate_date_format(end_date):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, set_advertisement_end_date, advertisement_theme, expected_date, expected_time)
        return

    if not validate_future_date(end_date):
        bot.send_message(message.chat.id, "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É")
        bot.register_next_step_handler(message, set_advertisement_end_date, advertisement_theme, expected_date, expected_time)
        return

    start_datetime = datetime.strptime(f"{expected_date} {expected_time}", "%d.%m.%Y %H:%M")
    end_datetime = datetime.strptime(f"{end_date} 23:59", "%d.%m.%Y %H:%M")  
    if end_datetime.date() < start_datetime.date():
        bot.send_message(message.chat.id, "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É")
        bot.register_next_step_handler(message, set_advertisement_end_date, advertisement_theme, expected_date, expected_time)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–∫–ª–∞–º—ã:")
    bot.register_next_step_handler(message, set_advertisement_end_time, advertisement_theme, expected_date, expected_time, end_date)

@text_only_handler
def set_advertisement_end_time(message, advertisement_theme, expected_date, expected_time, end_date):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()
        view_add_menu(message, show_description=False)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        temp_advertisement.clear()
        view_others(message)
        return

    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()
        return_to_menu(message)
        return

    end_time = message.text
    if not validate_time_format(end_time):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        bot.register_next_step_handler(message, set_advertisement_end_time, advertisement_theme, expected_date, expected_time, end_date)
        return

    start_datetime = datetime.strptime(f"{expected_date} {expected_time}", "%d.%m.%Y %H:%M")
    end_datetime = datetime.strptime(f"{end_date} {end_time}", "%d.%m.%Y %H:%M")
    if end_datetime <= start_datetime:
        bot.send_message(message.chat.id, "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
        bot.register_next_step_handler(message, set_advertisement_end_time, advertisement_theme, expected_date, expected_time, end_date)
        return

    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã:")
    bot.register_next_step_handler(message, collect_advertisement_text, advertisement_theme, expected_date, expected_time, end_date, end_time)

@text_only_handler
def collect_advertisement_text(message, advertisement_theme, expected_date, expected_time, end_date, end_time):

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()
        view_add_menu(message, show_description=False)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        temp_advertisement.clear()
        view_others(message)
        return

    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return_to_menu(message)
        return

    temp_advertisement['text'] = message.text
    temp_advertisement['chat_id'] = message.chat.id

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å):", reply_markup=markup)
    bot.register_next_step_handler(message, collect_advertisement_media, advertisement_theme, expected_date, expected_time, end_date, end_time)

def collect_advertisement_media(message, advertisement_theme, expected_date, expected_time, end_date, end_time):

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()
        view_add_menu(message, show_description=False)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        temp_advertisement.clear()
        view_others(message)
        return

    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()
        return_to_menu(message)
        return

    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã":
        temp_advertisement['files'] = []
        save_advertisement_request(message, advertisement_theme, expected_date, expected_time, end_date, end_time)
        return

    content_type = message.content_type
    file_id = None

    if content_type == 'photo':
        file_id = message.photo[-1].file_id
    elif content_type == 'video':
        file_id = message.video.file_id
    elif content_type == 'document':
        file_id = message.document.file_id
    elif content_type == 'animation':
        file_id = message.animation.file_id
    elif content_type == 'sticker':
        file_id = message.sticker.file_id
    elif content_type == 'audio':
        file_id = message.audio.file_id
    elif content_type == 'voice':
        file_id = message.voice.file_id
    elif content_type == 'video_note':
        file_id = message.video_note.file_id

    if file_id:
        if 'files' not in temp_advertisement:
            temp_advertisement['files'] = []
        temp_advertisement['files'].append({
            'type': content_type,
            'file_id': file_id,
            'caption': temp_advertisement.get('text', '')
        })

        if len(temp_advertisement['files']) >= 10:
            save_advertisement_request(message, advertisement_theme, expected_date, expected_time, end_date, end_time)
            return

        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(message.chat.id, "–ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_advertisement_media_options, advertisement_theme, expected_date, expected_time, end_date, end_time)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª!")
        bot.register_next_step_handler(message, collect_advertisement_media, advertisement_theme, expected_date, expected_time, end_date, end_time)

def handle_advertisement_media_options(message, advertisement_theme, expected_date, expected_time, end_date, end_time):

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã':
        temp_advertisement.clear()
        view_add_menu(message, show_description=False)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        temp_advertisement.clear()
        view_others(message)
        return

    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        temp_advertisement.clear()
        return_to_menu(message)
        return

    if message.text == "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ":
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–∞–π–ª:", reply_markup=markup)
        bot.register_next_step_handler(message, collect_advertisement_media, advertisement_theme, expected_date, expected_time, end_date, end_time)
    elif message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É":
        save_advertisement_request(message, advertisement_theme, expected_date, expected_time, end_date, end_time)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!")
        bot.register_next_step_handler(message, handle_advertisement_media_options, advertisement_theme, expected_date, expected_time, end_date, end_time)

def save_advertisement_request(message, advertisement_theme, expected_date, expected_time, end_date, end_time):
    user_id = message.chat.id
    username = message.from_user.username
    advertisement_id = str(len(advertisements['advertisements']) + 1)
    advertisements['advertisements'][advertisement_id] = {
        'user_id': user_id,
        'username': username,
        'theme': advertisement_theme,
        'expected_date': expected_date,
        'expected_time': expected_time,
        'end_date': end_date,
        'end_time': end_time,
        'text': temp_advertisement['text'],
        'files': temp_advertisement['files'],
        'status': 'pending',
        'user_ids': [],
        'message_ids': []
    }

    save_advertisements()
    bot.send_message(message.chat.id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")

    try:
        with open(os.path.join(BASE_DIR, 'data', 'admin', 'admin_user_payments', 'admin_sessions.json'), 'r', encoding='utf-8') as file:
            admin_data = json.load(file)
            admin_ids = admin_data.get('admin_sessions', [])
    except (FileNotFoundError, json.JSONDecodeError):
        admin_ids = []

    for admin_id in admin_ids:
        try:
            bot.send_message(admin_id, f"‚ö†Ô∏è –£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}` –ø–æ —Ç–µ–º–µ *{advertisement_theme.lower()}* –Ω–∞ {expected_date} –≤ {expected_time} –¥–æ {end_date} –≤ {end_time}!", parse_mode="Markdown")
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                if admin_id not in blocked_users:
                    blocked_users.append(admin_id)
                    save_blocked_users(blocked_users)
            else:
                raise e

    temp_advertisement.clear()
    view_others(message)

def schedule_advertisement_deletion(advertisement_id, end_date, end_time):
    try:
        end_datetime = datetime.strptime(f"{end_date} {end_time}", "%d.%m.%Y %H:%M")
        delay = (end_datetime - datetime.now()).total_seconds()
        if delay > 0:
            threading.Timer(delay, delete_advertisement_messages, [advertisement_id]).start()
        else:
            delete_advertisement_messages(advertisement_id)
    except ValueError as e:
        pass

def delete_advertisement_messages(advertisement_id):
    if advertisement_id not in advertisements['advertisements']:
        return

    advertisement = advertisements['advertisements'][advertisement_id]
    user_ids = advertisement['user_ids']
    message_ids = advertisement['message_ids']

    if len(user_ids) != len(message_ids):
        pass
    
    for user_id, message_id in zip(user_ids, message_ids):
        try:
            bot.delete_message(user_id, message_id)
        except ApiTelegramException as e:
            if e.result_json['error_code'] == 400 and 'message to delete not found' in e.result_json['description']:
                pass
            elif e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                if user_id not in blocked_users:
                    blocked_users.append(user_id)
                    save_blocked_users(blocked_users)
            else:
                pass

    del advertisements['advertisements'][advertisement_id]
    save_advertisements()

# --------------------------------------------- –ü–†–û–ß–ï–ï (–≤–∞—à–∏ –∑–∞—è–≤–∫–∏) -----------------------------------------------

@bot.message_handler(func=lambda message: message.text == '–í–∞—à–∏ –∑–∞—è–≤–∫–∏')
@check_function_state_decorator('–í–∞—à–∏ –∑–∞—è–≤–∫–∏')
@track_usage('–í–∞—à–∏ –∑–∞—è–≤–∫–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_user_advertisement_requests(message):
    user_id = message.chat.id
    user_advertisements = [adv for adv in advertisements['advertisements'].values() if adv['user_id'] == user_id]

    status_translation = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'accepted': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞',
        'sent': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
    }

    if user_advertisements:
        advertisement_list = [
            f"‚≠ê ‚Ññ{i + 1}\n\n"
            f"üìù *–¢–µ–º–∞*: {adv['theme'].lower()}\n"
            f"üìÖ *–ù–∞—á–∞–ª–æ*: {adv['expected_date']} –≤ {adv['expected_time']}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü*: {adv.get('end_date', 'N/A')} –≤ {adv.get('end_time', 'N/A')}\n"
            f"üìç *–°—Ç–∞—Ç—É—Å*: {status_translation.get(adv['status'], '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
            for i, adv in enumerate(user_advertisements)
        ]
        full_message = "*–í–∞—à–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–∫–ª–∞–º—É*:\n\n" + "\n\n".join(advertisement_list)

        max_length = 4096
        if len(full_message) > max_length:
            parts = [full_message[i:i + max_length] for i in range(0, len(full_message), max_length)]
            for part in parts:
                bot.send_message(message.chat.id, part, parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, full_message, parse_mode="Markdown")

        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, show_user_advertisement_request_details)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–∫–ª–∞–º—É!", parse_mode="Markdown")

@text_only_handler
def show_user_advertisement_request_details(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã":
        view_add_menu(message, show_description=False)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        view_others(message)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    status_translation = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'accepted': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞',
        'sent': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
    }

    try:
        index = int(message.text) - 1
        user_id = message.chat.id
        user_advertisements = [adv for adv in advertisements['advertisements'].values() if adv['user_id'] == user_id]

        if 0 <= index < len(user_advertisements):
            advertisement = user_advertisements[index]
            text = advertisement['text']

            info_message = (
                f"‚≠ê *–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∫–ª–∞–º–µ*:\n\n"
                f"üìù *–¢–µ–º–∞*: {advertisement['theme'].lower()}\n"
                f"üìÖ *–ù–∞—á–∞–ª–æ*: {advertisement['expected_date']} –≤ {advertisement['expected_time']}\n"
                f"‚åõ *–ö–æ–Ω–µ—Ü*: {advertisement.get('end_date', 'N/A')} –≤ {advertisement.get('end_time', 'N/A')}\n"
                f"üìç *–°—Ç–∞—Ç—É—Å*: {status_translation.get(advertisement['status'], '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n\n"
            )

            bot.send_message(message.chat.id, info_message, parse_mode="Markdown")

            if text and text != 'None':
                message_text = f"üìù –¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã üìù\n\n{text}"
            else:
                message_text = ""

            if 'files' in advertisement and advertisement['files']:
                media_group = []
                first_file = True
                for file in advertisement['files']:
                    if first_file:
                        caption = message_text
                    else:
                        caption = None
                    if file['type'] == 'photo':
                        media_group.append(telebot.types.InputMediaPhoto(file['file_id'], caption=caption))
                    elif file['type'] == 'video':
                        media_group.append(telebot.types.InputMediaVideo(file['file_id'], caption=caption))
                    elif file['type'] == 'document':
                        media_group.append(telebot.types.InputMediaDocument(file['file_id'], caption=caption))
                    elif file['type'] == 'animation':
                        media_group.append(telebot.types.InputMediaAnimation(file['file_id'], caption=caption))
                    elif file['type'] == 'sticker':
                        bot.send_sticker(message.chat.id, file['file_id'])
                    elif file['type'] == 'audio':
                        media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
                    elif file['type'] == 'voice':
                        media_group.append(telebot.types.InputMediaAudio(file['file_id'], caption=caption))
                    elif file['type'] == 'video_note':
                        bot.send_video_note(message.chat.id, file['file_id'])
                    first_file = False

                if media_group:
                    bot.send_media_group(message.chat.id, media_group)
            else:
                if message_text:
                    bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

            markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            if advertisement['status'] == 'pending':
                markup.add('–û—Ç–æ–∑–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
            bot.register_next_step_handler(message, handle_user_advertisement_request_action, index)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            show_user_advertisement_requests(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏!")
        show_user_advertisement_requests(message)

@text_only_handler
def handle_user_advertisement_request_action(message, index):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã":
        view_add_menu(message, show_description=False)
        return

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—á–µ–µ':
        view_others(message)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    user_id = message.chat.id
    user_advertisements = [adv for adv in advertisements['advertisements'].values() if adv['user_id'] == user_id]
    advertisement_id = list(advertisements['advertisements'].keys())[list(advertisements['advertisements'].values()).index(user_advertisements[index])]
    advertisement = user_advertisements[index]

    if message.text == '–û—Ç–æ–∑–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É':
        if advertisement['status'] != 'pending':
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –†–µ–∫–ª–∞–º–∞ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–æ–∑–≤–∞–Ω–∞!")
            show_user_advertisement_requests(message)
            return

        del advertisements['advertisements'][advertisement_id]
        save_advertisements()
        bot.send_message(message.chat.id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω–∞!")

        with open(os.path.join(BASE_DIR, 'data', 'admin', 'admin_user_payments', 'admin_sessions.json'), 'r', encoding='utf-8') as file:
            admin_data = json.load(file)
            admin_ids = admin_data.get('admin_sessions', [])

        for admin_id in admin_ids:
            try:
                bot.send_message(admin_id, f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}` –ø–æ —Ç–µ–º–µ *{advertisement['theme'].lower()}* –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞!", parse_mode="Markdown")
            except ApiTelegramException as e:
                if e.result_json['error_code'] == 403 and 'bot was blocked by the user' in e.result_json['description']:
                    if admin_id not in blocked_users:
                        blocked_users.append(admin_id)
                        save_blocked_users(blocked_users)
                else:
                    raise e

        view_others(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        show_user_advertisement_request_details(message)