from core.imports import wraps, telebot, types, os, json, re, pytz, datetime, timedelta, ReplyKeyboardMarkup, ReplyKeyboardRemove
from core.bot_instance import bot
from handlers.user.subscription.subscription_main import payments_function
from handlers.user.utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha, check_function_state_decorator, track_usage
)

def return_to_menu(message):
    from handlers.user.user_main_menu import return_to_menu as _f
    return _f(message)

def load_payment_data():
    from handlers.user.user_main_menu import load_payment_data as _f
    return _f()

def save_payments_data(data):
    from handlers.user.user_main_menu import save_payments_data as _f
    return _f(data)

def load_users_data():
    from handlers.user.user_main_menu import load_users_data as _f
    return _f()

def return_to_scores_menu(message):
    from handlers.user.subscription.points import points_menu as _f
    return _f(message)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–ø–æ–¥–∞—Ä–∫–∏) -----------------------------------------

def escape_markdown(text):
    return re.sub(r'([*_`])', r'\\\1', text)

def split_message(message, max_length=4000):
    if len(message) <= max_length:
        return [message]
    
    parts = []
    current_part = ""
    
    for line in message.split('\n'):
        if len(current_part) + len(line) + 1 > max_length:
            parts.append(current_part)
            current_part = line + '\n'
        else:
            current_part += line + '\n'
    
    if current_part:
        parts.append(current_part)
    
    return parts

def format_number(number):
    try:
        n = float(number)
    except (TypeError, ValueError):
        return str(number)
    if n.is_integer():
        return str(int(n))
    return f"{n:.2f}"

def format_time(minutes):
    if isinstance(minutes, str):
        try:
            minutes = float(minutes.split()[0].replace(',', '.'))
        except (ValueError, IndexError):
            return minutes
    if minutes < 60:
        return f"{format_number(minutes)} –º–∏–Ω."
    days = minutes // 1440
    hours = (minutes % 1440) // 60
    mins = minutes % 60
    parts = []
    if days:
        parts.append(f"{format_number(days)} –¥–Ω.")
    if hours:
        parts.append(f"{format_number(hours)} —á.")
    if mins:
        parts.append(f"{format_number(mins)} –º–∏–Ω.")
    return " ".join(parts)

def clean_escaped_text(text):
    return re.sub(r'\\([_*[\]()~`>#+\-=|{}.!])', r'\1', text)

def pluralize_points(points):
    if isinstance(points, str):
        try:
            points = float(points)
        except ValueError:
            return "–±–∞–ª–ª–æ–≤"
    points = int(points)
    if points % 10 == 1 and points % 100 != 11:
        return "–±–∞–ª–ª"
    elif 2 <= points % 10 <= 4 and (points % 100 < 10 or points % 100 >= 20):
        return "–±–∞–ª–ª–∞"
    else:
        return "–±–∞–ª–ª–æ–≤"

@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–∞—Ä–∫–∏")
@check_function_state_decorator('–ü–æ–¥–∞—Ä–∫–∏')
@track_usage('–ü–æ–¥–∞—Ä–∫–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def gifts_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ü–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã', '–ü–æ–¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è', '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –ø–æ–¥–∞—Ä–∫–æ–≤:", reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏")
@check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏')
@track_usage('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def return_to_gifts_menu(message):
    gifts_menu(message)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–ø–æ–¥–∞—Ä–∫–∏) -----------------------------------------

def format_number(number):
    try:
        n = float(number)
    except (TypeError, ValueError):
        return str(number)
    if n.is_integer():
        return str(int(n))
    return f"{n:.2f}"

def format_time(minutes):
    if isinstance(minutes, str):
        try:
            minutes = float(minutes.split()[0].replace(',', '.'))
        except (ValueError, IndexError):
            return minutes
    if minutes < 60:
        return f"{format_number(minutes)} –º–∏–Ω."
    days = minutes // 1440
    hours = (minutes % 1440) // 60
    mins = minutes % 60
    parts = []
    if days:
        parts.append(f"{format_number(days)} –¥–Ω.")
    if hours:
        parts.append(f"{format_number(hours)} —á.")
    if mins:
        parts.append(f"{format_number(mins)} –º–∏–Ω.")
    return " ".join(parts)

def clean_escaped_text(text):
    return re.sub(r'\\([_*[\]()~`>#+\-=|{}.!])', r'\1', text)

def pluralize_points(points):
    if isinstance(points, str):
        try:
            points = float(points)
        except ValueError:
            return "–±–∞–ª–ª–æ–≤"
    points = int(points)
    if points % 10 == 1 and points % 100 != 11:
        return "–±–∞–ª–ª"
    elif 2 <= points % 10 <= 4 and (points % 100 < 10 or points % 100 >= 20):
        return "–±–∞–ª–ª–∞"
    else:
        return "–±–∞–ª–ª–æ–≤"

@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–∞—Ä–∫–∏")
@check_function_state_decorator('–ü–æ–¥–∞—Ä–∫–∏')
@track_usage('–ü–æ–¥–∞—Ä–∫–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def gifts_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ü–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã', '–ü–æ–¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è', '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –ø–æ–¥–∞—Ä–∫–æ–≤:", reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏")
@check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏')
@track_usage('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def return_to_gifts_menu(message):
    gifts_menu(message)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–ø–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã")
@check_function_state_decorator('–ü–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã')
@track_usage('–ü–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def gift_points_handler(message):
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(user_id, {})
    points = user_data.get('referral_points', 0)
    
    last_gift_time = next(
        (entry['date'] for entry in reversed(user_data.get('points_history', []))
         if entry['action'] == "spent" and "–ø–æ–¥–∞—Ä–æ–∫ @" in entry['reason'].lower() and "–≤—Ä–µ–º–µ–Ω–∏" not in entry['reason'].lower()),
        "01.01.2025 –≤ 00:00"
    )
    last_gift_dt = datetime.strptime(last_gift_time, "%d.%m.%Y –≤ %H:%M")
    if (datetime.now() - last_gift_dt).total_seconds() < 24 * 3600:
        remaining_time = timedelta(seconds=24 * 3600 - (datetime.now() - last_gift_dt).total_seconds())
        hours_left = remaining_time.seconds // 3600
        minutes_left = (remaining_time.seconds % 3600) // 60
        bot.send_message(message.chat.id, (
            f"‚ö†Ô∏è –í—ã —É–∂–µ –¥–∞—Ä–∏–ª–∏ –±–∞–ª–ª—ã —Å–µ–≥–æ–¥–Ω—è!\n"
            f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –ø–æ–¥–∞—Ä–æ–∫ –±–∞–ª–ª–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {hours_left} —á. {minutes_left} –º–∏–Ω."
        ), parse_mode="Markdown")
        return_to_scores_menu(message)
        return
    
    if points < 0.5:
        bot.send_message(message.chat.id, (
            f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞!\n\n"
            f"üí∞ *–î–æ—Å—Ç—É–ø–Ω–æ –±–∞–ª–ª–æ–≤:* {format_number(points)}\n"
            f"üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∫–æ–ø–∏—Ç–µ –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        ), parse_mode="Markdown")
        return_to_scores_menu(message)
        return
    
    referrals = list(set(data['referrals']['stats'].get(user_id, [])))
    if referrals:
        referral_message = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:*\n\n"
        for idx, referral_id in enumerate(referrals, 1):
            referral_username = data['subscriptions']['users'].get(referral_id, {}).get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            escaped_username = escape_markdown(referral_username)
            referral_message += f"üë§ ‚Ññ{idx}. {escaped_username} - `{referral_id}`\n"
        bot.send_message(message.chat.id, referral_message, parse_mode="Markdown")
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    bot.send_message(message.chat.id, (
        f"*–ü–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã:*\n\n"
        f"üí∞ *–í–∞—à–∏ –±–∞–ª–ª—ã:* {format_number(points)}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞), –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã:"
    ), reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, user_process_gift_recipient, points)

@text_only_handler
def user_process_gift_recipient(message, sender_points):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã":
        return_to_scores_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏":
        return_to_gifts_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(user_id, {})
    sender_username = escape_markdown(user_data.get('username', f"@{user_id}"))
    recipient_input = message.text.strip()
    
    recipient_id = None
    if recipient_input.startswith('@'):
        recipient_id = next((uid for uid, data_user in data['subscriptions']['users'].items() 
                            if data_user.get('username', '').lower() == recipient_input.lower()), None)
    elif recipient_input.isdigit():
        if recipient_input in data['subscriptions']['users']:
            recipient_id = recipient_input
    
    if not recipient_id:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, (
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ username –∏–ª–∏ id\n\n"
            "–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, user_process_gift_recipient, sender_points)
        return
    
    if recipient_id == user_id:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, (
            "‚ùå –ù–µ–ª—å–∑—è –ø–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã —Å–∞–º–æ–º—É —Å–µ–±–µ!\n\n"
            "üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, user_process_gift_recipient, sender_points)
        return
    
    users_data = load_users_data()
    join_date_str = users_data.get(recipient_id, {}).get('join_date', "01.01.2025 –≤ 00:00")
    join_date = datetime.strptime(join_date_str, "%d.%m.%Y –≤ %H:%M")
    if (datetime.now() - join_date).total_seconds() < 24 * 3600:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, (
            "‚ùå –ù–µ–ª—å–∑—è –¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥!\n"
            "üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, user_process_gift_recipient, sender_points)
        return
    
    recipient_username = escape_markdown(data['subscriptions']['users'][recipient_id].get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    bot.send_message(message.chat.id, (
        f"üéÅ *–ü–æ–¥–∞—Ä–æ–∫ –±–∞–ª–ª–æ–≤*\n\n"
        f"üì§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {sender_username} (`{user_id}`)\n"
        f"üì• *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {recipient_username} (`{recipient_id}`)\n\n"
        f"üí∞ *–î–æ—Å—Ç—É–ø–Ω–æ –±–∞–ª–ª–æ–≤:* {format_number(sender_points)}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:"
    ), reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_gift_amount, recipient_id, sender_points)

@text_only_handler
def process_gift_amount(message, recipient_id, sender_points):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã":
        return_to_scores_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏":
        return_to_gifts_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(user_id, {})
    sender_username = escape_markdown(user_data.get('username', f"@{user_id}"))
    
    try:
        gift_points = float(message.text.replace(',', '.'))
        if gift_points < 0.5:
            raise ValueError("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ ‚Äî 0.5!")
        if gift_points > sender_points:
            raise ValueError(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!\nüí∞ *–î–æ—Å—Ç—É–ø–Ω–æ –±–∞–ª–ª–æ–≤:* {format_number(sender_points)}")
        if gift_points % 0.5 != 0:
            raise ValueError("‚ö†Ô∏è –ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã 0.5!")
        
        sender_username_raw = user_data.get('username', f"@{user_id}")
        recipient_username = data['subscriptions']['users'][recipient_id].get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        
        data['subscriptions']['users'][user_id]['referral_points'] -= gift_points
        data['subscriptions']['users'][user_id].setdefault('points_history', []).append({
            "action": "spent",
            "points": gift_points,
            "reason": f"–ø–æ–¥–∞—Ä–æ–∫ {recipient_username}",
            "date": datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })
        
        data['subscriptions']['users'].setdefault(recipient_id, {}).setdefault('referral_points', 0)
        data['subscriptions']['users'][recipient_id]['referral_points'] += gift_points
        data['subscriptions']['users'][recipient_id].setdefault('points_history', []).append({
            "action": "earned",
            "points": gift_points,
            "reason": f"–ø–æ–¥–∞—Ä–æ–∫ –æ—Ç {sender_username_raw}",
            "date": datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })
        
        save_payments_data(data)
        
        bot.send_message(user_id, (
            f"üéâ *–í—ã –ø–æ–¥–∞—Ä–∏–ª–∏* {escape_markdown(recipient_username)} *{format_number(gift_points)} {pluralize_points(gift_points)}!*\n"
        ), parse_mode="Markdown")
        try:
            bot.send_message(recipient_id, (
                f"üéÅ *{sender_username} –ø–æ–¥–∞—Ä–∏–ª –≤–∞–º {format_number(gift_points)} {pluralize_points(gift_points)}!*\n"
                "üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –≤ —Å–∏—Å—Ç–µ–º–µ –±–∞–ª–ª–æ–≤!"
            ), parse_mode="Markdown")
        except:
            pass
        
        gifts_menu(message)
        
    except ValueError as e:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, f"{str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_gift_amount, recipient_id, sender_points)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–ø–æ–¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è")
@check_function_state_decorator('–ü–æ–¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è')
@track_usage('–ü–æ–¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def gift_time_handler(message):
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(user_id, {})
    
    last_gift_time = next(
        (entry['date'] for entry in reversed(user_data.get('points_history', []))
         if "–ø–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏" in entry['reason'].lower() and entry['action'] == "spent"),
        "01.01.2025 –≤ 00:00"
    )
    last_gift_dt = datetime.strptime(last_gift_time, "%d.%m.%Y –≤ %H:%M")
    if (datetime.now() - last_gift_dt).total_seconds() < 24 * 3600:
        remaining_time = timedelta(seconds=24 * 3600 - (datetime.now() - last_gift_dt).total_seconds())
        hours_left = remaining_time.seconds // 3600
        minutes_left = (remaining_time.seconds % 3600) // 60
        bot.send_message(message.chat.id, (
            f"‚ö†Ô∏è –í—ã —É–∂–µ –¥–∞—Ä–∏–ª–∏ –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è!\n"
            f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –ø–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {hours_left} —á. {minutes_left} –º–∏–Ω."
        ), parse_mode="Markdown")
        return_to_gifts_menu(message)
        return

    giftable_plans = [
        plan for plan in user_data.get('plans', [])
        if (
            plan['plan_name'] in ['points_bonus', 'gift_time', 'exchange_time']
            or (
                plan['plan_name'] in ['trial', 'weekly', 'monthly', 'quarterly', 'semiannual', 'yearly', 'store_time', 'custom']
                and plan['source'] in ['user', 'store']
            )
        )
        and datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M") > datetime.now()
    ]
    
    if not giftable_plans:
        bot.send_message(message.chat.id, (
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–¥–∞—Ä–∏—Ç—å!\n"
            "üöÄ –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–ª–ª—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞!"
        ), parse_mode="Markdown")
        return_to_gifts_menu(message)
        return
    
    now = datetime.now()
    total_remaining_minutes = 0
    for plan in giftable_plans:
        end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
        if end_date > now:
            total_remaining_minutes += int((end_date - now).total_seconds() // 60)
    
    time_description = format_time(total_remaining_minutes)
    
    if total_remaining_minutes < 1440:  
        bot.send_message(message.chat.id, (
            f"‚ùå –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 1 –¥–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞!\n\n"
            f"‚è≥ *–î–æ—Å—Ç—É–ø–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:* {time_description}\n"
            f"üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è!"
        ), parse_mode="Markdown")
        return_to_gifts_menu(message)
        return
    
    referrals = list(set(data['referrals']['stats'].get(user_id, [])))
    if referrals:
        referral_message = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:*\n\n"
        for idx, referral_id in enumerate(referrals, 1):
            referral_username = data['subscriptions']['users'].get(referral_id, {}).get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            escaped_username = escape_markdown(referral_username)
            referral_message += f"üë§ ‚Ññ{idx}. {escaped_username} - `{referral_id}`\n"
        bot.send_message(message.chat.id, referral_message, parse_mode="Markdown")
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(message.chat.id, (
        f"üéÅ *–ü–æ–¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è:*\n\n"
        f"‚è≥ *–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:* {time_description}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞), –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è:"
    ), reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, user_process_gift_time_recipient, total_remaining_minutes)

@text_only_handler
def user_process_gift_time_recipient(message, total_available_minutes):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã":
        return_to_scores_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏":
        return_to_gifts_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(user_id, {})
    sender_username = escape_markdown(user_data.get('username', f"@{user_id}"))
    recipient_input = message.text.strip()
    
    recipient_id = None
    if recipient_input.startswith('@'):
        recipient_id = next(
            (uid for uid, data_user in data['subscriptions']['users'].items()
             if data_user.get('username', '').lower() == recipient_input.lower()), None
        )
    elif recipient_input.isdigit():
        if recipient_input in data['subscriptions']['users']:
            recipient_id = recipient_input
    
    if not recipient_id:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã") 
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, (
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ username –∏–ª–∏ id\n\n"
            "–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, user_process_gift_time_recipient, total_available_minutes)
        return
    
    if recipient_id == user_id:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã") 
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, (
            "‚ùå –ù–µ–ª—å–∑—è –ø–æ–¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è —Å–∞–º–æ–º—É —Å–µ–±–µ!\n"
            "üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, user_process_gift_time_recipient, total_available_minutes)
        return
    
    users_data = load_users_data()
    join_date_str = users_data.get(recipient_id, {}).get('join_date', "01.01.2025 –≤ 00:00")
    join_date = datetime.strptime(join_date_str, "%d.%m.%Y –≤ %H:%M")
    if (datetime.now() - join_date).total_seconds() < 24 * 3600:
        bot.send_message(message.chat.id, (
            "‚ùå –ù–µ–ª—å–∑—è –¥–∞—Ä–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥!\n"
            "üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        ), parse_mode="Markdown")
        return_to_gifts_menu(message)
        return
    
    recipient_username = escape_markdown(data['subscriptions']['users'][recipient_id].get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))
    time_description = format_time(total_available_minutes)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ú–∏–Ω—É—Ç—ã"), types.KeyboardButton("–ß–∞—Å—ã"), types.KeyboardButton("–î–Ω–∏"))
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(message.chat.id, (
        f"üéÅ *–ü–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏*\n\n"
        f"üì§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {sender_username} (`{user_id}`)\n"
        f"üì• *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {recipient_username} (`{recipient_id}`)\n\n"
        f"‚è≥ *–î–æ—Å—Ç—É–ø–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:* {time_description}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:"
    ), reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, user_process_gift_time_unit, recipient_id, total_available_minutes)

@text_only_handler
def user_process_gift_time_unit(message, recipient_id, total_available_minutes):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã":
        return_to_scores_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏":
        return_to_gifts_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(user_id, {})
    sender_username = escape_markdown(user_data.get('username', f"@{user_id}"))
    recipient_username = escape_markdown(data['subscriptions']['users'][recipient_id].get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))
    time_description = format_time(total_available_minutes)
    
    unit = message.text
    if unit not in ["–ú–∏–Ω—É—Ç—ã", "–ß–∞—Å—ã", "–î–Ω–∏"]:
        bot.send_message(message.chat.id, (
            "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –≤—Ä–µ–º–µ–Ω–∏!\n"
            "üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        ), parse_mode="Markdown")
        user_process_gift_time_recipient(message, total_available_minutes)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    unit_prompt = {
        "–ú–∏–Ω—É—Ç—ã": "–º–∏–Ω—É—Ç",
        "–ß–∞—Å—ã": "—á–∞—Å–æ–≤",
        "–î–Ω–∏": "–¥–Ω–µ–π"
    }[unit]
    
    bot.send_message(message.chat.id, (
        f"üéÅ *–ü–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏*\n\n"
        f"üì§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {sender_username} (`{user_id}`)\n"
        f"üì• *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {recipient_username} (`{recipient_id}`)\n\n"
        f"‚è≥ *–î–æ—Å—Ç—É–ø–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:* {time_description}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {unit_prompt} –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:"
    ), reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, user_process_gift_time_amount, recipient_id, total_available_minutes, unit)

@text_only_handler
def user_process_gift_time_amount(message, recipient_id, total_available_minutes, unit):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã":
        return_to_scores_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏":
        return_to_gifts_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(user_id, {})
    sender_username = user_data.get('username', f"@{user_id}")
    recipient_username = data['subscriptions']['users'][recipient_id].get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    time_description = format_time(total_available_minutes)
    
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            raise ValueError("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
        
        if unit == "–ú–∏–Ω—É—Ç—ã":
            gift_minutes = amount
        elif unit == "–ß–∞—Å—ã":
            gift_minutes = amount * 60
        elif unit == "–î–Ω–∏":
            gift_minutes = amount * 1440
        
        if gift_minutes > total_available_minutes:
            raise ValueError(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏!\n‚è≥ *–î–æ—Å—Ç—É–ø–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:* {time_description}")
        
        gift_duration = timedelta(minutes=gift_minutes)
        remaining_minutes = gift_minutes
        
        user_plans = data['subscriptions']['users'][user_id]['plans']
        for plan in sorted(
            [p for p in user_plans if p['plan_name'] in ['trial', 'weekly', 'monthly', 'quarterly', 'semiannual', 'yearly'] and p['source'] == 'user'],
            key=lambda x: datetime.strptime(x['end_date'], "%d.%m.%Y –≤ %H:%M")
        ):
            if remaining_minutes <= 0:
                break
            end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
            if end_date <= datetime.now():
                continue
            available_minutes = int((end_date - datetime.now()).total_seconds() // 60)
            minutes_to_deduct = min(remaining_minutes, available_minutes)
            new_end_date = end_date - timedelta(minutes=minutes_to_deduct)
            plan['end_date'] = new_end_date.strftime("%d.%m.%Y –≤ %H:%M")
            remaining_minutes -= minutes_to_deduct
        
        user_plans[:] = [p for p in user_plans if datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") > datetime.now()]
        
        recipient_data = data['subscriptions']['users'].setdefault(recipient_id, {
            "plans": [],
            "total_amount": 0,
            "username": recipient_username,
            "referral_points": 0,
            "free_feature_trials": {},
            "promo_usage_history": [],
            "referral_milestones": {},
            "points_history": []
        })
        
        latest_end = max(
            [datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") for p in recipient_data['plans']] or [datetime.now()]
        )
        new_end = latest_end + gift_duration
        
        recipient_data['plans'].append({
            "plan_name": "gift_time",
            "start_date": latest_end.strftime("%d.%m.%Y –≤ %H:%M"),
            "end_date": new_end.strftime("%d.%m.%Y –≤ %H:%M"),
            "price": 0,
            "source": f"gift_from_{user_id}"
        })
        
        data['subscriptions']['users'][user_id].setdefault('points_history', []).append({
            "action": "spent",
            "points": 0,
            "reason": f"–ø–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ {recipient_username}: {gift_minutes} –º–∏–Ω—É—Ç",
            "date": datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })
        
        recipient_data.setdefault('points_history', []).append({
            "action": "earned",
            "points": 0,
            "reason": f"–ø–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç {sender_username}: {gift_minutes} –º–∏–Ω—É—Ç",
            "date": datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })
        
        save_payments_data(data)
        
        gift_description = format_time(gift_minutes)
        
        active_plans = [p for p in user_plans if datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") > datetime.now()]
        end_date = min([datetime.strptime(p['end_date'], '%d.%m.%Y –≤ %H:%M') for p in active_plans] or [datetime.now()]).strftime('%d.%m.%Y –≤ %H:%M')
        
        bot.send_message(user_id, (
            f"üéâ *–í—ã –ø–æ–¥–∞—Ä–∏–ª–∏* {escape_markdown(recipient_username)} *{gift_description}!*\n"
            f"‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {end_date}"
        ), parse_mode="Markdown")
        
        bot.send_message(recipient_id, (
            f"üéÅ *{escape_markdown(sender_username)} –ø–æ–¥–∞—Ä–∏–ª –≤–∞–º {gift_description}!*\n"
            f"‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {new_end.strftime('%d.%m.%Y –≤ %H:%M')}"
        ), parse_mode="Markdown")
        
        gifts_menu(message)
        
    except ValueError as e:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–∞—Ä–∫–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")  
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        error_msg = str(e) if str(e).startswith(("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")) else "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!"
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_msg}!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, user_process_gift_time_amount, recipient_id, total_available_minutes, unit)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–∏—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤")
@check_function_state_decorator('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤')
@track_usage('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_gifts_history(message):
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(user_id, {})
    history = user_data.get('points_history', [])
    gift_entries = [entry for entry in history if "–ø–æ–¥–∞—Ä–æ–∫" in entry['reason'].lower()]

    if not gift_entries:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤!", parse_mode="Markdown")
        gifts_menu(message)
        return

    username = escape_markdown(user_data.get('username', f"@{user_id}"))

    history_summary = f"*–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤*:\n\n"
    for idx, entry in enumerate(gift_entries, 1):
        action = "–ü–æ–¥–∞—Ä–µ–Ω–æ" if entry['action'] == "spent" else "–ü–æ–ª—É—á–µ–Ω–æ"
        gift_type = []
        if entry['points'] > 0:
            gift_type.append(f"{format_number(entry['points'])} {pluralize_points(entry['points'])}")
        if "–≤—Ä–µ–º–µ–Ω–∏" in entry['reason'].lower():
            reason_parts = clean_escaped_text(entry['reason']).split(': ')
            if len(reason_parts) > 1:
                time_part = reason_parts[-1].split(' (–æ—Ç –∞–¥–º–∏–Ω–∞)')[0]
                gift_type.append(format_time(time_part))
            else:
                gift_type.append("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
        gift_type = " –∏ ".join(gift_type) if gift_type else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫"
        reason = escape_markdown(clean_escaped_text(entry['reason']))
        history_summary += (
            f"üéÅ *‚Ññ{idx}. {action}:*\n\n"
            f"üí∞ *–ü–æ–¥–∞—Ä–æ–∫:* {gift_type}\n"
            f"üìÖ *–î–∞—Ç–∞:* {entry['date']}\n\n"
        )

    message_parts = split_message(history_summary)
    for part in message_parts:
        bot.send_message(message.chat.id, part, parse_mode="Markdown")

    gifts_menu(message)