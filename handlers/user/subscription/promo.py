from core.imports import wraps, telebot, types, os, json, re, datetime, timedelta
from core.bot_instance import bot
from handlers.user.user_main_menu import load_payment_data, save_payments_data
from handlers.user.subscription.subscription_main import payments_function
from handlers.user.subscription.buy_subscription import SUBSCRIPTION_PLANS, STORE_ITEMS
from handlers.user.utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha, check_function_state_decorator, track_usage
)

def return_to_menu(message):
    from handlers.user.user_main_menu import return_to_menu as _f
    return _f(message)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–ø—Ä–æ–º–æ–∫–æ–¥—ã) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–º–æ–∫–æ–¥—ã")
@check_function_state_decorator('–ü—Ä–æ–º–æ–∫–æ–¥—ã')
@track_usage('–ü—Ä–æ–º–æ–∫–æ–¥—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def promo_payments_function(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', '–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:", reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
@check_function_state_decorator('–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥')
@track_usage('–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def enter_promo_code(message):
    user_id = str(message.from_user.id)
    data = load_payment_data()

    last_promo_used = data['subscriptions']['users'].get(user_id, {}).get('last_promo_used')
    current_discount = data['subscriptions']['users'].get(user_id, {}).get('discount', 0)

    now = datetime.now()
    if last_promo_used and current_discount > 0:
        last_used_date = datetime.strptime(last_promo_used, "%d.%m.%Y –≤ %H:%M")
        days_since_last_use = (now - last_used_date).days

        user_subscriptions = data['subscriptions']['users'].get(user_id, {}).get('plans', [])
        has_active_subscription = any(
            datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M") > now
            for plan in user_subscriptions
        )

        if days_since_last_use >= 30 and not has_active_subscription:
            data['subscriptions']['users'][user_id]['discount'] = 0
            save_payments_data(data)
            bot.send_message(message.chat.id, (
                "‚ö†Ô∏è –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–∞!\n"
                "‚è≥ –ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 30 –¥–Ω–µ–π, –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É!"
            ), parse_mode="Markdown")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ–º–æ–∫–æ–¥—ã")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, (
        "‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:*\n\n"
        "üí° *–ß—Ç–æ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞?*\n"
        "–ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É (–¥–æ 100% –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–¥–∞). "
        "–°–∫–∏–¥–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏!\n\n"
        "üìÖ *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*\n"
        "- –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!\n"
        "- –ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ!\n"
        "- –ï—Å–ª–∏ –≤—ã –Ω–µ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π, —Å–∫–∏–¥–∫–∞ —Å–≥–æ—Ä–∏—Ç!"
    ), reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_promo_code)

@text_only_handler
def process_promo_code(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ–º–æ–∫–æ–¥—ã":
        promo_payments_function(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    user_id = str(message.from_user.id)
    username = message.from_user.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    code = message.text.upper()
    data = load_payment_data()
    promo_codes = data.get('promo_codes', {})

    now = datetime.now()
    last_promo_used = data['subscriptions']['users'].get(user_id, {}).get('last_promo_used')
    if last_promo_used:
        last_used_date = datetime.strptime(last_promo_used, "%d.%m.%Y –≤ %H:%M")
        days_since_last_use = (now - last_used_date).days
        if days_since_last_use < 30:
            bot.send_message(user_id, (
                f"‚ùå *–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ!*\n"
                f"üîí –í—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥ —á–µ—Ä–µ–∑ {30 - days_since_last_use} –¥–Ω–µ–π!"
            ), parse_mode="Markdown")
            payments_function(message, show_description=False)
            return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ–º–æ–∫–æ–¥—ã")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    if code not in promo_codes:
        bot.send_message(user_id, (
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n\n"
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_promo_code)
        return

    promo = promo_codes[code]
    uses = promo.get('uses', 1)
    used_by = promo.get('used_by', [])

    if len(used_by) >= uses:
        bot.send_message(user_id, (
            "‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥\n\n"
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_promo_code)
        return

    if any(entry['user_id'] == user_id for entry in used_by):
        bot.send_message(user_id, (
            "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥\n\n"
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_promo_code)
        return

    if promo.get('user_id') and promo['user_id'] != user_id:
        bot.send_message(user_id, (
            "‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥\n\n"
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_promo_code)
        return

    created_at_str = promo.get('created_at')
    if created_at_str:
        try:
            created_at = datetime.strptime(created_at_str, "%d.%m.%Y –≤ %H:%M")
            days_since_creation = (now - created_at).days
            if days_since_creation > 30:
                bot.send_message(user_id, (
                    "‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫ (30 –¥–Ω–µ–π)! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥\n\n"
                    "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:"
                ), reply_markup=markup, parse_mode="Markdown")
                bot.register_next_step_handler(message, process_promo_code)
                return
        except Exception:
            pass

    discount = promo['discount']
    applicable_category = promo.get('applicable_category')
    applicable_items = promo.get('applicable_items', [])

    if applicable_category is None and not applicable_items:
        applicability_str = "–≤—Å–µ —Ç–æ–≤–∞—Ä—ã"
    elif applicable_category == "subscriptions":
        applicability_str = "–≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏"
    elif applicable_category == "store":
        applicability_str = "–≤–µ—Å—å –º–∞–≥–∞–∑–∏–Ω"
    else:
        applicable_labels = []
        for item in applicable_items:
            if item in SUBSCRIPTION_PLANS:
                label = SUBSCRIPTION_PLANS[item]['label'].lower()
                applicable_labels.append(f"{label} –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö")
            elif item in STORE_ITEMS:
                label = STORE_ITEMS[item]['label']
                applicable_labels.append(f"{label} –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
            else:
                applicable_labels.append(item)
        applicability_str = ", ".join(applicable_labels)

    data['subscriptions']['users'].setdefault(user_id, {})['discount'] = discount
    data['subscriptions']['users'][user_id]['discount_type'] = 'promo'
    data['subscriptions']['users'][user_id]['applicable_category'] = applicable_category
    data['subscriptions']['users'][user_id]['applicable_items'] = applicable_items

    used_by.append({
        "user_id": user_id,
        "username": username,
        "used_at": now.strftime("%d.%m.%Y –≤ %H:%M")
    })
    promo['used_by'] = used_by

    if len(used_by) >= uses:
        promo['used'] = True
        promo['active'] = False
        promo['deactivated_at'] = now.strftime("%d.%m.%Y –≤ %H:%M")
        promo['deactivation_reason'] = "–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"

    data['subscriptions']['users'].setdefault(user_id, {}).setdefault('last_promo_used', None)
    data['subscriptions']['users'][user_id]['last_promo_used'] = now.strftime("%d.%m.%Y –≤ %H:%M")
    data['subscriptions']['users'].setdefault(user_id, {}).setdefault('promo_usage_history', []).append({
        "promo_code": code,
        "discount": discount,
        "used_at": now.strftime("%d.%m.%Y –≤ %H:%M"),
        "applicable_category": applicable_category,
        "applicable_items": applicable_items
    })

    data['promo_codes'] = promo_codes
    save_payments_data(data)

    bot.send_message(user_id, (
        "üéâ *–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n"
        f"‚ú® –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–¥–∫—É {discount:.0f}%!\n"
        f"üõí *–ü—Ä–∏–º–µ–Ω–∏–º –∫:* {applicability_str}\n"
        "üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—ë –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤!\n\n"
        "üìÖ –í—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥ —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π!\n"
        "‚è≥ –ï—Å–ª–∏ –≤—ã –Ω–µ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π, —Å–∫–∏–¥–∫–∞ —Å–≥–æ—Ä–∏—Ç!"
    ), parse_mode="Markdown")
    payments_function(message, show_description=False)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–≤–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã) -----------------------------------------

TRANSLATIONS_YOURPROMOCODES = {
    "all_items": "–≤—Å–µ —Ç–æ–≤–∞—Ä—ã",  
    "subscriptions": "–≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏",
    "store": "–≤–µ—Å—å –º–∞–≥–∞–∑–∏–Ω",
    "points_5": "5 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "points_10": "10 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "points_15": "15 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", 
    "points_25": "25 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "points_30": "30 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "points_50": "50 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
    "points_75": "75 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "points_100": "100 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "points_150": "150 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", 
    "points_200": "200 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "points_250": "250 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "points_350": "350 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
    "points_500": "500 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "points_750": "750 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "points_1000": "1000 –±–∞–ª–ª–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
    "time_1day": "1 –¥–µ–Ω—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "time_2days": "2 –¥–Ω—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "time_4days": "4 –¥–Ω—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
    "time_5days": "5 –¥–Ω–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "time_8days": "8 –¥–Ω–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "time_10days": "10 –¥–Ω–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
    "time_14days": "14 –¥–Ω–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "time_15days": "15 –¥–Ω–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "time_21days": "21 –¥–µ–Ω—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ", 
    "time_45days": "45 –¥–Ω–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "time_60days": "60 –¥–Ω–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "time_120days": "120 –¥–Ω–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
    "trial_subscription_3": "3 –¥–Ω—è –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö", "weekly_subscription_7": "7 –¥–Ω–µ–π –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö",
    "monthly_subscription_30": "30 –¥–Ω–µ–π –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö", "quarterly_subscription_90": "90 –¥–Ω–µ–π –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö",
    "semiannual_subscription_180": "180 –¥–Ω–µ–π –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö", "yearly_subscription_365": "365 –¥–Ω–µ–π –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö",
    "discount_type_promo": "–ø—Ä–æ–º–æ–∫–æ–¥", "discount_type_referral": "—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è"
}

def get_applicability_str(applicable_category, applicable_items):
    if applicable_category is None and not applicable_items:
        return TRANSLATIONS_YOURPROMOCODES["all_items"] 
    if applicable_category in TRANSLATIONS_YOURPROMOCODES:
        return TRANSLATIONS_YOURPROMOCODES[applicable_category]
    applicable_labels = [TRANSLATIONS_YOURPROMOCODES.get(item, item) for item in applicable_items]
    return ", ".join(applicable_labels)

def send_long_message(chat_id, message_text, parse_mode="Markdown"):
    MAX_MESSAGE_LENGTH = 4096
    if len(message_text) <= MAX_MESSAGE_LENGTH:
        bot.send_message(chat_id, message_text, parse_mode=parse_mode)
        return
    
    parts = []
    current_part = ""
    for line in message_text.split("\n"):
        if len(current_part) + len(line) + 1 > MAX_MESSAGE_LENGTH:
            parts.append(current_part.strip())
            current_part = line + "\n"
        else:
            current_part += line + "\n"
    if current_part:
        parts.append(current_part.strip())
    
    for i, part in enumerate(parts, 1):
        if i == 1:
            bot.send_message(chat_id, part, parse_mode=parse_mode)
        else:
            header = f"*–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ {i}*\n\n"
            bot.send_message(chat_id, header + part, parse_mode=parse_mode)

def format_discount(discount):
    try:
        n = float(discount)
    except (TypeError, ValueError):
        return str(discount)
    if n.is_integer():
        return f"{int(n)}"
    return f"{n:.2f}"

@bot.message_handler(func=lambda message: message.text == "–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã")
@check_function_state_decorator('–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã')
@track_usage('–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def show_promo_codes(message):
    user_id = str(message.from_user.id)
    data = load_payment_data()
    
    user_data = data["subscriptions"]["users"].get(user_id, {})
    promo_history = user_data.get("promo_usage_history", [])
    
    current_discount = user_data.get("discount", 0)
    discount_type = user_data.get("discount_type", "promo")
    applicable_category = user_data.get("applicable_category", None)
    applicable_items = user_data.get("applicable_items", [])
    
    promo_codes = data.get("promo_codes", {})
    unused_promos = []
    used_promo_codes = [promo["promo_code"] for promo in promo_history]  
    
    now = datetime.now()
    for promo_code, promo_data in promo_codes.items():
        if not promo_data.get("active", False):
            continue
        
        used_by = [entry["user_id"] for entry in promo_data.get("used_by", [])]
        if user_id in used_by or promo_code in used_promo_codes:
            continue
        
        promo_user_id = promo_data.get("user_id")
        if promo_user_id != user_id:
            continue
        
        created_at_str = promo_data.get("created_at")
        if created_at_str:
            try:
                created_at = datetime.strptime(created_at_str, "%d.%m.%Y –≤ %H:%M")
                days_since_creation = (now - created_at).days
                if days_since_creation > 30:
                    continue
            except Exception:
                pass
        
        uses = promo_data.get("uses", 1)
        if len(used_by) >= uses:
            continue
        
        unused_promos.append({
            "promo_code": promo_code,
            "discount": promo_data["discount"],
            "applicable_category": promo_data.get("applicable_category", None),
            "applicable_items": promo_data.get("applicable_items", [])
        })
    
    if not promo_history and current_discount == 0 and not unused_promos:
        bot.send_message(user_id, "‚ùå *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏–ª–∏ —Å–∫–∏–¥–æ–∫!*\n"
                                 "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫–∏!",
                         parse_mode="Markdown")
        return
    
    response = "üéü *–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏:*\n\n"
    
    if promo_history:
        response += "‚úÖ *–ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:*\n\n"
        for index, promo in enumerate(promo_history, 1):
            promo_code = promo["promo_code"]
            discount = promo["discount"]
            used_at = promo["used_at"]
            category = promo.get("applicable_category", None)
            items = promo.get("applicable_items", [])
            
            applicability = get_applicability_str(category, items)
            
            response += (f"üî∏ *‚Ññ{index}.* `{promo_code}`:\n"
                         f"   *–°–∫–∏–¥–∫–∞:* {format_discount(discount)}%\n"
                         f"   *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω:* {used_at}\n"
                         f"   *–ü—Ä–∏–º–µ–Ω–∏–º–æ –∫:* {applicability}\n\n")
    
    if current_discount > 0:
        applicability = get_applicability_str(applicable_category, applicable_items)
        translated_discount_type = TRANSLATIONS_YOURPROMOCODES.get(f"discount_type_{discount_type}", discount_type)
        
        response += (f"üîπ *–¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞ (–∞–∫—Ç–∏–≤–Ω–∞ —Å–µ–π—á–∞—Å):*\n"
                     f"   *–¢–∏–ø:* {translated_discount_type}\n"
                     f"   *–°–∫–∏–¥–∫–∞:* {format_discount(current_discount)}%\n"
                     f"   *–ü—Ä–∏–º–µ–Ω–∏–º–æ –∫:* {applicability}\n\n")
    
    if unused_promos:
        response += "‚ö†Ô∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:*\n\n"
        for index, promo in enumerate(unused_promos, 1):
            promo_code = promo["promo_code"]
            discount = promo["discount"]
            category = promo.get("applicable_category", None)
            items = promo.get("applicable_items", [])
            
            applicability = get_applicability_str(category, items)
            
            response += (f"üî∑ *‚Ññ{index}.* `{promo_code}`:\n"
                         f"   *–°–∫–∏–¥–∫–∞:* {format_discount(discount)}%\n"
                         f"   *–ü—Ä–∏–º–µ–Ω–∏–º–æ –∫:* {applicability}\n"
                         f"   *–°—Ç–∞—Ç—É—Å:* –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è\n\n")
    
    response += "üöÄ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ—â—ë –±–æ–ª—å—à–µ —Å–∫–∏–¥–æ–∫!"
    
    send_long_message(user_id, response)