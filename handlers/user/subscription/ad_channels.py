from core.imports import wraps, telebot, types, os, json, re, time, threading, datetime, timedelta, InlineKeyboardMarkup, InlineKeyboardButton
from core.bot_instance import bot
from handlers.user.subscription.subscription_main import payments_function
from decorators.channel_subscription import CHANNEL_CHAT_ID
from handlers.user.utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha
)

def return_to_menu(message):
    from handlers.user.user_main_menu import return_to_menu as _f
    return _f(message)

def load_payment_data():
    from handlers.user.user_main_menu import load_payment_data as _f
    return _f()

def save_payments_data(data):
    from handlers.user.user_main_menu import save_payments_data as _f
    return _f(data)

def set_free_trial_period(user_id, days, source="default"):
    from handlers.user.user_main_menu import set_free_trial_period as _f
    return _f(user_id, days, source)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (—Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã) -----------------------------------------

def is_user_subscribed(user_id, chat_id=CHANNEL_CHAT_ID):
    try:
        member = bot.get_chat_member(chat_id, user_id)
        return member.status in ['member', 'administrator', 'creator'] and member.status != 'kicked'
    except telebot.apihelper.ApiTelegramException as e:
        return False
    except Exception as e:
        return False

def is_channel_available(chat_id):
    try:
        chat = bot.get_chat(chat_id)
        return chat.type in ['channel', 'group', 'supergroup']
    except telebot.apihelper.ApiTelegramException as e:
        return False
    except Exception as e:
        return False

def background_subscription_check():
    while True:
        try:
            data = load_payment_data()
            for user_id in data['subscriptions']['users']:
                if not is_user_subscribed(int(user_id)):
                    pass
            time.sleep(3600)
        except Exception:
            time.sleep(2)
            continue

thread = threading.Thread(target=background_subscription_check, daemon=True)
thread.start()

@bot.message_handler(func=lambda message: message.text == "–†–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã")
@rate_limit_with_captcha
def get_day_for_ad(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    user_id = message.from_user.id
    data = load_payment_data()
    markup = InlineKeyboardMarkup()

    if 'ad_channels' not in data:
        bot.send_message(user_id, (
            "‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É...\n"
        ), parse_mode="Markdown")
        return

    user_data = data['subscriptions']['users'].get(str(user_id), {})
    subscribed_channels = user_data.get('ad_channels_subscribed', [])

    active_channels = False
    available_channels = False

    for chat_id, channel in data['ad_channels'].items():
        if not isinstance(channel, dict):
            channel = {'name': channel, 'active': False}
            data['ad_channels'][chat_id] = channel
            save_payments_data(data)  

        if channel.get('active', False) and is_channel_available(chat_id):
            active_channels = True
            if chat_id not in subscribed_channels:
                markup.add(InlineKeyboardButton(
                    f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel['name']}",
                    callback_data=f"subscribe_ad_{chat_id}"
                ))
                available_channels = True

    if not active_channels:
        bot.send_message(user_id, (
            "‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...\n"
        ), parse_mode="Markdown")
        return

    if not available_channels:
        bot.send_message(user_id, (
            "üéâ *–†–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç!*\n\n"
            "‚ú® –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã!\n"
            "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...\n"
        ), parse_mode="Markdown")
        return

    bot.send_message(user_id, (
        "üì¢ *–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤!*\n\n"
        "‚ú® –ü–æ–ª—É—á–∏—Ç–µ *+1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏* –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ª—é–±–æ–π –∫–∞–Ω–∞–ª!\n\n"
        "üëâ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –Ω–∏–∂–µ:"
    ), reply_markup=markup, parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data.startswith("subscribe_ad_"))
def check_ad_subscription(call):
    user_id = call.from_user.id
    selected_channel_id = call.data.replace("subscribe_ad_", "")
    data = load_payment_data()
    
    if selected_channel_id not in data['ad_channels'] or not data['ad_channels'][selected_channel_id]['active']:
        bot.send_message(call.message.chat.id, (
            "‚ùå –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª...\n"
        ), parse_mode="Markdown")
        bot.answer_callback_query(call.id, "–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return
    
    channel_name = data['ad_channels'][selected_channel_id]['name']
    
    if not is_channel_available(selected_channel_id):
        bot.send_message(call.message.chat.id, (
            "‚ùå –ö–∞–Ω–∞–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...\n"
        ), parse_mode="Markdown")
        bot.answer_callback_query(call.id, "–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return
    
    if not is_user_subscribed(user_id, selected_channel_id):
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel_name}", url=f"https://t.me/{channel_name.replace(' ', '')}"))
        markup.add(InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=call.data))
        bot.send_message(call.message.chat.id, (
            f"‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ *{channel_name}*! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª\n"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.answer_callback_query(call.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!")
        return
    
    user_data = data['subscriptions']['users'].setdefault(str(user_id), {
        "plans": [],
        "total_amount": 0,
        "username": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
        "referral_points": 0,
        "free_feature_trials": {},
        "promo_usage_history": [],
        "referral_milestones": {},
        "points_history": [],
        "ad_channels_subscribed": [],
        "discount": 0,
        "applicable_category": None,
        "applicable_items": [],
        "discount_type": None
    })
    
    if selected_channel_id in user_data['ad_channels_subscribed']:
        bot.send_message(call.message.chat.id, (
            f"‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ *{channel_name}*!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞\n"
        ), parse_mode="Markdown")
        bot.answer_callback_query(call.id, "–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω!")
        return
    
    new_end = set_free_trial_period(user_id, 1, f"ad_bonus_{selected_channel_id}")
    user_plans = user_data.get('plans', [])
    if user_plans:
        latest_plan = max(user_plans, key=lambda p: datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M"))
        start_date = latest_plan['start_date']
    else:
        start_date = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
    
    user_data['ad_channels_subscribed'].append(selected_channel_id)
    save_payments_data(data)
    
    bot.send_message(call.message.chat.id, (
        "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n"
        f"‚ú® –í—ã –ø–æ–ª—É—á–∏–ª–∏ *+1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏* –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ *{channel_name}*!\n"
        f"üïí *–ù–∞—á–∞–ª–æ:* {start_date}\n"
        f"‚åõ *–ö–æ–Ω–µ—Ü:* {new_end.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
        "üòä –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤!"
    ), parse_mode="Markdown")
    bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!")