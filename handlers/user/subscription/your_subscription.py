from core.imports import wraps, telebot, types, os, json, re, pytz, datetime, timedelta, requests, ReplyKeyboardMarkup, ReplyKeyboardRemove
from core.bot_instance import bot
from handlers.user.user_main_menu import load_payment_data, save_payments_data
from handlers.user.subscription.subscription_main import payments_function
from handlers.user.utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha, check_function_state_decorator, track_usage, check_subscription
)

def return_to_menu(message):
    from handlers.user.user_main_menu import return_to_menu as _f
    return _f(message)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
@check_function_state_decorator('–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏')
@track_usage('–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def your_subsctiptions(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏', '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:", reply_markup=markup, parse_mode="Markdown")

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏) -----------------------------------------

def translate_plan_name(plan_name):
    return {
        "free": "–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", "referral_bonus": "—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å", "ad_bonus": "—Ä–µ–∫–ª–∞–º–Ω—ã–π –±–æ–Ω—É—Å",     
        "trial": "3 –¥–Ω—è", "weekly": "7 –¥–Ω–µ–π", "monthly": "30 –¥–Ω–µ–π", "quarterly": "90 –¥–Ω–µ–π", "semiannual": "180 –¥–Ω–µ–π", "yearly": "365 –¥–Ω–µ–π",                   
        "points_bonus": "–±–æ–Ω—É—Å –∑–∞ –±–∞–ª–ª—ã", "gift_time": "–ø–æ–¥–∞—Ä–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è", "referral": "–±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞",    
        "monthly_leader_bonus": "–±–æ–Ω—É—Å –ª–∏–¥–µ—Ä–∞ –º–µ—Å—è—Ü–∞", "leaderboard": "–±–æ–Ω—É—Å —Ç–æ–ø-1", "store_time": "–≤—Ä–µ–º—è –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞",  
        "custom": "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π", "exchange_time": "–æ–±–º–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"    
    }.get(plan_name, plan_name)

def send_long_message(chat_id, message_text, parse_mode='Markdown'):
    max_length = 4096
    for i in range(0, len(message_text), max_length):
        bot.send_message(chat_id, message_text[i:i + max_length], parse_mode=parse_mode)

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏")
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_subscription(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    user_id = message.from_user.id
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(str(user_id), {})

    if 'plans' not in user_data or not user_data['plans']:
        bot.send_message(user_id, (
            "‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫!*\n\n"
            "üöÄ –ü–æ–ø—Ä–æ–±—É–π –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n"
            "üëâ –ü–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª *¬´–∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª*!"
        ), parse_mode="Markdown")
        return

    now = datetime.now()
    active_plans = [p for p in user_data['plans'] if datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") > now]
    if not active_plans:
        bot.send_message(user_id, (
            "‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫!*\n\n"
            "üöÄ –ü–æ–¥–∫–ª—é—á–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!\n"
            "üëâ –ü–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª *¬´–∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª*!"
        ), parse_mode="Markdown")
        return

    plans_summary = "üíé *–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:*\n\n"
    total_cost_active = 0

    unit_display = {
        '–º–∏–Ω—É—Ç—ã': '–º–∏–Ω.',
        '—á–∞—Å—ã': '—á.',
        '–¥–Ω–∏': '–¥–Ω.'
    }

    for idx, plan in enumerate(active_plans):
        end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
        remaining_time = end_date - now
        days_left = remaining_time.days
        hours_left, remainder = divmod(remaining_time.seconds, 3600)
        minutes_left = remainder // 60

        plan_name_lower = plan['plan_name'].lower()
        source = plan.get('source', '')

        if plan_name_lower in {"free", "referral_bonus", "ad_bonus", "activity", "points_bonus", "referral", "monthly_leader_bonus", "leaderboard"}:
            period_type = f"üéÅ *‚Ññ{idx + 1}. –ë–æ–Ω—É—Å–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            subscription_type = translate_plan_name(plan_name_lower)
        elif plan_name_lower in {"gift_time", "custom", "exchangetime"}:
            period_type = f"‚ú® *‚Ññ{idx + 1}. –ü–æ–¥–∞—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            if plan_name_lower == "custom":
                duration_value = int(plan.get('duration_value', 1))
                duration_unit = plan.get('duration_unit', '–¥–Ω–∏')
                subscription_type = f"–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π ({duration_value} {unit_display.get(duration_unit, '–¥–Ω.')})"
            else:
                subscription_type = translate_plan_name(plan_name_lower)
        else:
            if source in {"user", "promo_100_percent", "store"}:
                period_type = f"üí≥ *‚Ññ{idx + 1}. –ü–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            else:
                period_type = f"üì¶ *‚Ññ{idx + 1}. –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            subscription_type = translate_plan_name(plan_name_lower)

        start_date = plan['start_date']
        end_date_str = plan['end_date']
        price_formatted = f"{plan['price']:.2f}"

        plans_summary += (
            f"{period_type}\n\n"
            f"üíº *–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:* {subscription_type}\n"
            f"üìÖ *–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å:* {days_left} –¥–Ω–µ–π –∏ {hours_left:02d}:{minutes_left:02d} —á–∞—Å–æ–≤\n"
            f"üïí *–ù–∞—á–∞–ª–æ:* {start_date}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {end_date_str}\n"
            f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:* {price_formatted} —Ä—É–±.\n\n"
        )
        total_cost_active += plan['price']

    send_long_message(message.chat.id, plans_summary)

    subtypes = []
    for p in active_plans:
        plan_name_lower = p['plan_name'].lower()
        if plan_name_lower == 'custom':
            duration_value = int(p.get('duration_value', 1))
            duration_unit = p.get('duration_unit', '–¥–Ω–∏')
            subtypes.append(f"–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π ({duration_value} {unit_display.get(duration_unit, '–¥–Ω.')})")
        else:
            subtypes.append(translate_plan_name(plan_name_lower))

    start_date = min(datetime.strptime(p['start_date'], "%d.%m.%Y –≤ %H:%M") for p in active_plans).strftime("%d.%m.%Y –≤ %H:%M")
    end_date = max(datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") for p in active_plans)
    total_remaining_time = end_date - now
    total_days_left = total_remaining_time.days
    hours_left, remainder = divmod(total_remaining_time.seconds, 3600)
    minutes_left = remainder // 60
    end_date_str = end_date.strftime("%d.%m.%Y –≤ %H:%M")
    total_cost_active_formatted = f"{total_cost_active:.2f}"
    total_amount = user_data.get('total_amount', 0)
    total_amount_formatted = f"{total_amount:.2f}"

    summary_message = (
        "üíé *–ò—Ç–æ–≥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:*\n\n"
        f"üíº *–¢–∏–ø—ã –ø–æ–¥–ø–∏—Å–æ–∫:* {', '.join(t for t in subtypes)}\n"
        f"üìÖ *–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å:* {total_days_left} –¥–Ω–µ–π –∏ {hours_left:02d}:{minutes_left:02d} —á–∞—Å–æ–≤\n"
        f"üïí *–ù–∞—á–∞–ª–æ:* {start_date}\n"
        f"‚åõ *–ö–æ–Ω–µ—Ü:* {end_date_str}\n"
        f"üí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:* {total_cost_active_formatted} —Ä—É–±.\n"
        f"üí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫:* {total_amount_formatted} —Ä—É–±.\n"
    )
    send_long_message(message.chat.id, summary_message)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–∏—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫")
@check_function_state_decorator('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫')
@track_usage('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_subscription_history(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    user_id = str(message.from_user.id)
    data = load_payment_data()
    history_plans = data['subscription_history'].get(user_id, [])

    if not history_plans:
        bot.send_message(message.chat.id, (
            "‚ùå *–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫!*\n"
            "üöÄ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞!"
        ), parse_mode="Markdown")
        return

    now = datetime.now(pytz.UTC)
    plans_summary = "üìú *–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫:*\n\n"

    unit_display = {
        '–º–∏–Ω—É—Ç—ã': '–º–∏–Ω.',
        '—á–∞—Å—ã': '—á.',
        '–¥–Ω–∏': '–¥–Ω.'
    }

    for idx, plan in enumerate(history_plans):
        plan_status = plan.get('status', 'expired')
        end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M").replace(tzinfo=pytz.UTC)
        
        if plan_status != 'active':
            elapsed_time = now - end_date
            days_elapsed = elapsed_time.days
            hours_elapsed, remainder = divmod(elapsed_time.seconds, 3600)
            minutes_elapsed = remainder // 60
        else:
            days_elapsed = hours_elapsed = minutes_elapsed = 0

        plan_name_lower = plan['plan_name'].lower()
        source = plan.get('source', '')

        if plan_name_lower in {"free", "referral_bonus", "ad_bonus", "activity", "points_bonus", "referral", "monthly_leader_bonus", "leaderboard"}:
            period_type = f"üéÅ *‚Ññ{idx + 1}. –ë–æ–Ω—É—Å–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            subscription_type = translate_plan_name(plan_name_lower)
        elif plan_name_lower in {"gift_time", "custom", "exchangetime"}:
            period_type = f"‚ú® *‚Ññ{idx + 1}. –ü–æ–¥–∞—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            if plan_name_lower == "custom":
                duration_value = int(plan.get('duration_value', 1))
                duration_unit = plan.get('duration_unit', '–¥–Ω–∏')
                subscription_type = f"–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π ({duration_value} {unit_display.get(duration_unit, '–¥–Ω.')})"
            else:
                subscription_type = translate_plan_name(plan_name_lower)
        else:
            if source in {"user", "promo_100_percent", "store"}:
                period_type = f"üí≥ *‚Ññ{idx + 1}. –ü–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            else:
                period_type = f"üì¶ *‚Ññ{idx + 1}. –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:*"
            subscription_type = translate_plan_name(plan_name_lower)

        start_date = plan['start_date']
        end_date_str = plan['end_date']
        price_formatted = f"{plan['price']:.2f}"

        plans_summary += (
            f"{period_type}\n\n"
            f"üíº *–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:* {subscription_type}\n"
            f"üìÖ *–ù–∞—á–∞–ª–æ:* {start_date}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {end_date_str}\n"
        )
        if plan_status == 'cancelled':
            plans_summary += f"üö´ *–°—Ç–∞—Ç—É—Å:* –û—Ç–º–µ–Ω–µ–Ω–∞\n"
            if plan.get('refunded', False):
                plans_summary += (
                    f"üí∏ *–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ:* {plan.get('refund_amount', 0):.2f} —Ä—É–±.\n"
                    f"üÜî *ID –≤–æ–∑–≤—Ä–∞—Ç–∞:* {plan.get('refund_id', '–ù–µ –ø—Ä–∏—Å–≤–æ–µ–Ω')}\n"
                    f"üìÖ *–î–∞—Ç–∞ –æ—Ç–º–µ–Ω—ã:* {plan.get('cancelled_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                )
        else:
            plans_summary += f"üìà *–°—Ç–∞—Ç—É—Å:* {'–ê–∫—Ç–∏–≤–Ω–∞' if plan_status == 'active' else '–ò—Å—Ç–µ–∫–ª–∞'}\n"
            if plan_status != 'active':
                plans_summary += f"‚è≥ *–î–Ω–µ–π –ø—Ä–æ—à–ª–æ:* {days_elapsed} –¥–Ω–µ–π –∏ {hours_elapsed:02d}:{minutes_elapsed:02d} —á–∞—Å–æ–≤\n"
        plans_summary += f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:* {price_formatted} —Ä—É–±.\n\n"

    send_long_message(message.chat.id, plans_summary)