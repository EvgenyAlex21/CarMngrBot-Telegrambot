from core.imports import wraps, telebot, types, os, json, re, pytz, datetime, timedelta, ReplyKeyboardMarkup, ReplyKeyboardRemove
from core.bot_instance import bot
from handlers.user.utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha, check_function_state_decorator, track_usage, check_subscription
)

def return_to_menu(message):
    from handlers.user.user_main_menu import return_to_menu as _f
    return _f(message)

def load_payment_data():
    from handlers.user.user_main_menu import load_payment_data as _f
    return _f()

def save_payments_data(data):
    from handlers.user.user_main_menu import save_payments_data as _f
    return _f(data)

def load_users_data():
    from handlers.user.user_main_menu import load_users_data as _f
    return _f()

def get_paid_features():
    from handlers.user.user_main_menu import PAID_FEATURES as _PF
    return _PF

def payments_function(message, show_description=False):
    from handlers.user.subscription.subscription_main import payments_function as _f
    return _f(message, show_description=show_description)

def split_message(message, max_length=4000):
    from handlers.user.subscription.gifts import split_message as _f
    return _f(message, max_length=max_length)

def pluralize_points(points):
    from handlers.user.subscription.gifts import pluralize_points as _f
    return _f(points)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–±–∞–ª–ª—ã) -----------------------------------------

def escape_markdown(text):
    return re.sub(r'([*_`])', r'\\\1', text)

@bot.message_handler(func=lambda message: message.text == "–ë–∞–ª–ª—ã")
@check_function_state_decorator('–ë–∞–ª–ª—ã')
@track_usage('–ë–∞–ª–ª—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def points_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–∞—à–∏ –±–∞–ª–ª—ã', '–û–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã', '–ü–æ–¥–∞—Ä–∫–∏')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –±–∞–ª–ª–æ–≤:", reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã")
@check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã')
@track_usage('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def return_to_scores_menu(message):
    points_menu(message)

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–≤–∞—à–∏ –±–∞–ª–ª—ã) -----------------------------------------

def format_number(number):
    try:
        n = float(number)
    except (TypeError, ValueError):
        return str(number)
    if n.is_integer():
        return str(int(n))
    return f"{n:.2f}"

def format_time(minutes):
    if minutes < 60:
        return f"{format_number(minutes)} –º–∏–Ω."
    days = minutes // 1440
    hours = (minutes % 1440) // 60
    mins = (minutes % 1440) % 60
    parts = []
    if days:
        parts.append(f"{format_number(days)} –¥–Ω.")
    if hours:
        parts.append(f"{format_number(hours)} —á.")
    if mins:
        parts.append(f"{format_number(mins)} –º–∏–Ω.")
    return " ".join(parts)

@bot.message_handler(func=lambda message: message.text == "–í–∞—à–∏ –±–∞–ª–ª—ã")
@check_function_state_decorator('–í–∞—à–∏ –±–∞–ª–ª—ã')
@track_usage('–í–∞—à–∏ –±–∞–ª–ª—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_points(message):
    user_id = str(message.from_user.id)
    data = load_payment_data()
    user_data = data['subscriptions']['users'].get(user_id, {})
    history = user_data.get('points_history', [])
    
    points = user_data.get('referral_points', 0)
    
    total_earned = sum(entry['points'] for entry in history if entry['action'] == 'earned')
    earned_daily = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'] == '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥')
    earned_admin = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'].startswith('–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'))
    earned_gifts = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'].startswith('–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç'))
    earned_first_purchase = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'].startswith('–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏'))
    earned_points_purchase = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'].startswith('–ü–æ–∫—É–ø–∫–∞') and '–±–∞–ª–ª–æ–≤' in entry['reason'])
    earned_referrals = sum(entry['points'] for entry in history if entry['action'] == 'earned' and '–†–µ—Ñ–µ—Ä–∞–ª' in entry['reason'])
    earned_top_referrals = sum(entry['points'] for entry in history if entry['action'] == 'earned' and '–¢–æ–ø-10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤' in entry['reason'])
    earned_purchases = sum(entry['points'] for entry in history if entry['action'] == 'earned' and entry['reason'].startswith('–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏'))

    total_spent = sum(entry['points'] for entry in history if entry['action'] == 'spent')
    spent_gifts = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'].lower().startswith('–ø–æ–¥–∞—Ä–æ–∫'))
    spent_time = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'].startswith('–û–±–º–µ–Ω –Ω–∞') and any(unit in entry['reason'] for unit in ['–¥–Ω.', '—á.', '–º–∏–Ω.']))
    spent_discounts = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'].startswith('–û–±–º–µ–Ω –Ω–∞') and '%' in entry['reason'])
    spent_features = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'].startswith('–û–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é'))
    spent_admin_delete = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'] == '—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
    spent_admin = sum(entry['points'] for entry in history if entry['action'] == 'spent' and entry['reason'].lower() == '—Å–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')

    gifted_time_minutes = 0
    received_time_minutes = 0
    for entry in history:
        time_str = None
        if entry['reason'].startswith('–û–±–º–µ–Ω –Ω–∞') and any(unit in entry['reason'] for unit in ['–¥–Ω.', '—á.', '–º–∏–Ω.']):
            time_str = entry['reason'].split('–û–±–º–µ–Ω –Ω–∞ ')[1]
        elif entry['reason'].lower().startswith('–ø–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏') and any(unit in entry['reason'] for unit in ['–¥–Ω.', '—á.', '–º–∏–Ω.', '–º–∏–Ω—É—Ç']):
            time_str = entry['reason'].split(': ')[1]
        
        if time_str:
            days = hours = minutes = 0
            if '–¥–Ω.' in time_str:
                days_match = re.search(r'(\d+\.?\d*)\s*–¥–Ω\.', time_str)
                if days_match:
                    days = float(days_match.group(1))
            if '—á.' in time_str:
                hours_match = re.search(r'(\d+\.?\d*)\s*—á\.', time_str)
                if hours_match:
                    hours = float(hours_match.group(1))
            if '–º–∏–Ω.' in time_str or '–º–∏–Ω—É—Ç' in time_str:
                minutes_match = re.search(r'(\d+\.?\d*)\s*(–º–∏–Ω\.|–º–∏–Ω—É—Ç)', time_str)
                if minutes_match:
                    minutes = float(minutes_match.group(1))
            total_minutes = days * 24 * 60 + hours * 60 + minutes
            if entry['action'] == 'spent':
                gifted_time_minutes += total_minutes
            elif entry['action'] == 'earned':
                received_time_minutes += total_minutes

    points_summary = (
        f"üí∞ *–í–∞—à–∏ –±–∞–ª–ª—ã*\n\n"
        f"üéÅ *–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã:* {format_number(points)}\n\n"
        f"üî• *–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* {format_number(total_earned)}\n"
        f"  ‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥: {format_number(earned_daily)}\n"
        f"  ‚Ä¢ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {format_number(earned_admin)}\n"
        f"  ‚Ä¢ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –¥—Ä—É–≥–∏—Ö: {format_number(earned_gifts)}\n"
        f"  ‚Ä¢ –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {format_number(earned_first_purchase)}\n"
        f"  ‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –±–∞–ª–ª–æ–≤: {format_number(earned_points_purchase)}\n"
        f"  ‚Ä¢ –ó–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {format_number(earned_referrals)}\n"
        f"  ‚Ä¢ –ó–∞ —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {format_number(earned_top_referrals)}\n"
        f"  ‚Ä¢ –ó–∞ –ø–æ–∫—É–ø–∫–∏: {format_number(earned_purchases)}\n\n"
        f"üí∏ *–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:* {format_number(total_spent)}\n"
        f"  ‚Ä¢ –ü–æ–¥–∞—Ä–æ–∫ –¥—Ä—É–≥–∏–º: {format_number(spent_gifts)}\n"
        f"  ‚Ä¢ –û–±–º–µ–Ω –Ω–∞ –≤—Ä–µ–º—è: {format_number(spent_time)}\n"
        f"  ‚Ä¢ –û–±–º–µ–Ω –Ω–∞ —Å–∫–∏–¥–∫–∏: {format_number(spent_discounts)}\n"
        f"  ‚Ä¢ –û–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏: {format_number(spent_features)}\n"
        f"  ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {format_number(spent_admin_delete)}\n"
        f"  ‚Ä¢ –°–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {format_number(spent_admin)}\n\n"
        f"‚è≥ *–ü–æ–¥–∞—Ä–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:* {format_time(gifted_time_minutes)}\n"
        f"‚è≥ *–ü–æ–ª—É—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:* {format_time(received_time_minutes)}"
    )

    message_parts = split_message(points_summary)
    for part in message_parts:
        bot.send_message(message.chat.id, part, parse_mode="Markdown")

# ------------------------------------------------ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ë–û–¢–ê (–æ–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã) -----------------------------------------

@bot.message_handler(func=lambda message: message.text == "–û–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã")
@check_function_state_decorator('–û–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã')
@track_usage('–û–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def exchange_points_handler(message):
    user_id = str(message.from_user.id)
    data = load_payment_data()
    points = data['subscriptions']['users'].get(user_id, {}).get('referral_points', 0)
    
    if points < 2: 
        bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!", parse_mode="Markdown")
        return_to_scores_menu(message)
        return
    
    has_subscription = False
    plans = data['subscriptions']['users'].get(user_id, {}).get('plans', [])
    now = datetime.now()
    for plan in plans:
        end_date = datetime.strptime(plan['end_date'], "%d.%m.%Y –≤ %H:%M")
        if end_date > now:
            has_subscription = True
            break
    
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("–û–±–º–µ–Ω –Ω–∞ –≤—Ä–µ–º—è"), telebot.types.KeyboardButton("–û–±–º–µ–Ω –Ω–∞ —Å–∫–∏–¥–∫—É"), telebot.types.KeyboardButton("–û–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é"))
    markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã"))
    markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
    markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    exchange_rate = 1.0 / 5.0  
    
    bot.send_message(message.chat.id, (
        f"*–û–±–º–µ–Ω –±–∞–ª–ª–æ–≤:*\n\n"
        f"üéÅ *–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã:* {format_number(points)}\n\n"
        f"üîÑ *–í–æ–∑–º–æ–∂–Ω—ã–µ –æ–±–º–µ–Ω—ã:*\n"
        f"‚è≥ - *–í—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏:* _5 –±–∞–ª–ª–æ–≤ = 1 —á–∞—Å_\n"
        f"üîì - *–î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º:* _2 –±–∞–ª–ª–∞ = 15 –º–∏–Ω—É—Ç_\n"
        f"üè∑Ô∏è - *–°–∫–∏–¥–∫–∞:* _10 –±–∞–ª–ª–æ–≤ = 5% (–º–∞–∫—Å. 35%)_\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    ), reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_exchange_option, points, exchange_rate, has_subscription)

@text_only_handler
def process_exchange_option(message, points, exchange_rate, has_subscription):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã":
        return_to_scores_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    user_id = str(message.from_user.id)
    data = load_payment_data()
    
    if message.text == "–û–±–º–µ–Ω –Ω–∞ –≤—Ä–µ–º—è":
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã"))
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, (
            f"*–û–±–º–µ–Ω –±–∞–ª–ª–æ–≤:*\n\n"
            f"üéÅ *–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã:* {format_number(points)}\n"
            f"‚è≥ *–û–±–º–µ–Ω –Ω–∞ –≤—Ä–µ–º—è:* _5 –±–∞–ª–ª–æ–≤ = 1 —á–∞—Å_\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_points_exchange, exchange_rate)
    elif message.text == "–û–±–º–µ–Ω –Ω–∞ —Å–∫–∏–¥–∫—É":
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã"))
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, (
            f"*–û–±–º–µ–Ω –±–∞–ª–ª–æ–≤:*\n\n"
            f"üéÅ *–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã:* {format_number(points)}\n"
            f"üè∑Ô∏è *–û–±–º–µ–Ω –Ω–∞ —Å–∫–∏–¥–∫—É:* _10 –±–∞–ª–ª–æ–≤ = 5% (–º–∞–∫—Å. 35%)_\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_discount_exchange)
    elif message.text == "–û–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é":
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        paid_features = get_paid_features()
        for i in range(0, len(paid_features), 2):
            if i + 1 < len(paid_features):
                markup.add(paid_features[i], paid_features[i + 1])
            else:
                markup.add(paid_features[i])
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã"))
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, (
            f"*–û–±–º–µ–Ω –±–∞–ª–ª–æ–≤ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏:*\n\n"
            f"üéÅ *–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã:* {format_number(points)}\n"
            f"üîì *–û–±–º–µ–Ω –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º:* _2 –±–∞–ª–ª–∞ = 15 –º–∏–Ω—É—Ç_\n\n"  
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:"
        ), reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_feature_selection, points)
    else:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(telebot.types.KeyboardButton("–û–±–º–µ–Ω –Ω–∞ –≤—Ä–µ–º—è"), telebot.types.KeyboardButton("–û–±–º–µ–Ω –Ω–∞ —Å–∫–∏–¥–∫—É"), telebot.types.KeyboardButton("–û–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é"))
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã"))
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π!", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_exchange_option, points, exchange_rate, has_subscription)

@text_only_handler
def process_feature_selection(message, points):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã":
        return_to_scores_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    user_id = str(message.from_user.id)
    data = load_payment_data()
    feature = message.text
    paid_features = get_paid_features()
    if feature not in paid_features:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in range(0, len(paid_features), 2):
            if i + 1 < len(paid_features):
                markup.add(paid_features[i], paid_features[i + 1])
            else:
                markup.add(paid_features[i])
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã"))
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞!", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_feature_selection, points)
        return
    
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã"))
    markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
    markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    bot.send_message(message.chat.id, (
        f"*–û–±–º–µ–Ω –±–∞–ª–ª–æ–≤ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é: {feature.lower()}*\n\n"
        f"üéÅ *–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã:* {format_number(points)}\n"
        f"üîì *–û–±–º–µ–Ω –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏:* _2 –±–∞–ª–ª–∞ = 15 –º–∏–Ω—É—Ç_\n\n"  
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞:"
    ), reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_feature_exchange, feature, points)

@text_only_handler
def process_feature_exchange(message, feature, points):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã":
        return_to_scores_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    user_id = str(message.from_user.id)
    data = load_payment_data()
    
    try:
        exchange_points = float(message.text.replace(',', '.'))
        if exchange_points < 2:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ ‚Äî 2!")
        if exchange_points > points:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!")
        if exchange_points % 2 != 0:
            raise ValueError("–ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã 2!")
        
        total_minutes = exchange_points * (15.0 / 2.0) 
        days = int(total_minutes // (24 * 60))
        remaining_minutes = total_minutes % (24 * 60)
        remaining_hours = remaining_minutes // 60
        remaining_minutes = remaining_minutes % 60
        
        duration_str = ""
        if days > 0:
            duration_str = f"{days} –¥–Ω. {format_number(remaining_hours)} —á. {format_number(remaining_minutes)} –º–∏–Ω."
        elif remaining_hours > 0:
            duration_str = f"{format_number(remaining_hours)} —á. {format_number(remaining_minutes)} –º–∏–Ω."
        else:
            duration_str = f"{format_number(remaining_minutes)} –º–∏–Ω."
        
        feature_access = data['subscriptions']['users'].get(user_id, {}).get('feature_access', {})
        current_end = datetime.strptime(feature_access.get(feature, "01.01.2025 –≤ 00:00"), "%d.%m.%Y –≤ %H:%M")
        latest_end = max(current_end, datetime.now())
        new_end = latest_end + timedelta(days=days, hours=remaining_hours, minutes=remaining_minutes)
        
        start_date = latest_end.strftime("%d.%m.%Y –≤ %H:%M")
        end_date_str = new_end.strftime("%d.%m.%Y –≤ %H:%M")
        
        data['subscriptions']['users'][user_id]['referral_points'] -= exchange_points
        data['subscriptions']['users'][user_id].setdefault('points_history', []).append({
            "action": "spent",
            "points": exchange_points,
            "exchange_type": "feature",
            "reason": f"–û–±–º–µ–Ω –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é '{feature}' ({duration_str})",
            "feature_name": feature,
            "date": datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })
        
        data['subscriptions']['users'].setdefault(user_id, {}).setdefault('feature_access', {})
        data['subscriptions']['users'][user_id]['feature_access'][feature] = end_date_str
        
        save_payments_data(data)
        
        result_msg = (
            f"‚úÖ *–û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!*\n\n"
            f"üí∞ *–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:* {format_number(exchange_points)} {pluralize_points(exchange_points)}\n"
            f"üîÑ *–¢–∏–ø –æ–±–º–µ–Ω–∞:* –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏ *{feature.lower()}*\n"
            f"üîÑ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–º–µ–Ω–∞:* {duration_str}\n\n"
            f"üïí *–ù–∞—á–∞–ª–æ:* {start_date}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {end_date_str}"
        )
        
        bot.send_message(message.chat.id, result_msg, parse_mode="Markdown")
        points_menu(message)
    
    except ValueError as e:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã"))
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, f"{str(e)}", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_feature_exchange, feature, points)

@text_only_handler
def process_points_exchange(message, exchange_rate):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã":
        return_to_scores_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    user_id = str(message.from_user.id)
    data = load_payment_data()
    points = data['subscriptions']['users'].get(user_id, {}).get('referral_points', 0)
    
    try:
        exchange_points = float(message.text.replace(',', '.'))
        if exchange_points < 5:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ ‚Äî 5!")
        if exchange_points > points:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!")
        if exchange_points % 5 != 0:
            raise ValueError("–ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã 5!")
        if exchange_points > 6000:  
            raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±–º–µ–Ω ‚Äî 6000 –±–∞–ª–ª–æ–≤ (50 –¥–Ω–µ–π)!")
        
        total_hours = exchange_points * exchange_rate  
        days = int(total_hours // 24)
        remaining_hours = total_hours % 24
        
        duration_str = ""
        if days > 0 and remaining_hours > 0:
            duration_str = f"{days} –¥–Ω. {format_number(remaining_hours)} —á."
        elif days > 0:
            duration_str = f"{days} –¥–Ω."
        else:
            duration_str = f"{format_number(remaining_hours)} —á."
        
        latest_end = max([datetime.strptime(p['end_date'], "%d.%m.%Y –≤ %H:%M") 
                         for p in data['subscriptions']['users'].get(user_id, {}).get('plans', [])] 
                         or [datetime.now()])
        new_end = latest_end + timedelta(days=days, hours=remaining_hours)
        
        start_date = latest_end.strftime("%d.%m.%Y –≤ %H:%M")
        end_date_str = new_end.strftime("%d.%m.%Y –≤ %H:%M")
        
        data['subscriptions']['users'][user_id]['referral_points'] -= exchange_points
        data['subscriptions']['users'][user_id].setdefault('points_history', []).append({
            "action": "spent",
            "points": exchange_points,
            "exchange_type": "subscription",
            "reason": f"–û–±–º–µ–Ω –Ω–∞ {duration_str}",
            "date": datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })
        
        data['subscriptions']['users'].setdefault(user_id, {})
        data['subscriptions']['users'][user_id].setdefault('plans', []).append({
            "plan_name": "points_bonus",
            "start_date": start_date,
            "end_date": end_date_str,
            "price": 0
        })
        
        save_payments_data(data)
        
        result_msg = (
            f"‚úÖ *–û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!*\n\n"
            f"üí∞ *–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:* {format_number(exchange_points)} {pluralize_points(exchange_points)}\n"
            f"üîÑ *–¢–∏–ø –æ–±–º–µ–Ω–∞:* –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            f"üîÑ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–º–µ–Ω–∞:* {duration_str}\n\n"
            f"üïí *–ù–∞—á–∞–ª–æ:* {start_date}\n"
            f"‚åõ *–ö–æ–Ω–µ—Ü:* {end_date_str}"
        )
        
        bot.send_message(message.chat.id, result_msg, parse_mode="Markdown")
        points_menu(message)
    
    except ValueError as e:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã"))
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, f"{str(e)}", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_points_exchange, exchange_rate)

@text_only_handler
def process_discount_exchange(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã":
        return_to_scores_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É":
        payments_function(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    user_id = str(message.from_user.id)
    data = load_payment_data()
    users_data = load_users_data()
    points = data['subscriptions']['users'].get(user_id, {}).get('referral_points', 0)
    
    try:
        exchange_points = float(message.text.replace(',', '.'))
        if exchange_points < 10:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ ‚Äî 10!")
        if exchange_points > points:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!")
        if exchange_points % 10 != 0:
            raise ValueError("–ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã 10!")
        
        discount = (exchange_points // 10) * 5
        current_discount = users_data.get(user_id, {}).get('discount', 0)
        if current_discount + discount > 35:
            raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ ‚Äî 35%!")
        
        data['subscriptions']['users'][user_id]['referral_points'] -= exchange_points
        data['subscriptions']['users'][user_id].setdefault('points_history', []).append({
            "action": "spent",
            "points": exchange_points,
            "exchange_type": "discount",
            "reason": f"–û–±–º–µ–Ω –Ω–∞ {discount}% —Å–∫–∏–¥–∫–∏",
            "date": datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        })
        
        users_data.setdefault(user_id, {})
        users_data[user_id]['discount'] = current_discount + discount
        users_data[user_id]['discount_type'] = "points"
        
        save_payments_data(data)
        
        bot.send_message(message.chat.id, (
            f"‚úÖ *–û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!*\n\n"
            f"üí∞ *–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:* {format_number(exchange_points)} {pluralize_points(exchange_points)}\n"
            f"üîÑ *–¢–∏–ø –æ–±–º–µ–Ω–∞:* —Å–∫–∏–¥–∫–∞\n"
            f"üîÑ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–º–µ–Ω–∞:* {format_number(discount)}%\n\n"
            f"üìâ *–¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞:* {format_number(users_data[user_id]['discount'])}%"
        ), parse_mode="Markdown")
        points_menu(message)
    
    except ValueError as e:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–ª–ª—ã"))
        markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–¥–ø–∏—Å–∫—É"))
        markup.add(telebot.types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, f"{str(e)}", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_discount_exchange)