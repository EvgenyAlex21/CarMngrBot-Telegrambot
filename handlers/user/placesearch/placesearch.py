from core.imports import wraps, telebot, types, os, json, re, requests, Nominatim
from core.bot_instance import bot
from handlers.user.user_main_menu import return_to_menu
from handlers.user.antiradar.antiradar import user_tracking, track_user_location
from ..utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha, check_function_state_decorator, track_usage, check_subscription
)

# ----------------------------------------------- –ü–û–ò–°–ö –ú–ï–°–¢ ---------------------------------------------------

geolocator = Nominatim(user_agent="geo_bot")

user_locations = {}

def get_yandex_maps_search_url(latitude, longitude, query):
    base_url = "https://yandex.ru/maps/?"
    search_params = {
        'll': f"{longitude},{latitude}",
        'z': 15,
        'text': query,
        'mode': 'search'
    }
    query_string = "&".join([f"{key}={value}" for key, value in search_params.items()])
    return f"{base_url}{query_string}"

def shorten_url(original_url):
    endpoint = 'https://clck.ru/--'
    response = requests.get(endpoint, params={'url': original_url})
    return response.text

@bot.message_handler(func=lambda message: message.text == "–ü–æ–∏—Å–∫ –º–µ—Å—Ç")
@check_function_state_decorator('–ü–æ–∏—Å–∫ –º–µ—Å—Ç')
@track_usage('–ü–æ–∏—Å–∫ –º–µ—Å—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def placesearch(message, show_description=True):
    user_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_azs = types.KeyboardButton("–ê–ó–°")
    button_car_wash = types.KeyboardButton("–ê–≤—Ç–æ–º–æ–π–∫–∏")
    button_auto_service = types.KeyboardButton("–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã")
    button_parking = types.KeyboardButton("–ü–∞—Ä–∫–æ–≤–∫–∏")
    button_evacuation = types.KeyboardButton("–≠–≤–∞–∫—É–∞—Ü–∏—è")
    button_gibdd_mreo = types.KeyboardButton("–ì–ò–ë–î–î")
    button_accident_commissioner = types.KeyboardButton("–ö–æ–º–∏—Å—Å–∞—Ä—ã")
    button_impound = types.KeyboardButton("–®—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–∞")
    item1 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(button_azs, button_car_wash, button_auto_service)
    markup.add(button_parking, button_evacuation, button_gibdd_mreo, button_accident_commissioner, button_impound)
    markup.add(item1)

    help_message = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–æ–∏—Å–∫—É –º–µ—Å—Ç*\n\n"
        "üìå *–í—ã–±–æ—Ä –ø–æ–∏—Å–∫–∞:*\n"
        "–í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫\n\n"
        "üìå *–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏:*\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è\n\n"
        "üìå *–ü–æ–∏—Å–∫:*\n"
        "–í—ã–≤–æ–¥ —Å—Å—ã–ª–∫–∏(-–æ–∫) —Å –±–ª–∏–∂–∞–π—à–∏–º–∏ –º–µ—Å—Ç–∞–º–∏ –ø–æ –≤–∞—à–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏\n\n"
    )

    if show_description:
        bot.send_message(user_id, help_message, parse_mode="Markdown")

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–∏—Å–∫–∞:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ")
@check_function_state_decorator('–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ')
@track_usage('–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_reset_category(message):
    selected_categories.pop(message.chat.id, None)
    placesearch(message, show_description=False)

selected_categories = {}

@bot.message_handler(func=lambda message: message.text in {"–ê–ó–°", "–ê–≤—Ç–æ–º–æ–π–∫–∏", "–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã", "–ü–∞—Ä–∫–æ–≤–∫–∏", "–≠–≤–∞–∫—É–∞—Ü–∏—è", "–ì–ò–ë–î–î", "–ö–æ–º–∏—Å—Å–∞—Ä—ã", "–®—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–∞"})
@check_function_state_decorator('–ê–ó–°')
@check_function_state_decorator('–ê–≤—Ç–æ–º–æ–π–∫–∏')
@check_function_state_decorator('–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã')
@check_function_state_decorator('–ü–∞—Ä–∫–æ–≤–∫–∏')
@check_function_state_decorator('–≠–≤–∞–∫—É–∞—Ü–∏—è')
@check_function_state_decorator('–ì–ò–ë–î–î')
@check_function_state_decorator('–ö–æ–º–∏—Å—Å–∞—Ä—ã')
@check_function_state_decorator('–®—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–∞')
@track_usage('–ê–ó–°')
@track_usage('–ê–≤—Ç–æ–º–æ–π–∫–∏')
@track_usage('–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã')
@track_usage('–ü–∞—Ä–∫–æ–≤–∫–∏')
@track_usage('–≠–≤–∞–∫—É–∞—Ü–∏—è')
@track_usage('–ì–ò–ë–î–î')
@track_usage('–ö–æ–º–∏—Å—Å–∞—Ä—ã')
@track_usage('–®—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–∞')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_menu_category_buttons(message):
    if message.text in {"–ê–ó–°", "–ê–≤—Ç–æ–º–æ–π–∫–∏", "–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã", "–ü–∞—Ä–∫–æ–≤–∫–∏", "–≠–≤–∞–∫—É–∞—Ü–∏—è", "–ì–ò–ë–î–î", "–ö–æ–º–∏—Å—Å–∞—Ä—ã", "–®—Ç—Ä–∞—Ñ—Å—Ç–æ—è–Ω–∫–∞"}:
        selected_categories[message.chat.id] = message.text
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_send_location = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
        button_reset_category = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ")
        item1 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        keyboard.add(button_send_location)
        keyboard.add(button_reset_category)
        keyboard.add(item1)
        bot.send_message(
            message.chat.id,
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!\n–í–∞–º –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - *{selected_categories[message.chat.id].lower()}:*",
            reply_markup=keyboard,
            parse_mode="Markdown",
        )
    else:
        selected_categories.pop(message.chat.id, None)
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é!")

def _has_selected_category(m):
    try:
        return selected_categories.get(m.chat.id) is not None
    except Exception:
        return False

@bot.message_handler(content_types=['location'], func=_has_selected_category)
@check_function_state_decorator('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏')
@track_usage('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@check_subscription_chanal
@rate_limit_with_captcha
def handle_location(message):
    user_id = message.chat.id
    latitude = message.location.latitude
    longitude = message.location.longitude

    is_tracking = user_tracking.get(user_id, {}).get('tracking', False)
    current_category = selected_categories.get(user_id)

    if is_tracking:
        user_tracking[user_id]['location'] = message.location

        if not user_tracking[user_id].get('started', False):
            user_tracking[user_id]['started'] = True
            track_user_location(user_id, message.location)

        return
    elif current_category:
        try:
            location = geolocator.reverse((latitude, longitude), language='ru', timeout=10)
            address = location.address

            search_url = get_yandex_maps_search_url(latitude, longitude, current_category)
            try:
                short_search_url = shorten_url(search_url)
            except Exception:
                short_search_url = search_url

            message_text = f"üèôÔ∏è *–ë–ª–∏–∂–∞–π—à–∏–µ {current_category.lower()} –ø–æ –∞–¥—Ä–µ—Å—É:* \n\n{address}\n\n"
            message_text += f"üó∫Ô∏è [–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É]({short_search_url})"

            bot.send_message(message.chat.id, message_text, parse_mode="Markdown")
            selected_categories.pop(user_id, None)

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button_reset_category = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ")
            item1 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            keyboard.add(button_reset_category)
            keyboard.add(item1)
            bot.send_message(message.chat.id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ, –º–µ—Å—Ç–∞ –Ω–∞–π–¥–µ–Ω—ã!\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ –¥—Ä—É–≥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=keyboard)

        except Exception as e:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é!")