from core.imports import wraps, telebot, types, os, json, re, shutil, datetime, openpyxl, Workbook, load_workbook, Font, Alignment, get_column_letter, partial
from core.bot_instance import bot, BASE_DIR
from handlers.user.user_main_menu import return_to_menu
from ..utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha, check_function_state_decorator, track_usage, check_subscription
)

# --------------------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–¢—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã")
@check_function_state_decorator('–¢—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã')
@track_usage('–¢—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_expense_and_repairs(message, show_description=True):
    user_id = message.from_user.id

    expense_data = load_expense_data(user_id).get(str(user_id), {})
    repair_data = load_repair_data(user_id).get(str(user_id), {})

    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤*\n\n"
        "üìå *–í—ã–±–æ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:*\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ *–≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç*, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ "
        "–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ \"–≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç\"\n\n"
        "üìå *–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–∏:*\n"
        "–í—ã–±–∏—Ä–∞–µ—Ç–µ *–∫–∞—Ç–µ–≥–æ—Ä–∏—é*, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç—Ä–∞—Ç–∞/—Ä–µ–º–æ–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏. "
        "–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –¥–∞—é—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å\n\n"
        "üìå *–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö:*\n"
        "–í–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–∞—Ç/—Ä–µ–º–æ–Ω—Ç–æ–≤ - *–Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç–∞, —Å—É–º–º–∞*\n\n"
        "üìå *–î—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:*\n"
        "–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É\n\n"
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É")
    item2 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã")
    item3 = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–º–æ–Ω—Ç")
    item4 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã")
    item5 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã")
    item6 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã")
    item7 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    item8 = types.KeyboardButton("–í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")

    markup.add(item8)
    markup.add(item1, item3)
    markup.add(item2, item4)
    markup.add(item5, item6)
    markup.add(item7)

    bot.clear_step_handler_by_chat_id(user_id)

    if show_description:
        bot.send_message(user_id, description, parse_mode='Markdown')

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —É—á–µ—Ç–∞ —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
@check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤')
@track_usage('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def return_to_expense_and_repairs(message):
    handle_expense_and_repairs(message, show_description=False)

# --------------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç) ---------------------------------------------------

TRANSPORT_DIR = os.path.join(BASE_DIR, "data", "user", "expenses_and_repairs", "transport")
REPAIRS_DIR = os.path.join(BASE_DIR, "data", "user", "expenses_and_repairs", "repairs")
EXPENSES_DIR = os.path.join(BASE_DIR, "data", "user", "expenses_and_repairs", "expenses")

def ensure_transport_directory():
    os.makedirs(TRANSPORT_DIR, exist_ok=True)
    os.makedirs(os.path.join(REPAIRS_DIR, "excel"), exist_ok=True)
    os.makedirs(os.path.join(EXPENSES_DIR, "excel"), exist_ok=True)

ensure_transport_directory()

def migrate_legacy_local_data_dir():
    local_data_root = os.path.join(os.path.dirname(__file__), "data", "user", "expenses_and_repairs")
    if not os.path.exists(local_data_root):
        return
    try:
        print("[migrate] –û–±–Ω–∞—Ä—É–∂–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–∞—Ç–∞–ª–æ–≥ –¥–∞–Ω–Ω—ã—Ö –≤ handlers. –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –∫–æ—Ä–Ω–µ–≤–æ–π data/...")
        for sub in ("transport", "expenses", "repairs"):
            src = os.path.join(local_data_root, sub)
            dst = os.path.join(BASE_DIR, "data", "user", "expenses_and_repairs", sub)
            if not os.path.exists(src):
                continue
            os.makedirs(dst, exist_ok=True)
            for root, dirs, files in os.walk(src):
                rel = os.path.relpath(root, src)
                dst_root = os.path.join(dst, rel) if rel != "." else dst
                os.makedirs(dst_root, exist_ok=True)
                for fname in files:
                    try:
                        shutil.replace(os.path.join(root, fname), os.path.join(dst_root, fname))
                    except Exception:
                        pass
        try:
            shutil.rmtree(os.path.join(os.path.dirname(__file__), "data"))
        except Exception:
            pass
        print("[migrate] –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω.")
    except Exception:
        pass

migrate_legacy_local_data_dir()

class States:
    ADDING_TRANSPORT = 1
    CONFIRMING_DELETE = 2

user_transport = {}

def save_transport_data(user_id, transport_data):
    file_path = os.path.join(TRANSPORT_DIR, f"{user_id}_transport.json")
    data = {"user_id": int(user_id), "transport": {}}
    for index, item in enumerate(transport_data, start=1):
        data["transport"][str(index)] = item
    with open(file_path, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

def load_transport_data(user_id):
    file_path = os.path.join(TRANSPORT_DIR, f"{user_id}_transport.json")
    if os.path.exists(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as file:
                data = json.load(file)
                if isinstance(data, dict) and "transport" in data:
                    return list(data["transport"].values())
                elif isinstance(data, list):
                    return data  
                else:
                    return []
        except json.JSONDecodeError as e:
            return []
        except Exception as e:
            return []
    return []

def reload_transport_data(user_id):
    user_id = str(user_id)
    try:
        user_transport[user_id] = load_transport_data(user_id)
    except Exception as e:
        user_transport[user_id] = []

def load_all_transport():
    user_transport.clear()
    for user_file in os.listdir(TRANSPORT_DIR):
        if user_file.endswith("_transport.json"):
            try:
                user_id = user_file.split("_")[0]
                user_transport[user_id] = load_transport_data(user_id)
            except Exception as e:
                pass

load_all_transport()

@bot.message_handler(func=lambda message: message.text == "–í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@check_function_state_decorator('–í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def manage_transport(message):
    user_id = str(message.chat.id)

    keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    keyboard.add("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    keyboard.add("–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    keyboard.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    keyboard.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@check_function_state_decorator('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def return_to_transport_menu(message):
    manage_transport(message)

def create_transport_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return markup

# --------------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–æ—Ä—Ç) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@check_function_state_decorator('–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def add_transport(message):
    user_id = str(message.chat.id)
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=create_transport_keyboard())
    bot.register_next_step_handler(message, process_brand)

def format_brand_model(text):
    return " ".join(word.capitalize() for word in text.strip().split())

@text_only_handler
def process_brand(message):
    user_id = str(message.chat.id)

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    brand = format_brand_model(message.text)
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=create_transport_keyboard())
    bot.register_next_step_handler(message, process_model, brand)

@text_only_handler
def process_model(message, brand):
    user_id = str(message.chat.id)

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    model = format_brand_model(message.text)
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=create_transport_keyboard())
    bot.register_next_step_handler(message, process_year, brand, model)

@text_only_handler
def process_year(message, brand, model):
    user_id = str(message.chat.id)

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    try:
        year = int(message.text)
        if year < 1960 or year > 3000:
            raise ValueError("–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1960 –≥. –¥–æ 3000 –≥.")
    except ValueError:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –≥–æ–¥–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –æ—Ç 1960 –≥. –¥–æ 3000 –≥.", reply_markup=create_transport_keyboard())
        bot.register_next_step_handler(message, process_year, brand, model)
        return

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä:", reply_markup=create_transport_keyboard())
    bot.register_next_step_handler(message, process_license_plate, brand, model, year)

@text_only_handler
def process_license_plate(message, brand, model, year):
    user_id = str(message.chat.id)
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    license_plate = message.text.upper()
    pattern = r'^[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•ABEKMHOPCTYX]\d{3}[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•ABEKMHOPCTYX]{2}\d{2,3}$'
    if not re.match(pattern, license_plate):
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –≥–æ—Å–Ω–æ–º–µ—Ä–∞!\n–ì–æ—Å–Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É –≥–æ—Å–Ω–æ–º–µ—Ä–æ–≤ –†–§ (–ê121–ê–ê21 –∏–ª–∏ –ê121–ê–ê121)", reply_markup=create_transport_keyboard())
        bot.register_next_step_handler(message, process_license_plate, brand, model, year)
        return

    if any(t["license_plate"] == license_plate for t in user_transport.get(user_id, [])):
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –≥–æ—Å–Ω–æ–º–µ—Ä–∞!\n–¢–∞–∫–æ–π –≥–æ—Å–Ω–æ–º–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_markup=create_transport_keyboard())
        bot.register_next_step_handler(message, process_license_plate, brand, model, year)
        return

    if user_id not in user_transport:
        user_transport[user_id] = []

    user_transport[user_id].append({"brand": brand, "model": model, "year": year, "license_plate": license_plate})
    save_transport_data(user_id, user_transport[user_id])

    bot.send_message(user_id, f"‚úÖ *–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω*\n\n*{brand} - {model} - {year} - {license_plate}*", parse_mode="Markdown", reply_markup=create_transport_keyboard())
    manage_transport(message)

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_transport(message):
    user_id = str(message.chat.id)
    
    reload_transport_data(user_id)
    
    if user_id in user_transport and user_transport[user_id]:
        transport_list = user_transport[user_id]
        response = "\n\n".join([
            f"‚Ññ{index + 1}. {item['brand']} - {item['model']} - {item['year']} - `{item['license_plate']}`"
            for index, item in enumerate(transport_list)
        ])
        bot.send_message(
            user_id,
            f"üöô *–í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç*\n\n{response}",
            parse_mode="Markdown"
        )
    else:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!")
    manage_transport(message)

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_transport(message):
    user_id = str(message.chat.id)
    
    reload_transport_data(user_id)
    
    if user_id in user_transport and user_transport[user_id]:
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        transport_list = user_transport[user_id]

        for index, item in enumerate(transport_list, start=1):
            keyboard.add(f"‚Ññ{index}. {item['brand']} - {item['model']} - {item['year']} - {item['license_plate']}")

        keyboard.add("–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        keyboard.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        keyboard.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        bot.register_next_step_handler(message, process_transport_selection_for_deletion)
    else:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!")
        manage_transport(message)

def get_return_menu_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return markup

@text_only_handler
def process_transport_selection_for_deletion(message):
    user_id = str(message.chat.id)
    selected_transport = message.text.strip()

    if selected_transport == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if selected_transport == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return
    if selected_transport == "–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        delete_all_transports(message)
        return

    transport_list = user_transport.get(user_id, [])
    if transport_list:
        try:
            index = int(selected_transport.split('.')[0].replace("‚Ññ", "").strip()) - 1
            if 0 <= index < len(transport_list):
                transport_to_delete = transport_list[index]
                bot.send_message(
                    user_id,
                    f"‚ö†Ô∏è *–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?*\n\n{transport_to_delete['brand']} - {transport_to_delete['model']} - {transport_to_delete['year']} - {transport_to_delete['license_plate']}\n\n"
                    "–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–¥–∞* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–Ω–µ—Ç* –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                    parse_mode="Markdown",
                    reply_markup=get_return_menu_keyboard()
                )
                bot.register_next_step_handler(message, partial(process_confirmation, transport_to_delete=transport_to_delete))
            else:
                raise ValueError("–ò–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        except ValueError:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞")
            delete_transport(message)
    else:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!")
        manage_transport(message)

def delete_expense_related_to_transport(user_id, transport, selected_transport=""):
    expense_data = load_expense_data(user_id)
    if str(user_id) in expense_data:
        updated_expense = [
            expense for expense in expense_data[str(user_id)].get('expense', [])
            if not (
                expense.get('transport', {}).get('brand') == transport.get('brand') and
                expense.get('transport', {}).get('model') == transport.get('model') and
                expense.get('transport', {}).get('license_plate') == transport.get('license_plate')
            )
        ]
        expense_data[str(user_id)]['expense'] = updated_expense
        if expense_data.get('selected_transport') == f"{transport['brand']} {transport['model']} ({transport['license_plate']})":
            expense_data['selected_transport'] = ""
        save_expense_data(user_id, expense_data, selected_transport)
    update_excel_file_expense(user_id)

def delete_repairs_related_to_transport(user_id, transport):
    repair_data = load_repair_data(user_id)
    if str(user_id) in repair_data:
        updated_repairs = [
            repair for repair in repair_data[str(user_id)].get("repairs", [])
            if not (
                repair.get('transport', {}).get('brand') == transport.get('brand') and
                repair.get('transport', {}).get('model') == transport.get('model') and
                repair.get('transport', {}).get('license_plate') == transport.get('license_plate')
            )
        ]
        repair_data[str(user_id)]["repairs"] = updated_repairs
        if repair_data.get('selected_transport') == f"{transport['brand']} {transport['model']} ({transport['license_plate']})":
            repair_data['selected_transport'] = ""
        save_repair_data(user_id, repair_data, selected_transport="")
    update_repairs_excel_file(user_id)

@text_only_handler
def process_confirmation(message, transport_to_delete):
    user_id = str(message.chat.id)
    confirmation = message.text.strip().lower()

    if confirmation == "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if confirmation == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    if confirmation == "–¥–∞":
        if user_id in user_transport and transport_to_delete in user_transport[user_id]:
            user_transport[user_id].remove(transport_to_delete)
            delete_expense_related_to_transport(user_id, transport_to_delete)
            delete_repairs_related_to_transport(user_id, transport_to_delete)
            save_transport_data(user_id, user_transport[user_id])
            bot.send_message(user_id, "‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º —Ç—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")
        else:
            bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
    elif confirmation == "–Ω–µ—Ç":
        bot.send_message(user_id, "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!", parse_mode="Markdown")
    else:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–¥–∞* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–Ω–µ—Ç* –¥–ª—è –æ—Ç–º–µ–Ω—ã", parse_mode="Markdown")
        bot.register_next_step_handler(message, partial(process_confirmation, transport_to_delete=transport_to_delete))
    manage_transport(message)

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_all_transports(message):
    user_id = str(message.chat.id)
    if user_id in user_transport and user_transport[user_id]:
        bot.send_message(
            user_id,
            "‚ö†Ô∏è *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?*\n\n"
            "–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ *–¥–∞* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–Ω–µ—Ç* –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode="Markdown",
            reply_markup=get_return_menu_keyboard()
        )
        bot.register_next_step_handler(message, process_delete_all_confirmation)
    else:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!")
        manage_transport(message)

@text_only_handler
def process_delete_all_confirmation(message):
    user_id = str(message.chat.id)
    confirmation = message.text.strip().lower()

    if confirmation == "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if confirmation == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    if confirmation == "–¥–∞":
        if user_id in user_transport and user_transport[user_id]:
            transports = user_transport[user_id]
            user_transport[user_id] = []
            for transport in transports:
                delete_expense_related_to_transport(user_id, transport)
                delete_repairs_related_to_transport(user_id, transport)
            save_transport_data(user_id, user_transport[user_id])
            bot.send_message(user_id, "‚úÖ –í–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º —Ç—Ä–∞—Ç—ã –∏ —Ä–µ–º–æ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")
        else:
            bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
    elif confirmation == "–Ω–µ—Ç":
        bot.send_message(user_id, "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!", parse_mode="Markdown")
    else:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–¥–∞* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–Ω–µ—Ç* –¥–ª—è –æ—Ç–º–µ–Ω—ã", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_delete_all_confirmation)
    manage_transport(message)

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–∏–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@check_function_state_decorator('–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def edit_transport(message):
    user_id = str(message.chat.id)
    
    reload_transport_data(user_id)
    
    transports = user_transport.get(user_id, [])
    if not transports:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", reply_markup=create_transport_keyboard())
        manage_transport(message)
        return

    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    for index, transport in enumerate(transports, start=1):
        keyboard.add(f"‚Ññ{index}. {transport['brand']} - {transport['model']} - {transport['year']} - {transport['license_plate']}")
    keyboard.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    keyboard.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=keyboard)
    bot.register_next_step_handler(message, process_transport_selection_for_edit)

@text_only_handler
def process_transport_selection_for_edit(message):
    user_id = str(message.chat.id)
    selected_transport_text = message.text.strip()

    if selected_transport_text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if selected_transport_text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    transports = user_transport.get(user_id, [])
    try:
        index = int(selected_transport_text.split('.')[0].replace("‚Ññ", "").strip()) - 1
        if 0 <= index < len(transports):
            selected_transport = transports[index]
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            keyboard.add("–ú–∞—Ä–∫–∞", "–ú–æ–¥–µ–ª—å", "–ì–æ–¥", "–ì–æ—Å–Ω–æ–º–µ—Ä")
            keyboard.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
            keyboard.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            bot.send_message(user_id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)
            bot.register_next_step_handler(message, partial(process_field_selection, selected_transport=selected_transport))
        else:
            raise ValueError("–ò–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    except ValueError:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, process_transport_selection_for_edit)

@text_only_handler
def process_field_selection(message, selected_transport):
    user_id = str(message.chat.id)
    field = message.text.strip()

    if field == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if field == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    if field not in ["–ú–∞—Ä–∫–∞", "–ú–æ–¥–µ–ª—å", "–ì–æ–¥", "–ì–æ—Å–Ω–æ–º–µ—Ä"]:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö", parse_mode="Markdown")
        keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        keyboard.add("–ú–∞—Ä–∫–∞", "–ú–æ–¥–µ–ª—å", "–ì–æ–¥", "–ì–æ—Å–Ω–æ–º–µ—Ä")
        keyboard.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        keyboard.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.register_next_step_handler(message, partial(process_field_selection, selected_transport=selected_transport))
        return

    current = {
        "–ú–∞—Ä–∫–∞": selected_transport['brand'],
        "–ú–æ–¥–µ–ª—å": selected_transport['model'],
        "–ì–æ–¥": str(selected_transport['year']),
        "–ì–æ—Å–Ω–æ–º–µ—Ä": selected_transport['license_plate']
    }
    bot.send_message(user_id, f'–¢–µ–∫—É—â–∏–π(-–∞—è) *{field.lower()}* —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ - {current[field]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:', reply_markup=create_transport_keyboard(), parse_mode="Markdown")
    bot.register_next_step_handler(message, partial(process_new_value, selected_transport=selected_transport, field=field))

@text_only_handler
def process_new_value(message, selected_transport, field):
    user_id = str(message.chat.id)
    new_value = message.text.strip()

    if new_value == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if new_value == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        manage_transport(message)
        return

    if field == "–ì–æ–¥":
        try:
            new_value = int(new_value)
            if new_value < 1960 or new_value > 3000:
                raise ValueError
        except ValueError:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –≥–æ–¥–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –æ—Ç 1960 –≥. –¥–æ 3000 –≥.", reply_markup=create_transport_keyboard())
            bot.register_next_step_handler(message, partial(process_new_value, selected_transport=selected_transport, field=field))
            return
    elif field == "–ì–æ—Å–Ω–æ–º–µ—Ä":
        pattern = r'^[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•ABEKMHOPCTYX]\d{3}[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•ABEKMHOPCTYX]{2}\d{2,3}$'
        if not re.match(pattern, new_value.upper()):
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –≥–æ—Å–Ω–æ–º–µ—Ä–∞!\n–ì–æ—Å–Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É –≥–æ—Å–Ω–æ–º–µ—Ä–æ–≤ –†–§ (–ê121–ê–ê21 –∏–ª–∏ –ê121–ê–ê121)", reply_markup=create_transport_keyboard())
            bot.register_next_step_handler(message, partial(process_new_value, selected_transport=selected_transport, field=field))
            return
        if any(t['license_plate'] == new_value.upper() and t != selected_transport for t in user_transport.get(user_id, [])):
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –≥–æ—Å–Ω–æ–º–µ—Ä–∞!\n–¢–∞–∫–æ–π –≥–æ—Å–Ω–æ–º–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_markup=create_transport_keyboard())
            bot.register_next_step_handler(message, partial(process_new_value, selected_transport=selected_transport, field=field))
            return
        new_value = new_value.upper()
    elif field in ["–ú–∞—Ä–∫–∞", "–ú–æ–¥–µ–ª—å"]:
        new_value = format_brand_model(new_value)

    old_transport = selected_transport.copy()
    field_key = "license_plate" if field == "–ì–æ—Å–Ω–æ–º–µ—Ä" else field.lower()
    selected_transport[field_key] = new_value
    save_transport_data(user_id, user_transport.get(user_id, []))

    update_related_data(user_id, old_transport, selected_transport, field_key, new_value)
    update_excel_files_after_transport_change(user_id, old_transport, selected_transport)

    bot.send_message(user_id, f'‚úÖ *{field}* —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω(-–∞)!', parse_mode="Markdown", reply_markup=create_transport_keyboard())
    manage_transport(message)

def update_related_data(user_id, old_transport, new_transport, field_key, new_value):
    updated = False

    expense_data = load_expense_data(user_id)
    if str(user_id) in expense_data and (expense_data[str(user_id)].get('expense') or expense_data.get('selected_transport')):
        old_selected = f"{old_transport['brand']} {old_transport['model']} ({old_transport['license_plate']})"
        new_selected = f"{new_transport['brand']} {new_transport['model']} ({new_transport['license_plate']})"
        if expense_data.get('selected_transport') == old_selected:
            expense_data['selected_transport'] = new_selected
        for expense in expense_data[str(user_id)].get('expense', []):
            transport_data = expense.get('transport', {})
            if (
                transport_data.get('brand') == old_transport['brand'] and
                transport_data.get('model') == old_transport['model'] and
                transport_data.get('license_plate') == old_transport['license_plate']
            ):
                transport_data[field_key] = new_value
        save_expense_data(user_id, expense_data, new_selected)
        updated = True

    repair_data = load_repair_data(user_id)
    if str(user_id) in repair_data and (repair_data[str(user_id)].get('repairs') or repair_data.get('selected_transport')):
        old_selected = f"{old_transport['brand']} {old_transport['model']} ({old_transport['license_plate']})"
        new_selected = f"{new_transport['brand']} {new_transport['model']} ({new_transport['license_plate']})"
        if repair_data.get('selected_transport') == old_selected:
            repair_data['selected_transport'] = new_selected
        for repair in repair_data[str(user_id)].get('repairs', []):
            transport_data = repair.get('transport', {})
            if (
                transport_data.get('brand') == old_transport['brand'] and
                transport_data.get('model') == old_transport['model'] and
                transport_data.get('license_plate') == old_transport['license_plate']
            ):
                transport_data[field_key] = new_value
        save_repair_data(user_id, repair_data, new_selected)
        updated = True

    if not updated:
        pass

def update_excel_files_after_transport_change(user_id, old_transport, new_transport):
    expense_excel_path = os.path.join(EXPENSES_DIR, "excel", f"{user_id}_expenses.xlsx")
    expense_data = load_expense_data(user_id)
    expenses = expense_data.get(str(user_id), {}).get('expense', [])

    if expenses:
        try:
            if os.path.exists(expense_excel_path):
                workbook = load_workbook(expense_excel_path)
            else:
                workbook = Workbook()
                workbook.remove(workbook.active)

            if "Summary" not in workbook.sheetnames:
                summary_sheet = workbook.create_sheet("Summary")
            else:
                summary_sheet = workbook["Summary"]
                summary_sheet.delete_rows(2, summary_sheet.max_row)

            headers = ["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]
            if summary_sheet.max_row == 0:
                summary_sheet.append(headers)
                for cell in summary_sheet[1]:
                    cell.font = Font(bold=True)
                    cell.alignment = Alignment(horizontal="center")

            for expense in expenses:
                transport = expense.get('transport', {})
                row_data = [
                    f"{transport.get('brand', '')} {transport.get('model', '')} ({transport.get('license_plate', '')})",
                    expense.get("category", ""),
                    expense.get("name", ""),
                    expense.get("date", ""),
                    float(expense.get("amount", 0)),
                    expense.get("description", ""),
                ]
                summary_sheet.append(row_data)

            unique_transports = set(
                (exp.get("transport", {}).get("brand", ""), exp.get("transport", {}).get("model", ""), exp.get("transport", {}).get("license_plate", ""))
                for exp in expenses
            )

            for sheet_name in workbook.sheetnames[:]:
                if sheet_name == "Summary":
                    continue
                parts = sheet_name.split("_")
                if len(parts) != 3 or (parts[0], parts[1], parts[2]) not in unique_transports:
                    del workbook[sheet_name]

            for brand, model, license_plate in unique_transports:
                sheet_name = f"{brand}_{model}_{license_plate}"[:31]
                if sheet_name not in workbook.sheetnames:
                    transport_sheet = workbook.create_sheet(sheet_name)
                    transport_sheet.append(headers)
                    for cell in transport_sheet[1]:
                        cell.font = Font(bold=True)
                        cell.alignment = Alignment(horizontal="center")
                else:
                    transport_sheet = workbook[sheet_name]
                    transport_sheet.delete_rows(2, transport_sheet.max_row)

                for expense in expenses:
                    if (
                        expense.get("transport", {}).get("brand", "") == brand and
                        expense.get("transport", {}).get("model", "") == model and
                        expense.get("transport", {}).get("license_plate", "") == license_plate
                    ):
                        row_data = [
                            f"{brand} {model} ({license_plate})",
                            expense.get("category", ""),
                            expense.get("name", ""),
                            expense.get("date", ""),
                            float(expense.get("amount", 0)),
                            expense.get("description", ""),
                        ]
                        transport_sheet.append(row_data)

            for sheet_name in workbook.sheetnames:
                sheet = workbook[sheet_name]
                for col in sheet.columns:
                    max_length = max(len(str(cell.value)) for cell in col if cell.value)
                    sheet.column_dimensions[get_column_letter(col[0].column)].width = max_length + 2

            workbook.save(expense_excel_path)
            workbook.close()
        except Exception as e:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç –≤ Excel!", parse_mode="Markdown")
    else:
        if os.path.exists(expense_excel_path):
            os.remove(expense_excel_path)

    repair_excel_path = os.path.join(REPAIRS_DIR, "excel", f"{user_id}_repairs.xlsx")
    repair_data = load_repair_data(user_id)
    repairs = repair_data.get(str(user_id), {}).get('repairs', [])

    if repairs:
        try:
            if os.path.exists(repair_excel_path):
                workbook = load_workbook(repair_excel_path)
            else:
                workbook = Workbook()
                workbook.remove(workbook.active)

            if "Summary" not in workbook.sheetnames:
                summary_sheet = workbook.create_sheet("Summary")
            else:
                summary_sheet = workbook["Summary"]
                summary_sheet.delete_rows(2, summary_sheet.max_row)

            headers = ["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]
            if summary_sheet.max_row == 0:
                summary_sheet.append(headers)
                for cell in summary_sheet[1]:
                    cell.font = Font(bold=True)
                    cell.alignment = Alignment(horizontal="center")

            for repair in repairs:
                transport = repair.get('transport', {})
                row_data = [
                    f"{transport.get('brand', '')} {transport.get('model', '')} ({transport.get('license_plate', '')})",
                    repair.get("category", ""),
                    repair.get("name", ""),
                    repair.get("date", ""),
                    float(repair.get("amount", 0)),
                    repair.get("description", ""),
                ]
                summary_sheet.append(row_data)

            unique_transports = set(
                (rep.get("transport", {}).get("brand", ""), rep.get("transport", {}).get("model", ""), rep.get("transport", {}).get("license_plate", ""))
                for rep in repairs
            )

            for sheet_name in workbook.sheetnames[:]:
                if sheet_name == "Summary":
                    continue
                parts = sheet_name.split("_")
                if len(parts) != 3 or (parts[0], parts[1], parts[2]) not in unique_transports:
                    del workbook[sheet_name]

            for brand, model, license_plate in unique_transports:
                sheet_name = f"{brand}_{model}_{license_plate}"[:31]
                if sheet_name not in workbook.sheetnames:
                    transport_sheet = workbook.create_sheet(sheet_name)
                    transport_sheet.append(headers)
                    for cell in transport_sheet[1]:
                        cell.font = Font(bold=True)
                        cell.alignment = Alignment(horizontal="center")
                else:
                    transport_sheet = workbook[sheet_name]
                    transport_sheet.delete_rows(2, transport_sheet.max_row)

                for repair in repairs:
                    if (
                        repair.get("transport", {}).get("brand", "") == brand and
                        repair.get("transport", {}).get("model", "") == model and
                        repair.get("transport", {}).get("license_plate", "") == license_plate
                    ):
                        row_data = [
                            f"{brand} {model} ({license_plate})",
                            repair.get("category", ""),
                            repair.get("name", ""),
                            repair.get("date", ""),
                            float(repair.get("amount", 0)),
                            repair.get("description", ""),
                        ]
                        transport_sheet.append(row_data)

            for sheet_name in workbook.sheetnames:
                sheet = workbook[sheet_name]
                for col in sheet.columns:
                    max_length = max(len(str(cell.value)) for cell in col if cell.value)
                    sheet.column_dimensions[get_column_letter(col[0].column)].width = max_length + 2

            workbook.save(repair_excel_path)
            workbook.close()
        except Exception as e:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤ –≤ Excel!", parse_mode="Markdown")
    else:
        if os.path.exists(repair_excel_path):
            os.remove(repair_excel_path)

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—Ç—Ä–∞—Ç—ã) ---------------------------------------------------

DATA_BASE_DIR = os.path.join(BASE_DIR, "data", "user", "expenses_and_repairs")
EXPENSE_DIR = os.path.join(DATA_BASE_DIR, "expenses")

def ensure_directories():
    os.makedirs(EXPENSE_DIR, exist_ok=True)

ensure_directories()

user_transport = {}

def save_expense_data(user_id, user_data, selected_transport=None):
    ensure_directories() 

    file_path = os.path.join(EXPENSE_DIR, f"{user_id}_expenses.json")

    current_data = load_expense_data(user_id)

    user_data["user_categories"] = user_data.get("user_categories", current_data.get("user_categories", []))
    user_data["expense"] = current_data.get("expense", [])

    if selected_transport is not None:
        user_data["selected_transport"] = selected_transport

    with open(file_path, "w", encoding="utf-8") as file:
        json.dump(user_data, file, ensure_ascii=False, indent=4)

def load_expense_data(user_id):
    ensure_directories() 

    file_path = os.path.join(EXPENSE_DIR, f"{user_id}_expenses.json")

    if not os.path.exists(file_path):
        return {"user_categories": [], "selected_transport": "", "expense": []}

    try:
        with open(file_path, "r", encoding="utf-8") as file:
            data = json.load(file)
    except (FileNotFoundError, ValueError) as e:
        data = {"user_categories": [], "selected_transport": "", "expense": []}

    return data

def get_user_categories(user_id):
    data = load_expense_data(user_id)
    default_categories = ["–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–ê–ó–°", "–ú–æ–π–∫–∞", "–ü–∞—Ä–∫–æ–≤–∫–∞", "–ü–ª–∞—Ç–Ω–∞—è –¥–æ—Ä–æ–≥–∞", "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞", "–®—Ç—Ä–∞—Ñ—ã"]
    user_categories = data.get("user_categories", [])
    return default_categories + user_categories

def add_user_category(user_id, new_category):
    data = load_expense_data(user_id)

    if "user_categories" not in data:
        data["user_categories"] = []
    if new_category not in data["user_categories"]:
        data["user_categories"].append(new_category)

    save_expense_data(user_id, data)

def remove_user_category(user_id, category_to_remove, selected_transport=""):
    data = load_expense_data(user_id)
    if "user_categories" in data and category_to_remove in data["user_categories"]:
        data["user_categories"].remove(category_to_remove)
        save_expense_data(user_id, data, selected_transport)

def get_user_transport_keyboard(user_id):
    transports = load_transport_data(user_id) 
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    for i in range(0, len(transports), 2):
        transport_buttons = [
            types.KeyboardButton(f"{transport['brand']} {transport['model']} ({transport['license_plate']})")
            for transport in transports[i:i+2]
        ]
        markup.row(*transport_buttons)

    markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"))
    return markup

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–∑–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É")
@check_function_state_decorator('–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É')
@track_usage('–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def record_expense(message):
    user_id = str(message.from_user.id)

    transports = load_transport_data(user_id) 

    if not transports:
        bot.send_message(user_id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?", reply_markup=create_transport_options_markup(), parse_mode="Markdown")
        bot.register_next_step_handler(message, ask_add_transport)
        return

    markup = get_user_transport_keyboard(user_id)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞—Ç—ã:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, handle_transport_selection_for_expense)
    
@text_only_handler
def handle_transport_selection_for_expense(message):
    user_id = str(message.from_user.id)  
    selected_transport = message.text.strip()

    if selected_transport == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return
    elif selected_transport == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    elif selected_transport == "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        add_transport(message)
        return

    transports = load_transport_data(user_id)
    selected_brand, selected_model, selected_license_plate = None, None, None

    for transport in transports:
        formatted_transport = f"{transport['brand']} {transport['model']} ({transport['license_plate']})"
        if formatted_transport == selected_transport:
            selected_brand = transport['brand']
            selected_model = transport['model']
            selected_license_plate = transport['license_plate']
            break
    else:
        markup = get_user_transport_keyboard(user_id)
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, handle_transport_selection_for_expense)
        return

    process_category_selection(user_id, selected_brand, selected_model, selected_license_plate)

def process_category_selection(user_id, brand, model, license_plate, prompt_message=None):
    categories = get_user_categories(user_id)

    system_emoji = "üîπ"
    user_emoji = "üî∏"

    category_list = "\n".join(
        f"{system_emoji if i < 7 else user_emoji} {i + 1}. {category}"
        for i, category in enumerate(categories)
    )
    category_list = f"*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*\n\n{category_list}"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(
        types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"),
        types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    )
    markup.add(
        types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    )
    markup.add(
        types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    )
    if prompt_message:
        bot.send_message(user_id, category_list, reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(prompt_message, get_expense_category, brand, model, license_plate)
    else:
        prompt_message = bot.send_message(user_id, category_list, reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(prompt_message, get_expense_category, brand, model, license_plate)

@text_only_handler
def get_expense_category(message, brand, model, license_plate):
    user_id = message.from_user.id

    selected_index = message.text.strip()

    if selected_index == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return
    elif selected_index == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if selected_index == '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
        selected_category = "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        proceed_to_expense_name(message, selected_category, brand, model, license_plate)
        return

    if selected_index == '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(
            types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        )
        markup.add(
            types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        )
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, add_new_category, brand, model, license_plate)
        return

    if selected_index == '–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
        handle_category_removal(message, brand, model, license_plate)
        return

    if selected_index.isdigit():
        index = int(selected_index) - 1
        categories = get_user_categories(user_id)
        if 0 <= index < len(categories):
            selected_category = categories[index]
            proceed_to_expense_name(message, selected_category, brand, model, license_plate)
        else:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            bot.register_next_step_handler(message, get_expense_category, brand, model, license_plate)
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")
        bot.register_next_step_handler(message, get_expense_category, brand, model, license_plate)

@text_only_handler
def add_new_category(message, brand, model, license_plate):
    user_id = message.from_user.id

    new_category = message.text.strip().lower()

    if new_category in ["–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if new_category == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_expense_and_repairs(message)
        else:
            return_to_menu(message)
        return

    if not new_category:
        bot.send_message(user_id, "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        bot.register_next_step_handler(message, add_new_category, brand, model, license_plate)
        return

    user_categories = [cat.lower() for cat in get_user_categories(user_id)]
    if new_category in user_categories:
        bot.send_message(user_id, "–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        bot.register_next_step_handler(message, add_new_category, brand, model, license_plate)
        return

    add_user_category(user_id, new_category)
    bot.send_message(user_id, f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è *{new_category}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", parse_mode="Markdown")
    process_category_selection(user_id, brand, model, license_plate)

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
@track_usage('–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_category_removal(message, brand=None, model=None, license_plate=None):
    user_id = message.from_user.id
    categories = get_user_categories(user_id)

    system_emoji = "üîπ"
    user_emoji = "üî∏"

    category_list = "\n".join(
        f"{system_emoji if i < 7 else user_emoji} {i + 1}. {category}"
        for i, category in enumerate(categories)
    )
    category_list = f"*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã:*\n\n{category_list}"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    bot.send_message(user_id, category_list, reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, remove_selected_category, brand, model, license_plate)

@text_only_handler
def remove_selected_category(message, brand, model, license_plate):
    user_id = message.from_user.id

    selected_index = message.text.strip()

    if selected_index == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return
    elif selected_index == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if selected_index == '0':
        bot.send_message(user_id, "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
        return process_category_selection(user_id, brand, model, license_plate)

    if selected_index.isdigit():
        index = int(selected_index) - 1
        categories = get_user_categories(user_id)
        default_categories = ["–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–∞–∑—Å", "–º–æ–π–∫–∞", "–ø–∞—Ä–∫–æ–≤–∫–∞", "–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Ä–æ–≥–∞", "—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞", "—à—Ç—Ä–∞—Ñ—ã"]

        if 0 <= index < len(categories):
            category_to_remove = categories[index].lower()
            if category_to_remove in default_categories:
                bot.send_message(user_id, f"‚ö†Ô∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é *{categories[index]}*!", parse_mode="Markdown")
                return bot.register_next_step_handler(message, remove_selected_category, brand, model, license_plate)

            remove_user_category(user_id, categories[index]) 
            bot.send_message(user_id, f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è *{categories[index]}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", parse_mode="Markdown")
        else:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            return bot.register_next_step_handler(message, remove_selected_category, brand, model, license_plate)
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")
        return bot.register_next_step_handler(message, remove_selected_category, brand, model, license_plate)

    return process_category_selection(user_id, brand, model, license_plate)

@text_only_handler
def proceed_to_expense_name(message, selected_category, brand, model, license_plate):
    user_id = message.from_user.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, get_expense_name, selected_category, brand, model, license_plate)

@text_only_handler
def get_expense_name(message, selected_category, brand, model, license_plate):
    user_id = message.from_user.id

    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_expense_and_repairs(message)
        else:
            return_to_menu(message)
        return

    expense_name = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_skip = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_skip)
    markup.add(item_return)
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:", reply_markup=markup)
    bot.register_next_step_handler(message, get_expense_description, selected_category, expense_name, brand, model, license_plate)

@text_only_handler
def get_expense_description(message, selected_category, expense_name, brand, model, license_plate):
    user_id = message.from_user.id

    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_expense_and_repairs(message)
        else:
            return_to_menu(message)
        return

    description = message.text if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ" else ""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=markup)
    bot.register_next_step_handler(message, get_expense_date, selected_category, expense_name, description, brand, model, license_plate)

@text_only_handler
def get_expense_date(message, selected_category, expense_name, description, brand, model, license_plate):
    user_id = message.from_user.id

    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_expense_and_repairs(message)
        else:
            return_to_menu(message)
        return

    expense_date = message.text

    if re.match(r"^\d{2}\.\d{2}\.\d{4}$", expense_date):
        try:
            day, month, year = map(int, expense_date.split('.'))
            if 1 <= month <= 12 and 1 <= day <= 31 and 2000 <= year <= 3000:
                datetime.strptime(expense_date, "%d.%m.%Y")
            else:
                raise ValueError
        except ValueError:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            bot.register_next_step_handler(message, get_expense_date, selected_category, expense_name, description, brand, model, license_plate)
            return
    else:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, get_expense_date, selected_category, expense_name, description, brand, model, license_plate)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, get_expense_amount, selected_category, expense_name, description, expense_date, brand, model, license_plate)

def is_numeric(s):
    if s is not None:
        try:
            float(s)
            return True
        except ValueError:
            return False
    return False

@text_only_handler
def get_expense_amount(message, selected_category, expense_name, description, expense_date, brand, model, license_plate):
    user_id = message.from_user.id

    expense_amount = message.text.replace(",", ".")
    if not is_numeric(expense_amount):
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!")
        bot.register_next_step_handler(message, get_expense_amount, selected_category, expense_name, description, expense_date, brand, model, license_plate)
        return

    data = load_expense_data(user_id)
    if str(user_id) not in data:
        data[str(user_id)] = {"expense": []}

    selected_transport = f"{brand} {model} {license_plate}"
    expense = data[str(user_id)].get("expense", [])
    new_expense = {
        "category": selected_category,
        "name": expense_name,
        "date": expense_date,
        "amount": expense_amount,
        "description": description,
        "transport": {"brand": brand, "model": model, "license_plate": license_plate}
    }
    expense.append(new_expense)
    data[str(user_id)]["expense"] = expense
    save_expense_data(user_id, data, selected_transport)

    save_expense_to_excel(user_id, new_expense)

    bot.send_message(user_id, "‚úÖ –¢—Ä–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞!")
    return_to_expense_and_repairs(message)

def save_expense_to_excel(user_id, expense):
    excel_path = os.path.join(BASE_DIR, "data", "user", "expenses_and_repairs", "expenses", "excel", f"{user_id}_expenses.xlsx")

    directory = os.path.dirname(excel_path)
    if not os.path.exists(directory):
        os.makedirs(directory)

    try:
        if os.path.exists(excel_path):
            workbook = load_workbook(excel_path)
        else:
            workbook = Workbook()
            workbook.remove(workbook.active)

        summary_sheet = workbook["Summary"] if "Summary" in workbook.sheetnames else workbook.create_sheet("Summary")

        transport_sheet_name = f"{expense['transport']['brand']}_{expense['transport']['model']}_{expense['transport']['license_plate']}"
        transport_sheet = workbook[transport_sheet_name] if transport_sheet_name in workbook.sheetnames else workbook.create_sheet(transport_sheet_name)

        headers = ["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]

        def setup_sheet(sheet):
            if sheet.max_row == 1:
                sheet.append(headers)
                for cell in sheet[1]:
                    cell.font = Font(bold=True)
                    cell.alignment = Alignment(horizontal="center")

        for sheet in [summary_sheet, transport_sheet]:
            setup_sheet(sheet)
            row_data = [
                f"{expense['transport']['brand']} {expense['transport']['model']} {expense['transport']['license_plate']}",
                expense["category"],
                expense["name"],
                expense["date"],
                float(expense["amount"]),
                expense["description"],
            ]
            sheet.append(row_data)

        for sheet in [summary_sheet, transport_sheet]:
            for col in sheet.columns:
                max_length = max(len(str(cell.value)) for cell in col)
                sheet.column_dimensions[get_column_letter(col[0].column)].width = max_length + 2

        workbook.save(excel_path)
    except Exception as e:
        raise

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã) ---------------------------------------------------

selected_transport_dict = {}

MAX_MESSAGE_LENGTH = 4096

def send_message_with_split(user_id, message_text, parse_mode=None):

    MAX_MESSAGE_LENGTH = 4096
    try:
        if len(message_text) <= MAX_MESSAGE_LENGTH:
            bot.send_message(user_id, message_text, parse_mode=parse_mode)
        else:
            message_parts = [message_text[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(message_text), MAX_MESSAGE_LENGTH)]
            for part in message_parts:
                bot.send_message(user_id, part, parse_mode=parse_mode)
    except Exception as e:
        bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã")
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_expense(message):
    user_id = str(message.from_user.id)

    transport_list = load_transport_data(user_id)

    if not transport_list:
        bot.send_message(user_id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?", reply_markup=create_transport_options_markup())
        bot.register_next_step_handler(message, ask_add_transport)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    for i in range(0, len(transport_list), 2):
        transport_buttons = []
        for j in range(i, min(i + 2, len(transport_list))):
            transport = transport_list[j]
            transport_name = f"{transport['brand']} {transport['model']} ({transport['license_plate']})"
            transport_buttons.append(types.KeyboardButton(transport_name))

        markup.add(*transport_buttons)

    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_transport_selection)

def ask_add_transport(message):
    user_id = str(message.from_user.id)

    if message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        add_transport(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç!", reply_markup=create_transport_options_markup())
        bot.register_next_step_handler(message, ask_add_transport)

def create_transport_options_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_add_transport = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    item_cancel = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_add_transport)
    markup.add(item_cancel)
    markup.add(item_main)
    return markup

def filter_expense_by_transport(user_id, expense):
    selected_transport = selected_transport_dict.get(user_id)
    if not selected_transport:
        return expense

    filtered_expense = []
    for exp in expense:
        transport = exp.get('transport', {})
        if not all(k in transport for k in ['brand', 'model', 'license_plate']):
            continue
        if f"{transport['brand']} {transport['model']} ({transport['license_plate']})" == selected_transport:
            filtered_expense.append(exp)
    return filtered_expense

@text_only_handler
def handle_transport_selection(message):
    user_id = message.from_user.id
    selected_transport = message.text

    if selected_transport == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return

    if selected_transport == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    selected_transport_dict[user_id] = selected_transport

    bot.send_message(user_id, f"–ü–æ–∫–∞–∑—ã–≤–∞—é —Ç—Ä–∞—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: *{selected_transport}*", parse_mode="Markdown")
    send_menu1(user_id)

def send_menu1(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–¢—Ä–∞—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)")
    item2 = types.KeyboardButton("–¢—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)")
    item3 = types.KeyboardButton("–¢—Ä–∞—Ç—ã (–≥–æ–¥)")
    item4 = types.KeyboardButton("–¢—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
    item_excel = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã –≤ EXCEL")
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main_menu = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1, item2)
    markup.add(item3, item4)
    markup.add(item_excel)
    markup.add(item_return)
    markup.add(item_main_menu)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞—Ç:", reply_markup=markup)

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã –≤ excel) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã –≤ EXCEL")
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã –≤ EXCEL')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã –≤ EXCEL')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def send_expense_excel(message):
    user_id = str(message.from_user.id)

    excel_path = os.path.join(BASE_DIR, "data", "user", "expenses_and_repairs", "expenses", "excel", f"{user_id}_expenses.xlsx")

    try:
        if not os.path.exists(excel_path):
            bot.send_message(user_id, "‚ùå –§–∞–π–ª —Å –≤–∞—à–∏–º–∏ —Ç—Ä–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return_to_expense_and_repairs(message)
            return
        with open(excel_path, 'rb') as excel_file:
            bot.send_document(user_id, excel_file)
    except Exception as e:
        bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        return_to_expense_and_repairs(message)

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–¢—Ä–∞—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)")
@check_function_state_decorator('–¢—Ä–∞—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)')
@track_usage('–¢—Ä–∞—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_expense_by_category(message):
    user_id = str(message.from_user.id)
    user_data = load_expense_data(user_id)
    expense = user_data.get(str(user_id), {}).get("expense", [])

    expense = filter_expense_by_transport(user_id, expense)

    categories = set(exp.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') for exp in expense)
    if not categories:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        send_menu1(user_id)
        return

    category_buttons = [types.KeyboardButton(category) for category in categories]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*category_buttons)
    item_return_to_expense = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_return_to_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return_to_expense)
    markup.add(item_return_to_main)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞—Ç:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, handle_category_selection)

@text_only_handler
def handle_category_selection(message):
    user_id = str(message.from_user.id)
    selected_category = message.text

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    user_data = load_expense_data(user_id)
    expense = user_data.get(str(user_id), {}).get("expense", [])

    expense = filter_expense_by_transport(user_id, expense)

    if selected_category not in {exp.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') for exp in expense}:
        bot.send_message(user_id, "–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", parse_mode="Markdown")
        view_expense_by_category(message)
        return

    category_expense = [exp for exp in expense if exp.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') == selected_category]

    total_expense = 0
    expense_details = []

    for index, exp in enumerate(category_expense, start=1):
        expense_name = exp.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        expense_date = exp.get("date", "")
        amount = float(exp.get("amount", 0))
        total_expense += amount

        expense_details.append(
            f"üí∏ *‚Ññ{index}*\n\n"
            f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {selected_category}\n"
            f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {expense_name}\n"
            f"üìÖ *–î–∞—Ç–∞:* {expense_date}\n"
            f"üí∞ *–°—É–º–º–∞:* {amount} —Ä—É–±.\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {exp.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
        )

    if expense_details:
        message_text = f"–¢—Ä–∞—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category.lower()}*:\n\n" + "\n\n".join(expense_details)
        send_message_with_split(user_id, message_text, parse_mode="Markdown")
        bot.send_message(user_id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category.lower()}*: *{total_expense}* —Ä—É–±.", parse_mode="Markdown")
    else:
        bot.send_message(user_id, f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category.lower()}* —Ç—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", parse_mode="Markdown")

    send_menu1(user_id)

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—Ç—Ä–∞—Ç—ã –ø–æ –º–µ—Å—è—Ü—É) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–¢—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)")
@check_function_state_decorator('–¢—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)')
@track_usage('–¢—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_expense_by_month(message):
    user_id = str(message.from_user.id)  

    transports = load_transport_data(user_id)
    if not transports:
        bot.send_message(user_id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?", reply_markup=create_transport_options_markup(), parse_mode="Markdown")
        bot.register_next_step_handler(message, ask_add_transport)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ (–ú–ú.–ì–ì–ì–ì) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞—Ç –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, get_expense_by_month)

@text_only_handler
def get_expense_by_month(message):
    user_id = str(message.from_user.id)
    date = message.text.strip() if message.text else None

    if not date:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!", parse_mode="Markdown")
        bot.register_next_step_handler(message, get_expense_by_month)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if not re.match(r"^(0[1-9]|1[0-2])\.(20[0-9]{2}|2[1-9][0-9]{2}|3000)$", date):
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì!", parse_mode="Markdown")
        bot.register_next_step_handler(message, get_expense_by_month)
        return

    try:
        month, year = map(int, date.split("."))
    except ValueError as e:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        bot.register_next_step_handler(message, get_expense_by_month)
        return

    user_data = load_expense_data(user_id).get(user_id, {})
    expense = user_data.get("expense", [])

    expense = filter_expense_by_transport(user_id, expense)

    total_expense = 0
    expense_details = []

    for index, exp in enumerate(expense, start=1):
        expense_date = exp.get("date", "")
        if not expense_date or len(expense_date.split(".")) != 3:
            continue

        try:
            expense_day, expense_month, expense_year = map(int, expense_date.split("."))
            if expense_month == month and expense_year == year:
                amount = float(exp.get("amount", 0))
                total_expense += amount

                expense_name = exp.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                description = exp.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                category = exp.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

                expense_details.append(
                    f"üí∏ *‚Ññ{index}*\n\n"
                    f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
                    f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {expense_name}\n"
                    f"üìÖ *–î–∞—Ç–∞:* {expense_date}\n"
                    f"üí∞ *–°—É–º–º–∞:* {amount} —Ä—É–±.\n"
                    f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
                )
        except (ValueError, TypeError) as e:
            continue

    if expense_details:
        message_text = f"–¢—Ä–∞—Ç—ã –∑–∞ *{date}* –º–µ—Å—è—Ü:\n\n" + "\n\n".join(expense_details)
        send_message_with_split(user_id, message_text, parse_mode="Markdown")
        bot.send_message(user_id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç –∑–∞ *{date}* –º–µ—Å—è—Ü: *{total_expense}* —Ä—É–±.", parse_mode="Markdown")
    else:
        bot.send_message(user_id, f"‚ùå –ó–∞ *{date}* –º–µ—Å—è—Ü —Ç—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", parse_mode="Markdown")

    send_menu1(user_id)

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—Ç—Ä–∞—Ç—ã –ø–æ –≥–æ–¥—É) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–¢—Ä–∞—Ç—ã (–≥–æ–¥)")
@check_function_state_decorator('–¢—Ä–∞—Ç—ã (–≥–æ–¥)')
@track_usage('–¢—Ä–∞—Ç—ã (–≥–æ–¥)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_expense_by_license_plate(message):
    user_id = message.from_user.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    item_main = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item_return)
    markup.add(item_main)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–ì–ì–ì–ì) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞—Ç –∑–∞ —ç—Ç–æ—Ç –≥–æ–¥:", reply_markup=markup)
    bot.register_next_step_handler(message, get_expense_by_license_plate)

@text_only_handler
def get_expense_by_license_plate(message):
    user_id = message.from_user.id

    year_input = message.text.strip()

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if not year_input.isdigit() or len(year_input) != 4:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì!")
        bot.register_next_step_handler(message, get_expense_by_license_plate)
        return

    year = int(year_input)
    if year < 2000 or year > 3000:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì!")
        bot.register_next_step_handler(message, get_expense_by_license_plate)
        return

    user_data = load_expense_data(user_id)
    expense = user_data.get(str(user_id), {}).get("expense", [])

    expense = filter_expense_by_transport(user_id, expense)

    total_expense = 0
    expense_details = []

    for index, expense in enumerate(expense, start=1):
        expense_date = expense.get("date", "")
        if "." in expense_date:
            date_parts = expense_date.split(".")
            if len(date_parts) >= 3:
                expense_year = int(date_parts[2])
                if expense_year == year:
                    amount = float(expense.get("amount", 0))
                    total_expense += amount

                    expense_name = expense.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    description = expense.get("description", "")
                    category = expense.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

                    expense_details.append(
                        f"üí∏ *‚Ññ{index}*\n\n"
                        f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
                        f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {expense_name}\n"
                        f"üìÖ *–î–∞—Ç–∞:* {expense_date}\n"
                        f"üí∞ *–°—É–º–º–∞:* {amount} —Ä—É–±.\n"
                        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
                    )

    if expense_details:
        message_text = f"–¢—Ä–∞—Ç—ã –∑–∞ *{year}* –≥–æ–¥:\n\n" + "\n\n".join(expense_details)
        send_message_with_split(user_id, message_text, parse_mode="Markdown")
        bot.send_message(user_id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç –∑–∞ *{year}* –≥–æ–¥: *{total_expense}* —Ä—É–±.", parse_mode="Markdown")
    else:
        bot.send_message(user_id, f"‚ùå –ó–∞ *{year}* –≥–æ–¥ —Ç—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", parse_mode="Markdown")

    send_menu1(user_id)

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–≤—Å–µ –≤—Ä–µ–º—è) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–¢—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
@check_function_state_decorator('–¢—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')
@track_usage('–¢—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_all_expense(message):
    user_id = message.from_user.id

    user_data = load_expense_data(user_id)
    expense = user_data.get(str(user_id), {}).get("expense", [])

    expense = filter_expense_by_transport(user_id, expense)

    total_expense = 0
    expense_details = []

    for index, expense in enumerate(expense, start=1):
        amount = float(expense.get("amount", 0))
        total_expense += amount

        expense_name = expense.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        expense_date = expense.get("date", "")
        description = expense.get("description", "")
        category = expense.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

        expense_details.append(
            f"üí∏ *‚Ññ{index}*\n\n"
            f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
            f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {expense_name}\n"
            f"üìÖ *–î–∞—Ç–∞:* {expense_date}\n"
            f"üí∞ *–°—É–º–º–∞:* {amount} —Ä—É–±.\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
        )

    if expense_details:
        message_text = "*–í—Å–µ* —Ç—Ä–∞—Ç—ã:\n\n" + "\n\n".join(expense_details)
        send_message_with_split(user_id, message_text, parse_mode="Markdown")
        bot.send_message(user_id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö —Ç—Ä–∞—Ç: *{total_expense}* —Ä—É–±.", parse_mode="Markdown")
    else:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", parse_mode="Markdown")

    send_menu1(user_id)

# ----------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã) ---------------------------------------------------

selected_transports = {}
expense_to_delete_dict = {}
selected_categories = {}
user_expense_to_delete = {}

MAX_MESSAGE_LENGTH = 4096

def send_long_message(user_id, text):
    while len(text) > MAX_MESSAGE_LENGTH:
        bot.send_message(user_id, text[:MAX_MESSAGE_LENGTH], parse_mode="Markdown")
        text = text[MAX_MESSAGE_LENGTH:]
    bot.send_message(user_id, text, parse_mode="Markdown")

def save_selected_transport(user_id, selected_transport):
    user_data = load_expense_data(user_id)
    user_data["selected_transport"] = selected_transport
    save_expense_data(user_id, user_data)

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã")
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã')
@track_usage('–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def initiate_delete_expenses(message):
    user_id = str(message.from_user.id)

    transport_data = load_transport_data(user_id)
    if not transport_data:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?", reply_markup=markup)
        bot.register_next_step_handler(message, ask_add_transport)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    transport_buttons = [
        f"{transport['brand']} {transport['model']} ({transport['license_plate']})"
        for transport in transport_data
    ]
    for i in range(0, len(transport_buttons), 2):
        markup.row(*transport_buttons[i:i + 2])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_transport_selection_for_deletion)

@text_only_handler
def handle_transport_selection_for_deletion(message):
    user_id = str(message.from_user.id)
    selected_transport = message.text.strip()

    if selected_transport == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if selected_transport == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_menu(message)
        return

    transport_data = load_transport_data(user_id)
    transport_found = any(
        f"{transport['brand']} {transport['model']} ({transport['license_plate']})" == selected_transport
        for transport in transport_data
    )
    if not transport_found:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        transport_buttons = [
            f"{transport['brand']} {transport['model']} ({transport['license_plate']})"
            for transport in transport_data
        ]
        for i in range(0, len(transport_buttons), 2):
            markup.row(*transport_buttons[i:i + 2])
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown", reply_markup=markup)
        bot.register_next_step_handler(message, handle_transport_selection_for_deletion)
        return

    selected_transports[user_id] = selected_transport
    save_selected_transport(user_id, selected_transport)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("Del —Ç—Ä–∞—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)", "Del —Ç—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)")
    markup.add("Del —Ç—Ä–∞—Ç—ã (–≥–æ–¥)", "Del —Ç—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, handle_deletion_option)

@text_only_handler
def handle_deletion_option(message):
    user_id = str(message.from_user.id)
    option = message.text.strip()

    if option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_menu(message)
        return

    selected_transport = selected_transports.get(user_id, "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    if option == "Del —Ç—Ä–∞—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)":
        delete_expense_by_category(message)
    elif option == "Del —Ç—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)":
        delete_expense_by_month(message)
    elif option == "Del —Ç—Ä–∞—Ç—ã (–≥–æ–¥)":
        delete_expense_by_year(message)
    elif option == "Del —Ç—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)":
        delete_all_expense_for_selected_transport(message)
    else:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        initiate_delete_expenses(message)

# ------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "Del —Ç—Ä–∞—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)")
@check_function_state_decorator('Del —Ç—Ä–∞—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)')
@track_usage('Del —Ç—Ä–∞—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_expense_by_category(message):
    user_id = str(message.from_user.id)

    user_data = load_expense_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    try:
        transport_info = selected_transport.split(" ")
        if len(transport_info) < 3:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        selected_brand = transport_info[0].strip()
        selected_model = transport_info[1].strip()
        selected_license_plate = transport_info[2].strip().replace("(", "").replace(")", "")
    except (ValueError, IndexError) as e:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    expense = user_data.get(str(user_id), {}).get("expense", [])

    categories = list({
        exp.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        for exp in expense
        if all(k in exp.get("transport", {}) for k in ['brand', 'model', 'license_plate'])
        and exp["transport"]["brand"] == selected_brand
        and exp["transport"]["model"] == selected_model
        and exp["transport"]["license_plate"] == selected_license_plate
    })

    if not categories:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É *{selected_transport}*!", parse_mode="Markdown")
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    markup.add(*[types.KeyboardButton(category) for category in categories])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, handle_category_selection_for_deletion)

@text_only_handler
def handle_category_selection_for_deletion(message):
    user_id = str(message.from_user.id)
    selected_category = message.text.strip()

    if selected_category == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_categories:
            del selected_categories[user_id]
        if user_id in user_expense_to_delete:
            del user_expense_to_delete[user_id]
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if selected_category == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_categories:
            del selected_categories[user_id]
        if user_id in user_expense_to_delete:
            del user_expense_to_delete[user_id]
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_menu(message)
        return

    selected_transport = selected_transports.get(user_id)
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        if user_id in selected_categories:
            del selected_categories[user_id]
        return_to_expense_and_repairs(message)
        return

    try:
        transport_info = selected_transport.split(" ")
        if len(transport_info) < 3:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        selected_brand = transport_info[0].strip()
        selected_model = transport_info[1].strip()
        selected_license_plate = transport_info[2].strip().replace("(", "").replace(")", "")
    except (ValueError, IndexError) as e:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        if user_id in selected_categories:
            del selected_categories[user_id]
        return_to_expense_and_repairs(message)
        return

    selected_categories[user_id] = selected_category

    user_data = load_expense_data(user_id).get(user_id, {})
    expense = user_data.get("expense", [])

    expense_to_delete = [
        exp for exp in expense
        if exp.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") == selected_category
        and all(k in exp.get("transport", {}) for k in ['brand', 'model', 'license_plate'])
        and exp["transport"]["brand"] == selected_brand
        and exp["transport"]["model"] == selected_model
        and exp["transport"]["license_plate"] == selected_license_plate
    ]

    if not expense_to_delete:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category.lower()}* –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É *{selected_transport}*!", parse_mode="Markdown")
        if user_id in selected_categories:
            del selected_categories[user_id]
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    user_expense_to_delete[user_id] = expense_to_delete

    expense_list_text = f"–°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category.lower()}*:\n\n"
    for index, exp in enumerate(expense_to_delete, start=1):
        expense_name = exp.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        expense_date = exp.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        expense_list_text += f"üìÑ ‚Ññ{index}. {expense_name} - ({expense_date})\n\n"

    expense_list_text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    send_long_message(user_id, expense_list_text)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    bot.register_next_step_handler(message, delete_expense_confirmation)

@text_only_handler
def delete_expense_confirmation(message):
    user_id = str(message.from_user.id)
    selected_option = message.text.strip()

    if selected_option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_categories:
            del selected_categories[user_id]
        if user_id in user_expense_to_delete:
            del user_expense_to_delete[user_id]
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if selected_option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_categories:
            del selected_categories[user_id]
        if user_id in user_expense_to_delete:
            del user_expense_to_delete[user_id]
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_menu(message)
        return

    expense_to_delete = user_expense_to_delete.get(user_id, [])
    if not expense_to_delete:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!", parse_mode="Markdown")
        if user_id in selected_categories:
            del selected_categories[user_id]
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    try:
        indices = [int(num.strip()) - 1 for num in selected_option.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(expense_to_delete):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup, parse_mode="Markdown")
            bot.register_next_step_handler(msg, delete_expense_confirmation)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(user_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")

        valid_indices.sort(reverse=True)
        deleted_expense_names = []
        user_data = load_expense_data(user_id).get(user_id, {})
        user_expense = user_data.get("expense", [])

        for index in valid_indices:
            deleted_expense = expense_to_delete.pop(index)
            deleted_expense_names.append(deleted_expense.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').lower())
            if deleted_expense in user_expense:
                user_expense.remove(deleted_expense)

        user_data["expense"] = user_expense
        save_expense_data(user_id, {user_id: user_data})
        update_excel_file_expense(user_id)

        bot.send_message(user_id, f"‚úÖ –¢—Ä–∞—Ç—ã *{', '.join(deleted_expense_names)}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")

        if not expense_to_delete:
            if user_id in user_expense_to_delete:
                del user_expense_to_delete[user_id]
            if user_id in selected_categories:
                del selected_categories[user_id]
            if user_id in selected_transports:
                del selected_transports[user_id]

        return_to_expense_and_repairs(message)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(msg, delete_expense_confirmation)

# ------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã –ø–æ –º–µ—Å—è—Ü—É) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "Del —Ç—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)")
@check_function_state_decorator('Del —Ç—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)')
@track_usage('Del —Ç—Ä–∞—Ç—ã (–º–µ—Å—è—Ü)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_expense_by_month(message):
    user_id = str(message.from_user.id)

    user_data = load_expense_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ (–ú–ú.–ì–ì–ì–ì) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_delete_expense_by_month)

@text_only_handler
def process_delete_expense_by_month(message):
    user_id = str(message.from_user.id)
    month_year = message.text.strip()

    if month_year == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if month_year == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_menu(message)
        return

    match = re.match(r"^(0[1-9]|1[0-2])\.(20[0-9]{2}|2[1-9][0-9]{2}|3000)$", month_year)
    if not match:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, "–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü –∏–ª–∏ –≥–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ú–ú.–ì–ì–ì–ì)", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_delete_expense_by_month)
        return

    selected_month, selected_year = map(int, match.groups())

    user_data = load_expense_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    try:
        transport_info = selected_transport.split(" ")
        if len(transport_info) < 3:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        selected_brand = transport_info[0].strip()
        selected_model = transport_info[1].strip()
        selected_license_plate = transport_info[2].strip().replace("(", "").replace(")", "")
    except (ValueError, IndexError) as e:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    expense = user_data.get(str(user_id), {}).get("expense", [])

    if not expense:
        bot.send_message(user_id, f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç –∑–∞ *{month_year}* –º–µ—Å—è—Ü!", parse_mode="Markdown")
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    expense_to_delete = []
    for index, exp in enumerate(expense, start=1):
        expense_date = exp.get("date", "")
        if not expense_date or len(expense_date.split(".")) != 3:
            continue
        try:
            expense_day, expense_month, expense_year = map(int, expense_date.split("."))
            transport = exp.get("transport", {})
            if not all(k in transport for k in ['brand', 'model', 'license_plate']):
                continue
            if (expense_month == selected_month and
                expense_year == selected_year and
                transport['brand'] == selected_brand and
                transport['model'] == selected_model and
                transport['license_plate'] == selected_license_plate):
                expense_to_delete.append((index, exp))
        except (ValueError, TypeError) as e:
            continue

    if expense_to_delete:
        expense_to_delete_dict[user_id] = expense_to_delete
        expense_list_text = f"–°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞ *{month_year}* –º–µ—Å—è—Ü:\n\n"
        for index, exp in expense_to_delete:
            expense_name = exp.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            expense_date = exp.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            expense_list_text += f"üìÑ ‚Ññ{index}. {expense_name} - ({expense_date})\n\n"
        expense_list_text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        send_long_message(user_id, expense_list_text)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.register_next_step_handler(message, confirm_delete_expense_month)
    else:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞ *{month_year}* –º–µ—Å—è—Ü!", parse_mode="Markdown")
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)

@text_only_handler
def confirm_delete_expense_month(message):
    user_id = str(message.from_user.id)
    selected_option = message.text.strip()

    if selected_option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in expense_to_delete_dict:
            del expense_to_delete_dict[user_id]
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if selected_option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in expense_to_delete_dict:
            del expense_to_delete_dict[user_id]
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_menu(message)
        return

    expense_to_delete = expense_to_delete_dict.get(user_id, [])
    if not expense_to_delete:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—è—Ü—É!", parse_mode="Markdown")
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    try:
        indices = [int(num.strip()) - 1 for num in selected_option.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(expense_to_delete):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup, parse_mode="Markdown")
            bot.register_next_step_handler(msg, confirm_delete_expense_month)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(user_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")

        valid_indices.sort(reverse=True)
        deleted_expense_names = []
        user_data = load_expense_data(user_id).get(str(user_id), {})
        user_expense = user_data.get("expense", [])

        for index in valid_indices:
            _, deleted_expense = expense_to_delete.pop(index)
            deleted_expense_names.append(deleted_expense.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').lower())
            if deleted_expense in user_expense:
                user_expense.remove(deleted_expense)

        user_data["expense"] = user_expense
        save_expense_data(user_id, {str(user_id): user_data})
        update_excel_file_expense(user_id)

        bot.send_message(user_id, f"‚úÖ –¢—Ä–∞—Ç—ã *{', '.join(deleted_expense_names)}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")

        if not expense_to_delete:
            if user_id in expense_to_delete_dict:
                del expense_to_delete_dict[user_id]
            if user_id in selected_transports:
                del selected_transports[user_id]
        else:
            expense_to_delete_dict[user_id] = expense_to_delete

        return_to_expense_and_repairs(message)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(msg, confirm_delete_expense_month)

# ------------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã –ø–æ –≥–æ–¥—É) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "Del —Ç—Ä–∞—Ç—ã (–≥–æ–¥)")
@check_function_state_decorator('Del —Ç—Ä–∞—Ç—ã (–≥–æ–¥)')
@track_usage('Del —Ç—Ä–∞—Ç—ã (–≥–æ–¥)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_expense_by_year(message):
    user_id = str(message.from_user.id)

    user_data = load_expense_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå ‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (–ì–ì–ì–ì) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç –∑–∞ —ç—Ç–æ—Ç –≥–æ–¥:", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, process_delete_expense_by_year)

@text_only_handler
def process_delete_expense_by_year(message):
    user_id = str(message.from_user.id)
    year_input = message.text.strip()

    if year_input == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if year_input == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_menu(message)
        return

    if not year_input.isdigit() or len(year_input) != 4 or not (2000 <= int(year_input) <= 3000):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì (2000-3000)!", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, process_delete_expense_by_year)
        return

    year = int(year_input)

    user_data = load_expense_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    try:
        transport_info = selected_transport.split(" ")
        if len(transport_info) < 3:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        selected_brand = transport_info[0].strip()
        selected_model = transport_info[1].strip()
        selected_license_plate = transport_info[2].strip().replace("(", "").replace(")", "")
    except (ValueError, IndexError) as e:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    expense = user_data.get(str(user_id), {}).get("expense", [])

    if not expense:
        bot.send_message(
            user_id, f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç –∑–∞ *{year}* –≥–æ–¥!",parse_mode="Markdown")
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    expense_to_delete = []
    for index, exp in enumerate(expense, start=1):
        expense_date = exp.get("date", "")
        if not expense_date or len(expense_date.split(".")) != 3:
            continue
        try:
            expense_day, expense_month, expense_year = map(int, expense_date.split("."))
            transport = exp.get("transport", {})
            if not all(k in transport for k in ['brand', 'model', 'license_plate']):
                continue
            if (expense_year == year and
                transport['brand'] == selected_brand and
                transport['model'] == selected_model and
                transport['license_plate'] == selected_license_plate):
                expense_to_delete.append((index, exp))
        except (ValueError, TypeError) as e:
            continue

    if expense_to_delete:
        expense_to_delete_dict[user_id] = expense_to_delete
        expense_list_text = f"–°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞ *{year}* –≥–æ–¥:\n\n"
        for index, exp in expense_to_delete:
            expense_name = exp.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            expense_date = exp.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            expense_list_text += f"üìÑ ‚Ññ{index}. {expense_name} - ({expense_date})\n\n"
        expense_list_text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        send_long_message(user_id, expense_list_text)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.register_next_step_handler(message, confirm_delete_expense_year)
    else:
        bot.send_message(
            user_id, f"‚ùå –ó–∞ *{year}* –≥–æ–¥ —Ç—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", parse_mode="Markdown")
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)

@text_only_handler
def confirm_delete_expense_year(message):
    user_id = str(message.from_user.id)
    selected_option = message.text.strip()

    if selected_option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in expense_to_delete_dict:
            del expense_to_delete_dict[user_id]
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if selected_option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in expense_to_delete_dict:
            del expense_to_delete_dict[user_id]
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_menu(message)
        return

    expense_to_delete = expense_to_delete_dict.get(user_id, [])
    if not expense_to_delete:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –≥–æ–¥—É!", parse_mode="Markdown")
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    try:
        indices = [int(num.strip()) - 1 for num in selected_option.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(expense_to_delete):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup, parse_mode="Markdown")
            bot.register_next_step_handler(msg, confirm_delete_expense_year)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(user_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")

        valid_indices.sort(reverse=True)
        deleted_expense_names = []
        user_data = load_expense_data(user_id).get(str(user_id), {})
        user_expense = user_data.get("expense", [])

        for index in valid_indices:
            _, deleted_expense = expense_to_delete.pop(index)
            deleted_expense_names.append(deleted_expense.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').lower())
            if deleted_expense in user_expense:
                user_expense.remove(deleted_expense)

        user_data["expense"] = user_expense
        save_expense_data(user_id, {str(user_id): user_data})
        update_excel_file_expense(user_id)

        bot.send_message(user_id, f"‚úÖ –¢—Ä–∞—Ç—ã *{', '.join(deleted_expense_names)}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")

        if not expense_to_delete:
            if user_id in expense_to_delete_dict:
                del expense_to_delete_dict[user_id]
            if user_id in selected_transports:
                del selected_transports[user_id]
        else:
            expense_to_delete_dict[user_id] = expense_to_delete

        return_to_expense_and_repairs(message)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(msg, confirm_delete_expense_year)

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã –ø–æ –≤—Å–µ –≤—Ä–µ–º—è) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "Del —Ç—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
@check_function_state_decorator('Del —Ç—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')
@track_usage('Del —Ç—Ä–∞—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_all_expense_for_selected_transport(message):
    user_id = str(message.from_user.id)

    user_data = load_expense_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    bot.send_message(user_id, f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç—Ä–∞—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}*?\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–¥–∞* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–Ω–µ—Ç* –¥–ª—è –æ—Ç–º–µ–Ω—ã", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, confirm_delete_all_expense)

@text_only_handler
def confirm_delete_all_expense(message):
    user_id = str(message.from_user.id)
    response = message.text.strip().lower()

    if response == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if response == "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_transports:
            del selected_transports[user_id]
        return_to_menu(message)
        return

    user_data = load_expense_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    try:
        transport_info = selected_transport.split(" ")
        if len(transport_info) < 3:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        selected_brand = transport_info[0].strip()
        selected_model = transport_info[1].strip()
        selected_license_plate = transport_info[2].strip().replace("(", "").replace(")", "")
    except (ValueError, IndexError) as e:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        initiate_delete_expenses(message)
        return

    if response == "–¥–∞":
        expense = user_data.get(str(user_id), {}).get("expense", [])
        if not expense:
            bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", parse_mode="Markdown")
            if user_id in selected_transports:
                del selected_transports[user_id]
            return_to_expense_and_repairs(message)
            return

        expense_to_keep = []
        for exp in expense:
            transport = exp.get("transport", {})
            if not all(k in transport for k in ['brand', 'model', 'license_plate']):
                expense_to_keep.append(exp)
                continue
            if not (transport['brand'] == selected_brand and
                    transport['model'] == selected_model and
                    transport['license_plate'] == selected_license_plate):
                expense_to_keep.append(exp)

        user_data[str(user_id)] = user_data.get(str(user_id), {})
        user_data[str(user_id)]["expense"] = expense_to_keep
        save_expense_data(user_id, user_data)
        update_excel_file_expense(user_id)

        bot.send_message(user_id, f"‚úÖ –í—Å–µ —Ç—Ä–∞—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")
    elif response == "–Ω–µ—Ç":
        bot.send_message(user_id, "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω–æ!", parse_mode="Markdown")
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–î–∞", "–ù–µ—Ç")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–¥–∞* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–Ω–µ—Ç* –¥–ª—è –æ—Ç–º–µ–Ω—ã", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, confirm_delete_all_expense)
        return

    if user_id in selected_transports:
        del selected_transports[user_id]
    return_to_expense_and_repairs(message)

def update_excel_file_expense(user_id):
    user_id = str(user_id)
    user_data = load_expense_data(user_id).get(user_id, {})
    expense = user_data.get("expense", [])
    excel_file_path = os.path.join(BASE_DIR, "data", "user", "expenses_and_repairs", "expenses", "excel", f"{user_id}_expenses.xlsx")

    try:
        if not os.path.exists(excel_file_path):
            workbook = openpyxl.Workbook()
            workbook.remove(workbook.active)
        else:
            workbook = load_workbook(excel_file_path)

        headers = ["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]
        summary_sheet = workbook["Summary"] if "Summary" in workbook.sheetnames else workbook.create_sheet("Summary")

        if summary_sheet.max_row > 1:
            summary_sheet.delete_rows(2, summary_sheet.max_row - 1)
        if summary_sheet.max_row == 0:
            summary_sheet.append(headers)
            for cell in summary_sheet[1]:
                cell.font = Font(bold=True)
                cell.alignment = Alignment(horizontal="center")

        unique_transports = set()
        valid_expenses = []
        for exp in expense:
            transport = exp.get("transport", {})
            if not all(k in transport for k in ['brand', 'model', 'license_plate']):
                continue
            unique_transports.add((transport["brand"], transport["model"], transport["license_plate"]))
            valid_expenses.append(exp)

        for exp in valid_expenses:
            transport = exp["transport"]
            row_data = [
                f"{transport['brand']} {transport['model']} ({transport['license_plate']})",
                exp.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                exp.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                exp.get("date", ""),
                float(exp.get("amount", 0)),
                exp.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"),
            ]
            summary_sheet.append(row_data)

        for sheet_name in workbook.sheetnames:
            if sheet_name != "Summary":
                try:
                    brand, model, license_plate = sheet_name.split('_')
                    if (brand, model, license_plate) not in unique_transports:
                        del workbook[sheet_name]
                except ValueError:
                    continue

        for brand, model, license_plate in unique_transports:
            sheet_name = f"{brand}_{model}_{license_plate}"[:31]
            transport_sheet = workbook[sheet_name] if sheet_name in workbook.sheetnames else workbook.create_sheet(sheet_name)

            if transport_sheet.max_row > 1:
                transport_sheet.delete_rows(2, transport_sheet.max_row - 1)
            if transport_sheet.max_row == 0:
                transport_sheet.append(headers)
                for cell in transport_sheet[1]:
                    cell.font = Font(bold=True)
                    cell.alignment = Alignment(horizontal="center")

            for exp in valid_expenses:
                transport = exp["transport"]
                if (transport["brand"], transport["model"], transport["license_plate"]) == (brand, model, license_plate):
                    row_data = [
                        f"{brand} {model} ({license_plate})",
                        exp.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                        exp.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                        exp.get("date", ""),
                        float(exp.get("amount", 0)),
                        exp.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"),
                    ]
                    transport_sheet.append(row_data)

        for sheet in workbook:
            for col in sheet.columns:
                max_length = max(len(str(cell.value)) for cell in col if cell.value) + 2
                sheet.column_dimensions[get_column_letter(col[0].column)].width = max_length

        workbook.save(excel_file_path)
        workbook.close()

    except Exception as e:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞ —Ç—Ä–∞—Ç!", parse_mode="Markdown")

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—Ä–µ–º–æ–Ω—Ç—ã) ---------------------------------------------------

DATA_BASE_DIR = os.path.join(BASE_DIR, "data", "user", "expenses_and_repairs")
REPAIRS_DIR = os.path.join(DATA_BASE_DIR, "repairs")

def ensure_directories():
    os.makedirs(REPAIRS_DIR, exist_ok=True)
    os.makedirs(os.path.join(REPAIRS_DIR, "excel"), exist_ok=True)

ensure_directories()

user_transport = {}  

def format_transport_string(transport):
    if isinstance(transport, dict):
        return f"{transport.get('brand', '').strip()} {transport.get('model', '').strip()} ({transport.get('license_plate', '').strip()})".lower()
    return transport.strip().lower()

def save_repair_data(user_id, user_data, selected_transport=None):
    ensure_directories()
    
    file_path = os.path.join(REPAIRS_DIR, f"{user_id}_repairs.json")
    
    current_data = load_repair_data(user_id)
    
    if selected_transport:
        current_data["selected_transport"] = selected_transport
    else:
        current_data.setdefault("selected_transport", "")
    
    current_data.setdefault("user_categories", [])
    if "user_categories" in user_data:
        current_data["user_categories"] = user_data["user_categories"]
    
    current_data[str(user_id)] = user_data.get(str(user_id), {"repairs": []})
    
    with open(file_path, "w", encoding="utf-8") as file:
        json.dump(current_data, file, ensure_ascii=False, indent=4)

def load_repair_data(user_id):
    ensure_directories()
    
    file_path = os.path.join(REPAIRS_DIR, f"{user_id}_repairs.json")
    
    if not os.path.exists(file_path):
        return {"user_categories": [], "selected_transport": "", str(user_id): {"repairs": []}}
    
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            data = json.load(file)
            data.setdefault("user_categories", [])
            data.setdefault("selected_transport", "")
            data.setdefault(str(user_id), {"repairs": []})
            return data
    except Exception as e:
        return {"user_categories": [], "selected_transport": "", str(user_id): {"repairs": []}}

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–º–æ–Ω—Ç) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–º–æ–Ω—Ç")
@check_function_state_decorator('–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–º–æ–Ω—Ç')
@track_usage('–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–º–æ–Ω—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def record_repair(message):
    user_id = message.from_user.id
    
    markup = get_user_transport_keyboard(user_id)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–º–æ–Ω—Ç–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_transport_selection_for_repair)

@text_only_handler
def handle_transport_selection_for_repair(message):
    user_id = message.from_user.id
    selected_transport = message.text.strip()
    
    if selected_transport == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return
    if selected_transport == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if selected_transport == "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        add_transport(message)
        return
    
    transports = load_transport_data(user_id)
    for transport in transports:
        formatted_transport = f"{transport['brand']} {transport['model']} ({transport['license_plate']})"
        if formatted_transport == selected_transport:
            brand, model, license_plate = transport['brand'], transport['model'], transport['license_plate']
            save_repair_data(user_id, load_repair_data(user_id), selected_transport)
            process_category_selection_repair(user_id, brand, model, license_plate)
            return
    
    bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="Markdown")
    markup = get_user_transport_keyboard(user_id)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_transport_selection_for_repair)

def process_category_selection_repair(user_id, brand, model, license_plate):
    categories = get_user_repair_categories(user_id)
    
    system_emoji = "üîπ"
    user_emoji = "üî∏"
    
    category_list = "\n".join(
        f"{system_emoji if i < 7 else user_emoji} {i + 1}. {category}"
        for i, category in enumerate(categories)
    )
    category_list = f"*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*\n\n{category_list}"
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(
        types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"),
        types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    )
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    message = bot.send_message(user_id, category_list, reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, partial(get_repair_category, brand=brand, model=model, license_plate=license_plate))

def get_user_repair_categories(user_id):
    data = load_repair_data(user_id)
    system_categories = ["–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–¢–û", "–†–µ–º–æ–Ω—Ç", "–ó–∞–ø—á–∞—Å—Ç—å", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞", "–ö—É–∑–æ–≤"]
    user_categories = data.get("user_categories", [])
    return system_categories + user_categories

def add_repair_category(user_id, new_category):
    data = load_repair_data(user_id)
    data.setdefault("user_categories", [])
    if new_category not in data["user_categories"]:
        data["user_categories"].append(new_category)
        save_repair_data(user_id, data)
        return True
    return False

def remove_repair_category(user_id, category_to_remove):
    data = load_repair_data(user_id)
    if "user_categories" in data and category_to_remove in data["user_categories"]:
        data["user_categories"].remove(category_to_remove)
        save_repair_data(user_id, data)
        return True
    return False

@text_only_handler
def get_repair_category(message, brand, model, license_plate):
    user_id = message.from_user.id
    selected_index = message.text.strip()
    
    if selected_index == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return
    if selected_index == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if selected_index == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, partial(add_new_repair_category, brand=brand, model=model, license_plate=license_plate))
        return
    if selected_index == "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        handle_repair_category_removal(message, brand, model, license_plate)
        return
    
    if selected_index.isdigit():
        index = int(selected_index) - 1
        categories = get_user_repair_categories(user_id)
        if 0 <= index < len(categories):
            selected_category = categories[index]
            proceed_to_repair_name(message, selected_category, brand, model, license_plate)
        else:
            bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="Markdown")
            process_category_selection_repair(user_id, brand, model, license_plate)
    else:
        bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!", parse_mode="Markdown")
        process_category_selection_repair(user_id, brand, model, license_plate)

@text_only_handler
def add_new_repair_category(message, brand, model, license_plate):
    user_id = message.from_user.id
    new_category = message.text.strip()
    
    if new_category in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if new_category == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_expense_and_repairs(message)
        else:
            return_to_menu(message)
        return
    
    if not new_category:
        bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!", parse_mode="Markdown")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.register_next_step_handler(message, partial(add_new_repair_category, brand=brand, model=model, license_plate=license_plate))
        return
    
    system_categories = ["–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–¢–û", "–†–µ–º–æ–Ω—Ç", "–ó–∞–ø—á–∞—Å—Ç—å", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞", "–ö—É–∑–æ–≤"]
    if new_category in system_categories or new_category in get_user_repair_categories(user_id):
        bot.send_message(user_id, f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è *{new_category}* —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", parse_mode="Markdown")
    else:
        if add_repair_category(user_id, new_category):
            bot.send_message(user_id, f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è *{new_category}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", parse_mode="Markdown")
        else:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{new_category}*!", parse_mode="Markdown")
    
    process_category_selection_repair(user_id, brand, model, license_plate)

@text_only_handler
def handle_repair_category_removal(message, brand, model, license_plate):
    user_id = message.from_user.id
    categories = get_user_repair_categories(user_id)
    system_categories = ["–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–¢–û", "–†–µ–º–æ–Ω—Ç", "–ó–∞–ø—á–∞—Å—Ç—å", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞", "–ö—É–∑–æ–≤"]
    user_categories = [cat for cat in categories if cat not in system_categories]
    
    if not user_categories:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", parse_mode="Markdown")
        process_category_selection_repair(user_id, brand, model, license_plate)
        return
    
    user_emoji = "üî∏"
    
    category_list = "\n".join(
        f"{user_emoji} {i + 1}. {category}"
        for i, category in enumerate(user_categories)
    )
    bot.send_message(user_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã:\n\n{category_list}", parse_mode="Markdown")
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("0"))
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    bot.register_next_step_handler(message, partial(remove_repair_category_handler, user_categories=user_categories, brand=brand, model=model, license_plate=license_plate))

@text_only_handler
def remove_repair_category_handler(message, user_categories, brand, model, license_plate):
    user_id = message.from_user.id
    selected_index = message.text.strip()
    
    if selected_index == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return
    if selected_index == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if selected_index == "0":
        process_category_selection_repair(user_id, brand, model, license_plate)
        return
    
    if selected_index.isdigit():
        index = int(selected_index) - 1
        if 0 <= index < len(user_categories):
            category_to_remove = user_categories[index]
            if remove_repair_category(user_id, category_to_remove):
                bot.send_message(user_id, f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è *{category_to_remove}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", parse_mode="Markdown")
            else:
                bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category_to_remove}*!", parse_mode="Markdown")
            process_category_selection_repair(user_id, brand, model, license_plate)
        else:
            bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="Markdown")
            handle_repair_category_removal(message, brand, model, license_plate)
    else:
        bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ 0!", parse_mode="Markdown")
        handle_repair_category_removal(message, brand, model, license_plate)

@text_only_handler
def proceed_to_repair_name(message, selected_category, brand, model, license_plate):
    user_id = message.from_user.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, partial(get_repair_name, selected_category=selected_category, brand=brand, model=model, license_plate=license_plate))

@text_only_handler
def get_repair_name(message, selected_category, brand, model, license_plate):
    user_id = message.from_user.id
    repair_name = message.text.strip()
    
    if repair_name in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if repair_name == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_expense_and_repairs(message)
        else:
            return_to_menu(message)
        return
    
    if not repair_name:
        bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞!", parse_mode="Markdown")
        proceed_to_repair_name(message, selected_category, brand, model, license_plate)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"))
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:", reply_markup=markup)
    bot.register_next_step_handler(message, partial(get_repair_description, selected_category=selected_category, repair_name=repair_name, brand=brand, model=model, license_plate=license_plate))

@text_only_handler
def get_repair_description(message, selected_category, repair_name, brand, model, license_plate):
    user_id = message.from_user.id
    repair_description = message.text.strip() if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ" else ""
    
    if message.text in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_expense_and_repairs(message)
        else:
            return_to_menu(message)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–º–æ–Ω—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=markup)
    bot.register_next_step_handler(message, partial(get_repair_date, selected_category=selected_category, repair_name=repair_name, repair_description=repair_description, brand=brand, model=model, license_plate=license_plate))

def is_valid_date(date_str):
    pattern = r'^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.(2000|20[0-2][0-9])$'
    return bool(re.match(pattern, date_str))

@text_only_handler
def get_repair_date(message, selected_category, repair_name, repair_description, brand, model, license_plate):
    user_id = message.from_user.id
    repair_date = message.text.strip()
    
    if repair_date in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if repair_date == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_expense_and_repairs(message)
        else:
            return_to_menu(message)
        return
    
    if not is_valid_date(repair_date):
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.", parse_mode="Markdown")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.register_next_step_handler(message, partial(get_repair_date, selected_category=selected_category, repair_name=repair_name, repair_description=repair_description, brand=brand, model=model, license_plate=license_plate))
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–µ–º–æ–Ω—Ç–∞:", reply_markup=markup)
    bot.register_next_step_handler(
        message,
        partial(
            save_repair_data_final,
            selected_category=selected_category,
            repair_name=repair_name,
            repair_description=repair_description,
            repair_date=repair_date,
            brand=brand,
            model=model,
            license_plate=license_plate,
            selected_transport=f"{brand} {model} ({license_plate})"
        )
    )

@text_only_handler
def save_repair_data_final(message, selected_category, repair_name, repair_description, repair_date, brand, model, license_plate, selected_transport):
    user_id = message.from_user.id
    repair_amount = message.text.strip()
    
    if repair_amount in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if repair_amount == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_expense_and_repairs(message)
        else:
            return_to_menu(message)
        return
    
    try:
        repair_amount = float(repair_amount)
        if repair_amount < 0:
            raise ValueError("–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
        
        repair_data = {
            "category": selected_category,
            "name": repair_name,
            "date": repair_date,
            "amount": repair_amount,
            "description": repair_description,
            "transport": {
                "brand": brand,
                "model": model,
                "license_plate": license_plate
            }
        }
        
        user_data = load_repair_data(user_id)
        user_data.setdefault(str(user_id), {"repairs": []})
        user_data[str(user_id)]["repairs"].append(repair_data)
        
        save_repair_data(user_id, user_data, selected_transport)
        save_repair_to_excel(user_id, repair_data)
        
        bot.send_message(user_id, f"‚úÖ –†–µ–º–æ–Ω—Ç *{repair_name}* —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!", parse_mode="Markdown")
        return_to_expense_and_repairs(message)
    
    except ValueError:
        bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!", parse_mode="Markdown")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
        markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.register_next_step_handler(
            message,
            partial(
                save_repair_data_final,
                selected_category=selected_category,
                repair_name=repair_name,
                repair_description=repair_description,
                repair_date=repair_date,
                brand=brand,
                model=model,
                license_plate=license_plate,
                selected_transport=selected_transport
            )
        )

def save_repair_to_excel(user_id, repair_data):
    excel_path = os.path.join(REPAIRS_DIR, "excel", f"{user_id}_repairs.xlsx")
    
    try:
        if os.path.exists(excel_path):
            try:
                workbook = load_workbook(excel_path)
            except Exception:
                workbook = Workbook()
                workbook.remove(workbook.active)
        else:
            workbook = Workbook()
            workbook.remove(workbook.active)
        
        if "Summary" not in workbook.sheetnames:
            summary_sheet = workbook.create_sheet("Summary")
        else:
            summary_sheet = workbook["Summary"]
        
        transport_sheet_name = f"{repair_data['transport']['brand']}_{repair_data['transport']['model']}_{repair_data['transport']['license_plate']}"[:31]
        if transport_sheet_name not in workbook.sheetnames:
            transport_sheet = workbook.create_sheet(transport_sheet_name)
        else:
            transport_sheet = workbook[transport_sheet_name]
        
        headers = ["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]
        
        def setup_sheet(sheet):
            if sheet.max_row == 0 or sheet[1][0].value != headers[0]:
                sheet.append(headers)
                for cell in sheet[1]:
                    cell.font = Font(bold=True)
                    cell.alignment = Alignment(horizontal="center")
        
        for sheet in [summary_sheet, transport_sheet]:
            setup_sheet(sheet)
            row_data = [
                f"{repair_data['transport']['brand']} {repair_data['transport']['model']} ({repair_data['transport']['license_plate']})",
                repair_data["category"],
                repair_data["name"],
                repair_data["date"],
                float(repair_data["amount"]),
                repair_data["description"],
            ]
            sheet.append(row_data)
        
        for sheet in [summary_sheet, transport_sheet]:
            for col in sheet.columns:
                max_length = max(len(str(cell.value)) for cell in col if cell.value)
                sheet.column_dimensions[get_column_letter(col[0].column)].width = max_length + 2
        
        workbook.save(excel_path)
        workbook.close()
    
    except Exception as e:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Excel!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã) ---------------------------------------------------

selected_repair_transport_dict = {}

def filter_repairs_by_transport(user_id, repairs):
    selected_transport = selected_repair_transport_dict.get(user_id, load_repair_data(user_id).get("selected_transport", ""))
    if not selected_transport:
        return repairs
    
    selected_transport = format_transport_string(selected_transport)
    
    filtered_repairs = [
        repair for repair in repairs
        if format_transport_string(repair.get("transport", {})) == selected_transport
    ]
    return filtered_repairs

def send_repair_menu(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–†–µ–º–æ–Ω—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)"), types.KeyboardButton("–†–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)"))
    markup.add(types.KeyboardButton("–†–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)"), types.KeyboardButton("–†–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)"))
    markup.add(types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –≤ EXCEL"))
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã")
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_repairs(message):
    user_id = message.from_user.id
    transport_list = load_transport_data(user_id)
    
    if not transport_list:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"))
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
        bot.send_message(user_id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?", reply_markup=markup)
        bot.register_next_step_handler(message, ask_add_transport)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    transport_buttons = [
        types.KeyboardButton(f"{transport['brand']} {transport['model']} ({transport['license_plate']})")
        for transport in transport_list
    ]
    for i in range(0, len(transport_buttons), 2):
        markup.add(*transport_buttons[i:i+2])
    
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_transport_selection_for_repairs)

@text_only_handler
def handle_transport_selection_for_repairs(message):
    user_id = message.from_user.id
    selected_transport = message.text.strip()
    
    if selected_transport == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return
    if selected_transport == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    transport_list = load_transport_data(user_id)
    if selected_transport not in [f"{t['brand']} {t['model']} ({t['license_plate']})" for t in transport_list]:
        bot.send_message(user_id, "‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="Markdown")
        view_repairs(message)
        return
    
    selected_repair_transport_dict[user_id] = selected_transport
    save_repair_data(user_id, load_repair_data(user_id), selected_transport)
    
    bot.send_message(user_id, f"–ü–æ–∫–∞–∑—ã–≤–∞—é —Ä–µ–º–æ–Ω—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: *{selected_transport}*", parse_mode="Markdown")
    send_repair_menu(user_id)

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –≤ excel) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –≤ EXCEL")
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –≤ EXCEL')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –≤ EXCEL')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def send_repairs_excel(message):
    user_id = message.from_user.id
    excel_path = os.path.join(REPAIRS_DIR, "excel", f"{user_id}_repairs.xlsx")
    
    if not os.path.exists(excel_path):
        bot.send_message(user_id, "‚ùå –§–∞–π–ª —Å –≤–∞—à–∏–º–∏ —Ä–µ–º–æ–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
        return
    
    try:
        with open(excel_path, 'rb') as excel_file:
            bot.send_document(user_id, excel_file)
    except Exception as e:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ Excel!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–µ–º–æ–Ω—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)")
@check_function_state_decorator('–†–µ–º–æ–Ω—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)')
@track_usage('–†–µ–º–æ–Ω—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_repairs_by_category(message):
    user_id = message.from_user.id
    user_data = load_repair_data(user_id)
    repairs = user_data.get(str(user_id), {}).get("repairs", [])
    
    filtered_repairs = filter_repairs_by_transport(user_id, repairs)
    categories = sorted(set(repair["category"] for repair in filtered_repairs))
    
    if not categories:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        send_repair_menu(user_id)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*[types.KeyboardButton(category) for category in categories])
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_repair_category_selection)

@text_only_handler
def handle_repair_category_selection(message):
    user_id = message.from_user.id
    selected_category = message.text.strip()
    
    if selected_category in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if selected_category == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
            return_to_expense_and_repairs(message)
        else:
            return_to_menu(message)
        return
    
    user_data = load_repair_data(user_id)
    repairs = user_data.get(str(user_id), {}).get("repairs", [])
    filtered_repairs = filter_repairs_by_transport(user_id, repairs)
    
    category_repairs = [repair for repair in filtered_repairs if repair["category"] == selected_category]
    
    if not category_repairs:
        bot.send_message(user_id, f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category}* —Ä–µ–º–æ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", parse_mode="Markdown")
        send_repair_menu(user_id)
        return
    
    total_repairs_amount = 0
    repair_details = []
    
    for index, repair in enumerate(category_repairs, start=1):
        repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        repair_date = repair.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        repair_amount = float(repair.get("amount", 0))
        total_repairs_amount += repair_amount
        
        repair_details.append(
            f"üîß *‚Ññ{index}*\n\n"
            f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {repair['category']}\n"
            f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {repair_name}\n"
            f"üìÖ *–î–∞—Ç–∞:* {repair_date}\n"
            f"üí∞ *–°—É–º–º–∞:* {repair_amount:.2f} —Ä—É–±.\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {repair.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
        )
    
    message_text = f"*–†–µ–º–æ–Ω—Ç—ã* –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category}*:\n\n" + "\n\n".join(repair_details)
    send_message_with_split(user_id, message_text, parse_mode="Markdown")
    bot.send_message(
        user_id,
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category}*: *{total_repairs_amount:.2f}* —Ä—É–±.",
        parse_mode="Markdown"
    )
    
    send_repair_menu(user_id)

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –º–µ—Å—è—Ü—É) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)")
@check_function_state_decorator('–†–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)')
@track_usage('–†–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_repairs_by_month(message):
    user_id = message.from_user.id
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ (–ú–ú.–ì–ì–ì–ì) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, get_repairs_by_month)

@text_only_handler
def get_repairs_by_month(message):
    user_id = message.from_user.id
    date = message.text.strip()
    
    if date == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return
    if date == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    match = re.match(r"^(0[1-9]|1[0-2])\.(20[0-9]{2})$", date)
    if not match:
        bot.send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì!", parse_mode="Markdown")
        bot.register_next_step_handler(message, get_repairs_by_month)
        return
    
    month, year = match.groups()
    
    user_data = load_repair_data(user_id)
    repairs = user_data.get(str(user_id), {}).get("repairs", [])
    filtered_repairs = filter_repairs_by_transport(user_id, repairs)
    
    total_repairs = 0
    repair_details = []
    
    for index, repair in enumerate(filtered_repairs, start=1):
        repair_date = repair.get("date", "")
        if repair_date and repair_date.split(".")[1:3] == [month, year]:
            amount = float(repair.get("amount", 0))
            total_repairs += amount
            
            repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            description = repair.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
            category = repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            
            repair_details.append(
                f"üîß *‚Ññ{index}*\n\n"
                f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
                f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {repair_name}\n"
                f"üìÖ *–î–∞—Ç–∞:* {repair_date}\n"
                f"üí∞ *–°—É–º–º–∞:* {amount:.2f} —Ä—É–±.\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
            )
    
    if repair_details:
        message_text = f"*–†–µ–º–æ–Ω—Ç—ã* –∑–∞ *{date}* –º–µ—Å—è—Ü:\n\n" + "\n\n".join(repair_details)
        send_message_with_split(user_id, message_text, parse_mode="Markdown")
        bot.send_message(user_id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ *{date}* –º–µ—Å—è—Ü: *{total_repairs:.2f}* —Ä—É–±.", parse_mode="Markdown")
    else:
        bot.send_message(user_id, f"‚ùå –ó–∞ *{date}* –º–µ—Å—è—Ü —Ä–µ–º–æ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", parse_mode="Markdown")
    
    send_repair_menu(user_id)

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –≥–æ–¥—É) ---------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)")
@check_function_state_decorator('–†–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)')
@track_usage('–†–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_repairs_by_year(message):
    user_id = message.from_user.id
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤"))
    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (–ì–ì–ì–ì) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, get_repairs_by_year)

@text_only_handler
def get_repairs_by_year(message):
    user_id = message.from_user.id
    year = message.text.strip()
    
    if year == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        return_to_expense_and_repairs(message)
        return
    if year == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    
    if not re.match(r"^(20[0-9]{2})$", year):
        bot.send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì!", parse_mode="Markdown")
        bot.register_next_step_handler(message, get_repairs_by_year)
        return
    
    user_data = load_repair_data(user_id)
    repairs = user_data.get(str(user_id), {}).get("repairs", [])
    filtered_repairs = filter_repairs_by_transport(user_id, repairs)
    
    total_repairs = 0
    repair_details = []
    
    for index, repair in enumerate(filtered_repairs, start=1):
        repair_date = repair.get("date", "")
        if repair_date and repair_date.split(".")[-1] == year:
            amount = float(repair.get("amount", 0))
            total_repairs += amount
            
            repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            description = repair.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
            category = repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            
            repair_details.append(
                f"üîß *‚Ññ{index}*\n\n"
                f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
                f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {repair_name}\n"
                f"üìÖ *–î–∞—Ç–∞:* {repair_date}\n"
                f"üí∞ *–°—É–º–º–∞:* {amount:.2f} —Ä—É–±.\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
            )
    
    if repair_details:
        message_text = f"*–†–µ–º–æ–Ω—Ç—ã* –∑–∞ *{year}* –≥–æ–¥:\n\n" + "\n\n".join(repair_details)
        send_message_with_split(user_id, message_text, parse_mode="Markdown")
        bot.send_message(user_id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ *{year}* –≥–æ–¥: *{total_repairs:.2f}* —Ä—É–±.", parse_mode="Markdown")
    else:
        bot.send_message(user_id, f"‚ùå –ó–∞ *{year}* –≥–æ–¥ —Ä–µ–º–æ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", parse_mode="Markdown")
    
    send_repair_menu(user_id)

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –≤—Å–µ –≤—Ä–µ–º—è) -------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
@check_function_state_decorator('–†–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')
@track_usage('–†–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_all_repairs(message):
    user_id = message.from_user.id
    user_data = load_repair_data(user_id)
    repairs = user_data.get(str(user_id), {}).get("repairs", [])
    filtered_repairs = filter_repairs_by_transport(user_id, repairs)
    
    total_repairs = 0
    repair_details = []
    
    for index, repair in enumerate(filtered_repairs, start=1):
        amount = float(repair.get("amount", 0))
        total_repairs += amount
        
        repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        repair_date = repair.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        description = repair.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
        category = repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        
        repair_details.append(
            f"üîß *‚Ññ{index}*\n\n"
            f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
            f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {repair_name}\n"
            f"üìÖ *–î–∞—Ç–∞:* {repair_date}\n"
            f"üí∞ *–°—É–º–º–∞:* {amount:.2f} —Ä—É–±.\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
        )
    
    if repair_details:
        message_text = "*–í—Å–µ —Ä–µ–º–æ–Ω—Ç—ã*:\n\n" + "\n\n".join(repair_details)
        send_message_with_split(user_id, message_text, parse_mode="Markdown")
        bot.send_message(user_id, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤: *{total_repairs:.2f}* —Ä—É–±.", parse_mode="Markdown")
    else:
        bot.send_message(user_id, "‚ùå –†–µ–º–æ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", parse_mode="Markdown")
    
    send_repair_menu(user_id)

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã) -------------------------------------------------

selected_repair_transports = {}
repairs_to_delete_dict = {}
selected_repair_categories = {}
user_repairs_to_delete = {}

MAX_MESSAGE_LENGTH = 4096

def send_message_with_split(user_id, text, parse_mode=None):
    while len(text) > MAX_MESSAGE_LENGTH:
        bot.send_message(user_id, text[:MAX_MESSAGE_LENGTH], parse_mode=parse_mode)
        text = text[MAX_MESSAGE_LENGTH:]
    bot.send_message(user_id, text, parse_mode=parse_mode)

def format_transport_string(transport):
    if isinstance(transport, dict):
        return f"{transport.get('brand', '')} {transport.get('model', '')} ({transport.get('license_plate', '')})"
    parts = transport.split(" ")
    if len(parts) < 3:
        return None
    brand = parts[0]
    model = parts[1]
    license_plate = parts[2].strip("()")
    return {"brand": brand, "model": model, "license_plate": license_plate}

def filter_repairs_by_transport(user_id, repairs):
    selected_transport = selected_repair_transports.get(user_id) or load_repair_data(user_id).get("selected_transport", "")
    if not selected_transport:
        return []
    transport_dict = format_transport_string(selected_transport)
    if not transport_dict:
        return []
    return [
        repair for repair in repairs
        if all(
            repair.get("transport", {}).get(key) == transport_dict[key]
            for key in ["brand", "model", "license_plate"]
        )
    ]

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã")
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã')
@track_usage('–£–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def initiate_delete_repairs(message):
    user_id = str(message.from_user.id)
    
    transport_data = load_transport_data(user_id)
    if not transport_data:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?", reply_markup=markup)
        bot.register_next_step_handler(message, ask_add_transport)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    transport_buttons = [
        f"{transport['brand']} {transport['model']} ({transport['license_plate']})"
        for transport in transport_data
    ]
    for i in range(0, len(transport_buttons), 2):
        markup.row(*transport_buttons[i:i + 2])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_repair_transport_selection_for_deletion)

@text_only_handler
def handle_repair_transport_selection_for_deletion(message):
    user_id = str(message.from_user.id)
    selected_transport = message.text.strip()
    
    if selected_transport == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if selected_transport == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_menu(message)
        return
    
    transport_data = load_transport_data(user_id)
    transport_exists = any(
        f"{t['brand']} {t['model']} ({t['license_plate']})" == selected_transport
        for t in transport_data
    )
    if not transport_exists:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        transport_buttons = [
            f"{t['brand']} {t['model']} ({t['license_plate']})"
            for t in transport_data
        ]
        for i in range(0, len(transport_buttons), 2):
            markup.row(*transport_buttons[i:i + 2])
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown", reply_markup=markup)
        bot.register_next_step_handler(message, handle_repair_transport_selection_for_deletion)
        return
    
    selected_repair_transports[user_id] = selected_transport
    user_data = load_repair_data(user_id)
    user_data["selected_transport"] = selected_transport
    save_repair_data(user_id, user_data)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("Del —Ä–µ–º–æ–Ω—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)", "Del —Ä–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)")
    markup.add("Del —Ä–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)", "Del —Ä–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_repair_deletion_option)

@text_only_handler
def handle_repair_deletion_option(message):
    user_id = str(message.from_user.id)
    option = message.text.strip()
    
    if option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_menu(message)
        return
    
    selected_transport = selected_repair_transports.get(user_id, "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    if option == "Del —Ä–µ–º–æ–Ω—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)":
        delete_repairs_by_category(message)
    elif option == "Del —Ä–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)":
        delete_repairs_by_month(message)
    elif option == "Del —Ä–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)":
        delete_repairs_by_year(message)
    elif option == "Del —Ä–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)":
        delete_all_repairs_for_selected_transport(message)
    else:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", parse_mode="Markdown")
        initiate_delete_repairs(message)

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏) -------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "Del —Ä–µ–º–æ–Ω—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)")
@check_function_state_decorator('Del —Ä–µ–º–æ–Ω—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)')
@track_usage('Del —Ä–µ–º–æ–Ω—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_repairs_by_category(message):
    user_id = str(message.from_user.id)
    user_data = load_repair_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    try:
        transport_dict = format_transport_string(selected_transport)
        if not transport_dict:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        selected_brand = transport_dict["brand"]
        selected_model = transport_dict["model"]
        selected_license_plate = transport_dict["license_plate"]
    except (ValueError, IndexError) as e:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    repairs = user_data.get(str(user_id), {}).get("repairs", [])
    filtered_repairs = filter_repairs_by_transport(user_id, repairs)
    
    if not filtered_repairs:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}*!", parse_mode="Markdown")
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    
    categories = sorted(set(repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") for repair in filtered_repairs))
    
    if not categories:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}*!", parse_mode="Markdown")
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    markup.add(*[types.KeyboardButton(category) for category in categories])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_repair_category_selection_for_deletion)

@text_only_handler
def handle_repair_category_selection_for_deletion(message):
    user_id = str(message.from_user.id)
    selected_category = message.text.strip()
    
    if selected_category == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_repair_categories:
            del selected_repair_categories[user_id]
        if user_id in user_repairs_to_delete:
            del user_repairs_to_delete[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if selected_category == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_repair_categories:
            del selected_repair_categories[user_id]
        if user_id in user_repairs_to_delete:
            del user_repairs_to_delete[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_menu(message)
        return
    
    user_data = load_repair_data(user_id)
    repairs = user_data.get(str(user_id), {}).get("repairs", [])
    filtered_repairs = filter_repairs_by_transport(user_id, repairs)
    
    if not any(repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") == selected_category for repair in filtered_repairs):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        categories = sorted(set(repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") for repair in filtered_repairs))
        markup.add(*[types.KeyboardButton(category) for category in categories])
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è *{selected_category}* –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", parse_mode="Markdown", reply_markup=markup)
        bot.register_next_step_handler(message, handle_repair_category_selection_for_deletion)
        return
    
    selected_repair_categories[user_id] = selected_category
    repairs_to_delete = [
        (index + 1, repair) for index, repair in enumerate(filtered_repairs)
        if repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") == selected_category
    ]
    
    if not repairs_to_delete:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category}* –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        if user_id in selected_repair_categories:
            del selected_repair_categories[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    
    repairs_to_delete_dict[user_id] = repairs_to_delete
    
    repair_list_text = f"–°–ø–∏—Å–æ–∫ —Ä–µ–º–æ–Ω—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{selected_category}*:\n\n"
    for index, repair in repairs_to_delete:
        repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        repair_date = repair.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        repair_list_text += f"üîß ‚Ññ{index}. {repair_name} - ({repair_date})\n"
    
    repair_list_text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    send_message_with_split(user_id, repair_list_text, parse_mode="Markdown")
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    bot.register_next_step_handler(message, confirm_delete_repair_category)

@text_only_handler
def confirm_delete_repair_category(message):
    user_id = str(message.from_user.id)
    selected_option = message.text.strip()

    if selected_option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in repairs_to_delete_dict:
            del repairs_to_delete_dict[user_id]
        if user_id in selected_repair_categories:
            del selected_repair_categories[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if selected_option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in repairs_to_delete_dict:
            del repairs_to_delete_dict[user_id]
        if user_id in selected_repair_categories:
            del selected_repair_categories[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_menu(message)
        return
    if selected_option == "0":
        bot.send_message(user_id, "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!", parse_mode="Markdown")
        if user_id in repairs_to_delete_dict:
            del repairs_to_delete_dict[user_id]
        if user_id in selected_repair_categories:
            del selected_repair_categories[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    repairs_to_delete = repairs_to_delete_dict.get(user_id, [])
    if not repairs_to_delete:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!", parse_mode="Markdown")
        if user_id in selected_repair_categories:
            del selected_repair_categories[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    try:
        indices = [int(num.strip()) for num in selected_option.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if any(i == index for i, _ in repairs_to_delete):
                valid_indices.append(index)
            else:
                invalid_indices.append(index)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–º–æ–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup, parse_mode="Markdown")
            bot.register_next_step_handler(msg, confirm_delete_repair_category)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(user_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")

        deleted_repair_names = []
        user_data = load_repair_data(user_id)
        user_repairs = user_data.get(str(user_id), {}).get("repairs", [])

        for index in sorted(valid_indices, reverse=True):
            selected_repair = next((r for i, r in repairs_to_delete if i == index), None)
            if selected_repair:
                _, deleted_repair = selected_repair
                deleted_repair_names.append(deleted_repair.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                if deleted_repair in user_repairs:
                    user_repairs.remove(deleted_repair)
                repairs_to_delete.remove((index, deleted_repair))

        user_data[str(user_id)]["repairs"] = user_repairs
        save_repair_data(user_id, user_data)
        update_repairs_excel_file(user_id)

        bot.send_message(user_id, f"‚úÖ –†–µ–º–æ–Ω—Ç—ã *{', '.join(deleted_repair_names)}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")

        if not repairs_to_delete:
            if user_id in repairs_to_delete_dict:
                del repairs_to_delete_dict[user_id]
            if user_id in selected_repair_categories:
                del selected_repair_categories[user_id]
            if user_id in selected_repair_transports:
                del selected_repair_transports[user_id]
        else:
            repairs_to_delete_dict[user_id] = repairs_to_delete

        return_to_expense_and_repairs(message)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(msg, confirm_delete_repair_category)

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –º–µ—Å—è—Ü—É) -------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "Del —Ä–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)")
@check_function_state_decorator('Del —Ä–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)')
@track_usage('Del —Ä–µ–º–æ–Ω—Ç—ã (–º–µ—Å—è—Ü)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_repairs_by_month(message):
    user_id = str(message.from_user.id)
    
    user_data = load_repair_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ (–ú–ú.–ì–ì–ì–ì) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, delete_repairs_by_month_handler)

@text_only_handler
def delete_repairs_by_month_handler(message):
    user_id = str(message.from_user.id)
    month_year = message.text.strip()
    
    if month_year == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if month_year == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_menu(message)
        return
    
    match = re.match(r"^(0[1-9]|1[0-2])\.(20[0-9]{2}|2[1-9][0-9]{2}|3000)$", month_year)
    if not match:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id,"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì!", parse_mode="Markdown", reply_markup=markup)
        bot.register_next_step_handler(message, delete_repairs_by_month_handler)
        return
    
    selected_month, selected_year = map(int, match.groups())
    
    user_data = load_repair_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    try:
        transport_dict = format_transport_string(selected_transport)
        if not transport_dict:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        selected_brand = transport_dict["brand"]
        selected_model = transport_dict["model"]
        selected_license_plate = transport_dict["license_plate"]
    except (ValueError, IndexError) as e:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    repairs = user_data.get(str(user_id), {}).get("repairs", [])
    
    if not repairs:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}*!", parse_mode="Markdown")
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    
    repairs_to_delete = []
    for index, repair in enumerate(repairs, start=1):
        repair_date = repair.get("date", "")
        if not repair_date or len(repair_date.split(".")) != 3:
            continue
        try:
            day, month, year = map(int, repair_date.split("."))
            transport = repair.get("transport", {})
            if not all(k in transport for k in ["brand", "model", "license_plate"]):
                continue
            if (month == selected_month and
                year == selected_year and
                transport["brand"] == selected_brand and
                transport["model"] == selected_model and
                transport["license_plate"] == selected_license_plate):
                repairs_to_delete.append((index, repair))
        except (ValueError, TypeError) as e:
            continue
    
    if not repairs_to_delete:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ *{month_year}* –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}*!", parse_mode="Markdown")
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    
    repairs_to_delete_dict[user_id] = repairs_to_delete
    
    repair_list_text = f"–°–ø–∏—Å–æ–∫ —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ *{month_year}*:\n\n"
    for index, repair in repairs_to_delete:
        repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        repair_date = repair.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        repair_list_text += f"üîß ‚Ññ{index}. {repair_name} - ({repair_date})\n"
    
    repair_list_text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    send_message_with_split(user_id, repair_list_text, parse_mode="Markdown")
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    bot.register_next_step_handler(message, confirm_delete_repair_month)

@text_only_handler
def confirm_delete_repair_month(message):
    user_id = str(message.from_user.id)
    selected_option = message.text.strip()

    if selected_option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in repairs_to_delete_dict:
            del repairs_to_delete_dict[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if selected_option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in repairs_to_delete_dict:
            del repairs_to_delete_dict[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_menu(message)
        return
    if selected_option == "0":
        bot.send_message(user_id, "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!", parse_mode="Markdown")
        if user_id in repairs_to_delete_dict:
            del repairs_to_delete_dict[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    repairs_to_delete = repairs_to_delete_dict.get(user_id, [])
    if not repairs_to_delete:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—è—Ü—É!", parse_mode="Markdown")
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    try:
        indices = [int(num.strip()) for num in selected_option.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if any(i == index for i, _ in repairs_to_delete):
                valid_indices.append(index)
            else:
                invalid_indices.append(index)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–º–æ–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup, parse_mode="Markdown")
            bot.register_next_step_handler(msg, confirm_delete_repair_month)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(user_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")

        deleted_repair_names = []
        user_data = load_repair_data(user_id)
        user_repairs = user_data.get(str(user_id), {}).get("repairs", [])

        for index in sorted(valid_indices, reverse=True):
            selected_repair = next((r for i, r in repairs_to_delete if i == index), None)
            if selected_repair:
                _, deleted_repair = selected_repair
                deleted_repair_names.append(deleted_repair.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                if deleted_repair in user_repairs:
                    user_repairs.remove(deleted_repair)
                repairs_to_delete.remove((index, deleted_repair))

        user_data[str(user_id)]["repairs"] = user_repairs
        save_repair_data(user_id, user_data)
        update_repairs_excel_file(user_id)

        bot.send_message(user_id, f"‚úÖ –†–µ–º–æ–Ω—Ç—ã *{', '.join(deleted_repair_names)}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")

        if not repairs_to_delete:
            if user_id in repairs_to_delete_dict:
                del repairs_to_delete_dict[user_id]
            if user_id in selected_repair_transports:
                del selected_repair_transports[user_id]
        else:
            repairs_to_delete_dict[user_id] = repairs_to_delete

        return_to_expense_and_repairs(message)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(msg, confirm_delete_repair_month)

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –≥–æ–¥—É) -------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "Del —Ä–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)")
@check_function_state_decorator('Del —Ä–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)')
@track_usage('Del —Ä–µ–º–æ–Ω—Ç—ã (–≥–æ–¥)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_repairs_by_year(message):
    user_id = str(message.from_user.id)
    
    user_data = load_repair_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (–ì–ì–ì–ì) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, delete_repairs_by_year_handler)

@text_only_handler
def delete_repairs_by_year_handler(message):
    user_id = str(message.from_user.id)
    year = message.text.strip()
    
    if year == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if year == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_menu(message)
        return
    
    if not re.match(r"^(20[0-9]{2}|2[1-9][0-9]{2}|3000)$", year):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì!", parse_mode="Markdown", reply_markup=markup)
        bot.register_next_step_handler(message, delete_repairs_by_year_handler)
        return
    
    user_data = load_repair_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    try:
        transport_dict = format_transport_string(selected_transport)
        if not transport_dict:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        selected_brand = transport_dict["brand"]
        selected_model = transport_dict["model"]
        selected_license_plate = transport_dict["license_plate"]
    except (ValueError, IndexError) as e:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    repairs = user_data.get(str(user_id), {}).get("repairs", [])
    
    if not repairs:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}*!", parse_mode="Markdown")
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    
    repairs_to_delete = []
    for index, repair in enumerate(repairs, start=1):
        repair_date = repair.get("date", "")
        if not repair_date or len(repair_date.split(".")) != 3:
            continue
        try:
            day, month, repair_year = map(int, repair_date.split("."))
            transport = repair.get("transport", {})
            if not all(k in transport for k in ["brand", "model", "license_plate"]):
                continue
            if (repair_year == int(year) and
                transport["brand"] == selected_brand and
                transport["model"] == selected_model and
                transport["license_plate"] == selected_license_plate):
                repairs_to_delete.append((index, repair))
        except (ValueError, TypeError) as e:
            continue
    
    if not repairs_to_delete:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ *{year}* –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}*!", parse_mode="Markdown")
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    
    repairs_to_delete_dict[user_id] = repairs_to_delete
    
    repair_list_text = f"–°–ø–∏—Å–æ–∫ —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ *{year}*:\n\n"
    for index, repair in repairs_to_delete:
        repair_name = repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        repair_date = repair.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        repair_list_text += f"üîß ‚Ññ{index}. {repair_name} - ({repair_date})\n"
    
    repair_list_text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    send_message_with_split(user_id, repair_list_text, parse_mode="Markdown")
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    bot.register_next_step_handler(message, confirm_delete_repair_year)

@text_only_handler
def confirm_delete_repair_year(message):
    user_id = str(message.from_user.id)
    selected_option = message.text.strip()

    if selected_option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in repairs_to_delete_dict:
            del repairs_to_delete_dict[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if selected_option == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in repairs_to_delete_dict:
            del repairs_to_delete_dict[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_menu(message)
        return
    if selected_option == "0":
        bot.send_message(user_id, "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!", parse_mode="Markdown")
        if user_id in repairs_to_delete_dict:
            del repairs_to_delete_dict[user_id]
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    repairs_to_delete = repairs_to_delete_dict.get(user_id, [])
    if not repairs_to_delete:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –≥–æ–¥—É!", parse_mode="Markdown")
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return

    try:
        indices = [int(num.strip()) for num in selected_option.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if any(i == index for i, _ in repairs_to_delete):
                valid_indices.append(index)
            else:
                invalid_indices.append(index)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–º–æ–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup, parse_mode="Markdown")
            bot.register_next_step_handler(msg, confirm_delete_repair_year)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(user_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode="Markdown")

        deleted_repair_names = []
        user_data = load_repair_data(user_id)
        user_repairs = user_data.get(str(user_id), {}).get("repairs", [])

        for index in sorted(valid_indices, reverse=True):
            selected_repair = next((r for i, r in repairs_to_delete if i == index), None)
            if selected_repair:
                _, deleted_repair = selected_repair
                deleted_repair_names.append(deleted_repair.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                if deleted_repair in user_repairs:
                    user_repairs.remove(deleted_repair)
                repairs_to_delete.remove((index, deleted_repair))

        user_data[str(user_id)]["repairs"] = user_repairs
        save_repair_data(user_id, user_data)
        update_repairs_excel_file(user_id)

        bot.send_message(user_id, f"‚úÖ –†–µ–º–æ–Ω—Ç—ã *{', '.join(deleted_repair_names)}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")

        if not repairs_to_delete:
            if user_id in repairs_to_delete_dict:
                del repairs_to_delete_dict[user_id]
            if user_id in selected_repair_transports:
                del selected_repair_transports[user_id]
        else:
            repairs_to_delete_dict[user_id] = repairs_to_delete

        return_to_expense_and_repairs(message)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(msg, confirm_delete_repair_year)

# ----------------------------------------- –¢–†–ê–¢–´ –ò –†–ï–ú–û–ù–¢–´ (—É–¥–∞–ª–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –ø–æ –≤—Å–µ –≤—Ä–µ–º—è) -------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "Del —Ä–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)")
@check_function_state_decorator('Del —Ä–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')
@track_usage('Del —Ä–µ–º–æ–Ω—Ç—ã (–≤—Å–µ –≤—Ä–µ–º—è)')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def delete_all_repairs_for_selected_transport(message):
    user_id = str(message.from_user.id)
    
    user_data = load_repair_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    bot.send_message(user_id, f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–µ–º–æ–Ω—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}*?\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–î–∞* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–ù–µ—Ç* –¥–ª—è –æ—Ç–º–µ–Ω—ã", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, confirm_delete_all_repairs)

@text_only_handler
def confirm_delete_all_repairs(message):
    user_id = str(message.from_user.id)
    response = message.text.strip().lower()
    
    if response == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤":
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_expense_and_repairs(message)
        return
    if response == "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in selected_repair_transports:
            del selected_repair_transports[user_id]
        return_to_menu(message)
        return
    
    user_data = load_repair_data(user_id)
    selected_transport = user_data.get("selected_transport", "")
    if not selected_transport:
        bot.send_message(user_id, "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    try:
        transport_dict = format_transport_string(selected_transport)
        if not transport_dict:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        selected_brand = transport_dict["brand"]
        selected_model = transport_dict["model"]
        selected_license_plate = transport_dict["license_plate"]
    except (ValueError, IndexError) as e:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!", parse_mode="Markdown")
        initiate_delete_repairs(message)
        return
    
    if response == "–¥–∞":
        repairs = user_data.get(str(user_id), {}).get("repairs", [])
        if not repairs:
            bot.send_message(user_id, f"‚ùå –ù–µ—Ç —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}*!", parse_mode="Markdown")
            if user_id in selected_repair_transports:
                del selected_repair_transports[user_id]
            return_to_expense_and_repairs(message)
            return
        
        repairs_to_keep = []
        for repair in repairs:
            transport = repair.get("transport", {})
            if not all(k in transport for k in ["brand", "model", "license_plate"]):
                repairs_to_keep.append(repair)
                continue
            if not (transport["brand"] == selected_brand and
                    transport["model"] == selected_model and
                    transport["license_plate"] == selected_license_plate):
                repairs_to_keep.append(repair)
        
        user_data[str(user_id)]["repairs"] = repairs_to_keep
        save_repair_data(user_id, user_data)
        update_repairs_excel_file(user_id)
        
        bot.send_message(user_id, f"‚úÖ –í—Å–µ —Ä–µ–º–æ–Ω—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ *{selected_transport}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", parse_mode="Markdown")
    elif response == "–Ω–µ—Ç":
        bot.send_message(user_id, "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!", parse_mode="Markdown")
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–î–∞", "–ù–µ—Ç")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞—Ç –∏ —Ä–µ–º–æ–Ω—Ç–æ–≤")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–¥–∞* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *–Ω–µ—Ç* –¥–ª—è –æ—Ç–º–µ–Ω—ã", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, confirm_delete_all_repairs)
        return
    
    if user_id in selected_repair_transports:
        del selected_repair_transports[user_id]
    return_to_expense_and_repairs(message)

def update_repairs_excel_file(user_id):
    user_id = str(user_id)
    user_data = load_repair_data(user_id)
    repairs = user_data.get(user_id, {}).get("repairs", [])
    excel_file_path = os.path.join(BASE_DIR, "data", "user", "expenses_and_repairs", "repairs", "excel", f"{user_id}_repairs.xlsx")
    
    try:
        if not os.path.exists(excel_file_path):
            workbook = openpyxl.Workbook()
            workbook.remove(workbook.active)
        else:
            workbook = openpyxl.load_workbook(excel_file_path)
        
        headers = ["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]
        summary_sheet = workbook["Summary"] if "Summary" in workbook.sheetnames else workbook.create_sheet("Summary")
        
        if summary_sheet.max_row > 1:
            summary_sheet.delete_rows(2, summary_sheet.max_row - 1)
        if summary_sheet.max_row == 0:
            summary_sheet.append(headers)
            for cell in summary_sheet[1]:
                cell.font = Font(bold=True)
                cell.alignment = Alignment(horizontal="center")
        
        unique_transports = set()
        valid_repairs = []
        for repair in repairs:
            transport = repair.get("transport", {})
            if not all(k in transport for k in ['brand', 'model', 'license_plate']):
                continue
            unique_transports.add((transport["brand"], transport["model"], transport["license_plate"]))
            valid_repairs.append(repair)
        
        for repair in valid_repairs:
            transport = repair["transport"]
            row_data = [
                f"{transport['brand']} {transport['model']} ({transport['license_plate']})",
                repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                repair.get("date", ""),
                float(repair.get("amount", 0)),
                repair.get("description", ""),
            ]
            summary_sheet.append(row_data)
        
        for sheet_name in workbook.sheetnames:
            if sheet_name != "Summary":
                try:
                    brand, model, license_plate = sheet_name.split('_')
                    if (brand, model, license_plate) not in unique_transports:
                        del workbook[sheet_name]
                except ValueError:
                    continue
        
        for brand, model, license_plate in unique_transports:
            sheet_name = f"{brand}_{model}_{license_plate}"[:31]
            transport_sheet = workbook[sheet_name] if sheet_name in workbook.sheetnames else workbook.create_sheet(sheet_name)
            
            if transport_sheet.max_row > 1:
                transport_sheet.delete_rows(2, transport_sheet.max_row - 1)
            if transport_sheet.max_row == 0:
                transport_sheet.append(headers)
                for cell in transport_sheet[1]:
                    cell.font = Font(bold=True)
                    cell.alignment = Alignment(horizontal="center")
            
            for repair in valid_repairs:
                transport = repair["transport"]
                if (transport["brand"], transport["model"], transport["license_plate"]) == (brand, model, license_plate):
                    row_data = [
                        f"{brand} {model} ({license_plate})",
                        repair.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                        repair.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                        repair.get("date", ""),
                        float(repair.get("amount", 0)),
                        repair.get("description", ""),
                    ]
                    transport_sheet.append(row_data)
        
        for sheet in workbook:
            for col in sheet.columns:
                max_length = max(len(str(cell.value)) for cell in col if cell.value) + 2
                sheet.column_dimensions[get_column_letter(col[0].column)].width = max_length
        
        workbook.save(excel_file_path)
        workbook.close()
    
    except Exception as e:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤!", parse_mode="Markdown")