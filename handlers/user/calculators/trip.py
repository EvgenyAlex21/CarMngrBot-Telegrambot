from core.imports import wraps, telebot, types, os, json, re, requests, datetime, timedelta, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, pd, Workbook, load_workbook, Alignment, Border, Side, Font, PatternFill, openpyxl, Nominatim, GeocoderUnavailable, geodesic, BeautifulSoup
from core.bot_instance import bot, BASE_DIR
from handlers.user.user_main_menu import return_to_menu
from handlers.user.calculators.calculators_main import return_to_calculators
from ..utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha, check_function_state_decorator, track_usage, check_subscription
)

# ---------------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê -------------------------------------------------------

TRIP_DIR = os.path.join(BASE_DIR, 'data', 'user', 'calculators', 'trip')
geolocator = Nominatim(user_agent="fuel_expense_bot")

def ensure_trip_directory():
    os.makedirs(TRIP_DIR, exist_ok=True)

ensure_trip_directory()

user_trip_data = {}

def save_data(user_id):
    if user_id in user_trip_data:
        file_path = os.path.join(TRIP_DIR, f"{user_id}_trip_data.json")
        with open(file_path, "w", encoding='utf-8') as json_file:
            json.dump({
                "user_id": str(user_id),
                "trips": user_trip_data[user_id]
            }, json_file, ensure_ascii=False, indent=4)

def add_trip(user_id, trip):
    if user_id not in user_trip_data:
        user_trip_data[user_id] = []
    user_trip_data[user_id].append(trip)

def save_trip_data(user_id):
    file_path = os.path.join(TRIP_DIR, f"{user_id}_trip_data.json")
    with open(file_path, "w", encoding='utf-8') as json_file:
        json.dump({
            "user_id": str(user_id),
            "trips": user_trip_data.get(user_id, [])
        }, json_file, ensure_ascii=False, indent=4)

def load_trip_data(user_id):
    file_path = os.path.join(TRIP_DIR, f"{user_id}_trip_data.json")
    if os.path.exists(file_path):
        try:
            with open(file_path, "r", encoding='utf-8') as json_file:
                data = json.load(json_file)
                if isinstance(data, dict) and "trips" in data:
                    return data["trips"]
                else:
                    with open(file_path, "w", encoding='utf-8') as json_file:
                        json.dump({
                            "user_id": str(user_id),
                            "trips": data
                        }, json_file, ensure_ascii=False, indent=4)
                    return data
        except UnicodeDecodeError:
            with open(file_path, "r", encoding='windows-1251') as json_file:
                data = json.load(json_file)
            with open(file_path, "w", encoding='utf-8') as json_file:
                if isinstance(data, dict) and "trips" in data:
                    json.dump(data, json_file, ensure_ascii=False, indent=4)
                    return data["trips"]
                else:
                    json.dump({
                        "user_id": str(user_id),
                        "trips": data
                    }, json_file, ensure_ascii=False, indent=4)
                    return data
    else:
        return []

def load_all_user_data():
    for filename in os.listdir(TRIP_DIR):
        if filename.endswith("_trip_data.json"):
            user_id = filename.split("_")[0]
            user_trip_data[user_id] = load_trip_data(user_id)

def save_all_trip_data():
    for user_id in user_trip_data:
        save_trip_data(user_id)

load_all_user_data()

user_trip_data = {}
trip_data = {}
temporary_trip_data = {}
fuel_types = ["–ê–ò-92", "–ê–ò-95", "–ê–ò-98", "–ê–ò-100", "–î–¢", "–ì–ê–ó"]
date_pattern = r"^\d{2}.\d{2}.\d{4}$"

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
@check_function_state_decorator('–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞')
@track_usage('–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_fuel_expense(message, show_description=True):
    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞—Å—á–µ—Ç—É —Ç–æ–ø–ª–∏–≤–∞*\n\n"
        "üìå *–†–∞—Å—á–µ—Ç —Ç–æ–ø–ª–∏–≤–∞:*\n"
        "–†–∞—Å—á–µ—Ç –≤–µ–¥–µ—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º - *–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞, –¥–∞—Ç–∞, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞, —Ü–µ–Ω–∞ –∑–∞ –ª–∏—Ç—Ä, —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤*\n\n"
        "üìå *–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–µ–∑–¥–æ–∫:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—á–µ—Ç—ã\n\n"
        "üìå *–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–µ–∑–¥–æ–∫:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—á–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–º –Ω–µ –Ω—É–∂–Ω—ã"
    )

    user_id = message.from_user.id

    if user_id not in user_trip_data:
        user_trip_data[user_id] = load_trip_data(user_id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥")
    item2 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–µ–∑–¥–∫–∏")
    item3 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫–∏")
    item4 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item5 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    markup.add(item1, item2, item3)
    markup.add(item4)
    markup.add(item5)

    bot.clear_step_handler_by_chat_id(user_id)

    if show_description:
        bot.send_message(user_id, description, parse_mode="Markdown")

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞:", reply_markup=markup)

def reset_and_start_over(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥")
    item2 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–µ–∑–¥–∫–∏")
    item3 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫–∏")
    item4 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item5 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    markup.add(item1, item2, item3)
    markup.add(item4)
    markup.add(item5)

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞:", reply_markup=markup)

save_all_trip_data()

def reset_user_data(user_id):
    if user_id not in user_trip_data:
        user_trip_data[user_id] = load_trip_data(user_id)
    bot.clear_step_handler_by_chat_id(user_id)

# --------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê (—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥) ---------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥")
@check_function_state_decorator('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥')
@track_usage('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def calculate_fuel_cost_handler(message):
    chat_id = message.chat.id

    bot.clear_step_handler_by_chat_id(chat_id)

    trip_data[chat_id] = {"locations": []}

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item3 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item4 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)
    markup.add(item4)
    sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ 1 –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=markup)
    reset_user_data(chat_id)

    bot.register_next_step_handler(sent, process_location_step, location_number=1)

@text_only_handler
def process_location_step(message, location_number):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item3 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item4 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)
    markup.add(item4)

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    location_data = {}
    if message.location:
        location = message.location
        try:
            address = geolocator.reverse((location.latitude, location.longitude), timeout=10).address
            location_data = {
                "address": address,
                "latitude": location.latitude,
                "longitude": location.longitude
            }
            bot.send_message(chat_id, f"–í–∞—à–µ {location_number} –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n{address}")
        except GeocoderUnavailable:
            bot.send_message(chat_id, "–°–µ—Ä–≤–∏—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return
    else:
        address = message.text
        try:
            location = geolocator.geocode(address, timeout=10)
            if location:
                location_data = {
                    "address": address,
                    "latitude": location.latitude,
                    "longitude": location.longitude
                }
                bot.send_message(chat_id, f"–í–∞—à–µ {location_number} –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n{address}")
            else:
                sent = bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å")
                bot.register_next_step_handler(sent, process_location_step, location_number)
                return
        except GeocoderUnavailable:
            bot.send_message(chat_id, "–°–µ—Ä–≤–∏—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return

    trip_data[chat_id]["locations"].append(location_data)

    if location_number == 1:
        sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ 2 –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=markup)
        bot.register_next_step_handler(sent, process_location_step, location_number=2)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–î–∞")
        item2 = types.KeyboardButton("–ù–µ—Ç")
        item3 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        item4 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        item5 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1, item2)
        markup.add(item3)
        markup.add(item4)
        markup.add(item5)
        sent = bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞?", reply_markup=markup)
        bot.register_next_step_handler(sent, process_add_more_locations, location_number + 1)

@text_only_handler
def process_add_more_locations(message, next_location_number):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–î–∞")
    item2 = types.KeyboardButton("–ù–µ—Ç")
    item3 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item4 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item5 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1, item2)
    markup.add(item3)
    markup.add(item4)
    markup.add(item5)

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–î–∞":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
        item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        item3 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        item4 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        markup.add(item4)
        sent = bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ {next_location_number} –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=markup)
        bot.register_next_step_handler(sent, process_location_step, next_location_number)
    elif message.text == "–ù–µ—Ç":
        calculate_total_distance(chat_id)
    else:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç!", reply_markup=markup)
        bot.register_next_step_handler(sent, process_add_more_locations, next_location_number)

def calculate_total_distance(chat_id):
    locations = trip_data[chat_id]["locations"]
    total_distance = 0.0
    for i in range(len(locations) - 1):
        start_coords = (locations[i]["latitude"], locations[i]["longitude"])
        end_coords = (locations[i + 1]["latitude"], locations[i + 1]["longitude"])
        total_distance += geodesic(start_coords, end_coords).kilometers

    trip_data[chat_id]["distance"] = total_distance

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_auto = types.KeyboardButton("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ")
    item_input = types.KeyboardButton("–í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é")
    item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    markup.add(item_auto, item_input)
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)

    sent = bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –≤–≤–æ–¥–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(sent, process_distance_choice_step, total_distance)

@text_only_handler
def process_custom_distance_step(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    try:
        custom_distance = float(message.text.replace(',', '.'))
        if custom_distance <= 0:
            raise ValueError
        bot.send_message(chat_id, f"–í—ã –≤–≤–µ–ª–∏ —Å–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {custom_distance:.2f} –∫–º.", reply_markup=markup)

        trip_data[chat_id]["distance"] = custom_distance

        markup_date = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_manual = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é")
        item_skip = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã")
        markup_date.add(item_manual, item_skip)
        markup_date.add(item1)
        markup_date.add(item2)

        sent = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–∞—Ç—ã:", reply_markup=markup_date)
        bot.register_next_step_handler(sent, process_date_step, custom_distance)
    except ValueError:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è!", reply_markup=markup)
        bot.register_next_step_handler(sent, process_custom_distance_step)

@text_only_handler
def process_distance_choice_step(message, distance_km):
    chat_id = message.chat.id
    trip_data[chat_id]["distance"] = distance_km

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_auto = types.KeyboardButton("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ")
    item_input = types.KeyboardButton("–í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é")
    item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    markup.add(item_auto, item_input)
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)

    if message.text == "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ":
        bot.send_message(chat_id, f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏: {distance_km:.2f} –∫–º.")
        process_date_step(message, distance_km)
    elif message.text == "–í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é":
        custom_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        custom_markup.add(item1)
        custom_markup.add(item2)
        custom_markup.add(item3)

        sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º.):", reply_markup=custom_markup)
        bot.register_next_step_handler(sent, process_custom_distance_step)
    else:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!", reply_markup=markup)
        bot.register_next_step_handler(sent, process_distance_choice_step, distance_km)

@text_only_handler
def process_date_step(message, distance):
    chat_id = message.chat.id

    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã":
        selected_date = "–ë–µ–∑ –¥–∞—Ç—ã"
        process_selected_date(message, selected_date)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=markup)
        bot.register_next_step_handler(sent, process_manual_date_step, distance)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_manual = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é")
        item_skip = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã")
        item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item_manual, item_skip)
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)

        sent = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–∞—Ç—ã:", reply_markup=markup)
        bot.register_next_step_handler(sent, process_date_step, distance)

@text_only_handler
def process_date_input_step(message, distance):
    chat_id = message.chat.id
    date_input = message.text.strip()

    date_pattern = r"^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.\d{4}$"
    if re.match(date_pattern, date_input):
        selected_date = date_input
        process_selected_date(message, selected_date)
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, process_date_input_step, distance)

@text_only_handler
def handle_date_selection(message, distance):
    chat_id = message.chat.id

    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã":
        selected_date = "–ë–µ–∑ –¥–∞—Ç—ã"
        process_selected_date(message, selected_date)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if message.text == "–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)

        sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=markup)
        bot.register_next_step_handler(sent, process_manual_date_step, distance)
    else:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!")
        bot.register_next_step_handler(sent, handle_date_selection, distance)

@text_only_handler
def process_selected_date(message, selected_date):
    chat_id = message.chat.id
    distance_km = trip_data[chat_id].get("distance")

    if distance_km is None:
        bot.send_message(chat_id, "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∑–∞–¥–∞–Ω–æ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return

    show_fuel_types(chat_id, selected_date, distance_km)

@text_only_handler
def process_manual_date_step(message, distance):
    chat_id = message.chat.id
    date_pattern = r"\d{2}\.\d{2}\.\d{4}"

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)

    if re.match(date_pattern, message.text):
        day, month, year = map(int, message.text.split('.'))
        if 2000 <= year <= 3000:
            try:
                datetime(year, month, day)
                bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {message.text}", reply_markup=markup)
                show_fuel_types(chat_id, message.text, distance)
            except ValueError:
                sent = bot.send_message(chat_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É", reply_markup=markup)
                bot.register_next_step_handler(sent, process_manual_date_step, distance)
        else:
            sent = bot.send_message(chat_id, "–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 2000 –≥. –¥–æ 3000 –≥.", reply_markup=markup)
            bot.register_next_step_handler(sent, process_manual_date_step, distance)
    else:
        sent = bot.send_message(chat_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=markup)
        bot.register_next_step_handler(sent, process_manual_date_step, distance)

def show_fuel_types(chat_id, date, distance):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

    row1 = [KeyboardButton(fuel_type) for fuel_type in fuel_types[:3]]
    row2 = [KeyboardButton(fuel_type) for fuel_type in fuel_types[3:]]
    row3 = [KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")]
    row4 = [KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")]
    row5 = [KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]

    markup.add(*row1, *row2, *row3)
    markup.add(*row4)
    markup.add(*row5)

    sent = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞:", reply_markup=markup)
    bot.register_next_step_handler(sent, process_fuel_type, date, distance)

def clean_price(price):
    cleaned_price = re.sub(r'[^\d.]', '', price)
    if cleaned_price.count('.') > 1:
        cleaned_price = cleaned_price[:cleaned_price.find('.') + 1] + cleaned_price[cleaned_price.find('.') + 1:].replace('.', '')
    return cleaned_price

fuel_type_mapping = {
    "–∞–∏-92": "–ê–∏-92",
    "–∞–∏-95": "–ê–∏-95",
    "–∞–∏-98": "–ê–∏-98",
    "–∞–∏-100": "–ê–∏-100",
    "–¥—Ç": "–î–¢",
    "–≥–∞–∑": "–ì–∞–∑ –°–ü–ë–¢",
}

def get_average_fuel_price_from_files(fuel_type, directory=None):
    if directory is None:
        directory = os.path.join(BASE_DIR, 'data', 'user', 'azs')
    fuel_prices = []

    fuel_type = fuel_type.lower()

    if not os.path.exists(directory):
        os.makedirs(directory)

    file_path = os.path.join(directory, "cheboksary_table_azs_data.json")

    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as file:
            data = json.load(file)
            for entry in data:
                if len(entry) >= 3:  
                    company, fuel, price = entry
                    if fuel.lower() == fuel_type:
                        try:
                            price = float(price)
                            fuel_prices.append(price)
                        except ValueError:
                            continue

    if not fuel_prices:
        fuel_data = get_fuel_prices_from_website()
        if fuel_data:
            with open(file_path, "w", encoding="utf-8") as file:
                json.dump(fuel_data, file, ensure_ascii=False, indent=4)

            for entry in fuel_data:
                company, fuel, price = entry
                if fuel.lower() == fuel_type:
                    try:
                        price = float(price)
                        fuel_prices.append(price)
                    except ValueError:
                        continue

    if fuel_prices:
        average_price = sum(fuel_prices) / len(fuel_prices)
        return average_price
    else:
        return None

def get_fuel_prices_from_website(city_code='cheboksary'):
    url = f'https://fuelprice.ru/t-{city_code}'

    try:
        response = requests.get(url)
        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'html.parser')

        table = soup.find('table')
        if not table:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏")

        fuel_data = []
        rows = table.find_all('tr')

        for row in rows[1:]:
            columns = row.find_all('td')
            if len(columns) < 5:
                continue

            company = columns[1].text.strip()
            fuel = columns[2].text.strip()
            today_price = clean_price(columns[3].text.strip())

            if today_price:
                fuel_data.append([company, fuel, f"{float(today_price):.2f}"])

        return fuel_data

    except (requests.RequestException, ValueError) as e:
        return None

@text_only_handler
def process_fuel_type(message, date, distance):
    if message is None:
        return

    chat_id = message.chat.id

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    fuel_type = message.text.strip().lower() if message.text else ""

    fuel_type_mapping = {
        "–∞–∏-92": "–∞–∏-92",
        "–∞–∏-95": "–∞–∏-95",
        "–∞–∏-98": "–∞–∏-98",
        "–∞–∏-100": "–∞–∏-100",
        "–¥—Ç": "–¥—Ç",
        "–≥–∞–∑": "–≥–∞–∑ —Å–ø–±—Ç",
    }

    if fuel_type not in fuel_type_mapping:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!")
        bot.register_next_step_handler(sent, process_fuel_type, date, distance)
        return

    actual_fuel_type = fuel_type_mapping[fuel_type]

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞")
    item2 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é")
    item3 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item4 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item5 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1, item2)
    markup.add(item3)
    markup.add(item4)
    markup.add(item5)

    sent = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã —Ç–æ–ø–ª–∏–≤–∞:", reply_markup=markup)
    bot.register_next_step_handler(sent, handle_price_input_choice, date, distance, actual_fuel_type)

@text_only_handler
def handle_price_input_choice(message, date, distance, fuel_type):
    chat_id = message.chat.id

    if message.text == "–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)

        sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –ª–∏—Ç—Ä —Ç–æ–ø–ª–∏–≤–∞:", reply_markup=markup)
        bot.register_next_step_handler(sent, process_price_per_liter_step, date, distance, fuel_type)
    elif message.text == "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞":
        price_from_files = get_average_fuel_price_from_files(
            fuel_type, directory=os.path.join(BASE_DIR, 'data', 'user', 'azs')
        )
        if price_from_files:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
            item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
            item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)
            bot.send_message(chat_id, f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –Ω–∞ {fuel_type.upper()} –ø–æ –†–§: {price_from_files:.2f} —Ä—É–±./–ª.", reply_markup=markup)
            sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ 100 –∫–º:", reply_markup=markup)
            bot.register_next_step_handler(sent, process_fuel_consumption_step, date, distance, fuel_type, price_from_files)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
            item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
            item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)
            sent = bot.send_message(chat_id, f"–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞ '{fuel_type}' –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É", reply_markup=markup)
            bot.register_next_step_handler(sent, process_price_per_liter_step, date, distance, fuel_type)
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
    elif message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
    else:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!")
        bot.register_next_step_handler(sent, handle_price_input_choice, date, distance, fuel_type)

@text_only_handler
def process_price_per_liter_step(message, date, distance, fuel_type):
    chat_id = message.chat.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    input_text = message.text.replace(',', '.')
    try:
        price_per_liter = float(input_text)
        if price_per_liter <= 0:
            raise ValueError
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ 100 –∫–º:", reply_markup=markup)
        bot.clear_step_handler_by_chat_id(chat_id)
        bot.register_next_step_handler(sent, process_fuel_consumption_step, date, distance, fuel_type, price_per_liter)
    except ValueError:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã —Ç–æ–ø–ª–∏–≤–∞ –∑–∞ –ª–∏—Ç—Ä!")
        bot.register_next_step_handler(sent, process_price_per_liter_step, date, distance, fuel_type)

@text_only_handler
def process_fuel_consumption_step(message, date, distance, fuel_type, price_per_liter):
    chat_id = message.chat.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    input_text = message.text.replace(',', '.')
    try:
        fuel_consumption = float(input_text)
        if fuel_consumption <= 0:
            raise ValueError
        sent = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –≤ –º–∞—à–∏–Ω–µ:")
        bot.clear_step_handler_by_chat_id(chat_id)
        bot.register_next_step_handler(sent, process_passengers_step, date, distance, fuel_type, price_per_liter, fuel_consumption)
    except ValueError:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ 100 –∫–º!")
        bot.register_next_step_handler(sent, process_fuel_consumption_step, date, distance, fuel_type, price_per_liter)

@text_only_handler
def process_passengers_step(message, date, distance, fuel_type, price_per_liter, fuel_consumption):
    chat_id = message.chat.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    try:
        passengers = int(message.text)
        if passengers <= 0:
            raise ValueError
        fuel_cost = (distance / 100) * fuel_consumption * price_per_liter
        fuel_cost_per_person = fuel_cost / passengers
        locations = trip_data[chat_id]['locations']
        coords = [f"{loc['latitude']},{loc['longitude']}" for loc in locations]
        yandex_maps_url = f"https://yandex.ru/maps/?rtext={'~'.join(coords)}&rtt=auto"
        try:
            response = requests.get(f'https://clck.ru/--?url={yandex_maps_url}')
            short_url = response.text
        except Exception as e:
            bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É: {str(e)}")
            short_url = yandex_maps_url
        calculation_timestamp = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        if chat_id not in temporary_trip_data:
            temporary_trip_data[chat_id] = []
        temporary_trip_data[chat_id].append({
            "locations": locations,
            "date": date,
            "distance": distance,
            "fuel_type": fuel_type,
            "price_per_liter": price_per_liter,
            "fuel_consumption": fuel_consumption,
            "passengers": passengers,
            "fuel_spent": (distance / 100) * fuel_consumption,
            "fuel_cost": fuel_cost,
            "fuel_cost_per_person": fuel_cost_per_person,
            "route_link": short_url,
            "calculation_timestamp": calculation_timestamp  
        })
        display_summary(chat_id, fuel_cost, fuel_cost_per_person, fuel_type, date, distance, price_per_liter, fuel_consumption, passengers)
    except ValueError:
        sent = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤!")
        bot.register_next_step_handler(sent, process_passengers_step, date, distance, fuel_type, price_per_liter, fuel_consumption)

def display_summary(chat_id, fuel_cost, fuel_cost_per_person, fuel_type, date, distance, price_per_liter, fuel_consumption, passengers):
    fuel_spent = (distance / 100) * fuel_consumption
    locations = trip_data[chat_id]['locations']
    coords = [f"{loc['latitude']},{loc['longitude']}" for loc in locations]
    yandex_maps_url = f"https://yandex.ru/maps/?rtext={'~'.join(coords)}&rtt=auto"
    try:
        response = requests.get(f'https://clck.ru/--?url={yandex_maps_url}')
        short_url = response.text
    except Exception as e:
        bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É: {str(e)}")
        short_url = yandex_maps_url
    summary_message = "üöó *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–ï–ó–î–ö–ï*\n"
    summary_message += "-------------------------------------------------------------\n"
    for i, loc in enumerate(locations, 1):
        summary_message += f"üìç *–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ {i}:*\n{loc['address']}\n"
    summary_message += f"üóìÔ∏è *–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏:* {date}\n"
    summary_message += f"üìè *–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:* {distance:.2f} –∫–º.\n"
    summary_message += f"‚õΩ *–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞:* {fuel_type}\n"
    summary_message += f"üíµ *–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ –∑–∞ –ª–∏—Ç—Ä:* {price_per_liter:.2f} —Ä—É–±.\n"
    summary_message += f"‚öôÔ∏è *–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ 100 –∫–º:* {fuel_consumption} –ª.\n"
    summary_message += f"üë• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:* {passengers} —á–µ–ª.\n"
    summary_message += "-------------------------------------------------------------\n"
    summary_message += f"üõ¢Ô∏è *–ü–û–¢–†–ê–ß–ï–ù–û –õ–ò–¢–†–û–í –¢–û–ü–õ–ò–í–ê:* {fuel_spent:.2f} –ª.\n"
    summary_message += f"üí∞ *–°–¢–û–ò–ú–û–°–¢–¨ –¢–û–ü–õ–ò–í–ê –î–õ–Ø –ü–û–ï–ó–î–ö–ò:* {fuel_cost:.2f} —Ä—É–±.\n"
    summary_message += f"üë§ *–°–¢–û–ò–ú–û–°–¢–¨ –¢–û–ü–õ–ò–í–ê –ù–ê –ß–ï–õ–û–í–ï–ö–ê:* {fuel_cost_per_person:.2f} —Ä—É–±.\n"
    summary_message += f"[–°–°–´–õ–ö–ê –ù–ê –ú–ê–†–®–†–£–¢]({short_url})\n"
    summary_message = summary_message.replace('\n', '\n\n')
    bot.clear_step_handler_by_chat_id(chat_id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    item2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)
    bot.send_message(chat_id, summary_message, reply_markup=markup, parse_mode="Markdown")
    if chat_id in temporary_trip_data and temporary_trip_data[chat_id]:
        if chat_id not in user_trip_data:
            user_trip_data[chat_id] = []
        user_trip_data[chat_id].extend(temporary_trip_data[chat_id])
        last_trip = user_trip_data[chat_id][-1]
        save_trip_data(chat_id)
        save_trip_to_excel(chat_id, last_trip)
        temporary_trip_data[chat_id] = []
    reset_and_start_over(chat_id)

def update_excel_file(user_id):
    folder_path = os.path.join(BASE_DIR, "data", "user", "calculators", "trip", "excel")
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    file_path = os.path.join(folder_path, f"{user_id}_trips.xlsx")

    trips = user_trip_data.get(user_id, [])

    if not trips:
        columns = ["–î–∞—Ç–∞", "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞"]
        columns.extend([
            "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)", "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞", "–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±/–ª)",
            "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª/100 –∫–º)", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
            "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –ª–∏—Ç—Ä–æ–≤", "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±)",
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ (—Ä—É–±)", "–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç"
        ])
        df = pd.DataFrame(columns=columns)
        df.to_excel(file_path, index=False)
        return

    max_locations = max(len(trip["locations"]) for trip in trips)

    columns = ["–î–∞—Ç–∞", "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞"]
    location_columns = [f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ {i+1}" for i in range(max_locations)]
    columns.extend(location_columns)
    columns.extend([
        "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)", "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞", "–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±/–ª)",
        "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª/100 –∫–º)", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
        "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –ª–∏—Ç—Ä–æ–≤", "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±)",
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ (—Ä—É–±)", "–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç"
    ])

    trip_records = []
    for trip in trips:
        trip_data = {
            "–î–∞—Ç–∞": trip['date'],
            "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": trip.get('calculation_timestamp', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)": round(trip.get('distance', None), 2),
            "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞": trip.get('fuel_type', None),
            "–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±/–ª)": round(trip.get('price_per_liter', None), 2),
            "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª/100 –∫–º)": round(trip.get('fuel_consumption', None), 2),
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤": trip.get('passengers', None),
            "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –ª–∏—Ç—Ä–æ–≤": round(trip.get('fuel_spent', None), 2),
            "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±)": round(trip.get('fuel_cost', None), 2),
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ (—Ä—É–±)": round(trip.get('fuel_cost_per_person', None), 2),
            "–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç": trip.get('route_link', "–ù–µ—Ç —Å—Å—ã–ª–∫–∏")
        }
        for i in range(max_locations):
            key = f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ {i+1}"
            trip_data[key] = trip['locations'][i]['address'] if i < len(trip['locations']) else None
        trip_records.append(trip_data)

    df = pd.DataFrame(trip_records, columns=columns)
    df.to_excel(file_path, index=False)

    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows(min_row=2):
        for cell in row:
            cell.alignment = Alignment(horizontal='center', vertical='center')
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_row=2, min_col=len(columns)-3, max_col=len(columns)):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

def save_trip_to_excel(user_id, trip):
    directory = os.path.join(BASE_DIR, "data", "user", "calculators", "trip", "excel")
    if not os.path.exists(directory):
        os.makedirs(directory)
    file_path = os.path.join(directory, f"{user_id}_trips.xlsx")
    
    trips = user_trip_data.get(user_id, [])
    max_locations = max(len(t["locations"]) for t in trips) if trips else len(trip["locations"])
    
    columns = ["–î–∞—Ç–∞", "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞"]
    location_columns = [f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ {i+1}" for i in range(max_locations)]
    columns.extend(location_columns)
    columns.extend([
        "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)", "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞", "–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±/–ª)",
        "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª/100 –∫–º)", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
        "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –ª–∏—Ç—Ä–æ–≤", "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±)",
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ (—Ä—É–±)", "–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç"
    ])
    
    new_trip_data = {
        "–î–∞—Ç–∞": trip['date'],
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": trip.get('calculation_timestamp', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
        "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)": round(trip.get('distance', None), 2),
        "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞": trip.get('fuel_type', None),
        "–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±/–ª)": round(trip.get('price_per_liter', None), 2),
        "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª/100 –∫–º)": round(trip.get('fuel_consumption', None), 2),
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤": trip.get('passengers', None),
        "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –ª–∏—Ç—Ä–æ–≤": round(trip.get('fuel_spent', None), 2),
        "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±)": round(trip.get('fuel_cost', None), 2),
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ (—Ä—É–±)": round(trip.get('fuel_cost_per_person', None), 2),
        "–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç": trip.get('route_link', None)
    }
    
    for i in range(max_locations):
        key = f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ {i+1}"
        new_trip_data[key] = trip['locations'][i]['address'] if i < len(trip['locations']) else None

    new_trip_df = pd.DataFrame([new_trip_data], columns=columns)
    
    if os.path.exists(file_path):
        existing_data = pd.read_excel(file_path).dropna(axis=1, how='all')
        existing_data = existing_data.reindex(columns=columns, fill_value=None)
        updated_data = pd.concat([existing_data, new_trip_df], ignore_index=True)
    else:
        updated_data = new_trip_df
    
    updated_data.to_excel(file_path, index=False)
    
    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows():
        for cell in row:
            cell.alignment = Alignment(horizontal="center", vertical="center")
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_col=worksheet.max_column-3, max_col=worksheet.max_column):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

# --------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–µ–∑–¥–∫–∏) ---------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–µ–∑–¥–∫–∏")
@check_function_state_decorator('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–µ–∑–¥–∫–∏')
@track_usage('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–µ–∑–¥–∫–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_trips(message):
    user_id = message.chat.id
    trips = user_trip_data.get(user_id, [])

    if trips:
        message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–µ–∑–¥–æ–∫:*\n\n"
        for i, trip in enumerate(trips, 1):
            calc_time = trip.get('calculation_timestamp', "–¥–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
            message_text += f"üïí ‚Ññ{i}. {calc_time}\n"

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ü–æ–µ–∑–¥–∫–∏ –≤ EXCEL")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        msg = bot.send_message(user_id, message_text, parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_view_trip_selection)

        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
    else:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫!")
        handle_fuel_expense(message, show_description=False)

@text_only_handler
def process_view_trip_selection(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return		
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–ü–æ–µ–∑–¥–∫–∏ –≤ EXCEL":
        send_excel_file(message)
        return

    chat_id = message.chat.id
    user_id = message.chat.id
    trips = user_trip_data.get(user_id, [])

    if not trips:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫!")
        handle_fuel_expense(message, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(trips):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–ü–æ–µ–∑–¥–∫–∏ –≤ EXCEL")
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–µ–∑–¥–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_view_trip_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        for index in valid_indices:
            trip = trips[index]
            date = trip['date'] if trip['date'] != "–ë–µ–∑ –¥–∞—Ç—ã" else "–ë–µ–∑ –¥–∞—Ç—ã"
            summary_message = f"üöó *–ò–¢–û–ì–û–í–´–ï –î–ê–ù–ù–´–ï –ü–û–ï–ó–î–ö–ò* *‚Ññ{index + 1}* \n\n"
            summary_message += "-------------------------------------------------------------\n\n"
            for i, loc in enumerate(trip['locations'], 1):
                summary_message += f"üìç *–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ {i}:*\n\n{loc['address']}\n\n"
            summary_message += f"üóìÔ∏è *–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏:* {date}\n\n"
            summary_message += f"üìè *–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:* {trip['distance']:.2f} –∫–º.\n\n"
            summary_message += f"‚õΩ *–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞:* {trip['fuel_type']}\n\n"
            summary_message += f"üíµ *–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ –∑–∞ –ª–∏—Ç—Ä:* {trip['price_per_liter']:.2f} —Ä—É–±.\n\n"
            summary_message += f"‚öôÔ∏è *–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ 100 –∫–º:* {trip['fuel_consumption']} –ª.\n\n"
            summary_message += f"üë• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:* {trip['passengers']}\n\n"
            summary_message += "-------------------------------------------------------------\n\n"
            summary_message += f"üõ¢Ô∏è *–ü–û–¢–†–ê–ß–ï–ù–û –õ–ò–¢–†–û–í –¢–û–ü–õ–ò–í–ê:* {trip['fuel_spent']:.2f} –ª.\n\n"
            summary_message += f"üí∞ *–°–¢–û–ò–ú–û–°–¢–¨ –¢–û–ü–õ–ò–í–ê –î–õ–Ø –ü–û–ï–ó–î–ö–ò:* {trip['fuel_cost']:.2f} —Ä—É–±.\n\n"
            summary_message += f"üë§ *–°–¢–û–ò–ú–û–°–¢–¨ –¢–û–ü–õ–ò–í–ê –ù–ê –ß–ï–õ–û–í–ï–ö–ê:* {trip['fuel_cost_per_person']:.2f} —Ä—É–±.\n\n"
            if 'route_link' in trip:
                summary_message += f"[–°–°–´–õ–ö–ê –ù–ê –ú–ê–†–®–†–£–¢]({trip['route_link']})\n\n"
            else:
                summary_message += "–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!\n\n"
            bot.send_message(chat_id, summary_message, parse_mode="Markdown")

        handle_fuel_expense(message, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ü–æ–µ–∑–¥–∫–∏ –≤ EXCEL")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–æ–∫", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_trip_selection)

# --------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê (–ø–æ–µ–∑–¥–∫–∏ –≤ excel) ---------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü–æ–µ–∑–¥–∫–∏ –≤ EXCEL")
@check_function_state_decorator('–ü–æ–µ–∑–¥–∫–∏ –≤ EXCEL')
@track_usage('–ü–æ–µ–∑–¥–∫–∏ –≤ EXCEL')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def send_excel_file(message):
    user_id = message.chat.id
    excel_file_path = os.path.join(BASE_DIR, 'data', 'user', 'calculators', 'trip', 'excel', f"{user_id}_trips.xlsx")

    if os.path.exists(excel_file_path):
        with open(excel_file_path, 'rb') as excel_file:
            bot.send_document(user_id, excel_file)
    else:
        bot.send_message(user_id, "‚ùå –§–∞–π–ª Excel –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏")
    handle_fuel_expense(message, show_description=False)

# --------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê (—É–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫–∏) ---------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫–∏")
@check_function_state_decorator('–£–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫–∏')
@track_usage('–£–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def ask_for_trip_to_delete(message):
    user_id = message.chat.id
    trips = user_trip_data.get(user_id, [])

    if not trips:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫!")
        handle_fuel_expense(message, show_description=False)
        return

    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–µ–∑–¥–æ–∫:*\n\n"
    for i, trip in enumerate(trips, 1):
        calc_time = trip.get('calculation_timestamp', "–¥–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
        message_text += f"üïí ‚Ññ{i}. {calc_time}\n"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    msg = bot.send_message(user_id, message_text, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_delete_trip_selection)
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–æ–∫:", reply_markup=markup)

@text_only_handler
def process_delete_trip_selection(message):
    user_id = message.chat.id
    trips = user_trip_data.get(user_id, [])

    if not trips:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫!")
        handle_fuel_expense(message, show_description=False)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞":
        handle_fuel_expense(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(trips):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–µ–∑–¥–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_delete_trip_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(user_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        valid_indices.sort(reverse=True)
        for index in valid_indices:
            del trips[index]

        user_trip_data[user_id] = trips
        save_trip_data(user_id)
        update_excel_file(user_id) 
        bot.send_message(user_id, "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")

        handle_fuel_expense(message, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–æ–∫", reply_markup=markup)
        bot.register_next_step_handler(msg, process_delete_trip_selection)