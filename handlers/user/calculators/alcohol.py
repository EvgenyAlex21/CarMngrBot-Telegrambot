from core.imports import wraps, telebot, types, os, json, re, datetime, timedelta, pd, openpyxl, Workbook, load_workbook, Alignment, Border, Side, Font, PatternFill
from core.bot_instance import bot, BASE_DIR
from .calculators_main import return_to_calculators
from handlers.user.user_main_menu import return_to_menu
from ..utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha, check_function_state_decorator, track_usage, check_subscription
)

# ----------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ê–õ–ö–û–ì–û–õ–¨ --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ê–ª–∫–æ–≥–æ–ª—å")
@check_function_state_decorator('–ê–ª–∫–æ–≥–æ–ª—å')
@track_usage('–ê–ª–∫–æ–≥–æ–ª—å')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_alc_calc(message, show_description=True):
    global stored_message
    stored_message = message

    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞—Å—á–µ—Ç—É –∞–ª–∫–æ–≥–æ–ª—è –≤ –∫—Ä–æ–≤–∏*\n\n"
        "üìå *–†–∞—Å—á–µ—Ç –∞–ª–∫–æ–≥–æ–ª—è:*\n"
        "–†–∞—Å—á–µ—Ç –≤–µ–¥–µ—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º - *–ø–æ–ª, –≤–µ—Å, —á—Ç–æ –ø–∏–ª–∏, —Å–∫–æ–ª—å–∫–æ, –∫–∞–∫ –±—ã—Å—Ç—Ä–æ –≤—ã–ø–∏–ª–∏, –∫–∞–∫ –¥–∞–≤–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏, –µ–¥–∞*\n\n"
        "_P.S. –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ —Å–º–æ–∂–µ—Ç –¥–∞—Ç—å 100% —Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ï—Å–ª–∏ –≤—ã –≤—ã–ø–∏–ª–∏, —Ç–æ –ù–ò –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ–ª—å–∑—è —Å–∞–¥–∏—Ç—å—Å—è –∑–∞ —Ä—É–ª—å –ø–æ—Å–ª–µ –∞–ª–∫–æ–≥–æ–ª—è –∫–∞–∫ –º–∏–Ω–∏–º—É–º –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫!!!_"
        "\n\n"
        "üìå *–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–ª–∫–æ–≥–æ–ª—è:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—á–µ—Ç—ã –∏ –≤—Å–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –≤—ã –ø–∏–ª–∏ –∏ —Å–∫–æ–ª—å–∫–æ\n\n"
        "üìå *–£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—á–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–º –Ω–µ –Ω—É–∂–Ω—ã"
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–ª–∫–æ–≥–æ–ª—å', '–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–ª–∫–æ–≥–æ–ª—è', '–£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    if show_description:
        bot.send_message(message.chat.id, description, parse_mode='Markdown')

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –∞–ª–∫–æ–≥–æ–ª—è:", reply_markup=markup)

ALKO_JSON_PATH = os.path.join(BASE_DIR, 'files', 'files_for_calc', 'files_for_alko', 'alko.json')
USER_HISTORY_PATH_ALKO = os.path.join(BASE_DIR, 'data', 'user', 'calculators', 'alcohol', 'alko_users.json')
ALKO_EXCEL_DIR = os.path.join(BASE_DIR, 'data', 'user', 'calculators', 'alcohol', 'excel')
os.makedirs(os.path.dirname(ALKO_JSON_PATH), exist_ok=True)
os.makedirs(os.path.dirname(USER_HISTORY_PATH_ALKO), exist_ok=True)
os.makedirs(ALKO_EXCEL_DIR, exist_ok=True)

if not os.path.exists(ALKO_JSON_PATH):
    with open(ALKO_JSON_PATH, 'w', encoding='utf-8') as f:
        json.dump({}, f, ensure_ascii=False, indent=2)
if not os.path.exists(USER_HISTORY_PATH_ALKO):
    with open(USER_HISTORY_PATH_ALKO, 'w', encoding='utf-8') as f:
        json.dump({}, f, ensure_ascii=False, indent=2)

alko_data = {}
user_history_alko = {}
user_data = {}

def ensure_path_and_file(file_path):
    try:
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        if not os.path.exists(file_path):
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump({}, f, ensure_ascii=False, indent=2)
    except Exception as e:
        pass

def load_alko_data():
    global alko_data
    try:
        with open(ALKO_JSON_PATH, 'r', encoding='utf-8') as file:
            alko_data = json.load(file)
        if 'drinks' in alko_data:
            alko_data['drinks'] = sorted(alko_data['drinks'], key=lambda x: x['strength'])
        else:
            pass
        if 'food' not in alko_data:
            pass
        else:
            pass
    except Exception as e:
        alko_data = {}

def load_user_history_alko():
    global user_history_alko
    try:
        if os.path.exists(USER_HISTORY_PATH_ALKO):
            with open(USER_HISTORY_PATH_ALKO, 'r', encoding='utf-8') as db_file:
                user_history_alko = json.load(db_file)
        else:
            user_history_alko = {}
    except Exception as e:
        user_history_alko = {}

def save_user_history_alko():
    try:
        with open(USER_HISTORY_PATH_ALKO, 'w', encoding='utf-8') as db_file:
            json.dump(user_history_alko, db_file, ensure_ascii=False, indent=2)
    except Exception as e:
        pass

ensure_path_and_file(ALKO_JSON_PATH)
ensure_path_and_file(USER_HISTORY_PATH_ALKO)
load_alko_data()
load_user_history_alko()

# ----------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ê–õ–ö–û–ì–û–õ–¨ (—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–ª–∫–æ–≥–æ–ª—å) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–ª–∫–æ–≥–æ–ª—å")
@check_function_state_decorator('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–ª–∫–æ–≥–æ–ª—å')
@track_usage('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–ª–∫–æ–≥–æ–ª—å')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def start_alcohol_calculation(message):
    if not alko_data.get('drinks'):
        bot.send_message(message.chat.id, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    user_id = message.from_user.id
    user_data[user_id] = {'user_id': user_id, 'username': message.from_user.username}

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_gender)

@text_only_handler
def process_gender(message):
    user_id = message.from_user.id
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å":
        view_alc_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        gender = message.text.strip().lower()

        if gender not in ['–º—É–∂—Å–∫–æ–π', '–∂–µ–Ω—Å–∫–∏–π']:
            raise ValueError

        user_data[user_id]['gender'] = gender

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        msg = bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_weight)

    except:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add("–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª", reply_markup=markup)
        bot.register_next_step_handler(msg, process_gender)

@text_only_handler
def process_weight(message):
    user_id = message.from_user.id
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å":
        view_alc_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        weight_str = message.text.strip().replace(',', '.')
        weight = float(weight_str)

        if weight <= 0 or weight > 300:
            raise ValueError

        user_data[user_id]['weight'] = weight

        show_drinks_menu(message)  

    except:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö", reply_markup=markup)
        bot.register_next_step_handler(msg, process_weight)

@text_only_handler
def show_drinks_menu(message):
    chat_id = message.chat.id  
    if not alko_data.get('drinks'):
        bot.send_message(chat_id, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)

    if 'selected_drinks' in user_data[chat_id] and user_data[chat_id]['selected_drinks']:
        markup.row("–£–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π", "–ì–æ—Ç–æ–≤–æ", "–£–±—Ä–∞—Ç—å –≤—Å–µ")
    else:
        markup.row("–ì–æ—Ç–æ–≤–æ")

    markup.row("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.row("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    drinks_buttons = [drink['name'] for drink in alko_data['drinks']]
    for i in range(0, len(drinks_buttons), 3):
        markup.row(*drinks_buttons[i:i+3])

    if 'selected_drinks' in user_data[chat_id] and user_data[chat_id]['selected_drinks']:
        selected = ", ".join([f"*{drink['name'].lower()}*" for drink in user_data[chat_id]['selected_drinks']])
        msg_text = f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected}\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –Ω–∞–ø–∏—Ç–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ *–ì–û–¢–û–í–û* –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"
    else:
        msg_text = "–ß—Ç–æ –≤—ã –ø–∏–ª–∏?\n–í—ã–±–∏—Ä–∞–π—Ç–µ –Ω–∞–ø–∏—Ç–∫–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫:"

    msg = bot.send_message(chat_id, msg_text, reply_markup=markup, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_drinks_selection)

@text_only_handler
def process_drinks_selection(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å":
        view_alc_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    if message.text == "–ì–æ—Ç–æ–≤–æ":
        if 'selected_drinks' not in user_data[user_id] or not user_data[user_id]['selected_drinks']:
            bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω")
            bot.register_next_step_handler(message, process_drinks_selection)
            return

        process_next_drink_volume(message) 
        return

    elif message.text == "–£–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π":
        if 'selected_drinks' in user_data[user_id] and user_data[user_id]['selected_drinks']:
            removed_drink = user_data[user_id]['selected_drinks'].pop()
            bot.send_message(chat_id, f"‚úÖ –£–¥–∞–ª–µ–Ω –Ω–∞–ø–∏—Ç–æ–∫: *{removed_drink['name'].lower()}*!", parse_mode='Markdown')
        show_drinks_menu(message) 
        return

    elif message.text == "–£–±—Ä–∞—Ç—å –≤—Å–µ":
        if 'selected_drinks' in user_data[user_id] and user_data[user_id]['selected_drinks']:
            user_data[user_id]['selected_drinks'] = []
            bot.send_message(chat_id, "‚úÖ –í—Å–µ –Ω–∞–ø–∏—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã!")
        show_drinks_menu(message)  
        return

    try:
        drink_name = message.text.strip()
        selected_drink = next((drink for drink in alko_data['drinks'] if drink['name'] == drink_name), None)

        if not selected_drink:
            raise ValueError

        if 'selected_drinks' not in user_data[user_id]:
            user_data[user_id]['selected_drinks'] = []

        if selected_drink not in user_data[user_id]['selected_drinks']:
            user_data[user_id]['selected_drinks'].append(selected_drink)
            bot.send_message(chat_id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–∞–ø–∏—Ç–æ–∫: *{selected_drink['name'].lower()}*!", parse_mode='Markdown')

        show_drinks_menu(message) 

    except ValueError:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–∏—Ä–∞–π—Ç–µ –Ω–∞–ø–∏—Ç–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞")
        bot.register_next_step_handler(message, process_drinks_selection)

@text_only_handler
def process_next_drink_volume(message):
    chat_id = message.chat.id
    user_id = user_data[chat_id]['user_id']
    if 'current_drink_index' not in user_data[user_id]:
        user_data[user_id]['current_drink_index'] = 0
        user_data[user_id]['drinks_volumes'] = {}

    current_index = user_data[user_id]['current_drink_index']
    if current_index >= len(user_data[user_id]['selected_drinks']):
        show_drinking_speed_menu(message) 
        return

    current_drink = user_data[user_id]['selected_drinks'][current_index]

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)

    liters_buttons = [f"{vol} –ª" for vol in alko_data['volume_liters'] if vol <= 2.0]
    for i in range(0, len(liters_buttons), 3):
        markup.row(*liters_buttons[i:i+3])

    for cont in alko_data['volume_containers']:
        markup.add(f"{cont['name']} ({cont['volume']} –º–ª)")

    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    msg = bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –¥–ª—è *{current_drink['name'].lower()}*:",
                         reply_markup=markup, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_volume_selection)

@text_only_handler
def process_volume_selection(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å":
        view_alc_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        volume_text = message.text.strip()
        current_index = user_data[user_id]['current_drink_index']
        current_drink = user_data[user_id]['selected_drinks'][current_index]

        if volume_text.endswith(' –ª'):
            volume_liters = float(volume_text.split(' ')[0])
        elif '(' in volume_text and '–º–ª' in volume_text:
            volume_ml = int(volume_text.split('(')[1].split(' ')[0])
            volume_liters = volume_ml / 1000
        else:
            raise ValueError

        user_data[user_id]['drinks_volumes'][current_drink['id']] = volume_liters

        user_data[user_id]['current_drink_index'] += 1
        process_next_drink_volume(message)  

    except ValueError:
        current_index = user_data[user_id]['current_drink_index']
        current_drink = user_data[user_id]['selected_drinks'][current_index]
        bot.send_message(chat_id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –¥–ª—è *{current_drink['name'].lower()}*", parse_mode='Markdown')
        bot.register_next_step_handler(message, process_volume_selection)

@text_only_handler
def show_drinking_speed_menu(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(alko_data['drinking_speed'][0]['name'])

    speed_buttons = [speed['name'] for speed in alko_data['drinking_speed'][1:]]
    for i in range(0, len(speed_buttons), 3):
        markup.row(*speed_buttons[i:i+3])

    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    msg = bot.send_message(chat_id, "–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –≤—ã–ø–∏–ª–∏?", reply_markup=markup)
    bot.register_next_step_handler(msg, process_drinking_speed)

@text_only_handler
def process_drinking_speed(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å":
        view_alc_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        speed_name = message.text.strip()
        speed = next((s for s in alko_data['drinking_speed'] if s['name'] == speed_name), None)

        if not speed:
            raise ValueError

        user_data[user_id]['drinking_speed'] = speed['id']

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(alko_data['time_since_last_drink'][0]['name'])
        time_buttons = [time['name'] for time in alko_data['time_since_last_drink'][1:]]
        markup.row(*time_buttons)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        msg = bot.send_message(chat_id, "–ö–∞–∫ –¥–∞–≤–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø–∏—Ç—å?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_time_since_last_drink)

    except ValueError:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–∏–ª–∏")
        bot.register_next_step_handler(message, process_drinking_speed)

@text_only_handler
def process_time_since_last_drink(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å":
        view_alc_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        time_name = message.text.strip()
        time = next((t for t in alko_data['time_since_last_drink'] if t['name'] == time_name), None)

        if not time:
            raise ValueError

        user_data[user_id]['time_since_last_drink'] = time['id']

        if time['id'] == 0:
            user_data[user_id]['time_since_value'] = 0

            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            food_buttons = [food['name'] for food in alko_data['food']]
            markup.row(*food_buttons)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

            msg = bot.send_message(chat_id, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ–ª–∏?", reply_markup=markup)
            bot.register_next_step_handler(msg, process_food)
        else:
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

            time_type = "–º–∏–Ω." if time['id'] == 2 else "—á."
            msg = bot.send_message(
                chat_id,
                f"–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ {time_type} :",
                reply_markup=markup
            )
            bot.register_next_step_handler(msg, process_time_since_value)

    except:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(alko_data['time_since_last_drink'][0]['name'])

        time_buttons = [time['name'] for time in alko_data['time_since_last_drink'][1:]]
        markup.row(*time_buttons)

        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_time_since_last_drink)

@text_only_handler
def process_time_since_value(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å":
        view_alc_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        time_value = float(message.text.strip().replace(',', '.'))
        user_data[user_id]['time_since_value'] = time_value

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        food_buttons = [food['name'] for food in alko_data['food']]
        markup.row(*food_buttons)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        msg = bot.send_message(chat_id, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ–ª–∏?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_food)

    except:
        time_id = user_data[user_id]['time_since_last_drink']
        time_type = next((time['name'] for time in alko_data['time_since_last_drink'] if time['id'] == time_id), "")

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        msg = bot.send_message(chat_id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ {time_type}", reply_markup=markup)
        bot.register_next_step_handler(msg, process_time_since_value)

@text_only_handler
def process_food(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å":
        view_alc_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        food_name = message.text.strip()
        food_name_normalized = food_name.lower()

        available_foods = [f['name'].lower() for f in alko_data.get('food', [])]

        food = next((f for f in alko_data['food'] if f['name'].lower() == food_name_normalized), None)

        if not food:
            raise ValueError(f"–ï–¥–∞ '{food_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {available_foods}")

        if user_id not in user_data:
            raise ValueError(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ user_data")

        user_data[user_id]['food'] = food['id']

        calculate_and_show_result(message)

    except Exception as e:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        food_buttons = [food['name'] for food in alko_data.get('food', [])]
        markup.row(*food_buttons)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(chat_id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∏–ª–∏ –æ—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_food)

@text_only_handler
def calculate_and_show_result(message):
    chat_id = message.chat.id
    user_id = user_data[chat_id]['user_id']
    data = user_data[user_id]

    r = 0.70 if data['gender'] == '–º—É–∂—Å–∫–æ–π' else 0.60
    total_alcohol_grams = 0
    for drink in data['selected_drinks']:
        drink_id = drink['id']
        volume_liters = data['drinks_volumes'][drink_id]
        strength = drink['strength'] / 100

        alcohol_grams = volume_liters * 1000 * strength * 0.79
        total_alcohol_grams += alcohol_grams

    c = total_alcohol_grams / (data['weight'] * r)

    drinking_speed = data['drinking_speed']
    if drinking_speed > 1:
        hours_drinking = drinking_speed - 1
        c = c * 0.8

    food_id = data['food']
    if food_id == 2:
        c = c * 0.9
    elif food_id == 3:
        c = c * 0.7

    time_id = data['time_since_last_drink']
    if time_id != 0:
        time_value = data['time_since_value']
        if time_id == 1:
            hours_passed = time_value
        else:
            hours_passed = time_value / 60

        elimination_rate = 0.15 if data['gender'] == '–º—É–∂—Å–∫–æ–π' else 0.10
        c = max(0, c - (hours_passed * elimination_rate))

    c = round(c, 2)

    if c > 0:
        elimination_rate = 0.15 if data['gender'] == '–º—É–∂—Å–∫–æ–π' else 0.10
        hours_to_sober = c / elimination_rate
        sober_time = datetime.now() + timedelta(hours=hours_to_sober)
        sober_time_str = sober_time.strftime("%d.%m.%Y –≤ %H:%M")

        recommendations = get_recommendations(c, data['gender'])

        result = (
            f"üìä *–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç*\n\n"
            f"üîπ –°–µ–π—á–∞—Å –≤ –≤–∞—à–µ–π –∫—Ä–æ–≤–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ: *{c}%*\n"
            f"üîπ –í—ã –±—É–¥–µ—Ç–µ —Ç—Ä–µ–∑–≤—ã –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ *{int(hours_to_sober)} —á. {int((hours_to_sober % 1) * 60)} –º–∏–Ω.*\n"
            f"üîπ –ê–ª–∫–æ–≥–æ–ª—å –≤—ã–≤–µ–¥–µ—Ç—Å—è –∏–∑ –∫—Ä–æ–≤–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ *{sober_time_str}*\n\n"
            f"üìå *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n{recommendations}"
        )
    else:
        result = "üìä *–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç*\n\n‚úÖ –í—ã —É–∂–µ —Ç—Ä–µ–∑–≤—ã –∏–ª–∏ –∞–ª–∫–æ–≥–æ–ª—å –µ—â—ë –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª –≤ –∫—Ä–æ–≤—å!"

    save_alcohol_calculation_to_history(message, c)
    user_data[user_id] = data
    bot.send_message(chat_id, result, parse_mode='Markdown')
    new_message_for_alko = message
    new_message_for_alko.text = "–ê–ª–∫–æ–≥–æ–ª—å"  
    view_alc_calc(new_message_for_alko, show_description=False)

def get_recommendations(promille, gender):
    if promille <= 0:
        return "‚úÖ –í—ã —Ç—Ä–µ–∑–≤—ã! –ú–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º!"

    recommendations = []

    if promille > 0.3:
        recommendations.append("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –Ω–æ—Ä–º–∞ –∞–ª–∫–æ–≥–æ–ª—è –≤ –∫—Ä–æ–≤–∏ (0.3%). –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ!")
        recommendations.append("üö´ –í —Ç–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å –æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è —Å–µ–±—è –∏ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö!")
    elif promille > 0.16:
        recommendations.append("‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã! –í—ã –±–ª–∏–∑–∫–∏ –∫ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—é –¥–æ–ø—É—Å—Ç–∏–º–æ–π –Ω–æ—Ä–º—ã –∞–ª–∫–æ–≥–æ–ª—è –≤ –∫—Ä–æ–≤–∏...")
        recommendations.append("üö¶ –õ—É—á—à–µ –≤–æ–∑–¥–µ—Ä–∂–∞—Ç—å—Å—è –æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º!")
    else:
        recommendations.append("‚úÖ –£—Ä–æ–≤–µ–Ω—å –∞–ª–∫–æ–≥–æ–ª—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–π –Ω–æ—Ä–º—ã, –Ω–æ –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!")
        recommendations.append("üîÑ –ê–ª–∫–æ–≥–æ–ª—å –µ—â–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤—Å–∞—Å—ã–≤–∞—Ç—å—Å—è –≤ –∫—Ä–æ–≤—å")

    if promille < 0.3:
        recommendations.append("\nüòä –õ–µ–≥–∫–∞—è —Å—Ç–µ–ø–µ–Ω—å –æ–ø—å—è–Ω–µ–Ω–∏—è:")
        recommendations.append("- –í—ã –º–æ–∂–µ—Ç–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ—Å—Ç—å –∏ —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")
        recommendations.append("- –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –≤–Ω–∏–º–∞–Ω–∏—è")
        recommendations.append("- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –¥–≤–∏–∂–µ–Ω–∏–π")
    elif promille < 0.6:
        recommendations.append("\nüç∑ –£–º–µ—Ä–µ–Ω–Ω–æ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ:")
        recommendations.append("- –ù–∞—Ä—É—à–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –∑–∞–º–µ—Ç–Ω—ã–º–∏")
        recommendations.append("- –°–Ω–∏–∂–∞–µ—Ç—Å—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏")
        recommendations.append("- –ú–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –∏–∑–ª–∏—à–Ω—è—è —Ä–∞–∑–≥–æ–≤–æ—Ä—á–∏–≤–æ—Å—Ç—å")
    elif promille < 1.0:
        recommendations.append("\nüö® –ó–∞–º–µ—Ç–Ω–æ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ:")
        recommendations.append("- –Ø–≤–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏–π")
        recommendations.append("- –ó–∞–º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª–∏")
        recommendations.append("- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å")
        recommendations.append("- –£—Ö—É–¥—à–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏")
    elif promille < 1.5:
        recommendations.append("\n‚ö†Ô∏è –°–∏–ª—å–Ω–æ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ:")
        recommendations.append("- –°–µ—Ä—å–µ–∑–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –º–æ—Ç–æ—Ä–∏–∫–∏ –∏ –º—ã—à–ª–µ–Ω–∏—è")
        recommendations.append("- –ù–µ—Å–≤—è–∑–Ω–∞—è —Ä–µ—á—å")
        recommendations.append("- –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ–º")
        recommendations.append("- –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø–æ—Ç–µ—Ä–∏ —Å–æ–∑–Ω–∞–Ω–∏—è")
    elif promille < 2.0:
        recommendations.append("\n‚ùå –û–ø–∞—Å–Ω–æ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ:")
        recommendations.append("- –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è")
        recommendations.append("- –í–æ–∑–º–æ–∂–Ω–∞ —Ç–æ—à–Ω–æ—Ç–∞ –∏ —Ä–≤–æ—Ç–∞")
        recommendations.append("- –°–∏–ª—å–Ω–æ–µ –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        recommendations.append("- –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ–º –±–µ–∑ –ø–æ–º–æ—â–∏")
    else:
        recommendations.append("\nüÜò –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ!")
        recommendations.append("- –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è")
        recommendations.append("- –û–±–µ—Å–ø–µ—á—å—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ")
        recommendations.append("- –ü—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–∑–æ–≤–∏—Ç–µ –≤—Ä–∞—á–∞")
        recommendations.append("- –†–∏—Å–∫ –∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–≥–æ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è")

    recommendations.append("\nüí° –°–æ–≤–µ—Ç—ã –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é:")
    recommendations.append("- –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã (1 —Å—Ç–∞–∫–∞–Ω –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)")
    recommendations.append("- –ü—Ä–∏–º–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É–≥–æ–ª—å (1 —Ç–∞–±–ª–µ—Ç–∫–∞ –Ω–∞ 10 –∫–≥ –≤–µ—Å–∞)")
    recommendations.append("- –í—ã–ø–µ–π—Ç–µ –∫—Ä–µ–ø–∫–∏–π —Å–ª–∞–¥–∫–∏–π —á–∞–π —Å –ª–∏–º–æ–Ω–æ–º")
    recommendations.append("- –ü—Ä–∏–º–∏—Ç–µ –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π –¥—É—à (–Ω–µ —Ö–æ–ª–æ–¥–Ω—ã–π!)")
    recommendations.append("- –°—ä–µ—à—å—Ç–µ —á—Ç–æ-—Ç–æ –∂–∏—Ä–Ω–æ–µ (–º–æ–ª–æ–∫–æ, —Å—ã—Ä, –æ—Ä–µ—Ö–∏)")
    recommendations.append("- –ò–∑–±–µ–≥–∞–π—Ç–µ –∫–æ—Ñ–µ–∏–Ω–∞ - –æ–Ω —É—Å–∏–ª–∏–≤–∞–µ—Ç –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ")
    recommendations.append("- –ù–µ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –±–µ–∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—Ä–∞—á–∞")

    if gender == '–∂–µ–Ω—Å–∫–∏–π':
        recommendations.append("\n‚ôÄÔ∏è –î–ª—è –∂–µ–Ω—â–∏–Ω:")
        recommendations.append("- –ê–ª–∫–æ–≥–æ–ª—å –≤—ã–≤–æ–¥–∏—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–µ–µ –Ω–∞ 15-20%")
        recommendations.append("- –ë—É–¥—å—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –¥–æ–∑–∏—Ä–æ–≤–∫–∞–º–∏")

    if promille > 0.5:
        recommendations.append("\nüöë –ü—Ä–∏ —Å–∏–ª—å–Ω–æ–º –æ–ø—å—è–Ω–µ–Ω–∏–∏:")
        recommendations.append("- –õ—è–≥—Ç–µ –Ω–∞ –±–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∞—Å–ø–∏—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ–π —Ä–≤–æ—Ç–µ")
        recommendations.append("- –ù–µ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ –æ–¥–Ω–æ–≥–æ")
        recommendations.append("- –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –¥—ã—Ö–∞–Ω–∏–µ –∏ –ø—É–ª—å—Å")
        recommendations.append("- –ü—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–æ–∑–Ω–∞–Ω–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–π—Ç–µ —Å–∫–æ—Ä—É—é")

    return "\n".join(recommendations)

def format_timestamp(timestamp):
    dt = datetime.strptime(timestamp, "%d.%m.%Y –≤ %H:%M")
    return dt.strftime("%d.%m.%Y –≤ %H:%M")

def save_alcohol_calculation_to_history(message, promille):
    chat_id = message.chat.id
    user_id = str(user_data[chat_id]['user_id'])  
    username = user_data[chat_id].get('username', 'unknown')

    sober_time = datetime.now() + timedelta(hours=promille / 0.15)
    sober_time_str = sober_time.strftime("%d.%m.%Y –≤ %H:%M")

    calculation_data = {
        'timestamp': datetime.now().strftime("%d.%m.%Y –≤ %H:%M"),
        'promille': promille,
        'sober_time': sober_time_str,
        'drinks': [
            {
                'name': drink['name'],
                'volume': user_data[int(user_id)]['drinks_volumes'][drink['id']], 
                'strength': drink['strength']
            } for drink in user_data[int(user_id)]['selected_drinks']
        ],
        'weight': user_data[int(user_id)]['weight'],
        'gender': user_data[int(user_id)]['gender']
    }

    if user_id not in user_history_alko:
        user_history_alko[user_id] = {
            'username': username,
            'alcohol_calculations': []
        }
    elif 'alcohol_calculations' not in user_history_alko[user_id]:
        user_history_alko[user_id]['alcohol_calculations'] = []

    user_history_alko[user_id]['alcohol_calculations'].append(calculation_data)
    
    if not USER_HISTORY_PATH_ALKO.endswith('alko_users.json'):
        raise ValueError("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–ª–∫–æ–≥–æ–ª—è –≤ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª!")
    
    save_user_history_alko()
    save_alcohol_to_excel(user_id, calculation_data)

def save_alcohol_to_excel(user_id, calculation):
    file_path = os.path.join(ALKO_EXCEL_DIR, f"{user_id}_alcohol.xlsx")
    
    calculations = user_history_alko.get(user_id, {}).get('alcohol_calculations', [])
    max_drinks = max(len(calc['drinks']) for calc in calculations) if calculations else len(calculation['drinks'])
    
    columns = ["–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞", "–ü–æ–ª", "–í–µ—Å (–∫–≥)", "–£—Ä–æ–≤–µ–Ω—å –∞–ª–∫–æ–≥–æ–ª—è (%)", "–í—Ä–µ–º—è –≤—ã—Ç—Ä–µ–∑–≤–ª–µ–Ω–∏—è"]
    drink_columns = [f"–ù–∞–ø–∏—Ç–æ–∫ {i+1}" for i in range(max_drinks)]
    volume_columns = [f"–û–±—ä–µ–º {i+1} (–ª)" for i in range(max_drinks)]
    strength_columns = [f"–ö—Ä–µ–ø–æ—Å—Ç—å {i+1} (%)" for i in range(max_drinks)]
    columns.extend(drink_columns + volume_columns + strength_columns)
    
    new_calc_data = {
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": calculation['timestamp'],
        "–ü–æ–ª": calculation['gender'].capitalize(),
        "–í–µ—Å (–∫–≥)": calculation['weight'],
        "–£—Ä–æ–≤–µ–Ω—å –∞–ª–∫–æ–≥–æ–ª—è (%)": calculation['promille'],
        "–í—Ä–µ–º—è –≤—ã—Ç—Ä–µ–∑–≤–ª–µ–Ω–∏—è": calculation['sober_time']
    }
    
    for i in range(max_drinks):
        drink_key = f"–ù–∞–ø–∏—Ç–æ–∫ {i+1}"
        volume_key = f"–û–±—ä–µ–º {i+1} (–ª)"
        strength_key = f"–ö—Ä–µ–ø–æ—Å—Ç—å {i+1} (%)"
        if i < len(calculation['drinks']):
            new_calc_data[drink_key] = calculation['drinks'][i]['name']
            new_calc_data[volume_key] = calculation['drinks'][i]['volume']
            new_calc_data[strength_key] = calculation['drinks'][i]['strength']
        else:
            new_calc_data[drink_key] = None
            new_calc_data[volume_key] = None
            new_calc_data[strength_key] = None

    new_calc_df = pd.DataFrame([new_calc_data], columns=columns)
    
    if os.path.exists(file_path):
        existing_data = pd.read_excel(file_path).dropna(axis=1, how='all')
        existing_data = existing_data.reindex(columns=columns, fill_value=None)
        updated_data = pd.concat([existing_data, new_calc_df], ignore_index=True)
    else:
        updated_data = new_calc_df
    
    updated_data.to_excel(file_path, index=False)
    
    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows():
        for cell in row:
            cell.alignment = Alignment(horizontal="center", vertical="center")
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_col=worksheet.max_column-3*max_drinks+1, max_col=worksheet.max_column):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

def update_alcohol_excel_file(user_id):
    file_path = os.path.join(ALKO_EXCEL_DIR, f"{user_id}_alcohol.xlsx")
    calculations = user_history_alko.get(user_id, {}).get('alcohol_calculations', [])

    if not calculations:
        columns = ["–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞", "–ü–æ–ª", "–í–µ—Å (–∫–≥)", "–£—Ä–æ–≤–µ–Ω—å –∞–ª–∫–æ–≥–æ–ª—è (%)", "–í—Ä–µ–º—è –≤—ã—Ç—Ä–µ–∑–≤–ª–µ–Ω–∏—è"]
        df = pd.DataFrame(columns=columns)
        df.to_excel(file_path, index=False)
        return

    max_drinks = max(len(calc['drinks']) for calc in calculations)

    columns = ["–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞", "–ü–æ–ª", "–í–µ—Å (–∫–≥)", "–£—Ä–æ–≤–µ–Ω—å –∞–ª–∫–æ–≥–æ–ª—è (%)", "–í—Ä–µ–º—è –≤—ã—Ç—Ä–µ–∑–≤–ª–µ–Ω–∏—è"]
    drink_columns = [f"–ù–∞–ø–∏—Ç–æ–∫ {i+1}" for i in range(max_drinks)]
    volume_columns = [f"–û–±—ä–µ–º {i+1} (–ª)" for i in range(max_drinks)]
    strength_columns = [f"–ö—Ä–µ–ø–æ—Å—Ç—å {i+1} (%)" for i in range(max_drinks)]
    columns.extend(drink_columns + volume_columns + strength_columns)

    calc_records = []
    for calc in calculations:
        calc_data = {
            "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": calc['timestamp'],
            "–ü–æ–ª": calc['gender'].capitalize(),
            "–í–µ—Å (–∫–≥)": calc['weight'],
            "–£—Ä–æ–≤–µ–Ω—å –∞–ª–∫–æ–≥–æ–ª—è (%)": calc['promille'],
            "–í—Ä–µ–º—è –≤—ã—Ç—Ä–µ–∑–≤–ª–µ–Ω–∏—è": calc['sober_time']
        }
        for i in range(max_drinks):
            drink_key = f"–ù–∞–ø–∏—Ç–æ–∫ {i+1}"
            volume_key = f"–û–±—ä–µ–º {i+1} (–ª)"
            strength_key = f"–ö—Ä–µ–ø–æ—Å—Ç—å {i+1} (%)"
            if i < len(calc['drinks']):
                calc_data[drink_key] = calc['drinks'][i]['name']
                calc_data[volume_key] = calc['drinks'][i]['volume']
                calc_data[strength_key] = calc['drinks'][i]['strength']
            else:
                calc_data[drink_key] = None
                calc_data[volume_key] = None
                calc_data[strength_key] = None
        calc_records.append(calc_data)

    df = pd.DataFrame(calc_records, columns=columns)
    df.to_excel(file_path, index=False)

    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows(min_row=2):
        for cell in row:
            cell.alignment = Alignment(horizontal='center', vertical='center')
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_row=2, min_col=len(columns)-3*max_drinks+1, max_col=len(columns)):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

# ----------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ê–õ–ö–û–ì–û–õ–¨ (–ø—Ä–æ—Å–º–æ—Ç—Ä –∞–ª–∫–æ–≥–æ–ª—è) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–ª–∫–æ–≥–æ–ª—è")
@check_function_state_decorator('–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–ª–∫–æ–≥–æ–ª—è')
@track_usage('–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–ª–∫–æ–≥–æ–ª—è')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_view_alcohol(message):
    user_id = str(message.from_user.id)  
    if user_id not in user_history_alko or 'alcohol_calculations' not in user_history_alko[user_id] or not user_history_alko[user_id]['alcohol_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è!")
        view_alc_calc(message, show_description=False)
        return
    view_alcohol_calculations(message)

@text_only_handler
def view_alcohol_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_alko or 'alcohol_calculations' not in user_history_alko[user_id] or not user_history_alko[user_id]['alcohol_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è!")
        view_alc_calc(message, show_description=False)
        return

    calculations = user_history_alko[user_id]['alcohol_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí ‚Ññ{i}. {timestamp}\n"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ê–ª–∫–æ–≥–æ–ª—å –≤ EXCEL")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_view_alcohol_selection)

@text_only_handler
def process_view_alcohol_selection(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å":
        view_alc_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return
    if message.text == "–ê–ª–∫–æ–≥–æ–ª—å –≤ EXCEL":
        send_alcohol_excel_file(message)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ê–ª–∫–æ–≥–æ–ª—å –≤ EXCEL")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_alcohol_selection)
        return

    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    calculations = user_history_alko.get(user_id, {}).get('alcohol_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è!")
        new_message_for_alko = message
        new_message_for_alko.text = "–ê–ª–∫–æ–≥–æ–ª—å"  
        view_alc_calc(new_message_for_alko, show_description=False)        
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–ê–ª–∫–æ–≥–æ–ª—å –≤ EXCEL")
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_view_alcohol_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        for index in valid_indices:
            calc = calculations[index]
            timestamp = calc['timestamp']
            drinks = "\n".join([f"{i+1}. {drink['name']} ({drink['strength']}%) - {drink['volume']} –ª." for i, drink in enumerate(calc['drinks'])])
            result = (
                f"üìä *–†–∞—Å—á–µ—Ç –æ—Ç {timestamp}*\n\n"
                f"üöπ –í–∞—à –ø–æ–ª - {calc['gender']}\n"
                f"üèãÔ∏è –í–∞—à –≤–µ—Å - {calc['weight']} –∫–≥\n\n"
                f"üç∑ –í—ã –ø–∏–ª–∏:\n{drinks}\n\n"
                f"üîç *–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç:*\n\n"
                f"üîπ –°–µ–π—á–∞—Å –≤ –≤–∞—à–µ–π –∫—Ä–æ–≤–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ: *{calc['promille']}%*\n"
                f"üîπ –í—ã –±—É–¥–µ—Ç–µ —Ç—Ä–µ–∑–≤—ã –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ *{int(calc['promille'] / 0.15)} —á. {int((calc['promille'] / 0.15 % 1) * 60)} –º–∏–Ω.*\n"
                f"üîπ –ê–ª–∫–æ–≥–æ–ª—å –≤—ã–≤–µ–¥–µ—Ç—Å—è –∏–∑ –∫—Ä–æ–≤–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ *{calc['sober_time']}*"
            )
            bot.send_message(chat_id, result, parse_mode='Markdown')

        new_message_for_alko = message
        new_message_for_alko.text = "–ê–ª–∫–æ–≥–æ–ª—å"  
        view_alc_calc(new_message_for_alko, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ê–ª–∫–æ–≥–æ–ª—å –≤ EXCEL")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_alcohol_selection)

@bot.message_handler(func=lambda message: message.text == "–ê–ª–∫–æ–≥–æ–ª—å –≤ EXCEL")
@check_function_state_decorator('–ê–ª–∫–æ–≥–æ–ª—å –≤ EXCEL')
@track_usage('–ê–ª–∫–æ–≥–æ–ª—å –≤ EXCEL')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def send_alcohol_excel_file(message):
    user_id = str(message.from_user.id)
    excel_file_path = os.path.join(ALKO_EXCEL_DIR, f"{user_id}_alcohol.xlsx")

    if os.path.exists(excel_file_path):
        with open(excel_file_path, 'rb') as excel_file:
            bot.send_document(message.chat.id, excel_file)
    else:
        bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª Excel –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –∞–ª–∫–æ–≥–æ–ª—è")
    new_message_for_alko = message
    new_message_for_alko.text = "–ê–ª–∫–æ–≥–æ–ª—å"  
    view_alc_calc(new_message_for_alko, show_description=False)

# ----------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ê–õ–ö–û–ì–û–õ–¨ (—É–¥–∞–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è")
@check_function_state_decorator('–£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è')
@track_usage('–£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_delete_alcohol(message):
    user_id = str(message.from_user.id)  
    if user_id not in user_history_alko or 'alcohol_calculations' not in user_history_alko[user_id] or not user_history_alko[user_id]['alcohol_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è!")
        new_message_for_alko = message
        new_message_for_alko.text = "–ê–ª–∫–æ–≥–æ–ª—å"  
        view_alc_calc(new_message_for_alko, show_description=False)
        return
    delete_alcohol_calculations(message)

@text_only_handler
def delete_alcohol_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_alko or 'alcohol_calculations' not in user_history_alko[user_id] or not user_history_alko[user_id]['alcohol_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è!")
        new_message_for_alko = message
        new_message_for_alko.text = "–ê–ª–∫–æ–≥–æ–ª—å"  
        view_alc_calc(new_message_for_alko, show_description=False)
        return

    calculations = user_history_alko[user_id]['alcohol_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí ‚Ññ{i}. {timestamp}\n"

    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_delete_alcohol_selection)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤:", reply_markup=markup)

@text_only_handler
def process_delete_alcohol_selection(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å":
        view_alc_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    calculations = user_history_alko.get(user_id, {}).get('alcohol_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è!")
        new_message_for_alko = message
        new_message_for_alko.text = "–ê–ª–∫–æ–≥–æ–ª—å"  
        view_alc_calc(new_message_for_alko, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_delete_alcohol_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        valid_indices.sort(reverse=True)
        for index in valid_indices:
            del calculations[index]

        save_user_history_alko()
        update_alcohol_excel_file(user_id)
        bot.send_message(chat_id, "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –∞–ª–∫–æ–≥–æ–ª—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")

        new_message_for_alko = message
        new_message_for_alko.text = "–ê–ª–∫–æ–≥–æ–ª—å"  
        view_alc_calc(new_message_for_alko, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–ª–∫–æ–≥–æ–ª—å')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤", reply_markup=markup)
        bot.register_next_step_handler(msg, process_delete_alcohol_selection)