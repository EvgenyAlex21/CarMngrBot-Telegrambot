from core.imports import wraps, telebot, types, os, json, re, requests, datetime, timedelta, pd, load_workbook, openpyxl, Alignment, Border, Side
from core.bot_instance import bot, BASE_DIR
from handlers.user.user_main_menu import return_to_menu
from handlers.user.calculators.calculators_main import return_to_calculators
from ..utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha, check_function_state_decorator, track_usage, check_subscription
)

# ----------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–†–ê–°–¢–ê–ú–û–ñ–ö–ê --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Ç–∞–º–æ–∂–∫–∞")
@check_function_state_decorator('–†–∞—Å—Ç–∞–º–æ–∂–∫–∞')
@track_usage('–†–∞—Å—Ç–∞–º–æ–∂–∫–∞')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_rastamozka_calc(message, show_description=True):
    global stored_message
    stored_message = message

    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞—Å—á–µ—Ç—É —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π*\n\n"
        "üìå *–†–∞—Å—á–µ—Ç —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏:*\n"
        "–†–∞—Å—á–µ—Ç –≤–µ–¥–µ—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º - *–∫—Ç–æ –≤–≤–æ–∑–∏—Ç, –≤–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ, —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è, –º–æ—â–Ω–æ—Å—Ç—å, –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è, —Å—Ç–æ–∏–º–æ—Å—Ç—å*\n\n"
        "_P.S. –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫. –¢–æ—á–Ω—ã–µ —Å—É–º–º—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!_\n\n"
        "üìå *–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n"
        "üìå *–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—á–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã"
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É', '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫', '–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    if show_description:
        bot.send_message(message.chat.id, description, parse_mode='Markdown')

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

RASTAMOZKA_JSON_PATH = os.path.join(BASE_DIR, 'files', 'files_for_calc', 'files_for_rastamozka', 'rastamozka.json')
USER_HISTORY_PATH_RASTAMOZKA = os.path.join(BASE_DIR, 'data', 'user', 'calculators', 'rastamozka', 'rastamozka_users.json')
RASTAMOZKA_EXCEL_DIR = os.path.join(BASE_DIR, 'data', 'user', 'calculators', 'rastamozka', 'excel')

rastamozka_data = {}
user_history_rastamozka = {}
user_data = {}

def fetch_exchange_rates_cbr():
    url = 'https://www.cbr-xml-daily.ru/daily_json.js'
    try:
        response = requests.get(url)
        data = response.json()
        rates = data['Valute']
        return {
            'USD': rates['USD']['Value'],  
            'EUR': rates['EUR']['Value'],  
            'BYN': rates['BYN']['Value'],  
            'CNY': rates['CNY']['Value'] / 10,  
            'JPY': rates['JPY']['Value'] / 100,  
            'KRW': rates['KRW']['Value'] / 1000, 
            'RUB': 1 
        }
    except Exception as e:
        return get_default_rates()

def get_default_rates():
    return {
        'USD': 83.6813,
        'EUR': 89.6553,
        'BYN': 27.34,
        'CNY': 11.46,
        'JPY': 0.55,
        'KRW': 0.05705,
        'RUB': 1
    }

EXCHANGE_RATES = fetch_exchange_rates_cbr()

def ensure_path_and_file(file_path):
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    if not os.path.exists(file_path):
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump({}, f, ensure_ascii=False, indent=2)

def load_rastamozka_data():
    global rastamozka_data
    try:
        with open(RASTAMOZKA_JSON_PATH, 'r', encoding='utf-8') as file:
            rastamozka_data = json.load(file)
    except Exception as e:
        pass

def load_user_history_rastamozka():
    global user_history_rastamozka
    try:
        if os.path.exists(USER_HISTORY_PATH_RASTAMOZKA):
            with open(USER_HISTORY_PATH_RASTAMOZKA, 'r', encoding='utf-8') as db_file:
                user_history_rastamozka = json.load(db_file)
        else:
            user_history_rastamozka = {}
    except Exception as e:
        user_history_rastamozka = {}

def save_user_history_rastamozka():
    try:
        with open(USER_HISTORY_PATH_RASTAMOZKA, 'w', encoding='utf-8') as db_file:
            json.dump(user_history_rastamozka, db_file, ensure_ascii=False, indent=2)
    except Exception as e:
        pass

ensure_path_and_file(RASTAMOZKA_JSON_PATH)
ensure_path_and_file(USER_HISTORY_PATH_RASTAMOZKA)
os.makedirs(RASTAMOZKA_EXCEL_DIR, exist_ok=True)
load_rastamozka_data()
load_user_history_rastamozka()

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–†–ê–°–¢–ê–ú–û–ñ–ö–ê (—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
@check_function_state_decorator('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É')
@track_usage('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def start_customs_calculation(message):
    if not rastamozka_data:
        bot.send_message(message.chat.id, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    user_id = message.from_user.id
    user_data[user_id] = {'user_id': user_id, 'username': message.from_user.username or 'unknown'}

    global EXCHANGE_RATES
    EXCHANGE_RATES = fetch_exchange_rates_cbr()

    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    markup.add("–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (–¥–ª—è —Å–µ–±—è)", "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (–¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏)")
    markup.add("–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–ö—Ç–æ –≤–≤–æ–∑–∏—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å?", reply_markup=markup)
    bot.register_next_step_handler(msg, process_car_importer_step)

@text_only_handler
def process_car_importer_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É":
        view_rastamozka_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        car_importer = message.text.strip()
        if car_importer not in rastamozka_data['the_car_is_importing'].values():
            raise ValueError

        user_data[user_id]['car_importer'] = car_importer

        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–î–æ 3 –ª–µ—Ç", "–û—Ç 3 –¥–æ 5 –ª–µ—Ç")
        markup.add("–û—Ç 5 –¥–æ 7 –ª–µ—Ç", "–ë–æ–ª–µ–µ 7 –ª–µ—Ç")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        msg = bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç —É –∞–≤—Ç–æ–º–æ–±–∏–ª—è?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_age_step)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (–¥–ª—è —Å–µ–±—è)", "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (–¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏)")
        markup.add("–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_importer_step)

@text_only_handler
def process_car_age_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É":
        view_rastamozka_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        car_age = message.text.strip()
        if car_age not in rastamozka_data['age_of_the_car'].values():
            raise ValueError

        user_data[user_id]['car_age'] = car_age

        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π", "–î–∏–∑–µ–ª—å–Ω—ã–π")
        markup.add("–ì–∏–±—Ä–∏–¥–Ω—ã–π", "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        msg = bot.send_message(message.chat.id, "–ö–∞–∫–æ–π —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è —É –∞–≤—Ç–æ–º–æ–±–∏–ª—è?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_engine_type_step)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–î–æ 3 –ª–µ—Ç", "–û—Ç 3 –¥–æ 5 –ª–µ—Ç")
        markup.add("–û—Ç 5 –¥–æ 7 –ª–µ—Ç", "–ë–æ–ª–µ–µ 7 –ª–µ—Ç")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_age_step)

@text_only_handler
def process_engine_type_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É":
        view_rastamozka_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return
    
    try:
        engine_type = message.text.strip()
        if engine_type not in rastamozka_data['engine_type'].values():
            raise ValueError

        user_data[user_id]['engine_type'] = engine_type

        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–õ–°", "–∫–í–¢")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –º–æ—â–Ω–æ—Å—Ç–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_engine_type_rastamozka_step)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π", "–î–∏–∑–µ–ª—å–Ω—ã–π")
        markup.add("–ì–∏–±—Ä–∏–¥–Ω—ã–π", "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_engine_type_step)

@text_only_handler
def process_engine_type_rastamozka_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É":
        view_rastamozka_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        engine_power = message.text.strip()
        if engine_power not in ["–õ–°", "–∫–í–¢"]:
            raise ValueError

        user_data[user_id]['engine_power'] = engine_power

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        if engine_power == "–∫–í–¢":
            msg = bot.send_message(message.chat.id, 
                                 "–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:\n*–ü–æ–¥—Å–∫–∞–∑–∫–∞:* _1 –∫–í–¢ = 1.36 –ª.—Å._", 
                                 reply_markup=markup, parse_mode='Markdown')
        else:
            msg = bot.send_message(message.chat.id, 
                                 "–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:", 
                                 reply_markup=markup)
        bot.register_next_step_handler(msg, process_engine_power_value_step)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–õ–°", "–∫–í–¢")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_engine_type_rastamozka_step)  

@text_only_handler
def process_engine_power_value_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É":
        view_rastamozka_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        power_value = float(message.text.strip().replace(',', '.'))
        if user_data[user_id]['engine_power'] == "–∫–í–¢":
            power_value *= 1.36

        user_data[user_id]['engine_power_value'] = power_value

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        msg = bot.send_message(message.chat.id, 
                             "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è:\n*–ü–æ–¥—Å–∫–∞–∑–∫–∞:* _1 –ª. = 1000 —Å–º¬≥_", 
                             reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_engine_volume_step)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=markup)
        bot.register_next_step_handler(msg, process_engine_power_value_step)

@text_only_handler
def process_engine_volume_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É":
        view_rastamozka_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        volume_value = float(message.text.strip().replace(',', '.'))
        user_data[user_id]['engine_volume'] = volume_value

        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å", "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å")
        markup.add("–î–æ–ª–ª–∞—Ä –°–®–ê", "–ï–≤—Ä–æ")
        markup.add("–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å", "–Ø–ø–æ–Ω—Å–∫–∞—è –π–µ–Ω–∞")
        markup.add("–ö–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_cost_step)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=markup)
        bot.register_next_step_handler(msg, process_engine_volume_step)

@text_only_handler
def process_car_cost_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É":
        view_rastamozka_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        car_cost_currency = message.text.strip()
        if car_cost_currency not in rastamozka_data['car_cost'].values():
            raise ValueError

        currency_key = {
            "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å": "RUB",
            "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å": "BYN",
            "–î–æ–ª–ª–∞—Ä –°–®–ê": "USD",
            "–ï–≤—Ä–æ": "EUR",
            "–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å": "CNY",
            "–Ø–ø–æ–Ω—Å–∫–∞—è –π–µ–Ω–∞": "JPY",
            "–ö–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞": "KRW"
        }.get(car_cost_currency)

        user_data[user_id]['car_cost_currency'] = currency_key

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        msg = bot.send_message(message.chat.id, 
                             "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", 
                             reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_cost_value_step)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å", "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å")
        markup.add("–î–æ–ª–ª–∞—Ä –°–®–ê", "–ï–≤—Ä–æ")
        markup.add("–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å", "–Ø–ø–æ–Ω—Å–∫–∞—è –π–µ–Ω–∞")
        markup.add("–ö–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_cost_step)

@text_only_handler
def process_car_cost_value_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É":
        view_rastamozka_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        car_cost_value = float(message.text.strip().replace(",", "."))
        user_data[user_id]['car_cost_value'] = car_cost_value
        calculate_customs(message)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_cost_value_step)

@text_only_handler
def calculate_customs(message):
    try:
        user_id_int = message.from_user.id 
        user_id_str = str(user_id_int) 
        data = user_data[user_id_int]

        car_cost_rub = data['car_cost_value'] * EXCHANGE_RATES.get(data['car_cost_currency'], 1)

        customs_fee = calculate_customs_fee(car_cost_rub)
        customs_duty = calculate_customs_duty(car_cost_rub, data['engine_volume'], data['car_age'], data['engine_type'], data['car_importer'])
        utilization_fee = calculate_utilization_fee(data['engine_volume'], data['engine_type'], data['car_age'], data['car_importer'])
        excise = calculate_excise(data['engine_power_value'], data['engine_type'], data['car_importer'])
        nds = calculate_nds(car_cost_rub, customs_duty, excise, data['car_importer'])
        total_customs = customs_fee + customs_duty + utilization_fee + excise + nds
        total_cost = car_cost_rub + total_customs

        result_message = (
            "*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–µ:*\n\n"
            "*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
            f"üöó –ò–º–ø–æ—Ä—Ç–µ—Ä: {data['car_importer']}\n"
            f"üìÖ –í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ: {data['car_age']}\n"
            f"üîß –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: {data['engine_type']}\n"
            f"üí™ –ú–æ—â–Ω–æ—Å—Ç—å: {data['engine_power_value']:.1f} –õ–°\n"
            f"üìè –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {data['engine_volume']:.1f} —Å–º¬≥\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {data['car_cost_value']:,.2f} {data['car_cost_currency']}\n\n"
            "*–†–∞—Å—á–µ—Ç:*\n\n"
            f"üõÉ –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä: {customs_fee:,.2f} ‚ÇΩ\n"
            f"üè¶ –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞: {customs_duty:,.2f} ‚ÇΩ\n"
            f"‚ôªÔ∏è –£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä: {utilization_fee:,.2f} ‚ÇΩ\n"
            f"üìà –ê–∫—Ü–∏–∑: {excise:,.2f} ‚ÇΩ\n"
            f"ü´∞ –ù–î–°: {nds:,.2f} ‚ÇΩ\n"
            f"üíµ –ò—Ç–æ–≥–æ: {total_customs:,.2f} ‚ÇΩ\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è + —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∞: {total_cost:,.2f} ‚ÇΩ"
        )

        username = data.get('username', 'unknown')
        timestamp = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")

        calculation_data = {
            'car_importer': data['car_importer'],
            'car_age': data['car_age'],
            'engine_type': data['engine_type'],
            'engine_power': data['engine_power'],
            'engine_power_value': round(data['engine_power_value'], 1),
            'engine_volume': round(data['engine_volume'], 1),
            'car_cost_currency': data['car_cost_currency'],
            'car_cost_value': round(data['car_cost_value'], 2),
            'car_cost_rub': round(car_cost_rub, 2),
            'customs_fee': round(customs_fee, 2),
            'customs_duty': round(customs_duty, 2),
            'utilization_fee': round(utilization_fee, 2),
            'excise': round(excise, 2),
            'nds': round(nds, 2),
            'total_customs': round(total_customs, 2),
            'total_cost': round(total_cost, 2),
            'timestamp': timestamp
        }

        if user_id_str not in user_history_rastamozka:
            user_history_rastamozka[user_id_str] = {
                'username': username,
                'rastamozka_calculations': []
            }
        elif 'rastamozka_calculations' not in user_history_rastamozka[user_id_str]:
            user_history_rastamozka[user_id_str]['rastamozka_calculations'] = []

        user_history_rastamozka[user_id_str]['rastamozka_calculations'].append(calculation_data)

        if not USER_HISTORY_PATH_RASTAMOZKA.endswith('rastamozka_users.json'):
            raise ValueError("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ –≤ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª!")

        save_user_history_rastamozka()
        save_rastamozka_to_excel(user_id_str, calculation_data)

        bot.send_message(message.chat.id, result_message, parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
        del user_data[user_id_int]  
        view_rastamozka_calc(message, show_description=False)

    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        view_rastamozka_calc(message, show_description=False)

def calculate_customs_fee(car_cost_rub):
    if car_cost_rub <= 200000:
        return 1067
    elif car_cost_rub <= 450000:
        return 2134
    elif car_cost_rub <= 1200000:
        return 4269
    elif car_cost_rub <= 2700000:
        return 11746
    elif car_cost_rub <= 4200000:
        return 16524
    elif car_cost_rub <= 5500000:
        return 21344
    elif car_cost_rub <= 7000000:
        return 27540
    else:
        return 30000

def calculate_customs_duty(car_cost_rub, engine_volume, car_age, engine_type, car_importer):
    if car_age == "–î–æ 3 –ª–µ—Ç":
        age_category = "–¥–æ 3 –ª–µ—Ç"
    elif car_age == "–û—Ç 3 –¥–æ 5 –ª–µ—Ç":
        age_category = "–æ—Ç 3 –¥–æ 5 –ª–µ—Ç"
    elif car_age == "–û—Ç 5 –¥–æ 7 –ª–µ—Ç":
        age_category = "–æ—Ç 5 –¥–æ 7 –ª–µ—Ç"
    elif car_age == "–ë–æ–ª–µ–µ 7 –ª–µ—Ç":
        age_category = "—Å—Ç–∞—Ä—à–µ 7 –ª–µ—Ç"
    else:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è!")

    if engine_type == "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π":
        return car_cost_rub * 0.15

    if car_importer == "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ":
        if engine_type == "–ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π":
            if age_category == "–¥–æ 3 –ª–µ—Ç":
                if engine_volume <= 3000:
                    return car_cost_rub * 0.15
                else:
                    return car_cost_rub * 0.125
            elif age_category == "–æ—Ç 3 –¥–æ 5 –ª–µ—Ç":
                if engine_volume <= 1000:
                    return max(car_cost_rub * 0.2, (0.36 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 1500:
                    return max(car_cost_rub * 0.2, (0.4 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 1800:
                    return max(car_cost_rub * 0.2, (0.36 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 2300:
                    return max(car_cost_rub * 0.2, (0.44 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 2800:
                    return max(car_cost_rub * 0.2, (0.44 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 3000:
                    return max(car_cost_rub * 0.2, (0.44 * engine_volume) * EXCHANGE_RATES['EUR'])
                else:
                    return max(car_cost_rub * 0.2, (0.8 * engine_volume) * EXCHANGE_RATES['EUR'])
            elif age_category == "–æ—Ç 5 –¥–æ 7 –ª–µ—Ç":
                if engine_volume <= 1000:
                    return max(car_cost_rub * 0.2, (0.36 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 1500:
                    return max(car_cost_rub * 0.2, (0.4 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 1800:
                    return max(car_cost_rub * 0.2, (0.36 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 2300:
                    return max(car_cost_rub * 0.2, (0.44 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 2800:
                    return max(car_cost_rub * 0.2, (0.44 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 3000:
                    return max(car_cost_rub * 0.2, (0.44 * engine_volume) * EXCHANGE_RATES['EUR'])
                else:
                    return max(car_cost_rub * 0.2, (0.8 * engine_volume) * EXCHANGE_RATES['EUR'])
            else:  
                if engine_volume <= 1000:
                    return (1.4 * engine_volume) * EXCHANGE_RATES['EUR']
                elif engine_volume <= 1500:
                    return (1.5 * engine_volume) * EXCHANGE_RATES['EUR']
                elif engine_volume <= 1800:
                    return (1.6 * engine_volume) * EXCHANGE_RATES['EUR']
                elif engine_volume <= 2300:
                    return (2.2 * engine_volume) * EXCHANGE_RATES['EUR']
                elif engine_volume <= 2800:
                    return (2.2 * engine_volume) * EXCHANGE_RATES['EUR']
                elif engine_volume <= 3000:
                    return (2.2 * engine_volume) * EXCHANGE_RATES['EUR']
                else:
                    return (3.2 * engine_volume) * EXCHANGE_RATES['EUR']
        elif engine_type == "–î–∏–∑–µ–ª—å–Ω—ã–π":
            if age_category == "–¥–æ 3 –ª–µ—Ç":
                return car_cost_rub * 0.15
            elif age_category == "–æ—Ç 3 –¥–æ 5 –ª–µ—Ç":
                if engine_volume <= 1500:
                    return max(car_cost_rub * 0.2, (0.32 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 2500:
                    return max(car_cost_rub * 0.2, (0.4 * engine_volume) * EXCHANGE_RATES['EUR'])
                else:
                    return max(car_cost_rub * 0.2, (0.8 * engine_volume) * EXCHANGE_RATES['EUR'])
            elif age_category == "–æ—Ç 5 –¥–æ 7 –ª–µ—Ç":
                if engine_volume <= 1500:
                    return max(car_cost_rub * 0.2, (0.32 * engine_volume) * EXCHANGE_RATES['EUR'])
                elif engine_volume <= 2500:
                    return max(car_cost_rub * 0.2, (0.4 * engine_volume) * EXCHANGE_RATES['EUR'])
                else:
                    return max(car_cost_rub * 0.2, (0.8 * engine_volume) * EXCHANGE_RATES['EUR'])
            else:  
                if engine_volume <= 1500:
                    return (1.5 * engine_volume) * EXCHANGE_RATES['EUR']
                elif engine_volume <= 2500:
                    return (2.2 * engine_volume) * EXCHANGE_RATES['EUR']
                else:
                    return (3.2 * engine_volume) * EXCHANGE_RATES['EUR']
    else:
        if age_category == "–¥–æ 3 –ª–µ—Ç":
            car_cost_eur = car_cost_rub / EXCHANGE_RATES['EUR']
            if car_cost_eur <= 8500:
                return max(0.54 * car_cost_rub, (2.5 * engine_volume) * EXCHANGE_RATES['EUR'])
            elif car_cost_eur <= 16700:
                return max(0.48 * car_cost_rub, (3.5 * engine_volume) * EXCHANGE_RATES['EUR'])
            elif car_cost_eur <= 42300:
                return max(0.48 * car_cost_rub, (5.5 * engine_volume) * EXCHANGE_RATES['EUR'])
            elif car_cost_eur <= 84500:
                return max(0.48 * car_cost_rub, (7.5 * engine_volume) * EXCHANGE_RATES['EUR'])
            elif car_cost_eur <= 169000:
                return max(0.48 * car_cost_rub, (15 * engine_volume) * EXCHANGE_RATES['EUR'])
            else:
                return max(0.48 * car_cost_rub, (20 * engine_volume) * EXCHANGE_RATES['EUR'])
        elif age_category == "–æ—Ç 3 –¥–æ 5 –ª–µ—Ç":
            if engine_volume <= 1000:
                return (1.5 * engine_volume) * EXCHANGE_RATES['EUR']
            elif engine_volume <= 1500:
                return (1.7 * engine_volume) * EXCHANGE_RATES['EUR']
            elif engine_volume <= 1800:
                return (2.5 * engine_volume) * EXCHANGE_RATES['EUR']
            elif engine_volume <= 2300:
                return (2.7 * engine_volume) * EXCHANGE_RATES['EUR']
            elif engine_volume <= 3000:
                return (3.0 * engine_volume) * EXCHANGE_RATES['EUR']
            else:
                return (3.6 * engine_volume) * EXCHANGE_RATES['EUR']
        else:  
            if engine_volume <= 1000:
                return (3.0 * engine_volume) * EXCHANGE_RATES['EUR']
            elif engine_volume <= 1500:
                return (3.2 * engine_volume) * EXCHANGE_RATES['EUR']
            elif engine_volume <= 1800:
                return (3.5 * engine_volume) * EXCHANGE_RATES['EUR']
            elif engine_volume <= 2300:
                return (4.8 * engine_volume) * EXCHANGE_RATES['EUR']
            elif engine_volume <= 3000:
                return (5.0 * engine_volume) * EXCHANGE_RATES['EUR']
            else:
                return (5.7 * engine_volume) * EXCHANGE_RATES['EUR']

def calculate_utilization_fee(engine_volume, engine_type, car_age, car_importer):
    base_rate = 20000 if engine_type != "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π" else 0
    coefficient = get_utilization_coefficient(engine_volume, engine_type, car_age, car_importer)
    return base_rate * coefficient

def get_utilization_coefficient(engine_volume, engine_type, car_age, car_importer):
    if car_age == "–î–æ 3 –ª–µ—Ç":
        age_category = "–¥–æ 3 –ª–µ—Ç"
    elif car_age == "–û—Ç 3 –¥–æ 5 –ª–µ—Ç":
        age_category = "–æ—Ç 3 –¥–æ 5 –ª–µ—Ç"
    elif car_age == "–û—Ç 5 –¥–æ 7 –ª–µ—Ç":
        age_category = "–æ—Ç 5 –¥–æ 7 –ª–µ—Ç"
    elif car_age == "–ë–æ–ª–µ–µ 7 –ª–µ—Ç":
        age_category = "—Å—Ç–∞—Ä—à–µ 7 –ª–µ—Ç"
    else:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è!")

    if engine_type == "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π":
        if car_importer == "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ":
            return 33.37 if age_category == "–¥–æ 3 –ª–µ—Ç" else 58.7
        return 0.17 if age_category == "–¥–æ 3 –ª–µ—Ç" else 0.26

    if car_importer == "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ":
        if age_category == "–¥–æ 3 –ª–µ—Ç":
            if engine_volume <= 1000:
                return 9.01
            elif engine_volume <= 2000:
                return 33.37
            elif engine_volume <= 3000:
                return 93.77
            elif engine_volume <= 3500:
                return 107.67
            else:
                return 137.11
        elif age_category == "–æ—Ç 3 –¥–æ 5 –ª–µ—Ç":
            if engine_volume <= 1000:
                return 23.0
            elif engine_volume <= 2000:
                return 58.7
            elif engine_volume <= 3000:
                return 141.97
            elif engine_volume <= 3500:
                return 165.84
            else:
                return 180.24
        elif age_category == "–æ—Ç 5 –¥–æ 7 –ª–µ—Ç":
            if engine_volume <= 1000:
                return 25.0  
            elif engine_volume <= 2000:
                return 60.0  
            elif engine_volume <= 3000:
                return 145.0  
            elif engine_volume <= 3500:
                return 170.0 
            else:
                return 185.0  
        else: 
            if engine_volume <= 1000:
                return 27.0  
            elif engine_volume <= 2000:
                return 62.0  
            elif engine_volume <= 3000:
                return 150.0  
            elif engine_volume <= 3500:
                return 175.0  
            else:
                return 190.0  
    else: 
        if age_category == "–¥–æ 3 –ª–µ—Ç":
            if engine_volume <= 1000:
                return 0.17
            elif engine_volume <= 2000:
                return 0.17
            elif engine_volume <= 3000:
                return 0.17
            elif engine_volume <= 3500:
                return 107.67
            else:
                return 137.11
        else:  
            if engine_volume <= 1000:
                return 0.26
            elif engine_volume <= 2000:
                return 0.26
            elif engine_volume <= 3000:
                return 0.26
            elif engine_volume <= 3500:
                return 165.84
            else:
                return 180.24

def calculate_excise(engine_power, engine_type, car_importer):
    if car_importer == "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (–¥–ª—è —Å–µ–±—è)":
        return 0

    if engine_type == "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π":
        return 0

    if engine_power <= 90:
        return 0
    elif engine_power <= 150:
        return 61 * engine_power
    elif engine_power <= 200:
        return 583 * engine_power
    elif engine_power <= 300:
        return 955 * engine_power
    elif engine_power <= 400:
        return 1628 * engine_power
    elif engine_power <= 500:
        return 1685 * engine_power
    else:
        return 1740 * engine_power

def calculate_nds(car_cost_rub, customs_duty, excise, car_importer):
    if car_importer in ["–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (–¥–ª—è —Å–µ–±—è)", "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (–¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏)"]:
        return 0
    return (car_cost_rub + customs_duty + excise) * 0.2

def save_rastamozka_to_excel(user_id, calculation):
    file_path = os.path.join(RASTAMOZKA_EXCEL_DIR, f"{user_id}_rastamozka.xlsx")
    
    calculations = user_history_rastamozka.get(user_id, {}).get('rastamozka_calculations', [])
    
    columns = [
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
        "–ò–º–ø–æ—Ä—Ç–µ—Ä",
        "–í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ",
        "–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è",
        "–ú–æ—â–Ω–æ—Å—Ç—å (–õ–°)",
        "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (—Å–º¬≥)",
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
        "–í–∞–ª—é—Ç–∞",
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö",
        "–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä (‚ÇΩ)",
        "–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ (‚ÇΩ)",
        "–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä (‚ÇΩ)",
        "–ê–∫—Ü–∏–∑ (‚ÇΩ)",
        "–ù–î–° (‚ÇΩ)",
        "–ò—Ç–æ–≥–æ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∞ (‚ÇΩ)",
        "–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)"
    ]
    
    new_calc_data = {
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": calculation['timestamp'],
        "–ò–º–ø–æ—Ä—Ç–µ—Ä": calculation['car_importer'],
        "–í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ": calculation['car_age'],
        "–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è": calculation['engine_type'],
        "–ú–æ—â–Ω–æ—Å—Ç—å (–õ–°)": calculation['engine_power_value'],
        "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (—Å–º¬≥)": calculation['engine_volume'],
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è": calculation['car_cost_value'],
        "–í–∞–ª—é—Ç–∞": calculation['car_cost_currency'],
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö": calculation['car_cost_rub'],
        "–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä (‚ÇΩ)": calculation['customs_fee'],
        "–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ (‚ÇΩ)": calculation['customs_duty'],
        "–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä (‚ÇΩ)": calculation['utilization_fee'],
        "–ê–∫—Ü–∏–∑ (‚ÇΩ)": calculation['excise'],
        "–ù–î–° (‚ÇΩ)": calculation['nds'],
        "–ò—Ç–æ–≥–æ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∞ (‚ÇΩ)": calculation['total_customs'],
        "–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)": calculation['total_cost']
    }

    new_calc_df = pd.DataFrame([new_calc_data], columns=columns)
    
    if os.path.exists(file_path):
        existing_data = pd.read_excel(file_path).dropna(axis=1, how='all')
        existing_data = existing_data.reindex(columns=columns, fill_value=None)
        updated_data = pd.concat([existing_data, new_calc_df], ignore_index=True)
    else:
        updated_data = new_calc_df
    
    updated_data.to_excel(file_path, index=False)
    
    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows():
        for cell in row:
            cell.alignment = Alignment(horizontal="center", vertical="center")
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_col=worksheet.max_column-4, max_col=worksheet.max_column):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

def update_rastamozka_excel_file(user_id):
    file_path = os.path.join(RASTAMOZKA_EXCEL_DIR, f"{user_id}_rastamozka.xlsx")
    calculations = user_history_rastamozka.get(user_id, {}).get('rastamozka_calculations', [])

    if not calculations:
        columns = [
            "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
            "–ò–º–ø–æ—Ä—Ç–µ—Ä",
            "–í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ",
            "–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è",
            "–ú–æ—â–Ω–æ—Å—Ç—å (–õ–°)",
            "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (—Å–º¬≥)",
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
            "–í–∞–ª—é—Ç–∞",
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö",
            "–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä (‚ÇΩ)",
            "–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ (‚ÇΩ)",
            "–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä (‚ÇΩ)",
            "–ê–∫—Ü–∏–∑ (‚ÇΩ)",
            "–ù–î–° (‚ÇΩ)",
            "–ò—Ç–æ–≥–æ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∞ (‚ÇΩ)",
            "–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)"
        ]
        df = pd.DataFrame(columns=columns)
        df.to_excel(file_path, index=False)
        return

    columns = [
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
        "–ò–º–ø–æ—Ä—Ç–µ—Ä",
        "–í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ",
        "–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è",
        "–ú–æ—â–Ω–æ—Å—Ç—å (–õ–°)",
        "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (—Å–º¬≥)",
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
        "–í–∞–ª—é—Ç–∞",
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö",
        "–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä (‚ÇΩ)",
        "–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ (‚ÇΩ)",
        "–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä (‚ÇΩ)",
        "–ê–∫—Ü–∏–∑ (‚ÇΩ)",
        "–ù–î–° (‚ÇΩ)",
        "–ò—Ç–æ–≥–æ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∞ (‚ÇΩ)",
        "–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)"
    ]

    calc_records = []
    for calc in calculations:
        calc_data = {
            "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": calc['timestamp'],
            "–ò–º–ø–æ—Ä—Ç–µ—Ä": calc['car_importer'],
            "–í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ": calc['car_age'],
            "–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è": calc['engine_type'],
            "–ú–æ—â–Ω–æ—Å—Ç—å (–õ–°)": calc['engine_power_value'],
            "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (—Å–º¬≥)": calc['engine_volume'],
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è": calc['car_cost_value'],
            "–í–∞–ª—é—Ç–∞": calc['car_cost_currency'],
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö": calc['car_cost_rub'],
            "–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä (‚ÇΩ)": calc['customs_fee'],
            "–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ (‚ÇΩ)": calc['customs_duty'],
            "–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä (‚ÇΩ)": calc['utilization_fee'],
            "–ê–∫—Ü–∏–∑ (‚ÇΩ)": calc['excise'],
            "–ù–î–° (‚ÇΩ)": calc['nds'],
            "–ò—Ç–æ–≥–æ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∞ (‚ÇΩ)": calc['total_customs'],
            "–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)": calc['total_cost']
        }
        calc_records.append(calc_data)

    df = pd.DataFrame(calc_records, columns=columns)
    df.to_excel(file_path, index=False)

    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows(min_row=2):
        for cell in row:
            cell.alignment = Alignment(horizontal='center', vertical='center')
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_row=2, min_col=len(columns)-4, max_col=len(columns)):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–†–ê–°–¢–ê–ú–û–ñ–ö–ê (–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫")
@check_function_state_decorator('–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫')
@track_usage('–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_view_rastamozka(message):
    user_id = str(message.from_user.id)
    if user_id not in user_history_rastamozka or 'rastamozka_calculations' not in user_history_rastamozka[user_id] or not user_history_rastamozka[user_id]['rastamozka_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏!")
        view_rastamozka_calc(message, show_description=False)
        return
    view_rastamozka_calculations(message)

@text_only_handler
def view_rastamozka_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_rastamozka or 'rastamozka_calculations' not in user_history_rastamozka[user_id] or not user_history_rastamozka[user_id]['rastamozka_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏!")
        view_rastamozka_calc(message, show_description=False)
        return

    calculations = user_history_rastamozka[user_id]['rastamozka_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí *‚Ññ{i}.* {timestamp}\n"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–†–∞—Å—Ç–∞–º–æ–∂–∫–∞ –≤ EXCEL')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_view_rastamozka_selection)

@text_only_handler
def process_view_rastamozka_selection(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É":
        view_rastamozka_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return
    if message.text == "–†–∞—Å—Ç–∞–º–æ–∂–∫–∞ –≤ EXCEL":
        send_rastamozka_excel_file(message)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–†–∞—Å—Ç–∞–º–æ–∂–∫–∞ –≤ EXCEL')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_rastamozka_selection)
        return

    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    calculations = user_history_rastamozka.get(user_id, {}).get('rastamozka_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏!")
        view_rastamozka_calc(message, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–†–∞—Å—Ç–∞–º–æ–∂–∫–∞ –≤ EXCEL')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(
                chat_id,
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_view_rastamozka_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        for index in valid_indices:
            calc = calculations[index]
            required_keys = [
                'car_importer', 'car_age', 'engine_type', 'engine_power_value',
                'engine_volume', 'car_cost_value', 'car_cost_currency', 'customs_fee',
                'customs_duty', 'utilization_fee', 'excise', 'nds', 'total_customs', 'total_cost'
            ]
            for key in required_keys:
                if key not in calc:
                    bot.send_message(chat_id, f"‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞ ‚Ññ{index + 1} —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã! –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç!")
                    view_rastamozka_calc(message, show_description=False)
                    return

            result = (
                f"üìä *–†–∞—Å—á–µ—Ç —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ ‚Ññ{index + 1}. {calc['timestamp']}*\n\n"
                f"*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
                f"üöó –ò–º–ø–æ—Ä—Ç–µ—Ä: {calc['car_importer']}\n"
                f"üìÖ –í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ: {calc['car_age']}\n"
                f"üîß –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: {calc['engine_type']}\n"
                f"üí™ –ú–æ—â–Ω–æ—Å—Ç—å: {calc['engine_power_value']:.1f} –õ–°\n"
                f"üìè –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {calc['engine_volume']:.1f} —Å–º¬≥\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {calc['car_cost_value']:,.2f} {calc['car_cost_currency']}\n\n"
                f"*–†–∞—Å—á–µ—Ç:*\n\n"
                f"üõÉ –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä: {calc['customs_fee']:,.2f} ‚ÇΩ\n"
                f"üè¶ –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞: {calc['customs_duty']:,.2f} ‚ÇΩ\n"
                f"‚ôªÔ∏è –£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä: {calc['utilization_fee']:,.2f} ‚ÇΩ\n"
                f"üìà –ê–∫—Ü–∏–∑: {calc['excise']:,.2f} ‚ÇΩ\n"
                f"ü´∞ –ù–î–°: {calc['nds']:,.2f} ‚ÇΩ\n"
                f"üíµ –ò—Ç–æ–≥–æ: {calc['total_customs']:,.2f} ‚ÇΩ\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è + —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∞: {calc['total_cost']:,.2f} ‚ÇΩ"
            )
            bot.send_message(chat_id, result, parse_mode='Markdown')

        view_rastamozka_calc(message, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–†–∞—Å—Ç–∞–º–æ–∂–∫–∞ –≤ EXCEL')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_rastamozka_selection)

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Ç–∞–º–æ–∂–∫–∞ –≤ EXCEL")
@check_function_state_decorator('–†–∞—Å—Ç–∞–º–æ–∂–∫–∞ –≤ EXCEL')
@track_usage('–†–∞—Å—Ç–∞–º–æ–∂–∫–∞ –≤ EXCEL')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def send_rastamozka_excel_file(message):
    user_id = str(message.from_user.id)
    excel_file_path = os.path.join(RASTAMOZKA_EXCEL_DIR, f"{user_id}_rastamozka.xlsx")

    if os.path.exists(excel_file_path):
        with open(excel_file_path, 'rb') as excel_file:
            bot.send_document(message.chat.id, excel_file)
    else:
        bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª Excel –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏")
    view_rastamozka_calc(message, show_description=False)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–†–ê–°–¢–ê–ú–û–ñ–ö–ê (—É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫")
@check_function_state_decorator('–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫')
@track_usage('–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–∞–º–æ–∂–µ–∫')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_delete_rastamozka(message):
    user_id = str(message.from_user.id)
    if user_id not in user_history_rastamozka or 'rastamozka_calculations' not in user_history_rastamozka[user_id] or not user_history_rastamozka[user_id]['rastamozka_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏!")
        view_rastamozka_calc(message, show_description=False)
        return
    delete_rastamozka_calculations(message)

@text_only_handler
def delete_rastamozka_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_rastamozka or 'rastamozka_calculations' not in user_history_rastamozka[user_id] or not user_history_rastamozka[user_id]['rastamozka_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏!")
        view_rastamozka_calc(message, show_description=False)
        return

    calculations = user_history_rastamozka[user_id]['rastamozka_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí *‚Ññ{i}.* {timestamp}\n"

    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_delete_rastamozka_selection)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤:", reply_markup=markup)

@text_only_handler
def process_delete_rastamozka_selection(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É":
        view_rastamozka_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    calculations = user_history_rastamozka.get(user_id, {}).get('rastamozka_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏!")
        view_rastamozka_calc(message, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_delete_rastamozka_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        valid_indices.sort(reverse=True)
        for index in valid_indices:
            del calculations[index]

        save_user_history_rastamozka()
        update_rastamozka_excel_file(user_id)
        bot.send_message(chat_id, "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
        view_rastamozka_calc(message, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup)
        bot.register_next_step_handler(msg, process_delete_rastamozka_selection)