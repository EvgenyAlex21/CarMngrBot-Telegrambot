from core.imports import wraps, telebot, types, os, json, re, datetime, timedelta, ReplyKeyboardMarkup, ReplyKeyboardRemove, openpyxl, Workbook, load_workbook, Alignment, Border, Side, Font, PatternFill
from core.bot_instance import bot
from .calculators_main import return_to_calculators
from handlers.user.user_main_menu import return_to_menu
from ..utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha, check_function_state_decorator, track_usage, check_subscription
)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ê–í–¢–û–ö–†–ï–î–ò–¢ --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç")
@check_function_state_decorator('–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
@track_usage('–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_autokredit_calc(message, show_description=True):
    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞—Å—á–µ—Ç—É –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–∞*\n\n"
        "üìå *–†–∞—Å—á–µ—Ç –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–∞:*\n"
        "–†–∞—Å—á–µ—Ç –≤–µ–¥–µ—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º - *–¥–∞—Ç–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ, –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂, —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞, –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞, —Å—Ö–µ–º–∞ –æ–ø–ª–∞—Ç—ã, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≥–∞—à–µ–Ω–∏—è*\n\n"
        "_P.S. –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –¢–æ—á–Ω—ã–µ —Å—É–º–º—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —É—Å–ª–æ–≤–∏–π –±–∞–Ω–∫–∞ –∏ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!_\n\n"
        "üìå *–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n"
        "üìå *–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—á–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã"
    )

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç', '–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤', '–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    if show_description:
        bot.send_message(message.chat.id, description, parse_mode='Markdown')

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

KREDIT_USERS_PATH = os.path.join('data', 'user', 'calculators', 'kredit', 'kredit_users.json')
EXCEL_PATH_TEMPLATE = os.path.join('data', 'user', 'calculators', 'kredit', 'excel', '{user_id}', '{user_id}_{timestamp}_autokredit.xlsx')

user_data = {}
user_history_kredit = {}

loan_terms = {
    "1 –º–µ—Å—è—Ü": 1, "3 –º–µ—Å—è—Ü–∞": 3, "6 –º–µ—Å—è—Ü–µ–≤": 6, "1 –≥–æ–¥": 12, "1,5 –≥–æ–¥–∞": 18,
    "2 –≥–æ–¥–∞": 24, "3 –≥–æ–¥–∞": 36, "4 –≥–æ–¥–∞": 48, "5 –ª–µ—Ç": 60, "6 –ª–µ—Ç": 72,
    "7 –ª–µ—Ç": 84, "8 –ª–µ—Ç": 96, "9 –ª–µ—Ç": 108, "10 –ª–µ—Ç": 120, "15 –ª–µ—Ç": 180, "20 –ª–µ—Ç": 240
}

def ensure_path_and_file(file_path):
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    if not os.path.exists(file_path):
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump({}, f, ensure_ascii=False, indent=2)

def load_user_history_kredit():
    global user_history_kredit
    try:
        if os.path.exists(KREDIT_USERS_PATH):
            with open(KREDIT_USERS_PATH, 'r', encoding='utf-8') as db_file:
                user_history_kredit = json.load(db_file)
        else:
            user_history_kredit = {}
    except Exception as e:
        user_history_kredit = {}

def save_user_history_kredit():
    try:
        with open(KREDIT_USERS_PATH, 'w', encoding='utf-8') as db_file:
            json.dump(user_history_kredit, db_file, ensure_ascii=False, indent=2)
    except Exception as e:
        pass

ensure_path_and_file(KREDIT_USERS_PATH)
load_user_history_kredit()

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ê–í–¢–û–ö–†–ï–î–ò–¢ (—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç")
@check_function_state_decorator('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
@track_usage('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def start_car_loan_calculation(message):
    user_id = message.from_user.id
    user_data[user_id] = {'user_id': user_id, 'username': message.from_user.username}
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_loan_date_step)

@text_only_handler
def process_loan_date_step(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    try:
        loan_date = datetime.strptime(message.text, "%d.%m.%Y")
        current_date = datetime.now()
        if loan_date < current_date.replace(hour=0, minute=0, second=0, microsecond=0):
            raise ValueError("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π")
        user_data[user_id]['loan_date'] = loan_date
        
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –≤ —Ä—É–±–ª—è—Ö:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_price_step)
    except ValueError as e:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, str(e) if str(e) else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=markup)
        bot.register_next_step_handler(msg, process_loan_date_step)

@text_only_handler
def process_car_price_step(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    try:
        car_price = float(message.text.replace(',', '.'))
        if car_price <= 0:
            raise ValueError("–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
        user_data[user_id]['car_price'] = car_price
        
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–í ‚ÇΩ", "–í %")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_down_payment_type_step)
    except ValueError as e:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, str(e) if str(e) else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_price_step)

@text_only_handler
def process_down_payment_type_step(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    down_payment_type = message.text.strip()
    if down_payment_type not in ["–í ‚ÇΩ", "–í %"]:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤ ‚ÇΩ –∏–ª–∏ –≤ %", reply_markup=markup)
        bot.register_next_step_handler(msg, process_down_payment_type_step)
        return
    
    user_data[user_id]['down_payment_type'] = down_payment_type
    unit = "‚ÇΩ" if down_payment_type == "–í ‚ÇΩ" else "%"
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ *{unit}*:", reply_markup=markup, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_down_payment_amount_step)

@text_only_handler
def process_down_payment_amount_step(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    try:
        amount = float(message.text.replace(',', '.'))
        if amount < 0:
            raise ValueError("–°—É–º–º–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!")
        
        if user_data[user_id]['down_payment_type'] == "–í ‚ÇΩ":
            if amount >= user_data[user_id]['car_price']:
                raise ValueError("–ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ!")
            user_data[user_id]['down_payment'] = amount
        else:  
            if amount > 100:
                raise ValueError("–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100!")
            user_data[user_id]['down_payment'] = user_data[user_id]['car_price'] * (amount / 100)
        
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        terms = list(loan_terms.keys())
        for i in range(0, len(terms), 2):
            if i + 1 < len(terms):
                markup.row(terms[i], terms[i + 1])
            else:
                markup.add(terms[i])
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–¥–∞—á–∏ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_loan_term_step)
    except ValueError as e:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, str(e) if str(e) else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=markup)
        bot.register_next_step_handler(msg, process_down_payment_amount_step)

@text_only_handler
def process_loan_term_step(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    term = message.text.strip()
    if term not in loan_terms:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", reply_markup=markup)
        bot.register_next_step_handler(msg, process_loan_term_step)
        return
    
    user_data[user_id]['loan_term'] = loan_terms[term]
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_interest_rate_step)

@text_only_handler
def process_interest_rate_step(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    try:
        rate = float(message.text.replace(',', '.'))
        if rate <= 0:
            raise ValueError("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
        user_data[user_id]['interest_rate'] = rate / 100
        
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–†–∞–≤–Ω—ã–º–∏ –¥–æ–ª—è–º–∏", "–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ö–µ–º—É –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_payment_scheme_step)
    except ValueError as e:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, str(e) if str(e) else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=markup)
        bot.register_next_step_handler(msg, process_interest_rate_step)

@text_only_handler
def process_payment_scheme_step(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    scheme = message.text.strip()
    if scheme not in ["–†–∞–≤–Ω—ã–º–∏ –¥–æ–ª—è–º–∏", "–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏"]:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–≤–Ω—ã–º–∏ –¥–æ–ª—è–º–∏ –∏–ª–∏ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏", reply_markup=markup)
        bot.register_next_step_handler(msg, process_payment_scheme_step)
        return
    
    user_data[user_id]['payment_scheme'] = scheme
    markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≥–∞—à–µ–Ω–∏—è?", reply_markup=markup)
    bot.register_next_step_handler(msg, process_extra_payments_step)

@text_only_handler
def process_extra_payments_step(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    answer = message.text.strip()
    if answer not in ["–î–∞", "–ù–µ—Ç"]:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_extra_payments_step)
        return
    
    user_data[user_id]['has_extra_payments'] = answer == "–î–∞"
    if answer == "–ù–µ—Ç":
        calculate_loan(message)
    else:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–≥–∞—à–µ–Ω–∏–π:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_extra_payments_count_step)

@text_only_handler
def process_extra_payments_count_step(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    try:
        count = int(message.text)
        if count <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≥–∞—à–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
        user_data[user_id]['extra_payments_count'] = count
        user_data[user_id]['extra_payments'] = []
        process_extra_payment_info(message, 1)
    except ValueError as e:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, str(e) if str(e) else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=markup)
        bot.register_next_step_handler(msg, process_extra_payments_count_step)

@text_only_handler
def process_extra_payment_info(message, payment_num):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    if payment_num > user_data[user_id]['extra_payments_count']:
        calculate_loan(message)
        return
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, f"*–ü–æ–≥–∞—à–µ–Ω–∏–µ ‚Ññ{payment_num}*\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=markup, parse_mode='Markdown')
    bot.register_next_step_handler(msg, lambda m: process_extra_payment_date_step(m, payment_num))

@text_only_handler
def process_extra_payment_date_step(message, payment_num):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    try:
        payment_date = datetime.strptime(message.text, "%d.%m.%Y")
        if payment_date < user_data[user_id]['loan_date']:
            raise ValueError("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –≤—ã–¥–∞—á–∏ –∫—Ä–µ–¥–∏—Ç–∞")
        user_data[user_id]['extra_payments'].append({'date': payment_date})
        
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ", "–ï–∂–µ–º–µ—Å—è—á–Ω–æ", "–ï–∂–µ–≥–æ–¥–Ω–æ")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, f"*–ü–æ–≥–∞—à–µ–Ω–∏–µ ‚Ññ{payment_num}*\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, lambda m: process_extra_payment_frequency_step(m, payment_num))
    except ValueError as e:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, str(e) if str(e) else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=markup)
        bot.register_next_step_handler(msg, lambda m: process_extra_payment_date_step(m, payment_num))

@text_only_handler
def process_extra_payment_frequency_step(message, payment_num):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    frequency = message.text.strip()
    if frequency not in ["–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ", "–ï–∂–µ–º–µ—Å—è—á–Ω–æ", "–ï–∂–µ–≥–æ–¥–Ω–æ"]:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ, –µ–∂–µ–º–µ—Å—è—á–Ω–æ –∏–ª–∏ –µ–∂–µ–≥–æ–¥–Ω–æ", reply_markup=markup)
        bot.register_next_step_handler(msg, lambda m: process_extra_payment_frequency_step(m, payment_num))
        return
    
    user_data[user_id]['extra_payments'][payment_num-1]['frequency'] = frequency
    markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    markup.add("–°—Ä–æ–∫", "–°—É–º–º–∞")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, f"*–ü–æ–≥–∞—à–µ–Ω–∏–µ ‚Ññ{payment_num}*\n–ß—Ç–æ —É–º–µ–Ω—å—à–∞—Ç—å?", reply_markup=markup, parse_mode='Markdown')
    bot.register_next_step_handler(msg, lambda m: process_extra_payment_target_step(m, payment_num))

@text_only_handler
def process_extra_payment_target_step(message, payment_num):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    target = message.text.strip()
    if target not in ["–°—Ä–æ–∫", "–°—É–º–º–∞"]:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∏–ª–∏ —Å—É–º–º–∞", reply_markup=markup)
        bot.register_next_step_handler(msg, lambda m: process_extra_payment_target_step(m, payment_num))
        return
    
    user_data[user_id]['extra_payments'][payment_num-1]['target'] = target
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, f"*–ü–æ–≥–∞—à–µ–Ω–∏–µ ‚Ññ{payment_num}*\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–≥–∞—à–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:", reply_markup=markup, parse_mode='Markdown')
    bot.register_next_step_handler(msg, lambda m: process_extra_payment_amount_step(m, payment_num))

@text_only_handler
def process_extra_payment_amount_step(message, payment_num):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    user_id = message.from_user.id
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
        user_data[user_id]['extra_payments'][payment_num-1]['amount'] = amount
        process_extra_payment_info(message, payment_num + 1)
    except ValueError as e:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(message.chat.id, str(e) if str(e) else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=markup)
        bot.register_next_step_handler(msg, lambda m: process_extra_payment_amount_step(m, payment_num))

@text_only_handler
def calculate_loan(message):
    user_id = message.from_user.id
    data = user_data[user_id]
    
    principal = data['car_price'] - data['down_payment']
    months = data['loan_term']
    monthly_rate = data['interest_rate'] / 12 / 100  
    
    payment_schedule = []
    total_interest = 0
    total_payment = 0
    monthly_payment = 0
    
    extra_payments = []
    if data.get('has_extra_payments', False):
        for extra in data['extra_payments']:
            payment_date = extra['date']
            amount = extra['amount']
            frequency = extra['frequency']
            target = extra['target']
            
            if frequency == "–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ":
                extra_payments.append({'date': payment_date, 'amount': amount, 'target': target})
            elif frequency == "–ï–∂–µ–º–µ—Å—è—á–Ω–æ":
                current_date = payment_date
                end_date = data['loan_date'] + timedelta(days=30 * months)
                while current_date <= end_date:
                    extra_payments.append({'date': current_date, 'amount': amount, 'target': target})
                    current_date += timedelta(days=30)
            elif frequency == "–ï–∂–µ–≥–æ–¥–Ω–æ":
                current_date = payment_date
                end_date = data['loan_date'] + timedelta(days=30 * months)
                while current_date <= end_date:
                    extra_payments.append({'date': current_date, 'amount': amount, 'target': target})
                    current_date += timedelta(days=365)
        extra_payments.sort(key=lambda x: x['date'])

    remaining_principal = principal
    start_date = data['loan_date']
    current_month = 0
    extra_payment_index = 0
    
    if data['payment_scheme'] == "–†–∞–≤–Ω—ã–º–∏ –¥–æ–ª—è–º–∏":
        monthly_payment = (principal * monthly_rate * (1 + monthly_rate) ** months) / ((1 + monthly_rate) ** months - 1)
        
        while remaining_principal > 0 and current_month < months:
            payment_date = start_date + timedelta(days=30 * current_month)
            
            extra_amount = 0
            extra_target = None
            while (extra_payment_index < len(extra_payments) and 
                   extra_payments[extra_payment_index]['date'].date() <= payment_date.date()):
                extra_amount += extra_payments[extra_payment_index]['amount']
                extra_target = extra_payments[extra_payment_index]['target']
                extra_payment_index += 1
            
            interest_payment = remaining_principal * monthly_rate
            principal_payment = monthly_payment - interest_payment
            
            if extra_amount > 0:
                if extra_target == "–°—É–º–º–∞":
                    adjusted_payment = monthly_payment - extra_amount
                    if adjusted_payment < 0:
                        extra_amount = monthly_payment
                        adjusted_payment = 0
                    principal_payment += extra_amount
                else:  
                    remaining_principal -= extra_amount
                    remaining_months = months - current_month - 1
                    if remaining_months > 0 and remaining_principal > 0:
                        monthly_payment = (remaining_principal * monthly_rate * (1 + monthly_rate) ** remaining_months) / ((1 + monthly_rate) ** remaining_months - 1)
                    else:
                        monthly_payment = 0
            
            total_monthly_payment = monthly_payment
            if total_monthly_payment > remaining_principal + interest_payment:
                total_monthly_payment = remaining_principal + interest_payment
                principal_payment = remaining_principal
            
            remaining_principal -= principal_payment
            if remaining_principal < 0:
                remaining_principal = 0
            
            total_interest += interest_payment
            total_payment += total_monthly_payment
            
            payment_schedule.append({
                'date': payment_date.strftime("%d.%m.%Y"),
                'remaining_principal': remaining_principal,
                'interest_payment': interest_payment,
                'principal_payment': principal_payment,
                'total_payment': total_monthly_payment
            })
            
            current_month += 1
            if monthly_payment == 0:
                break
    
    else: 
        monthly_principal = principal / months
        
        while remaining_principal > 0 and current_month < months:
            payment_date = start_date + timedelta(days=30 * current_month)
            
            extra_amount = 0
            extra_target = None
            while (extra_payment_index < len(extra_payments) and 
                   extra_payments[extra_payment_index]['date'].date() <= payment_date.date()):
                extra_amount += extra_payments[extra_payment_index]['amount']
                extra_target = extra_payments[extra_payment_index]['target']
                extra_payment_index += 1
            
            interest_payment = remaining_principal * monthly_rate
            principal_payment = monthly_principal
            
            if extra_amount > 0:
                if extra_target == "–°—É–º–º–∞":
                    principal_payment += extra_amount
                else:  
                    remaining_principal -= extra_amount
                    remaining_months = months - current_month - 1
                    if remaining_months > 0 and remaining_principal > 0:
                        monthly_principal = remaining_principal / remaining_months
                    else:
                        monthly_principal = 0
                    principal_payment = monthly_principal
            
            total_monthly_payment = principal_payment + interest_payment
            remaining_principal -= principal_payment
            if remaining_principal < 0:
                remaining_principal = 0
            
            total_interest += interest_payment
            total_payment += total_monthly_payment
            
            payment_schedule.append({
                'date': payment_date.strftime("%d.%m.%Y"),
                'remaining_principal': remaining_principal,
                'interest_payment': interest_payment,
                'principal_payment': principal_payment,
                'total_payment': total_monthly_payment
            })
            
            current_month += 1
            if monthly_principal == 0:
                break

    timestamp_display = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
    result_message = (
        f"*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç—É –Ω–∞ {timestamp_display}*\n\n"
        f"‚ú® *–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂:*\n"
        f"{monthly_payment if data['payment_scheme'] == '–†–∞–≤–Ω—ã–º–∏ –¥–æ–ª—è–º–∏' else payment_schedule[0]['total_payment']:,.2f} ‚ÇΩ\n\n"
        f"üèõÔ∏è *–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞:*\n"
        f"{principal:,.2f} ‚ÇΩ\n\n"
        f"üí∏ *–°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤:*\n"
        f"{total_interest:,.2f} ‚ÇΩ\n\n"
        f"üí∞ *–û–±—â–∞—è –≤—ã–ø–ª–∞—Ç–∞:*\n"
        f"{total_payment:,.2f} ‚ÇΩ\n\n"
        f"–û–∂–∏–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –≤—ã–ø–ª–∞—Ç –ø–æ –∫—Ä–µ–¥–∏—Ç—É..."
    )
    
    bot.send_message(message.chat.id, result_message, parse_mode='Markdown')
    
    timestamp = datetime.now().strftime("%d_%m_%Y_%H_%M")
    excel_path = EXCEL_PATH_TEMPLATE.format(user_id=user_id, timestamp=timestamp)
    
    os.makedirs(os.path.dirname(excel_path), exist_ok=True)
    save_to_excel(user_id, principal, total_interest, total_payment, payment_schedule, excel_path, timestamp_display)
    
    save_credit_calculation_to_history(user_id, principal, total_interest, total_payment, payment_schedule, timestamp_display)
    
    with open(excel_path, 'rb') as file:
        bot.send_document(message.chat.id, file, caption="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤—ã–ø–ª–∞—Ç –ø–æ –∫—Ä–µ–¥–∏—Ç—É")
    
    del user_data[user_id]
    view_autokredit_calc(message, show_description=False)

def save_to_excel(user_id, principal, total_interest, total_payment, payment_schedule, excel_path, timestamp_display):
    user_id_int = int(user_id)  
    workbook = openpyxl.Workbook()
    sheet = workbook.active
    
    sheet['A1'] = f"–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—ã–ø–ª–∞—Ç –ø–æ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç—É –Ω–∞ –¥–∞—Ç—É {timestamp_display}"
    sheet['A1'].font = Font(bold=True)
    sheet['A1'].alignment = Alignment(horizontal='center', vertical='center')
    sheet.merge_cells('A1:E1')
    
    sheet['A3'] = "–°—É–º–º–∞"
    sheet['B3'] = "–°—Ä–æ–∫"
    sheet['C3'] = "–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞"
    sheet['D3'] = "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç–∞"
    for col in ['A3', 'B3', 'C3', 'D3']:
        sheet[col].font = Font(bold=True)
        sheet[col].alignment = Alignment(horizontal='center', vertical='center')
    
    sheet['A4'] = f"{user_data[user_id_int]['car_price']:,.2f} —Ä—É–±.".replace(',', ' ')
    sheet['B4'] = f"{user_data[user_id_int]['loan_term']} –º–µ—Å"
    sheet['C4'] = f"{user_data[user_id_int]['interest_rate'] * 100:.2f}%"
    sheet['D4'] = f"{total_interest:,.2f} —Ä—É–±.".replace(',', ' ')
    for col in ['A4', 'B4', 'C4', 'D4']:
        sheet[col].alignment = Alignment(horizontal='center', vertical='center')
    
    thin_border = Border(
        left=Side(style='thin', color='000000'),
        right=Side(style='thin', color='000000'),
        top=Side(style='thin', color='000000'),
        bottom=Side(style='thin', color='000000')
    )
    light_green_fill = PatternFill(start_color='CCFFCC', end_color='CCFFCC', fill_type='solid')
    yellow_fill = PatternFill(start_color='FFFF99', end_color='FFFF99', fill_type='solid')
    
    headers = ["–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞", "–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞", "–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ %", "–ü–ª–∞—Ç–µ–∂ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–ª–≥", "–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞"]
    for col, header in enumerate(headers, 1):
        cell = sheet.cell(row=5, column=col)
        cell.value = header
        cell.font = Font(bold=True)
        cell.alignment = Alignment(horizontal='center', vertical='center')
        cell.border = thin_border
    
    for row, payment in enumerate(payment_schedule, 6):
        sheet.cell(row=row, column=1).value = payment['date']
        sheet.cell(row=row, column=2).value = f"{payment['remaining_principal']:,.2f}".replace(',', ' ')
        sheet.cell(row=row, column=3).value = f"{payment['interest_payment']:,.2f}".replace(',', ' ')
        sheet.cell(row=row, column=4).value = f"{payment['principal_payment']:,.2f}".replace(',', ' ')
        sheet.cell(row=row, column=5).value = f"{payment['total_payment']:,.2f}".replace(',', ' ')
        
        for col in range(1, 6):
            cell = sheet.cell(row=row, column=col)
            cell.alignment = Alignment(horizontal='center', vertical='center')
            cell.fill = light_green_fill
            cell.border = thin_border
    
    row = len(payment_schedule) + 7
    sheet.cell(row=row, column=1).value = "–ò—Ç–æ–≥–æ:"
    sheet.cell(row=row, column=3).value = f"{total_interest:,.2f}".replace(',', ' ')
    sheet.cell(row=row, column=5).value = f"{total_payment:,.2f}".replace(',', ' ')
    for col in [1, 3, 5]:
        cell = sheet.cell(row=row, column=col)
        cell.font = Font(bold=True)
        cell.alignment = Alignment(horizontal='center', vertical='center')
        cell.fill = yellow_fill
        cell.border = thin_border
    
    for col_idx in range(1, 6):
        column_letter = openpyxl.utils.get_column_letter(col_idx)
        max_length = 0
        for row in range(1, sheet.max_row + 1):
            cell = sheet.cell(row=row, column=col_idx)
            if isinstance(cell, openpyxl.cell.cell.MergedCell):
                continue
            try:
                cell_value = str(cell.value)
                if len(cell_value) > max_length:
                    max_length = len(cell_value)
            except:
                pass
        adjusted_width = (max_length + 2) * 1.2
        sheet.column_dimensions[column_letter].width = adjusted_width
    
    workbook.save(excel_path)

def save_credit_calculation_to_history(user_id, principal, total_interest, total_payment, payment_schedule, timestamp_display):
    user_id_int = int(user_id) 
    user_id_str = str(user_id)  
    username = user_data[user_id_int].get('username', 'unknown')
    
    calculation_data = {
        'car_price': user_data[user_id_int]['car_price'],
        'down_payment': user_data[user_id_int]['down_payment'],
        'loan_term': user_data[user_id_int]['loan_term'],
        'interest_rate': user_data[user_id_int]['interest_rate'] * 100,
        'payment_scheme': user_data[user_id_int]['payment_scheme'],
        'has_extra_payments': user_data[user_id_int]['has_extra_payments'],
        'loan_date': user_data[user_id_int]['loan_date'].strftime("%d.%m.%Y"),
        'principal': principal,
        'total_interest': total_interest,
        'total_payment': total_payment,
        'timestamp': timestamp_display
    }
    
    if user_data[user_id_int]['has_extra_payments']:
        calculation_data['extra_payments'] = [
            {**ep, 'date': ep['date'].strftime("%d.%m.%Y")} 
            for ep in user_data[user_id_int]['extra_payments']
        ]
    
    if user_id_str not in user_history_kredit:
        user_history_kredit[user_id_str] = {
            'username': username,
            'autokredit_calculations': []
        }
    elif 'autokredit_calculations' not in user_history_kredit[user_id_str]:
        user_history_kredit[user_id_str]['autokredit_calculations'] = []
    
    user_history_kredit[user_id_str]['autokredit_calculations'].append(calculation_data)
    
    if not KREDIT_USERS_PATH.endswith('kredit_users.json'):
        raise ValueError("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–∞ –≤ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª!")
    
    save_user_history_kredit()

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ê–í–¢–û–ö–†–ï–î–ò–¢ (–ø—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤")
@check_function_state_decorator('–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤')
@track_usage('–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_view_autokredit(message):
    user_id = str(message.from_user.id)
    if user_id not in user_history_kredit or 'autokredit_calculations' not in user_history_kredit[user_id] or not user_history_kredit[user_id]['autokredit_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤!")
        view_autokredit_calc(message, show_description=False)
        return
    view_autokredit_calculations(message)

@text_only_handler
def view_autokredit_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_kredit or 'autokredit_calculations' not in user_history_kredit[user_id] or not user_history_kredit[user_id]['autokredit_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤!")
        view_autokredit_calc(message, show_description=False)
        return

    calculations = user_history_kredit[user_id]['autokredit_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí *‚Ññ{i}.* {timestamp}\n"

    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_view_autokredit_selection)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)

@text_only_handler
def process_view_autokredit_selection(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    calculations = user_history_kredit.get(user_id, {}).get('autokredit_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤!")
        view_autokredit_calc(message, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_view_autokredit_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        for index in valid_indices:
            calc = calculations[index]
            result_message = (
                f"*üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç—É ‚Ññ{index + 1}:*\n\n"
                f"*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
                f"üìÖ *–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:* {calc['loan_date']}\n"
                f"üöó *–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ:* {calc['car_price']:,.2f} ‚ÇΩ\n"
                f"üí∞ *–ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂:* {calc['down_payment']:,.2f} ‚ÇΩ\n"
                f"‚è≥ *–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞:* {calc['loan_term']} –º–µ—Å.\n"
                f"üìà *–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞:* {calc['interest_rate']:.2f}%\n"
                f"üìã *–°—Ö–µ–º–∞ –æ–ø–ª–∞—Ç—ã:* {calc['payment_scheme']}\n"
                f"üí∏ *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≥–∞—à–µ–Ω–∏—è:* {'–î–∞' if calc['has_extra_payments'] else '–ù–µ—Ç'}\n"
            )

            if calc['has_extra_payments']:
                result_message += "\n*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≥–∞—à–µ–Ω–∏—è:*\n"
                for i, extra in enumerate(calc['extra_payments'], 1):
                    result_message += (
                        f"\n*–ü–æ–≥–∞—à–µ–Ω–∏–µ ‚Ññ{i}:*\n"
                        f"üìÖ *–î–∞—Ç–∞:* {extra['date']}\n"
                        f"üí∞ *–°—É–º–º–∞:* {extra['amount']:,.2f} ‚ÇΩ\n"
                        f"üîÑ *–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:* {extra['frequency']}\n"
                        f"üéØ *–¶–µ–ª—å:* {extra['target']}\n"
                    )

            result_message += (
                f"\n*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç:*\n\n"
                f"üèõÔ∏è *–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞:* {calc['principal']:,.2f} ‚ÇΩ\n"
                f"üí∏ *–°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤:* {calc['total_interest']:,.2f} ‚ÇΩ\n"
                f"üí∞ *–û–±—â–∞—è –≤—ã–ø–ª–∞—Ç–∞:* {calc['total_payment']:,.2f} ‚ÇΩ\n"
                f"üïí *–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞:* {calc['timestamp']}"
            )

            bot.send_message(chat_id, result_message, parse_mode='Markdown')

            timestamp = calc['timestamp'].replace(' –≤ ', '_').replace('.', '_').replace(':', '_')
            excel_path = EXCEL_PATH_TEMPLATE.format(user_id=user_id, timestamp=timestamp)
            if os.path.exists(excel_path):
                with open(excel_path, 'rb') as file:
                    bot.send_document(chat_id, file, caption=f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤—ã–ø–ª–∞—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ‚Ññ{index + 1}")
            else:
                bot.send_message(chat_id, "‚ùå Excel-—Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        view_autokredit_calc(message, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_autokredit_selection)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ê–í–¢–û–ö–†–ï–î–ò–¢ (—É–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤")
@check_function_state_decorator('–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤')
@track_usage('–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_delete_autokredit(message):
    user_id = str(message.from_user.id)
    if user_id not in user_history_kredit or 'autokredit_calculations' not in user_history_kredit[user_id] or not user_history_kredit[user_id]['autokredit_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤!")
        view_autokredit_calc(message, show_description=False)
        return
    delete_autokredit_calculations(message)

@text_only_handler
def delete_autokredit_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_kredit or 'autokredit_calculations' not in user_history_kredit[user_id] or not user_history_kredit[user_id]['autokredit_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤!")
        view_autokredit_calc(message, show_description=False)
        return

    calculations = user_history_kredit[user_id]['autokredit_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí *‚Ññ{i}.* {timestamp}\n"

    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_delete_autokredit_selection)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤:", reply_markup=markup)

@text_only_handler
def process_delete_autokredit_selection(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç":
        view_autokredit_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    calculations = user_history_kredit.get(user_id, {}).get('autokredit_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤!")
        view_autokredit_calc(message, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_delete_autokredit_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        valid_indices.sort(reverse=True)
        for index in valid_indices:
            calc = calculations[index]
            timestamp = calc['timestamp'].replace(' –≤ ', '_').replace('.', '_').replace(':', '_')
            excel_path = EXCEL_PATH_TEMPLATE.format(user_id=user_id, timestamp=timestamp)
            if os.path.exists(excel_path):
                os.remove(excel_path)
            del calculations[index]

        save_user_history_kredit()
        bot.send_message(chat_id, "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
        view_autokredit_calc(message, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup)
        bot.register_next_step_handler(msg, process_delete_autokredit_selection)