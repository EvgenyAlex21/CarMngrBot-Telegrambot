from core.imports import wraps, telebot, types, os, json, re, requests, datetime, timedelta, ReplyKeyboardMarkup, ReplyKeyboardRemove, pd, load_workbook, Alignment, Border, Side, Font, PatternFill, openpyxl
from core.bot_instance import bot, BASE_DIR
from handlers.user.user_main_menu import return_to_menu
from handlers.user.calculators.calculators_main import return_to_calculators
from ..utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha, check_function_state_decorator, track_usage, check_subscription
)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ù–ê–õ–û–ì --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ù–∞–ª–æ–≥")
@check_function_state_decorator('–ù–∞–ª–æ–≥')
@track_usage('–ù–∞–ª–æ–≥')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_nalog_calc(message, show_description=True):
    global stored_message
    stored_message = message

    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞—Å—á–µ—Ç—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –Ω–∞–ª–æ–≥–∞*\n\n"
        "üìå *–†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–∞:*\n"
        "–†–∞—Å—á–µ—Ç –≤–µ–¥–µ—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º - *—Ä–µ–≥–∏–æ–Ω, —Ç–∏–ø –¢–°, –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –≤–ª–∞–¥–µ–Ω–∏—è, –Ω–∞–ª–∏—á–∏–µ –ª—å–≥–æ—Ç, —Å—Ç–æ–∏–º–æ—Å—Ç—å –¢–° (–¥–ª—è –∞–≤—Ç–æ –¥–æ—Ä–æ–∂–µ 10 –º–ª–Ω —Ä—É–±.)*\n\n"
        "_P.S. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–µ–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞, —Å–ª–µ–¥—É–π—Ç–µ –ø–æ —Ñ–æ—Ä–º—É–ª–µ:_\n"
        "_–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞ (—Ä—É–±.) = –Ω–∞–ª–æ–≥–æ–≤–∞—è –±–∞–∑–∞ (–ª.—Å.) √ó —Å—Ç–∞–≤–∫–∞ (—Ä—É–±.) √ó (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤ –≤–ª–∞–¥–µ–Ω–∏—è / 12 –º–µ—Å—è—Ü–µ–≤)_\n\n"
        "üìå *–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ª–æ–≥–æ–≤:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n"
        "üìå *–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—á–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã"
    )

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–ª–æ–≥', '–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ª–æ–≥–æ–≤', '–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    if show_description:
        bot.send_message(message.chat.id, description, parse_mode='Markdown')

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

NALOG_JSON_PATH = os.path.join(BASE_DIR, 'files', 'files_for_calc', 'files_for_nalog', 'nalog.json')
USER_HISTORY_PATH_NALOG = os.path.join(BASE_DIR, 'data', 'user', 'calculators', 'nalog', 'nalog_users.json')
PERECHEN_AUTO_PATH = os.path.join(BASE_DIR, 'files', 'files_for_calc', 'files_for_nalog', 'auto_10mln_rub_2025.json')
TRANSPORT_TAX_BASE_PATH = os.path.join(BASE_DIR, 'files', 'files_for_calc', 'files_for_nalog', 'transport_tax_{year}.json')
NALOG_EXCEL_DIR = os.path.join(BASE_DIR, 'data', 'user', 'calculators', 'nalog', 'excel')

def ensure_path_and_file(file_path):
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    if not os.path.exists(file_path):
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump({}, f, ensure_ascii=False, indent=2)

ensure_path_and_file(NALOG_JSON_PATH)
ensure_path_and_file(USER_HISTORY_PATH_NALOG)
ensure_path_and_file(PERECHEN_AUTO_PATH)
ensure_path_and_file(TRANSPORT_TAX_BASE_PATH.format(year=2025))
os.makedirs(NALOG_EXCEL_DIR, exist_ok=True)

nalog_data = {}
user_history_nalog = {}
user_data = {}
expensive_cars = []
tax_rates = {}
available_years = [2021, 2022, 2023, 2024, 2025]

def load_nalog_data():
    global nalog_data
    try:
        with open(NALOG_JSON_PATH, 'r', encoding='utf-8') as file:
            nalog_data = json.load(file)
    except Exception as e:
        pass

def load_user_history_nalog():
    global user_history_nalog
    try:
        if os.path.exists(USER_HISTORY_PATH_NALOG):
            with open(USER_HISTORY_PATH_NALOG, 'r', encoding='utf-8') as db_file:
                user_history_nalog = json.load(db_file)
        else:
            user_history_nalog = {}
            save_user_history_nalog()
    except Exception as e:
        user_history_nalog = {}

def save_user_history_nalog():
    try:
        with open(USER_HISTORY_PATH_NALOG, 'w', encoding='utf-8') as db_file:
            json.dump(user_history_nalog, db_file, ensure_ascii=False, indent=2)
    except Exception as e:
        pass

def load_expensive_cars():
    global expensive_cars
    try:
        with open(PERECHEN_AUTO_PATH, 'r', encoding='utf-8') as file:
            data = json.load(file) 
            car_data = []
            for section in data:
                cost_range = "10-15" if "10 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –¥–æ 15 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ä—É–±–ª–µ–π" in section['subtitle'] else "15+"
                for car in section['cars']:
                    car_data.append({
                        "brand": car['brand'],
                        "model": car['model'],
                        "engine_type": car['engine_type'],
                        "engine_volume": str(car['engine_displacement']) if car['engine_displacement'] is not None else "N/A",
                        "years_passed": car['age'],
                        "cost_range": cost_range
                    })
            expensive_cars = car_data
    except json.JSONDecodeError as e:
        pass
    except Exception as e:
        pass

def load_tax_rates(year):
    global tax_rates
    try:
        tax_file_path = TRANSPORT_TAX_BASE_PATH.format(year=year)
        if not os.path.exists(tax_file_path):
            raise FileNotFoundError(f"–§–∞–π–ª {tax_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        with open(tax_file_path, 'r', encoding='utf-8') as file:
            tax_rates = json.load(file)
    except Exception as e:
        tax_rates = {}

load_nalog_data()
load_user_history_nalog()
load_expensive_cars()
load_tax_rates(2025)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ù–ê–õ–û–ì (—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–ª–æ–≥) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–ª–æ–≥")
@check_function_state_decorator('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–ª–æ–≥')
@track_usage('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–ª–æ–≥')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def start_tax_calculation(message):
    if not nalog_data:
        bot.send_message(message.chat.id, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    user_id = message.from_user.id
    user_data[user_id] = {'user_id': user_id, 'username': message.from_user.username or 'unknown'}

    markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    regions = list(tax_rates.keys())
    for i in range(0, len(regions), 2):
        if i + 1 < len(regions):
            markup.row(regions[i], regions[i + 1])
        else:
            markup.add(regions[i])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_nalog_region_step)

@text_only_handler
def process_nalog_region_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    region_name = message.text.strip()
    if region_name not in tax_rates:
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        regions = list(tax_rates.keys())
        for i in range(0, len(regions), 2):
            if i + 1 < len(regions):
                markup.row(regions[i], regions[i + 1])
            else:
                markup.add(regions[i])
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_nalog_region_step)
        return

    user_data[user_id]['region'] = region_name

    markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    years = [str(year) for year in available_years]
    for i in range(0, len(years), 2):
        if i + 1 < len(years):
            markup.row(years[i], years[i + 1])
        else:
            markup.add(years[i])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –¥–ª—è –Ω–∞–ª–æ–≥–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_year_step)

@text_only_handler
def process_year_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        year = int(message.text)
        if year not in available_years:
            raise ValueError
        user_data[user_id]['year'] = year
        load_tax_rates(year)
        if not tax_rates:
            bot.send_message(message.chat.id, f"‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞ `{year}` –≥–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!", parse_mode='Markdown')
            new_message_for_nalog = message
            new_message_for_nalog.text = "–ù–∞–ª–æ–≥"  
            view_nalog_calc(new_message_for_nalog, show_description=False)
            return
    except ValueError:
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        years = [str(year) for year in available_years]
        for i in range(0, len(years), 2):
            if i + 1 < len(years):
                markup.row(years[i], years[i + 1])
            else:
                markup.add(years[i])
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞: {', '.join(years)}", reply_markup=markup)
        bot.register_next_step_handler(msg, process_year_step)
        return

    markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    months = [str(i) for i in range(1, 13)]
    for i in range(0, len(months), 2):
        if i + 1 < len(months):
            markup.row(months[i], months[i + 1])
        else:
            markup.add(months[i])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –≤–ª–∞–¥–µ–Ω–∏—è –¢–°:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_ownership_months_step)

@text_only_handler
def process_ownership_months_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        months = int(message.text)
        if months < 1 or months > 12:
            raise ValueError
        user_data[user_id]['ownership_months'] = months
    except ValueError:
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        months = [str(i) for i in range(1, 13)]
        for i in range(0, len(months), 2):
            if i + 1 < len(months):
                markup.row(months[i], months[i + 1])
            else:
                markup.add(months[i])
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12", reply_markup=markup)
        bot.register_next_step_handler(msg, process_ownership_months_step)
        return

    markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    vehicle_types = list(tax_rates[user_data[user_id]['region']].keys())
    for i in range(0, len(vehicle_types), 2):
        if i + 1 < len(vehicle_types):
            markup.row(vehicle_types[i], vehicle_types[i + 1])
        else:
            markup.add(vehicle_types[i])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–í–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_vehicle_type_nalog_step)

@text_only_handler
def process_vehicle_type_nalog_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    vehicle_type = message.text.strip()
    if vehicle_type not in tax_rates[user_data[user_id]['region']]:
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        vehicle_types = list(tax_rates[user_data[user_id]['region']].keys())
        for i in range(0, len(vehicle_types), 2):
            if i + 1 < len(vehicle_types):
                markup.row(vehicle_types[i], vehicle_types[i + 1])
            else:
                markup.add(vehicle_types[i])
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¢–°!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_vehicle_type_nalog_step)
        return

    user_data[user_id]['vehicle_type'] = vehicle_type
    user_data[user_id]['metric'] = "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)"

    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.):", reply_markup=markup)
    bot.register_next_step_handler(msg, process_metric_value_step)

@text_only_handler
def process_metric_value_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        value = float(message.text.replace(',', '.'))
        user_data[user_id]['metric_value'] = value
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        bot.register_next_step_handler(msg, process_metric_value_step)
        return

    if user_data[user_id]['vehicle_type'] == "–õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏":
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–î–∞", "–ù–µ—Ç")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–¢–° —Å—Ç–æ–∏—Ç –±–æ–ª—å—à–µ 10 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ä—É–±–ª–µ–π?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_expensive_car_step)
    else:
        proceed_to_benefits(message)

@text_only_handler
def process_expensive_car_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    if message.text not in ["–î–∞", "–ù–µ—Ç"]:
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–î–∞", "–ù–µ—Ç")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_expensive_car_step)
        return

    user_data[user_id]['is_expensive'] = message.text == "–î–∞"

    if user_data[user_id]['is_expensive']:
        brands = sorted(set(car['brand'] for car in expensive_cars))
        brand_list = "\n".join(f"üìú ‚Ññ{i+1}. {brand}" for i, brand in enumerate(brands))
        user_data[user_id]['brands'] = brands

        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, f"*–ú–∞—Ä–∫–∞ –¢–°:*\n\n{brand_list}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—Ä–∫–∏:", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_brand_step)
    else:
        proceed_to_benefits(message)

@text_only_handler
def process_brand_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        brand_idx = int(message.text) - 1
        brands = user_data[user_id]['brands']
        if brand_idx < 0 or brand_idx >= len(brands):
            raise ValueError
        selected_brand = brands[brand_idx]
        user_data[user_id]['selected_brand'] = selected_brand

        models = sorted(set(car['model'] for car in expensive_cars if car['brand'] == selected_brand))
        model_list = "\n".join(f"‚ú® ‚Ññ{i+1}. {model}" for i, model in enumerate(models))
        user_data[user_id]['models'] = models

        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, f"*–ú–æ–¥–µ–ª—å –¢–°:*\n\n{model_list}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏:", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_model_step)
    except ValueError:
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(user_data[user_id]['brands'])}", reply_markup=markup)
        bot.register_next_step_handler(msg, process_brand_step)

@text_only_handler
def process_model_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        model_idx = int(message.text) - 1
        models = user_data[user_id]['models']
        if model_idx < 0 or model_idx >= len(models):
            raise ValueError
        selected_model = models[model_idx]
        user_data[user_id]['selected_model'] = selected_model

        selected_brand = user_data[user_id]['selected_brand']
        years_passed_list = sorted(set(car['years_passed'] for car in expensive_cars if car['brand'] == selected_brand and car['model'] == selected_model))
        years = []
        current_year = user_data[user_id]['year']
        for years_passed in years_passed_list:
            if "–æ—Ç" in years_passed and "–¥–æ" in years_passed:
                match = re.search(r'–æ—Ç (\d+) –¥–æ (\d+)', years_passed)
                if match:
                    start, end = map(int, match.groups())
                    for y in range(start, end + 1):
                        years.append(current_year - y)
            elif "–¥–æ" in years_passed:
                match = re.search(r'–¥–æ (\d+)', years_passed)
                if match:
                    end = int(match.group(1))
                    for y in range(0, end + 1):
                        years.append(current_year - y)
            else:
                match = re.search(r'(\d+)', years_passed)
                if match:
                    y = int(match.group(1))
                    years.append(current_year - y)
        years = sorted(set(years))
        user_data[user_id]['years'] = years
        year_list = "\n".join(f"üìÖ ‚Ññ{i+1}. {year}" for i, year in enumerate(years))

        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, f"*–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:*\n\n{year_list}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ–¥–∞:", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_year_of_manufacture_step)
    except ValueError:
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(user_data[user_id]['models'])}", reply_markup=markup)
        bot.register_next_step_handler(msg, process_model_step)

@text_only_handler
def process_year_of_manufacture_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return
    
    try:
        year_idx = int(message.text) - 1
        years = user_data[user_id]['years']
        if year_idx < 0 or year_idx >= len(years):
            raise ValueError
        selected_year = years[year_idx]
        user_data[user_id]['year_of_manufacture'] = selected_year
        proceed_to_benefits(message)
    except ValueError:
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(user_data[user_id]['years'])}", reply_markup=markup)
        bot.register_next_step_handler(msg, process_year_of_manufacture_step)

@text_only_handler
def proceed_to_benefits(message):
    user_id = message.from_user.id
    markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    benefits = ["–ù–µ—Ç", "–î–∞"]
    markup.add(*benefits)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–ò–º–µ—é –ª–∏ —è –ø—Ä–∞–≤–æ –Ω–∞ –ª—å–≥–æ—Ç—É?", reply_markup=markup)
    bot.register_next_step_handler(msg, process_benefits_step)

@text_only_handler
def process_benefits_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    benefit_desc = message.text.strip()
    if benefit_desc not in ["–ù–µ—Ç", "–î–∞"]:
        markup = ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        benefits = ["–ù–µ—Ç", "–î–∞"]
        markup.add(*benefits)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç", reply_markup=markup)
        bot.register_next_step_handler(msg, process_benefits_step)
        return

    user_data[user_id]['benefit'] = benefit_desc
    calculate_tax(message)

@text_only_handler
def calculate_tax(message):
    user_id_int = message.from_user.id  
    user_id_str = str(user_id_int)  
    data = user_data[user_id_int]

    tax_base = data['metric_value']
    region = data['region']
    vehicle_type = data['vehicle_type']
    rates = tax_rates[region][vehicle_type]

    rate = 0.0
    for condition, value in rates.items():
        if "–¥–æ" in condition:
            limit = float(condition.split()[1])
            if tax_base <= limit:
                rate = value
                break
        elif "—Å–≤—ã—à–µ" in condition:
            limit = float(condition.split()[1])
            if tax_base > limit:
                rate = value

    ownership_months = data['ownership_months']
    months_coefficient = ownership_months / 12
    benefit = data['benefit']
    benefit_coefficient = 1.0 if benefit == "–ù–µ—Ç" else 0.0
    increasing_coefficient = 1.0
    expensive_details = "–ù–µ—Ç"

    if data.get('is_expensive', False):
        years_passed = data['year'] - data['year_of_manufacture']
        if years_passed <= 3:
            increasing_coefficient = 3.0
            expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 3.0, –¥–æ 3 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {data['year_of_manufacture']})"
        elif years_passed <= 5:
            increasing_coefficient = 2.0
            expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 2.0, 3-5 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {data['year_of_manufacture']})"
        elif years_passed <= 10:
            increasing_coefficient = 1.5
            expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.5, 5-10 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {data['year_of_manufacture']})"

    tax = tax_base * rate * months_coefficient * increasing_coefficient * benefit_coefficient
    result_message = (
        f"*üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –Ω–∞–ª–æ–≥–∞*\n\n"
        f"*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
        f"üåç *–†–µ–≥–∏–æ–Ω:* {data['region']}\n"
        f"üìÖ *–ì–æ–¥:* {data['year']}\n"
        f"üöó *–¢–∏–ø –¢–°:* {data['vehicle_type']}\n"
        f"üí™ *–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:* {tax_base} –ª.—Å.\n"
        f"‚è≥ *–ú–µ—Å—è—Ü–µ–≤ –≤–ª–∞–¥–µ–Ω–∏—è:* {ownership_months}\n"
        f"üí∞ *–¢–° –¥–æ—Ä–æ–∂–µ 10 –º–ª–Ω —Ä—É–±.:* {expensive_details}\n"
        f"‚≠ê *–õ—å–≥–æ—Ç—ã:* {benefit}\n\n"
        f"*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç:*\n\n"
        f"üí∞ *–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞:* {tax:,.2f} —Ä—É–±.\n\n"
        f"*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞:*\n\n"
        f"üìè *–ù–∞–ª–æ–≥–æ–≤–∞—è –±–∞–∑–∞:* {tax_base} –ª.—Å.\n"
        f"üíµ *–°—Ç–∞–≤–∫–∞:* {rate} —Ä—É–±./–ª.—Å.\n"
        f"‚≠ê *–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è:* {months_coefficient:.2f} ({ownership_months}/12)\n"
        f"‚≠ê *–ü–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:* {increasing_coefficient}\n"
        f"‚≠ê *–õ—å–≥–æ—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:* {benefit_coefficient}"
    )

    timestamp = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
    calculation_data = {
        'region': data['region'],
        'year': data['year'],
        'vehicle_type': data['vehicle_type'],
        'engine_power': tax_base,
        'ownership_months': ownership_months,
        'is_expensive': data.get('is_expensive', False),
        'benefit': benefit,
        'tax': tax,
        'rate': rate,
        'months_coefficient': months_coefficient,
        'increasing_coefficient': increasing_coefficient,
        'benefit_coefficient': benefit_coefficient,
        'timestamp': timestamp
    }
    if data.get('is_expensive', False):
        calculation_data['year_of_manufacture'] = data['year_of_manufacture']
        calculation_data['selected_brand'] = data['selected_brand']
        calculation_data['selected_model'] = data['selected_model']

    if user_id_str not in user_history_nalog:
        user_history_nalog[user_id_str] = {
            'username': data.get('username', 'unknown'),
            'nalog_calculations': []
        }
    elif 'nalog_calculations' not in user_history_nalog[user_id_str]:
        user_history_nalog[user_id_str]['nalog_calculations'] = []

    user_history_nalog[user_id_str]['nalog_calculations'].append(calculation_data)
    
    if not USER_HISTORY_PATH_NALOG.endswith('nalog_users.json'):
        raise ValueError("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ª–æ–≥–∞ –≤ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª!")
    
    save_user_history_nalog()
    save_nalog_to_excel(user_id_str, calculation_data)

    bot.send_message(message.chat.id, result_message, parse_mode='Markdown', reply_markup=ReplyKeyboardRemove())
    
    del user_data[user_id_int]  
    new_message_for_nalog = message
    new_message_for_nalog.text = "–ù–∞–ª–æ–≥"  
    view_nalog_calc(new_message_for_nalog, show_description=False)

def save_nalog_to_excel(user_id, calculation):
    file_path = os.path.join(NALOG_EXCEL_DIR, f"{user_id}_nalog.xlsx")
    
    calculations = user_history_nalog.get(user_id, {}).get('nalog_calculations', [])
    
    columns = [
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
        "–†–µ–≥–∏–æ–Ω",
        "–ì–æ–¥",
        "–¢–∏–ø –¢–°",
        "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)",
        "–ú–µ—Å—è—Ü–µ–≤ –≤–ª–∞–¥–µ–Ω–∏—è",
        "–¢–° –¥–æ—Ä–æ–∂–µ 10 –º–ª–Ω —Ä—É–±.",
        "–ú–∞—Ä–∫–∞ –¢–°",
        "–ú–æ–¥–µ–ª—å –¢–°",
        "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞",
        "–õ—å–≥–æ—Ç—ã",
        "–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞ (—Ä—É–±.)",
        "–°—Ç–∞–≤–∫–∞ (—Ä—É–±./–ª.—Å.)",
        "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è",
        "–ü–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç",
        "–õ—å–≥–æ—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç"
    ]
    
    expensive_details = "–ù–µ—Ç"
    if calculation['is_expensive']:
        years_passed = calculation['year'] - calculation['year_of_manufacture']
        if years_passed <= 3:
            expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 3.0, –¥–æ 3 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {calculation['year_of_manufacture']})"
        elif years_passed <= 5:
            expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 2.0, 3-5 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {calculation['year_of_manufacture']})"
        elif years_passed <= 10:
            expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.5, 5-10 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {calculation['year_of_manufacture']})"

    new_calc_data = {
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": calculation['timestamp'],
        "–†–µ–≥–∏–æ–Ω": calculation['region'],
        "–ì–æ–¥": calculation['year'],
        "–¢–∏–ø –¢–°": calculation['vehicle_type'],
        "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)": calculation['engine_power'],
        "–ú–µ—Å—è—Ü–µ–≤ –≤–ª–∞–¥–µ–Ω–∏—è": calculation['ownership_months'],
        "–¢–° –¥–æ—Ä–æ–∂–µ 10 –º–ª–Ω —Ä—É–±.": expensive_details,
        "–ú–∞—Ä–∫–∞ –¢–°": calculation.get('selected_brand', ''),
        "–ú–æ–¥–µ–ª—å –¢–°": calculation.get('selected_model', ''),
        "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞": calculation.get('year_of_manufacture', ''),
        "–õ—å–≥–æ—Ç—ã": calculation['benefit'],
        "–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞ (—Ä—É–±.)": calculation['tax'],
        "–°—Ç–∞–≤–∫–∞ (—Ä—É–±./–ª.—Å.)": calculation['rate'],
        "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è": calculation['months_coefficient'],
        "–ü–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": calculation['increasing_coefficient'],
        "–õ—å–≥–æ—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": calculation['benefit_coefficient']
    }

    new_calc_df = pd.DataFrame([new_calc_data], columns=columns)
    
    if os.path.exists(file_path):
        existing_data = pd.read_excel(file_path).dropna(axis=1, how='all')
        existing_data = existing_data.reindex(columns=columns, fill_value=None)
        updated_data = pd.concat([existing_data, new_calc_df], ignore_index=True)
    else:
        updated_data = new_calc_df
    
    updated_data.to_excel(file_path, index=False)
    
    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows():
        for cell in row:
            cell.alignment = Alignment(horizontal="center", vertical="center")
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_col=worksheet.max_column-1, max_col=worksheet.max_column):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

def update_nalog_excel_file(user_id):
    file_path = os.path.join(NALOG_EXCEL_DIR, f"{user_id}_nalog.xlsx")
    calculations = user_history_nalog.get(user_id, {}).get('nalog_calculations', [])

    if not calculations:
        columns = [
            "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
            "–†–µ–≥–∏–æ–Ω",
            "–ì–æ–¥",
            "–¢–∏–ø –¢–°",
            "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)",
            "–ú–µ—Å—è—Ü–µ–≤ –≤–ª–∞–¥–µ–Ω–∏—è",
            "–¢–° –¥–æ—Ä–æ–∂–µ 10 –º–ª–Ω —Ä—É–±.",
            "–ú–∞—Ä–∫–∞ –¢–°",
            "–ú–æ–¥–µ–ª—å –¢–°",
            "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞",
            "–õ—å–≥–æ—Ç—ã",
            "–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞ (—Ä—É–±.)",
            "–°—Ç–∞–≤–∫–∞ (—Ä—É–±./–ª.—Å.)",
            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è",
            "–ü–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç",
            "–õ—å–≥–æ—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç"
        ]
        df = pd.DataFrame(columns=columns)
        df.to_excel(file_path, index=False)
        return

    columns = [
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
        "–†–µ–≥–∏–æ–Ω",
        "–ì–æ–¥",
        "–¢–∏–ø –¢–°",
        "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)",
        "–ú–µ—Å—è—Ü–µ–≤ –≤–ª–∞–¥–µ–Ω–∏—è",
        "–¢–° –¥–æ—Ä–æ–∂–µ 10 –º–ª–Ω —Ä—É–±.",
        "–ú–∞—Ä–∫–∞ –¢–°",
        "–ú–æ–¥–µ–ª—å –¢–°",
        "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞",
        "–õ—å–≥–æ—Ç—ã",
        "–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞ (—Ä—É–±.)",
        "–°—Ç–∞–≤–∫–∞ (—Ä—É–±./–ª.—Å.)",
        "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è",
        "–ü–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç",
        "–õ—å–≥–æ—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç"
    ]

    calc_records = []
    for calc in calculations:
        expensive_details = "–ù–µ—Ç"
        if calc['is_expensive']:
            years_passed = calc['year'] - calc['year_of_manufacture']
            if years_passed <= 3:
                expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 3.0, –¥–æ 3 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {calc['year_of_manufacture']})"
            elif years_passed <= 5:
                expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 2.0, 3-5 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {calc['year_of_manufacture']})"
            elif years_passed <= 10:
                expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.5, 5-10 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {calc['year_of_manufacture']})"

        calc_data = {
            "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": calc['timestamp'],
            "–†–µ–≥–∏–æ–Ω": calc['region'],
            "–ì–æ–¥": calc['year'],
            "–¢–∏–ø –¢–°": calc['vehicle_type'],
            "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)": calc['engine_power'],
            "–ú–µ—Å—è—Ü–µ–≤ –≤–ª–∞–¥–µ–Ω–∏—è": calc['ownership_months'],
            "–¢–° –¥–æ—Ä–æ–∂–µ 10 –º–ª–Ω —Ä—É–±.": expensive_details,
            "–ú–∞—Ä–∫–∞ –¢–°": calc.get('selected_brand', ''),
            "–ú–æ–¥–µ–ª—å –¢–°": calc.get('selected_model', ''),
            "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞": calc.get('year_of_manufacture', ''),
            "–õ—å–≥–æ—Ç—ã": calc['benefit'],
            "–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞ (—Ä—É–±.)": calc['tax'],
            "–°—Ç–∞–≤–∫–∞ (—Ä—É–±./–ª.—Å.)": calc['rate'],
            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è": calc['months_coefficient'],
            "–ü–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": calc['increasing_coefficient'],
            "–õ—å–≥–æ—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": calc['benefit_coefficient']
        }
        calc_records.append(calc_data)

    df = pd.DataFrame(calc_records, columns=columns)
    df.to_excel(file_path, index=False)

    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows(min_row=2):
        for cell in row:
            cell.alignment = Alignment(horizontal='center', vertical='center')
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_row=2, min_col=len(columns)-1, max_col=len(columns)):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ù–ê–õ–û–ì (–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ª–æ–≥–æ–≤) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ª–æ–≥–æ–≤")
@check_function_state_decorator('–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ª–æ–≥–æ–≤')
@track_usage('–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ª–æ–≥–æ–≤')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_view_nalog(message):
    user_id = str(message.from_user.id)
    if user_id not in user_history_nalog or 'nalog_calculations' not in user_history_nalog[user_id] or not user_history_nalog[user_id]['nalog_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞–ª–æ–≥–∞!")
        new_message_for_nalog = message
        new_message_for_nalog.text = "–ù–∞–ª–æ–≥"
        view_nalog_calc(new_message_for_nalog, show_description=False)
        return
    view_nalog_calculations(message)

@text_only_handler
def view_nalog_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_nalog or 'nalog_calculations' not in user_history_nalog[user_id] or not user_history_nalog[user_id]['nalog_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞–ª–æ–≥–∞!")
        new_message_for_nalog = message
        new_message_for_nalog.text = "–ù–∞–ª–æ–≥"
        view_nalog_calc(new_message_for_nalog, show_description=False)
        return

    calculations = user_history_nalog[user_id]['nalog_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞–ª–æ–≥–∞:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí *‚Ññ{i}.* {timestamp}\n"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ù–∞–ª–æ–≥ –≤ EXCEL')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ —à–∏–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_view_nalog_selection)

@text_only_handler
def process_view_nalog_selection(message):
    chat_id = message.chat.id 
    user_id = str(message.from_user.id)

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        new_message_for_nalog = message
        new_message_for_nalog.text = "–ù–∞–ª–æ–≥"
        view_nalog_calc(new_message_for_nalog, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return
    if message.text == "–ù–∞–ª–æ–≥ –≤ EXCEL":
        send_nalog_excel_file(message)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–ù–∞–ª–æ–≥ –≤ EXCEL')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_nalog_selection)
        return

    calculations = user_history_nalog.get(user_id, {}).get('nalog_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞–ª–æ–≥–∞!")
        new_message_for_nalog = message
        new_message_for_nalog.text = "–ù–∞–ª–æ–≥"
        view_nalog_calc(new_message_for_nalog, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–ù–∞–ª–æ–≥ –≤ EXCEL')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_view_nalog_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        for index in valid_indices:
            calc = calculations[index]
            expensive_details = "–ù–µ—Ç"
            if calc['is_expensive']:
                years_passed = calc['year'] - calc['year_of_manufacture']
                if years_passed <= 3:
                    expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 3.0, –¥–æ 3 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {calc['year_of_manufacture']})"
                elif years_passed <= 5:
                    expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 2.0, 3-5 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {calc['year_of_manufacture']})"
                elif years_passed <= 10:
                    expensive_details = f"–î–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.5, 5-10 –ª–µ—Ç —Å –≤—ã–ø—É—Å–∫–∞: {calc['year_of_manufacture']})"

            result_message = (
                f"*üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –Ω–∞–ª–æ–≥–∞ ‚Ññ{index + 1}*\n\n"
                f"*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
                f"üåç *–†–µ–≥–∏–æ–Ω:* {calc['region']}\n"
                f"üìÖ *–ì–æ–¥:* {calc['year']}\n"
                f"üöó *–¢–∏–ø –¢–°:* {calc['vehicle_type']}\n"
                f"üí™ *–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:* {calc['engine_power']} –ª.—Å.\n"
                f"‚è≥ *–ú–µ—Å—è—Ü–µ–≤ –≤–ª–∞–¥–µ–Ω–∏—è:* {calc['ownership_months']}\n"
                f"üí∞ *–¢–° –¥–æ—Ä–æ–∂–µ 10 –º–ª–Ω —Ä—É–±.:* {expensive_details}\n"
                f"‚≠ê *–õ—å–≥–æ—Ç—ã:* {calc['benefit']}\n\n"
                f"*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç:*\n\n"
                f"üí∞ *–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞:* {calc['tax']:,.2f} —Ä—É–±.\n\n"
                f"*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞:*\n\n"
                f"üìè *–ù–∞–ª–æ–≥–æ–≤–∞—è –±–∞–∑–∞:* {calc['engine_power']} –ª.—Å.\n"
                f"üíµ *–°—Ç–∞–≤–∫–∞:* {calc['rate']} —Ä—É–±./–ª.—Å.\n"
                f"‚≠ê *–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è:* {calc['months_coefficient']:.2f} ({calc['ownership_months']}/12)\n"
                f"‚≠ê *–ü–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:* {calc['increasing_coefficient']}\n"
                f"‚≠ê *–õ—å–≥–æ—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:* {calc['benefit_coefficient']}\n\n"
                f"üïí *–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞:* {calc['timestamp']}"
            )
            bot.send_message(chat_id, result_message, parse_mode='Markdown')

        new_message_for_nalog = message
        new_message_for_nalog.text = "–ù–∞–ª–æ–≥"
        view_nalog_calc(new_message_for_nalog, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–ù–∞–ª–æ–≥ –≤ EXCEL')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_nalog_selection)

@bot.message_handler(func=lambda message: message.text == "–ù–∞–ª–æ–≥ –≤ EXCEL")
@check_function_state_decorator('–ù–∞–ª–æ–≥ –≤ EXCEL')
@track_usage('–ù–∞–ª–æ–≥ –≤ EXCEL')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def send_nalog_excel_file(message):
    user_id = str(message.from_user.id)
    excel_file_path = os.path.join(NALOG_EXCEL_DIR, f"{user_id}_nalog.xlsx")

    if os.path.exists(excel_file_path):
        with open(excel_file_path, 'rb') as excel_file:
            bot.send_document(message.chat.id, excel_file)
    else:
        bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª Excel –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –Ω–∞–ª–æ–≥–∞")
    new_message_for_nalog = message
    new_message_for_nalog.text = "–ù–∞–ª–æ–≥"
    view_nalog_calc(new_message_for_nalog, show_description=False)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–ù–ê–õ–û–ì (—É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤")
@check_function_state_decorator('–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤')
@track_usage('–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_delete_nalog(message):
    user_id = str(message.from_user.id)
    if user_id not in user_history_nalog or 'nalog_calculations' not in user_history_nalog[user_id] or not user_history_nalog[user_id]['nalog_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞–ª–æ–≥–∞!")
        new_message_for_nalog = message
        new_message_for_nalog.text = "–ù–∞–ª–æ–≥"  
        view_nalog_calc(new_message_for_nalog, show_description=False)
        return
    delete_nalog_calculations(message)

@text_only_handler
def delete_nalog_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_nalog or 'nalog_calculations' not in user_history_nalog[user_id] or not user_history_nalog[user_id]['nalog_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞–ª–æ–≥–∞!")
        new_message_for_nalog = message
        new_message_for_nalog.text = "–ù–∞–ª–æ–≥"  
        view_nalog_calc(new_message_for_nalog, show_description=False)
        return

    calculations = user_history_nalog[user_id]['nalog_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞–ª–æ–≥–∞:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí *‚Ññ{i}.* {timestamp}\n"

    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_delete_nalog_selection)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤:", reply_markup=markup)

@text_only_handler
def process_delete_nalog_selection(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥":
        view_nalog_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    calculations = user_history_nalog.get(user_id, {}).get('nalog_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞–ª–æ–≥–∞!")
        new_message_for_nalog = message
        new_message_for_nalog.text = "–ù–∞–ª–æ–≥"  
        view_nalog_calc(new_message_for_nalog, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_delete_nalog_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        valid_indices.sort(reverse=True)
        for index in valid_indices:
            del calculations[index]

        save_user_history_nalog()
        update_nalog_excel_file(user_id)
        bot.send_message(chat_id, "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –Ω–∞–ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
        new_message_for_nalog = message
        new_message_for_nalog.text = "–ù–∞–ª–æ–≥"  
        view_nalog_calc(new_message_for_nalog, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup)
        bot.register_next_step_handler(msg, process_delete_nalog_selection)