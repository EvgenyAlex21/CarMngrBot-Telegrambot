from core.imports import wraps, telebot, types, os, json, re, datetime, timedelta, ReplyKeyboardMarkup, ReplyKeyboardRemove, pd, Workbook, load_workbook, Alignment, Border, Side, Font, PatternFill, openpyxl
from core.bot_instance import bot, BASE_DIR
from .calculators_main import return_to_calculators
from handlers.user.user_main_menu import return_to_menu
from ..utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha, check_function_state_decorator, track_usage, check_subscription
)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–û–°–ê–ì–û --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–û–°–ê–ì–û")
@check_function_state_decorator('–û–°–ê–ì–û')
@track_usage('–û–°–ê–ì–û')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def view_osago_calc(message, show_description=True):
    global stored_message
    stored_message = message

    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞—Å—á–µ—Ç—É –û–°–ê–ì–û*\n\n"
        "üìå *–†–∞—Å—á–µ—Ç –û–°–ê–ì–û:*\n"
        "–†–∞—Å—á–µ—Ç –≤–µ–¥–µ—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º - *—Ä–µ–≥–∏–æ–Ω, –º–æ—â–Ω–æ—Å—Ç—å –∞–≤—Ç–æ, –≤–æ–∑—Ä–∞—Å—Ç –∏ —Å—Ç–∞–∂ –≤–æ–¥–∏—Ç–µ–ª–µ–π, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤–∞—Ä–∏–π, —Ç–∏–ø –ø–æ–ª–∏—Å–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π/–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π), –ø–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è*\n\n"
        "_P.S. –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤. –¢–æ—á–Ω—ã–µ —Å—É–º–º—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!_\n\n"
        "üìå *–ü—Ä–æ—Å–º–æ—Ç—Ä –û–°–ê–ì–û:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n"
        "üìå *–£–¥–∞–ª–µ–Ω–∏–µ –û–°–ê–ì–û:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—á–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã"
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –û–°–ê–ì–û', '–ü—Ä–æ—Å–º–æ—Ç—Ä –û–°–ê–ì–û', '–£–¥–∞–ª–µ–Ω–∏–µ –û–°–ê–ì–û')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    if show_description:
        bot.send_message(message.chat.id, description, parse_mode='Markdown')

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

OSAGO_JSON_PATH = os.path.join(BASE_DIR, 'files', 'files_for_calc', 'files_for_osago', 'osago.json')
USER_HISTORY_PATH_OSAGO = os.path.join(BASE_DIR, 'data', 'user', 'calculators', 'osago', 'osago_users.json')
OSAGO_EXCEL_DIR = os.path.join(BASE_DIR, 'data', 'user', 'calculators', 'osago', 'excel')

osago_data = {}
user_history_osago = {}
user_data = {}

def ensure_path_and_file(file_path):
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    if not os.path.exists(file_path):
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump({}, f, ensure_ascii=False, indent=2)

def load_osago_data():
    global osago_data
    try:
        with open(OSAGO_JSON_PATH, 'r', encoding='utf-8') as file:
            osago_data = json.load(file)
    except Exception as e:
        pass

def load_user_history_osago():
    global user_history_osago
    try:
        if os.path.exists(USER_HISTORY_PATH_OSAGO):
            with open(USER_HISTORY_PATH_OSAGO, 'r', encoding='utf-8') as db_file:
                user_history_osago = json.load(db_file)
        else:
            user_history_osago = {}
    except Exception as e:
        user_history_osago = {}

def save_user_history_osago():
    try:
        with open(USER_HISTORY_PATH_OSAGO, 'w', encoding='utf-8') as db_file:
            json.dump(user_history_osago, db_file, ensure_ascii=False, indent=2)
    except Exception as e:
        pass

ensure_path_and_file(OSAGO_JSON_PATH)
ensure_path_and_file(USER_HISTORY_PATH_OSAGO)
os.makedirs(OSAGO_EXCEL_DIR, exist_ok=True)
load_osago_data()
load_user_history_osago()

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–û–°–ê–ì–û (—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ—Å–∞–≥–æ) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –û–°–ê–ì–û")
@check_function_state_decorator('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –û–°–ê–ì–û')
@track_usage('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –û–°–ê–ì–û')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def start_osago_calculation(message):
    if not osago_data:
        bot.send_message(message.chat.id, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    user_id = message.from_user.id
    user_data[user_id] = {'user_id': user_id, 'username': message.from_user.username or 'unknown'}

    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    owner_types = [owner['name'] for owner in osago_data['owner_types']]
    for i in range(0, len(owner_types), 2):
        if i + 1 < len(owner_types):
            markup.row(owner_types[i], owner_types[i + 1])
        else:
            markup.add(owner_types[i])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")   
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')     
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–ö—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –¢–°?", reply_markup=markup)
    bot.register_next_step_handler(msg, process_owner_type_step)

@text_only_handler
def process_owner_type_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    owner_type = message.text.strip()
    if owner_type not in [owner['name'] for owner in osago_data['owner_types']]:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
        bot.register_next_step_handler(msg, process_owner_type_step)
        return

    user_data[user_id]['owner_type'] = owner_type

    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    vehicle_types = [vt['name'] for vt in osago_data['vehicle_types']]
    for i in range(0, len(vehicle_types), 2):
        if i + 1 < len(vehicle_types):
            markup.row(vehicle_types[i], vehicle_types[i + 1])
        else:
            markup.add(vehicle_types[i])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¢–°:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_vehicle_type_step)

@text_only_handler
def process_vehicle_type_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    vehicle_type = message.text.strip()
    vehicle = next((vt for vt in osago_data['vehicle_types'] if vt['name'] == vehicle_type), None)
    if not vehicle:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
        bot.register_next_step_handler(msg, process_vehicle_type_step)
        return

    user_data[user_id]['vehicle_type'] = vehicle_type
    user_data[user_id]['vehicle_id'] = vehicle['id']

    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    regions = [region['name'] for region in osago_data['regions']]
    for i in range(0, len(regions), 2):
        if i + 1 < len(regions):
            markup.row(regions[i], regions[i + 1])
        else:
            markup.add(regions[i])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_osago_region_step)

@text_only_handler
def process_osago_region_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    region_name = message.text.strip()
    region = next((r for r in osago_data['regions'] if r['name'] == region_name), None)
    if not region:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
        bot.register_next_step_handler(msg, process_osago_region_step)
        return

    user_data[user_id]['region'] = region_name
    user_data[user_id]['region_data'] = region

    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    if 'cities' in region and region['cities']:
        cities = list(region['cities'].keys())
        for i in range(0, len(cities), 2):
            if i + 1 < len(cities):
                markup.row(cities[i], cities[i + 1])
            else:
                markup.add(cities[i])
    else:
        markup.add("–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_city_step)

@text_only_handler
def process_city_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    city_name = message.text.strip()
    region = user_data[user_id]['region_data']
    if city_name != "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω" and ('cities' not in region or city_name not in region['cities']):
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
        bot.register_next_step_handler(msg, process_city_step)
        return

    user_data[user_id]['city'] = city_name
    if city_name == "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω":
        user_data[user_id]['kt'] = float(region['kt']) if region['kt'] else 1.0
    else:
        user_data[user_id]['kt'] = region['cities'].get(city_name, 1.0)

    vehicle_id = user_data[user_id]['vehicle_id']
    if vehicle_id >= 5 and vehicle_id <= 12: 
        user_data[user_id]['km'] = 1.0  
        proceed_to_usage_period(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.):", reply_markup=markup)
        bot.register_next_step_handler(msg, process_engine_power_step)

@text_only_handler
def process_engine_power_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        power = float(message.text.replace(',', '.'))
        user_data[user_id]['engine_power'] = power
        km = calculate_km(power)
        user_data[user_id]['km'] = km
        proceed_to_usage_period(message)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        bot.register_next_step_handler(msg, process_engine_power_step)

@text_only_handler
def proceed_to_usage_period(message):
    user_id = message.from_user.id
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    periods = [period['name'] for period in osago_data['usage_periods']]
    for i in range(0, len(periods), 2):
        if i + 1 < len(periods):
            markup.row(periods[i], periods[i + 1])
        else:
            markup.add(periods[i])
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¢–°:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_usage_period_step)

@text_only_handler
def process_usage_period_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    period_name = message.text.strip()
    if period_name not in [p['name'] for p in osago_data['usage_periods']]:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
        bot.register_next_step_handler(msg, process_usage_period_step)
        return

    user_data[user_id]['usage_period'] = period_name
    ks = calculate_ks(period_name)
    user_data[user_id]['ks'] = ks

    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    markup.add("–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º", "–° –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, "–õ–∏—Ü–∞, –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_driver_restriction_step)

@text_only_handler
def process_driver_restriction_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    restriction = message.text.strip()
    if restriction not in ["–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º", "–° –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"]:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
        bot.register_next_step_handler(msg, process_driver_restriction_step)
        return

    user_data[user_id]['driver_restriction'] = restriction
    user_data[user_id]['ko'] = 2.27 if restriction == "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º" else 1.0  

    if restriction == "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∏ —Å—Ç–∞–∂ —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18, 0):", reply_markup=markup)
        bot.register_next_step_handler(msg, process_unrestricted_age_experience_step)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –¥–æ–ø—É—â–µ–Ω–æ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_restricted_driver_count_step)

@text_only_handler
def process_unrestricted_age_experience_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        age, experience = map(int, message.text.split(','))
        if age < 18:
            msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–æ–∑—Ä–∞—Å—Ç –≤–æ–¥–∏—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 18 –ª–µ—Ç")
            bot.register_next_step_handler(msg, process_unrestricted_age_experience_step)
            return
        if experience < 0:
            msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–°—Ç–∞–∂ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            bot.register_next_step_handler(msg, process_unrestricted_age_experience_step)
            return
        user_data[user_id]['insurer_age'] = age
        user_data[user_id]['insurer_experience'] = experience

        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–î–∞", "–ù–µ—Ç")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–ë—ã–ª–∏ –ª–∏ –∞–≤–∞—Ä–∏–∏ (–ø–æ –µ–≥–æ –≤–∏–Ω–µ)?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_unrestricted_accidents_step)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∏ —Å—Ç–∞–∂ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18, 0)")
        bot.register_next_step_handler(msg, process_unrestricted_age_experience_step)

@text_only_handler
def process_unrestricted_accidents_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    accidents = message.text.strip()
    if accidents not in ["–î–∞", "–ù–µ—Ç"]:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç")
        bot.register_next_step_handler(msg, process_unrestricted_accidents_step)
        return

    if accidents == "–ù–µ—Ç":
        kbm = calculate_kbm(user_data[user_id]['insurer_age'], user_data[user_id]['insurer_experience'], 0)
        user_data[user_id]['kbm'] = kbm
        calculate_osago(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –±—ã–ª–æ –∞–≤–∞—Ä–∏–π (–ø–æ –µ–≥–æ –≤–∏–Ω–µ)?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_unrestricted_accident_count_step)

@text_only_handler
def process_unrestricted_accident_count_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        accident_count = int(message.text)
        kbm = calculate_kbm(user_data[user_id]['insurer_age'], user_data[user_id]['insurer_experience'], accident_count)
        user_data[user_id]['kbm'] = kbm
        calculate_osago(message)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        bot.register_next_step_handler(msg, process_unrestricted_accident_count_step)

@text_only_handler
def process_restricted_driver_count_step(message):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        driver_count = int(message.text)
        user_data[user_id]['driver_count'] = driver_count
        user_data[user_id]['drivers'] = []
        process_driver_info(message, 1)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        bot.register_next_step_handler(msg, process_restricted_driver_count_step)

@text_only_handler
def process_driver_info(message, driver_num):
    user_id = message.from_user.id
    if driver_num > user_data[user_id]['driver_count']:
        calculate_restricted_kbm(message)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg = bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∏ —Å—Ç–∞–∂ –¥–ª—è *–≤–æ–¥–∏—Ç–µ–ª—è ‚Ññ{driver_num}* (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18, 0):", reply_markup=markup, parse_mode='Markdown')
    bot.register_next_step_handler(msg, lambda m: process_driver_age_experience_step(m, driver_num))

@text_only_handler
def process_driver_age_experience_step(message, driver_num):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        age, experience = map(int, message.text.split(','))
        if age < 18:
            msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–æ–∑—Ä–∞—Å—Ç –≤–æ–¥–∏—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 18 –ª–µ—Ç")
            bot.register_next_step_handler(msg, lambda m: process_driver_age_experience_step(m, driver_num))
            return
        if experience < 0:
            msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–°—Ç–∞–∂ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            bot.register_next_step_handler(msg, lambda m: process_driver_age_experience_step(m, driver_num))
            return
        driver_data = {'age': age, 'experience': experience}
        user_data[user_id]['drivers'].append(driver_data)

        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add("–î–∞", "–ù–µ—Ç")
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, f"–ë—ã–ª–∏ –ª–∏ –∞–≤–∞—Ä–∏–∏ —É *–≤–æ–¥–∏—Ç–µ–ª—è ‚Ññ{driver_num}* (–ø–æ –µ–≥–æ –≤–∏–Ω–µ)?", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, lambda m: process_driver_accidents_step(m, driver_num))
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∏ —Å—Ç–∞–∂ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18, 0)")
        bot.register_next_step_handler(msg, lambda m: process_driver_age_experience_step(m, driver_num))

@text_only_handler
def process_driver_accidents_step(message, driver_num):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    accidents = message.text.strip()
    if accidents not in ["–î–∞", "–ù–µ—Ç"]:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç")
        bot.register_next_step_handler(msg, lambda m: process_driver_accidents_step(m, driver_num))
        return

    if accidents == "–ù–µ—Ç":
        user_data[user_id]['drivers'][driver_num-1]['accidents'] = 0
        process_driver_info(message, driver_num + 1)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û")
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        msg = bot.send_message(message.chat.id, f"–°–∫–æ–ª—å–∫–æ –±—ã–ª–æ –∞–≤–∞—Ä–∏–π —É *–≤–æ–¥–∏—Ç–µ–ª—è ‚Ññ{driver_num}* (–ø–æ –µ–≥–æ –≤–∏–Ω–µ)?", reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(msg, lambda m: process_driver_accident_count_step(m, driver_num))

@text_only_handler
def process_driver_accident_count_step(message, driver_num):
    user_id = message.from_user.id
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    try:
        accident_count = int(message.text)
        user_data[user_id]['drivers'][driver_num-1]['accidents'] = accident_count
        process_driver_info(message, driver_num + 1)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        bot.register_next_step_handler(msg, lambda m: process_driver_accident_count_step(m, driver_num))

def calculate_km(power):
    if power <= 50: return 0.6
    elif power <= 70: return 0.8
    elif power <= 100: return 1.0
    elif power <= 120: return 1.2
    elif power <= 150: return 1.4
    else: return 1.6

def calculate_ks(period_name):
    period_map = {
        "3 –º–µ—Å—è—Ü–∞": 0.5,
        "4 –º–µ—Å—è—Ü–∞": 0.6,
        "5 –º–µ—Å—è—Ü–µ–≤": 0.65,
        "6 –º–µ—Å—è—Ü–µ–≤": 0.7,
        "7 –º–µ—Å—è—Ü–µ–≤": 0.8,
        "8 –º–µ—Å—è—Ü–µ–≤": 0.9,
        "9 –º–µ—Å—è—Ü–µ–≤": 0.95,
        "10‚Äì12 –º–µ—Å—è—Ü–µ–≤": 1.0
    }
    return period_map.get(period_name, 1.0)

def calculate_kvs(age, experience):
    if age < 18 or experience < 0:
        raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 18, —Å—Ç–∞–∂ >= 0")
    if age <= 22 and experience <= 3: return 2.27  
    elif age <= 22 and experience > 3: return 1.93
    elif age > 22 and experience <= 3: return 1.87
    else: return 1.0

def calculate_kbm(age, experience, accidents):
    if age < 18 or experience < 0:
        raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 18, —Å—Ç–∞–∂ >= 0")
    
    if accidents > 0:
        if accidents == 1: return 1.55
        elif accidents == 2: return 2.25
        elif accidents == 3: return 2.45
        else: return 3.92
    
    base_class = 3
    final_class = base_class + min(experience, 10)
    
    for kmb_class in osago_data['kmb_classes']:
        if kmb_class['name'] == f"–ö–ª–∞—Å—Å {final_class}":
            return kmb_class['kbm']
    return 0.46

def get_base_tariff(vehicle_id):
    tariffs = {
        1: (1548, 5552),  
        2: (2471, 5431),  
        3: (2089, 6603),  
        4: (2966, 7396),  
        5: (2089, 6603),  
        6: (2966, 7396), 
        7: (2089, 6603),  
        8: (2966, 7396), 
        9: (4449, 8875),  
        10: (2966, 7396),
        11: (1483, 3698), 
        12: (1125, 3374)  
    }
    return tariffs.get(vehicle_id, (2471, 5431)) 

def calculate_restricted_kbm(message):
    user_id = message.from_user.id
    kvs_list = []
    kbm_list = []
    driver_results = []
    
    for i, driver in enumerate(user_data[user_id]['drivers'], 1):
        kvs = calculate_kvs(driver['age'], driver['experience'])
        kbm = calculate_kbm(driver['age'], driver['experience'], driver['accidents'])
        kvs_list.append(kvs)
        kbm_list.append(kbm)
        
        base_tariff_min, base_tariff_max = 1646, 7535
        kt = user_data[user_id]['kt']
        km = user_data[user_id]['km']
        ks = user_data[user_id]['ks']
        ko = user_data[user_id]['ko']
        
        min_cost = base_tariff_min * kt * km * kvs * ko * ks * kbm
        max_cost = base_tariff_max * kt * km * kvs * ko * ks * kbm
        
        driver_results.append({
            'driver_num': i,
            'kvs': kvs,
            'kbm': kbm,
            'min_cost': min_cost,
            'max_cost': max_cost
        })
    
    user_data[user_id]['kvs'] = max(kvs_list)  
    user_data[user_id]['kbm'] = max(kbm_list) 
    user_data[user_id]['driver_results'] = driver_results
    calculate_osago(message)

@text_only_handler
def calculate_osago(message):
    user_id_int = message.from_user.id  
    user_id_str = str(user_id_int)  
    data = user_data[user_id_int]

    base_tariff_min, base_tariff_max = get_base_tariff(data['vehicle_id'])
    kt = data['kt']
    km = data['km']
    ks = data['ks']
    ko = data['ko']

    if data['driver_restriction'] == "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º":
        kvs = calculate_kvs(data['insurer_age'], data['insurer_experience'])
        kbm = data['kbm']
        min_cost = base_tariff_min * kt * km * kvs * ko * ks * kbm
        max_cost = base_tariff_max * kt * km * kvs * ko * ks * kbm
        
        result_message = (
            "*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ –û–°–ê–ì–û (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π):*\n\n"
            "*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
            f"üë§ *–í–ª–∞–¥–µ–ª–µ—Ü –¢–°:* {data['owner_type']}\n"
            f"üöó *–¢–∏–ø –¢–°:* {data['vehicle_type']}\n"
            f"üåç *–†–µ–≥–∏–æ–Ω:* {data['region']}\n"
            f"üèô *–ì–æ—Ä–æ–¥:* {data['city']}\n"
            f"üí™ *–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:* {data.get('engine_power', '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')} –ª.—Å.\n"
            f"üìÖ *–ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* {data['usage_period']}\n"
            f"üöó *–õ–∏—Ü–∞, –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é:* {data['driver_restriction']}\n"
            f"üéÇ *–í–æ–∑—Ä–∞—Å—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è:* {data['insurer_age']}\n"
            f"‚è≥ *–°—Ç–∞–∂ —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è:* {data['insurer_experience']}\n"
            "\n*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç:*\n\n"
            f"üí∞ *–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:* {min_cost:,.0f} ‚Ä¶ {max_cost:,.0f} —Ä—É–±.\n"
            f"\n*–¢–∞—Ä–∏—Ñ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:*\n\n"
            f"üíµ *–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ* ‚Äì –æ—Ç {base_tariff_min} –¥–æ {base_tariff_max} —Ä—É–±.\n"
            f"‚≠ê *–ö–¢ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏):* {kt}\n"
            f"‚≠ê *–ö–ú (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏):* {km}\n"
            f"‚≠ê *–ö–í–° (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ–∑—Ä–∞—Å—Ç-—Å—Ç–∞–∂):* {kvs}\n"
            f"‚≠ê *–ö–û (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è):* {ko}\n"
            f"‚≠ê *–ö–° (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏):* {ks}\n"
            f"‚≠ê *–ö–ë–ú (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–æ–Ω—É—Å-–º–∞–ª—É—Å):* {kbm}\n"
        )
    else:
        result_message = (
            "*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ –û–°–ê–ì–û (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏):*\n\n"
            "*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
            f"üë§ *–í–ª–∞–¥–µ–ª–µ—Ü –¢–°:* {data['owner_type']}\n"
            f"üöó *–¢–∏–ø –¢–°:* {data['vehicle_type']}\n"
            f"üåç *–†–µ–≥–∏–æ–Ω:* {data['region']}\n"
            f"üèô *–ì–æ—Ä–æ–¥:* {data['city']}\n"
            f"üí™ *–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:* {data.get('engine_power', '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')} –ª.—Å.\n"
            f"üìÖ *–ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* {data['usage_period']}\n"
            f"üöó *–õ–∏—Ü–∞, –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é:* {data['driver_restriction']}\n"
            "\n*–î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π:*\n"
        )
        
        for i, driver in enumerate(data['drivers'], 1):
            result_message += (
                f"\nüë§ *–í–æ–¥–∏—Ç–µ–ª—å ‚Ññ{i}:*\n"
                f"üéÇ *–í–æ–∑—Ä–∞—Å—Ç:* {driver['age']}\n"
                f"‚è≥ *–°—Ç–∞–∂:* {driver['experience']}\n"
                f"üí• *–ê–≤–∞—Ä–∏–∏:* {driver['accidents']}\n"
            )
        
        result_message += "\n*–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º:*\n"
        for result in data['driver_results']:
            result_message += (
                f"\nüë§ *–í–æ–¥–∏—Ç–µ–ª—å ‚Ññ{result['driver_num']}:*\n"
                f"üí∞ *–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:* {result['min_cost']:,.0f} ‚Ä¶ {result['max_cost']:,.0f} —Ä—É–±.\n"
                f"‚≠ê *–ö–í–°:* {result['kvs']}\n"
                f"‚≠ê *–ö–ë–ú:* {result['kbm']}\n"
            )
        
        kvs = data['kvs']
        kbm = data['kbm']
        min_cost = base_tariff_min * kt * km * kvs * ko * ks * kbm
        max_cost = base_tariff_max * kt * km * kvs * ko * ks * kbm
        
        result_message += (
            "\n*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç (—Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π):*\n\n"
            f"üí∞ *–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:* {min_cost:,.0f} ‚Ä¶ {max_cost:,.0f} —Ä—É–±.\n"
            f"\n*–¢–∞—Ä–∏—Ñ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:*\n\n"
            f"üíµ *–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ* ‚Äì –æ—Ç {base_tariff_min} –¥–æ {base_tariff_max} —Ä—É–±.\n"
            f"‚≠ê *–ö–¢ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏):* {kt}\n"
            f"‚≠ê *–ö–ú (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏):* {km}\n"
            f"‚≠ê *–ö–í–° (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ–∑—Ä–∞—Å—Ç-—Å—Ç–∞–∂):* {kvs}\n"
            f"‚≠ê *–ö–û (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è):* {ko}\n"
            f"‚≠ê *–ö–° (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏):* {ks}\n"
            f"‚≠ê *–ö–ë–ú (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–æ–Ω—É—Å-–º–∞–ª—É—Å):* {kbm}\n"
        )

    username = data.get('username', 'unknown')
    timestamp = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
    
    calculation_data = {
        'owner_type': data['owner_type'],
        'vehicle_type': data['vehicle_type'],
        'region': data['region'],
        'city': data['city'],
        'engine_power': data.get('engine_power', '–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'),
        'usage_period': data['usage_period'],
        'driver_restriction': data['driver_restriction'],
        'kt': kt,
        'km': km,
        'ks': ks,
        'ko': ko,
        'min_cost': round(min_cost, 0),
        'max_cost': round(max_cost, 0),
        'timestamp': timestamp
    }

    if 'insurer_age' in data:
        calculation_data['insurer_age'] = data['insurer_age']
        calculation_data['insurer_experience'] = data['insurer_experience']
        calculation_data['kvs'] = calculate_kvs(data['insurer_age'], data['insurer_experience'])
        calculation_data['kbm'] = data['kbm']

    if 'drivers' in data:
        calculation_data['drivers'] = data['drivers']
        calculation_data['driver_results'] = data['driver_results']
        calculation_data['kvs'] = data['kvs']
        calculation_data['kbm'] = data['kbm']

    if user_id_str not in user_history_osago:
        user_history_osago[user_id_str] = {
            'username': username,
            'osago_calculations': []
        }
    elif 'osago_calculations' not in user_history_osago[user_id_str]:
        user_history_osago[user_id_str]['osago_calculations'] = []

    user_history_osago[user_id_str]['osago_calculations'].append(calculation_data)

    if not USER_HISTORY_PATH_OSAGO.endswith('osago_users.json'):
        raise ValueError("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –û–°–ê–ì–û –≤ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª!")

    save_user_history_osago()
    save_osago_to_excel(user_id_str, calculation_data)

    bot.send_message(message.chat.id, result_message, parse_mode='Markdown', reply_markup=ReplyKeyboardRemove())
    del user_data[user_id_int]  
    view_osago_calc(message, show_description=False)

def save_osago_to_excel(user_id, calculation):
    file_path = os.path.join(OSAGO_EXCEL_DIR, f"{user_id}_osago.xlsx")
    
    calculations = user_history_osago.get(user_id, {}).get('osago_calculations', [])
    
    columns = [
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
        "–í–ª–∞–¥–µ–ª–µ—Ü –¢–°",
        "–¢–∏–ø –¢–°",
        "–†–µ–≥–∏–æ–Ω",
        "–ì–æ—Ä–æ–¥",
        "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)",
        "–ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        "–õ–∏—Ü–∞, –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
        "–í–æ–∑—Ä–∞—Å—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è",
        "–°—Ç–∞–∂ —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è",
        "–ö–¢",
        "–ö–ú",
        "–ö–í–°",
        "–ö–û",
        "–ö–°",
        "–ö–ë–ú",
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)",
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)"
    ]
    
    new_calc_data = {
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": calculation['timestamp'],
        "–í–ª–∞–¥–µ–ª–µ—Ü –¢–°": calculation['owner_type'],
        "–¢–∏–ø –¢–°": calculation['vehicle_type'],
        "–†–µ–≥–∏–æ–Ω": calculation['region'],
        "–ì–æ—Ä–æ–¥": calculation['city'],
        "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)": calculation['engine_power'],
        "–ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": calculation['usage_period'],
        "–õ–∏—Ü–∞, –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é": calculation['driver_restriction'],
        "–í–æ–∑—Ä–∞—Å—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è": calculation.get('insurer_age', ''),
        "–°—Ç–∞–∂ —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è": calculation.get('insurer_experience', ''),
        "–ö–¢": calculation['kt'],
        "–ö–ú": calculation['km'],
        "–ö–í–°": calculation.get('kvs', ''),
        "–ö–û": calculation['ko'],
        "–ö–°": calculation['ks'],
        "–ö–ë–ú": calculation.get('kbm', ''),
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)": calculation['min_cost'],
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)": calculation['max_cost']
    }

    new_calc_df = pd.DataFrame([new_calc_data], columns=columns)
    
    if os.path.exists(file_path):
        existing_data = pd.read_excel(file_path).dropna(axis=1, how='all')
        existing_data = existing_data.reindex(columns=columns, fill_value=None)
        updated_data = pd.concat([existing_data, new_calc_df], ignore_index=True)
    else:
        updated_data = new_calc_df
    
    updated_data.to_excel(file_path, index=False)
    
    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows():
        for cell in row:
            cell.alignment = Alignment(horizontal="center", vertical="center")
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_col=worksheet.max_column-1, max_col=worksheet.max_column):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

def update_osago_excel_file(user_id):
    file_path = os.path.join(OSAGO_EXCEL_DIR, f"{user_id}_osago.xlsx")
    calculations = user_history_osago.get(user_id, {}).get('osago_calculations', [])

    if not calculations:
        columns = [
            "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
            "–í–ª–∞–¥–µ–ª–µ—Ü –¢–°",
            "–¢–∏–ø –¢–°",
            "–†–µ–≥–∏–æ–Ω",
            "–ì–æ—Ä–æ–¥",
            "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)",
            "–ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
            "–õ–∏—Ü–∞, –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
            "–í–æ–∑—Ä–∞—Å—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è",
            "–°—Ç–∞–∂ —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è",
            "–ö–¢",
            "–ö–ú",
            "–ö–í–°",
            "–ö–û",
            "–ö–°",
            "–ö–ë–ú",
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)",
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)"
        ]
        df = pd.DataFrame(columns=columns)
        df.to_excel(file_path, index=False)
        return

    columns = [
        "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞",
        "–í–ª–∞–¥–µ–ª–µ—Ü –¢–°",
        "–¢–∏–ø –¢–°",
        "–†–µ–≥–∏–æ–Ω",
        "–ì–æ—Ä–æ–¥",
        "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)",
        "–ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        "–õ–∏—Ü–∞, –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
        "–í–æ–∑—Ä–∞—Å—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è",
        "–°—Ç–∞–∂ —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è",
        "–ö–¢",
        "–ö–ú",
        "–ö–í–°",
        "–ö–û",
        "–ö–°",
        "–ö–ë–ú",
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)",
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)"
    ]

    calc_records = []
    for calc in calculations:
        calc_data = {
            "–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞": calc['timestamp'],
            "–í–ª–∞–¥–µ–ª–µ—Ü –¢–°": calc['owner_type'],
            "–¢–∏–ø –¢–°": calc['vehicle_type'],
            "–†–µ–≥–∏–æ–Ω": calc['region'],
            "–ì–æ—Ä–æ–¥": calc['city'],
            "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)": calc['engine_power'],
            "–ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": calc['usage_period'],
            "–õ–∏—Ü–∞, –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é": calc['driver_restriction'],
            "–í–æ–∑—Ä–∞—Å—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è": calc.get('insurer_age', ''),
            "–°—Ç–∞–∂ —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è": calc.get('insurer_experience', ''),
            "–ö–¢": calc['kt'],
            "–ö–ú": calc['km'],
            "–ö–í–°": calc.get('kvs', ''),
            "–ö–û": calc['ko'],
            "–ö–°": calc['ks'],
            "–ö–ë–ú": calc.get('kbm', ''),
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)": calc['min_cost'],
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)": calc['max_cost']
        }
        calc_records.append(calc_data)

    df = pd.DataFrame(calc_records, columns=columns)
    df.to_excel(file_path, index=False)

    workbook = load_workbook(file_path)
    worksheet = workbook.active
    for column in worksheet.columns:
        max_length = max(len(str(cell.value)) for cell in column if cell.value) + 2
        worksheet.column_dimensions[column[0].column_letter].width = max_length
    for row in worksheet.iter_rows(min_row=2):
        for cell in row:
            cell.alignment = Alignment(horizontal='center', vertical='center')
    thick_border = Border(left=Side(style='thick'), right=Side(style='thick'),
                          top=Side(style='thick'), bottom=Side(style='thick'))
    for row in worksheet.iter_rows(min_row=2, min_col=len(columns)-1, max_col=len(columns)):
        for cell in row:
            cell.border = thick_border
    workbook.save(file_path)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–û–°–ê–ì–û (–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Å–∞–≥–æ) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –û–°–ê–ì–û")
@check_function_state_decorator('–ü—Ä–æ—Å–º–æ—Ç—Ä –û–°–ê–ì–û')
@track_usage('–ü—Ä–æ—Å–º–æ—Ç—Ä –û–°–ê–ì–û')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_view_osago(message):
    user_id = str(message.from_user.id)
    if user_id not in user_history_osago or 'osago_calculations' not in user_history_osago[user_id] or not user_history_osago[user_id]['osago_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –û–°–ê–ì–û!")
        view_osago_calc(message, show_description=False)
        return
    view_osago_calculations(message)

@text_only_handler
def view_osago_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_osago or 'osago_calculations' not in user_history_osago[user_id] or not user_history_osago[user_id]['osago_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –û–°–ê–ì–û!")
        view_osago_calc(message, show_description=False)
        return

    calculations = user_history_osago[user_id]['osago_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –û–°–ê–ì–û:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí *‚Ññ{i}.* {timestamp}\n"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–û–°–ê–ì–û –≤ EXCEL')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –û–°–ê–ì–û –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_view_osago_selection)

@text_only_handler
def process_view_osago_selection(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return
    if message.text == "–û–°–ê–ì–û –≤ EXCEL":
        send_osago_excel_file(message)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–û–°–ê–ì–û –≤ EXCEL')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(
            chat_id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –û–°–ê–ì–û –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_osago_selection)
        return

    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    calculations = user_history_osago.get(user_id, {}).get('osago_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –û–°–ê–ì–û!")
        view_osago_calc(message, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–û–°–ê–ì–û –≤ EXCEL')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(
                chat_id,
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_view_osago_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        for index in valid_indices:
            calc = calculations[index]
            vehicle = next((vt for vt in osago_data['vehicle_types'] if vt['name'] == calc['vehicle_type']), None)
            vehicle_id = vehicle['id'] if vehicle else 2
            base_tariff_min, base_tariff_max = get_base_tariff(vehicle_id)

            required_keys = [
                'owner_type', 'vehicle_type', 'region', 'city', 'engine_power',
                'usage_period', 'driver_restriction', 'kt', 'km', 'ks', 'ko', 'min_cost', 'max_cost'
            ]
            for key in required_keys:
                if key not in calc:
                    bot.send_message(chat_id, f"‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞ ‚Ññ{index + 1} —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã! –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç!")
                    view_osago_calc(message, show_description=False)
                    return

            if calc['driver_restriction'] == "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º":
                result_message = (
                    f"*üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ –û–°–ê–ì–û ‚Ññ{index + 1} (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π):*\n\n"
                    f"*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
                    f"üë§ *–í–ª–∞–¥–µ–ª–µ—Ü –¢–°:* {calc['owner_type']}\n"
                    f"üöó *–¢–∏–ø –¢–°:* {calc['vehicle_type']}\n"
                    f"üåç *–†–µ–≥–∏–æ–Ω:* {calc['region']}\n"
                    f"üèô *–ì–æ—Ä–æ–¥:* {calc['city']}\n"
                    f"üí™ *–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:* {calc['engine_power']}\n"
                    f"üìÖ *–ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* {calc['usage_period']}\n"
                    f"üöó *–õ–∏—Ü–∞, –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é:* {calc['driver_restriction']}\n"
                    f"üéÇ *–í–æ–∑—Ä–∞—Å—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è:* {calc.get('insurer_age', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"‚è≥ *–°—Ç–∞–∂ —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è:* {calc.get('insurer_experience', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"\n*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç:*\n\n"
                    f"üí∞ *–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:* {calc['min_cost']:,.0f} ‚Ä¶ {calc['max_cost']:,.0f} —Ä—É–±.\n"
                    f"\n*–¢–∞—Ä–∏—Ñ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:*\n\n"
                    f"üíµ *–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ* ‚Äì –æ—Ç {base_tariff_min} –¥–æ {base_tariff_max} —Ä—É–±.\n"
                    f"‚≠ê *–ö–¢ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏):* {calc['kt']}\n"
                    f"‚≠ê *–ö–ú (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏):* {calc['km']}\n"
                    f"‚≠ê *–ö–í–° (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ–∑—Ä–∞—Å—Ç-—Å—Ç–∞–∂):* {calc.get('kvs', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"‚≠ê *–ö–û (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è):* {calc['ko']}\n"
                    f"‚≠ê *–ö–° (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏):* {calc['ks']}\n"
                    f"‚≠ê *–ö–ë–ú (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–æ–Ω—É—Å-–º–∞–ª—É—Å):* {calc.get('kbm', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"\nüïí *–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞:* {calc['timestamp']}"
                )
            else:
                result_message = (
                    f"*üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ –û–°–ê–ì–û ‚Ññ{index + 1} (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏):*\n\n"
                    f"*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
                    f"üë§ *–í–ª–∞–¥–µ–ª–µ—Ü –¢–°:* {calc['owner_type']}\n"
                    f"üöó *–¢–∏–ø –¢–°:* {calc['vehicle_type']}\n"
                    f"üåç *–†–µ–≥–∏–æ–Ω:* {calc['region']}\n"
                    f"üèô *–ì–æ—Ä–æ–¥:* {calc['city']}\n"
                    f"üí™ *–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:* {calc['engine_power']}\n"
                    f"üìÖ *–ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* {calc['usage_period']}\n"
                    f"üöó *–õ–∏—Ü–∞, –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é:* {calc['driver_restriction']}\n"
                    "\n*–î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π:*\n"
                )

                for i, driver in enumerate(calc.get('drivers', []), 1):
                    result_message += (
                        f"\nüë§ *–í–æ–¥–∏—Ç–µ–ª—å ‚Ññ{i}:*\n"
                        f"üéÇ *–í–æ–∑—Ä–∞—Å—Ç:* {driver['age']}\n"
                        f"‚è≥ *–°—Ç–∞–∂:* {driver['experience']}\n"
                        f"üí• *–ê–≤–∞—Ä–∏–∏:* {driver.get('accidents', 0)}\n"
                    )

                result_message += "\n*–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º:*\n"
                for result in calc.get('driver_results', []):
                    result_message += (
                        f"\nüë§ *–í–æ–¥–∏—Ç–µ–ª—å ‚Ññ{result['driver_num']}:*\n"
                        f"üí∞ *–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:* {result['min_cost']:,.0f} ‚Ä¶ {result['max_cost']:,.0f} —Ä—É–±.\n"
                        f"‚≠ê *–ö–í–°:* {result['kvs']}\n"
                        f"‚≠ê *–ö–ë–ú:* {result['kbm']}\n"
                    )

                result_message += (
                    f"\n*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç (—Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π):*\n\n"
                    f"üí∞ *–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:* {calc['min_cost']:,.0f} ‚Ä¶ {calc['max_cost']:,.0f} —Ä—É–±.\n"
                    f"\n*–¢–∞—Ä–∏—Ñ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:*\n\n"
                    f"üíµ *–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ* ‚Äì –æ—Ç {base_tariff_min} –¥–æ {base_tariff_max} —Ä—É–±.\n"
                    f"‚≠ê *–ö–¢ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏):* {calc['kt']}\n"
                    f"‚≠ê *–ö–ú (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏):* {calc['km']}\n"
                    f"‚≠ê *–ö–í–° (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ–∑—Ä–∞—Å—Ç-—Å—Ç–∞–∂):* {calc.get('kvs', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"‚≠ê *–ö–û (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è):* {calc['ko']}\n"
                    f"‚≠ê *–ö–° (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏):* {calc['ks']}\n"
                    f"‚≠ê *–ö–ë–ú (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–æ–Ω—É—Å-–º–∞–ª—É—Å):* {calc.get('kbm', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"\nüïí *–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞:* {calc['timestamp']}"
                )

            bot.send_message(chat_id, result_message, parse_mode='Markdown')

        view_osago_calc(message, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–û–°–ê–ì–û –≤ EXCEL')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup)
        bot.register_next_step_handler(msg, process_view_osago_selection)

@bot.message_handler(func=lambda message: message.text == "–û–°–ê–ì–û –≤ EXCEL")
@check_function_state_decorator('–û–°–ê–ì–û –≤ EXCEL')
@track_usage('–û–°–ê–ì–û –≤ EXCEL')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def send_osago_excel_file(message):
    user_id = str(message.from_user.id)
    excel_file_path = os.path.join(OSAGO_EXCEL_DIR, f"{user_id}_osago.xlsx")

    if os.path.exists(excel_file_path):
        with open(excel_file_path, 'rb') as excel_file:
            bot.send_document(message.chat.id, excel_file)
    else:
        bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª Excel –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –û–°–ê–ì–û")
    view_osago_calc(message, show_description=False)

# ------------------------------------------- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´_–û–°–ê–ì–û (—É–¥–∞–ª–µ–Ω–∏–µ –æ—Å–∞–≥–æ) --------------------------------------------------

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–µ–Ω–∏–µ –û–°–ê–ì–û")
@check_function_state_decorator('–£–¥–∞–ª–µ–Ω–∏–µ –û–°–ê–ì–û')
@track_usage('–£–¥–∞–ª–µ–Ω–∏–µ –û–°–ê–ì–û')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def handle_delete_osago(message):
    user_id = str(message.from_user.id)
    if user_id not in user_history_osago or 'osago_calculations' not in user_history_osago[user_id] or not user_history_osago[user_id]['osago_calculations']:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –û–°–ê–ì–û!")
        view_osago_calc(message, show_description=False)
        return
    delete_osago_calculations(message)

@text_only_handler
def delete_osago_calculations(message):
    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    if user_id not in user_history_osago or 'osago_calculations' not in user_history_osago[user_id] or not user_history_osago[user_id]['osago_calculations']:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –û–°–ê–ì–û!")
        view_osago_calc(message, show_description=False)
        return

    calculations = user_history_osago[user_id]['osago_calculations']
    message_text = "*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –û–°–ê–ì–û:*\n\n"

    for i, calc in enumerate(calculations, 1):
        timestamp = calc['timestamp']
        message_text += f"üïí *‚Ññ{i}.* {timestamp}\n"

    msg = bot.send_message(chat_id, message_text, parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_delete_osago_selection)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤:", reply_markup=markup)

@text_only_handler
def process_delete_osago_selection(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û":
        view_osago_calc(message, show_description=False)
        return
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã":
        return_to_calculators(message)
        return

    chat_id = message.chat.id
    user_id = str(message.from_user.id)

    calculations = user_history_osago.get(user_id, {}).get('osago_calculations', [])
    if not calculations:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –û–°–ê–ì–û!")
        view_osago_calc(message, show_description=False)
        return

    try:
        indices = [int(num.strip()) - 1 for num in message.text.split(',')]
        valid_indices = []
        invalid_indices = []

        for index in indices:
            if 0 <= index < len(calculations):
                valid_indices.append(index)
            else:
                invalid_indices.append(index + 1)

        if not valid_indices and invalid_indices:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û')
            markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
            markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(msg, process_delete_osago_selection)
            return

        if invalid_indices:
            invalid_str = ",".join(map(str, invalid_indices))
            bot.send_message(chat_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ `{invalid_str}`! –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã...", parse_mode='Markdown')

        valid_indices.sort(reverse=True)
        for index in valid_indices:
            del calculations[index]

        save_user_history_osago()
        update_osago_excel_file(user_id)
        bot.send_message(chat_id, "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –û–°–ê–ì–û —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
        view_osago_calc(message, show_description=False)

    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –û–°–ê–ì–û')
        markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã')
        markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup)
        bot.register_next_step_handler(msg, process_delete_osago_selection)