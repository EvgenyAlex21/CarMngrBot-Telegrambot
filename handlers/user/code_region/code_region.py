from core.imports import wraps, telebot, types, os, json, re
from core.bot_instance import bot, BASE_DIR
from handlers.user.user_main_menu import return_to_menu
from handlers.user.placesearch.placesearch import shorten_url
from ..utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha, check_function_state_decorator, track_usage, check_subscription
)

# --------------------------------------------------- –ö–û–î –†–ï–ì–ò–û–ù–ê ---------------------------------------------------------

FILES_DIR = os.path.join(BASE_DIR, "files")
FILES_FOR_REGIONS_DIR = os.path.join(FILES_DIR, "files_for_regions")
REGIONS_FILE_PATH = os.path.join(FILES_FOR_REGIONS_DIR, "regions.txt")

ALLOWED_LETTERS = "–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•ABEKMHOPCTYX"

def is_valid_car_number(car_number):
    pattern = rf"^[{ALLOWED_LETTERS}]\d{{3}}[{ALLOWED_LETTERS}]{{2}}\d{{2,3}}$"
    return bool(re.match(pattern, car_number))

regions = {}
try:
    with open(REGIONS_FILE_PATH, 'r', encoding='utf-8') as file:
        for line in file:
            parts = line.strip().split(' ‚Äî ')
            if len(parts) == 2:
                code, name = parts
                regions[code.strip()] = name.strip()
except FileNotFoundError:
    pass
except Exception as e:
    pass

@bot.message_handler(func=lambda message: message.text == "–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞")
@check_function_state_decorator('–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞')
@track_usage('–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def regioncode(message, show_description=True):
    description = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–æ–∏—Å–∫—É –∫–æ–¥–∞ —Ä–µ–≥–∏–æ–Ω–∞ –∏ –≥–æ—Å–Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ*\n\n"
        "üìå *–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞:*\n"
        "–í–≤–æ–¥–∏—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ü–∏—Ñ—Ä *(2-3 —Ü–∏—Ñ—Ä—ã)* - *21* –∏–ª–∏ *121*\n\n"
        "üìå *–ì–æ—Å–Ω–æ–º–µ—Ä:*\n"
        "–í–≤–æ–¥–∏—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –†–§ *(8-9 —Å–∏–º–≤–æ–ª–æ–≤)* - *A121–ê–ê21* –∏–ª–∏ *–ê121–ê–ê121*"
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)

    if show_description:
        bot.send_message(message.chat.id, description, parse_mode="Markdown")

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥—ã —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–ª–∏ –≥–æ—Å–Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:", reply_markup=markup)
    bot.register_next_step_handler(message, process_input)

@text_only_handler
def process_input(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    text = message.text.strip()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)

    inputs = [i.strip() for i in text.split(',')]
    responses = []

    for input_item in inputs:
        if input_item.isdigit() and (2 <= len(input_item) <= 3):
            region_code = input_item
            if region_code in regions:
                region_name = regions[region_code]
                response = f"üîç *–†–µ–≥–∏–æ–Ω –¥–ª—è –∫–æ–¥–∞ {region_code}:*\n{region_name}\n\n"
            else:
                response = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω –¥–ª—è –∫–æ–¥–∞: *{region_code}*\n\n"

        elif 8 <= len(input_item) <= 9 and is_valid_car_number(input_item.upper()):
            car_number = input_item.upper()
            region_code = car_number[-3:] if len(car_number) == 9 else car_number[-2:]

            if region_code in regions:
                region_name = regions[region_code]
                avtocod_url = f"https://avtocod.ru/proverkaavto/{car_number}?rd=GRZ"
                short_url = shorten_url(avtocod_url)

                response = (
                    f"üîç –†–µ–≥–∏–æ–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞ `{car_number}`: {region_name}\n"
                    f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ AvtoCod —Å –ø–æ–∏—Å–∫–æ–º]({short_url})\n\n"
                )
            else:
                response = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞: `{car_number}`\n\n"

        else:
            response = f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è `{input_item}`!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–æ—Å–Ω–æ–º–µ—Ä –∏–ª–∏ –∫–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞\n\n"

        responses.append(response)

    final_response = "".join(responses)
    bot.send_message(message.chat.id, final_response, reply_markup=markup, parse_mode="Markdown")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–¥—ã —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–ª–∏ –≥–æ—Å–Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    bot.register_next_step_handler(message, process_input)