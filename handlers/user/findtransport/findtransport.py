from core.imports import wraps, telebot, types, os, json, re
from core.bot_instance import bot, BASE_DIR
from handlers.user.user_main_menu import return_to_menu
from handlers.user.placesearch.placesearch import shorten_url
from ..utils import (
    restricted, track_user_activity, check_chat_state, check_user_blocked,
    log_user_actions, check_subscription_chanal, text_only_handler,
    rate_limit_with_captcha, check_function_state_decorator, track_usage, check_subscription
)

# ----------------------------------------------- –ù–ê–ô–¢–ò –¢–†–ê–ù–°–ü–û–†–¢ ---------------------------------------------------

LATITUDE_KEY = 'latitude'
LONGITUDE_KEY = 'longitude'

FIND_TRANSPORT_DIR = os.path.join(BASE_DIR, "data", "user", "findtransport")

def ensure_directories():
    os.makedirs(FIND_TRANSPORT_DIR, exist_ok=True)

ensure_directories()

def save_location_data(location_data):
    ensure_directories() 

    file_path = os.path.join(FIND_TRANSPORT_DIR, "location_data.json")
    with open(file_path, "w", encoding="utf-8") as json_file:
        json.dump(location_data, json_file, indent=4, ensure_ascii=False)

def load_location_data():
    ensure_directories()  

    file_path = os.path.join(FIND_TRANSPORT_DIR, "location_data.json")
    if not os.path.exists(file_path):
        return {}

    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, ValueError):
        return {}

location_data = load_location_data()

@bot.message_handler(func=lambda message: message.text == "–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
@check_function_state_decorator('–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@track_usage('–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@log_user_actions
@check_subscription
@check_subscription_chanal
@text_only_handler
@rate_limit_with_captcha
def start_transport_search(message, show_description=True):
    global location_data
    user_id = str(message.from_user.id)

    if user_id in location_data and location_data[user_id].get('start_location') is not None and location_data[user_id].get('end_location') is None:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
        item2 = types.KeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
        item3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1, item2)
        markup.add(item3)
        bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å?", reply_markup=markup)
        bot.register_next_step_handler(message, continue_or_restart)
    else:
        start_new_transport_search(message, show_description=show_description)

@text_only_handler
def start_new_transport_search(message, show_description=True):
    global location_data
    user_id = str(message.from_user.id)
    location_data[user_id] = {'start_location': None, 'end_location': None}
    save_location_data(location_data)
    request_transport_location(message, show_description=show_description)

@text_only_handler
def request_transport_location(message, show_description=True):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)
    item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)

    help_message = (
        "‚ÑπÔ∏è *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–æ–∏—Å–∫—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞*\n\n"
        "üìå *–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–π:*\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –¥–≤–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏, *—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞* –∏ *–≤–∞—à–∞*\n\n"
        "üìå *–ü–æ–∏—Å–∫:*\n"
        "–í—ã–≤–æ–¥ *—Å—Å—ã–ª–∫–∏ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º* –æ—Ç —Ç–æ—á–∫–∏ –ê –¥–æ B"
    )

    if show_description:
        bot.send_message(message.chat.id, help_message, parse_mode="Markdown")

    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_car_location)

@text_only_handler
def continue_or_restart(message):
    if message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        request_user_location(message)
    elif message.text == "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        start_new_transport_search(message)
    else:
        return_to_menu(message)

@text_only_handler
def request_user_location(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)
    item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    markup.add(item2)

    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_car_location)

def _is_findtransport_active(m):
    try:
        uid = str(m.from_user.id)
        st = location_data.get(uid)
        return bool(st) and (st.get('start_location') is None or st.get('end_location') is None)
    except Exception:
        return False

@bot.message_handler(content_types=['location'], func=_is_findtransport_active)
@check_function_state_decorator('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏')
@track_usage('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏')
@restricted
@track_user_activity
@check_chat_state
@check_user_blocked
@check_subscription_chanal
@rate_limit_with_captcha
def handle_car_location(message):
    global location_data
    user_id = str(message.from_user.id)

    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    if user_id not in location_data:
        location_data[user_id] = {'start_location': None, 'end_location': None}

    if location_data[user_id]['start_location'] is None:
        if message.location is not None:
            location_data[user_id]['start_location'] = {
                LATITUDE_KEY: message.location.latitude,
                LONGITUDE_KEY: message.location.longitude
            }

            location_data[user_id]['process'] = 'in_progress'
            save_location_data(location_data)

            request_user_location(message)
        else:
            handle_location_error(message)

    elif location_data[user_id]['end_location'] is None:
        if message.location is not None:
            location_data[user_id]['end_location'] = {
                LATITUDE_KEY: message.location.latitude,
                LONGITUDE_KEY: message.location.longitude
            }

            location_data[user_id]['process'] = 'completed'
            save_location_data(location_data)

            send_map_link(message.chat.id, location_data[user_id]['start_location'], location_data[user_id]['end_location'])
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
            item2 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            markup.add(item1)
            markup.add(item2)
            bot.send_message(message.chat.id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–∞–π–¥–µ–Ω!\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫:", reply_markup=markup)
        else:
            handle_location_error(message)

@text_only_handler
def handle_location_error(message):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_to_menu(message)
        return

    bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    bot.register_next_step_handler(message, handle_car_location)

def send_map_link(chat_id, start_location, end_location):
    map_url = f"https://yandex.ru/maps/?rtext={end_location['latitude']},{end_location['longitude']}~{start_location['latitude']},{start_location['longitude']}&rtt=pd"
    short_url = shorten_url(map_url)
    bot.send_message(chat_id, f"üìç *–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:* [—Å—Å—ã–ª–∫–∞]({short_url})", parse_mode="Markdown")